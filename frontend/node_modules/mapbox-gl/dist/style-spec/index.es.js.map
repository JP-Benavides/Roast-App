{"version":3,"file":"index.es.js","sources":["../../../node_modules/json-stringify-pretty-compact/index.js","../format.ts","../visit.ts","../migrate/v8.ts","../util/extend.ts","../expression/parsing_error.ts","../expression/scope.ts","../expression/types.ts","../../../node_modules/csscolorparser/csscolorparser.js","../util/interpolate.ts","../util/color.ts","../expression/types/collator.ts","../expression/types/formatted.ts","../expression/types/resolved_image.ts","../expression/values.ts","../expression/definitions/literal.ts","../expression/runtime_error.ts","../expression/definitions/assertion.ts","../expression/definitions/format.ts","../expression/definitions/image.ts","../util/get_type.ts","../expression/definitions/coercion.ts","../expression/evaluation_context.ts","../expression/compound_expression.ts","../expression/definitions/collator.ts","../util/geometry_util.ts","../expression/definitions/within.ts","../../../node_modules/cheap-ruler/index.js","../../../node_modules/tinyqueue/index.js","../data/extent.ts","../expression/definitions/distance.ts","../expression/definitions/config.ts","../expression/is_constant.ts","../expression/definitions/var.ts","../expression/parsing_context.ts","../expression/stops.ts","../expression/definitions/step.ts","../../../node_modules/@mapbox/unitbezier/index.js","../util/color_spaces.ts","../expression/definitions/interpolate.ts","../expression/definitions/coalesce.ts","../expression/definitions/let.ts","../expression/definitions/at.ts","../expression/definitions/in.ts","../expression/definitions/index_of.ts","../expression/definitions/match.ts","../expression/definitions/case.ts","../expression/definitions/slice.ts","../expression/definitions/comparison.ts","../expression/definitions/number_format.ts","../expression/definitions/length.ts","../util/random.ts","../expression/definitions/index.ts","../util/result.ts","../util/properties.ts","../function/index.ts","../expression/index.ts","../function/convert.ts","../util/unbundle_jsonlint.ts","../feature_filter/index.ts","../feature_filter/convert.ts","../migrate/expressions.ts","../migrate.ts","../composite.ts","../util/ref_properties.ts","../deref.ts","../util/deep_equal.ts","../diff.ts","../error/validation_error.ts","../error/parsing_error.ts","../validate/validate_object.ts","../validate/validate_import.ts","../validate/validate_array.ts","../validate/validate_number.ts","../validate/validate_function.ts","../validate/validate_expression.ts","../validate/validate_boolean.ts","../validate/validate_color.ts","../validate/validate_enum.ts","../validate/validate_filter.ts","../validate/validate_property.ts","../validate/validate_paint_property.ts","../validate/validate_layout_property.ts","../validate/validate_layer.ts","../validate/validate_string.ts","../validate/validate_source.ts","../validate/validate_model.ts","../validate/validate_light.ts","../validate/validate_lights.ts","../validate/validate_terrain.ts","../validate/validate_fog.ts","../validate/validate_formatted.ts","../validate/validate_image.ts","../validate/validate_projection.ts","../validate/validate.ts","../validate/validate_glyphs_url.ts","../validate/validate_style.ts","../validate_style.min.ts","../../../node_modules/@mapbox/jsonlint-lines-primitives/lib/jsonlint.js","../read_style.ts","../validate_style.ts","../validate_mapbox_api_supported.ts","../style-spec.ts"],"sourcesContent":["// Note: This regex matches even invalid JSON strings, but since we’re\n// working on the output of `JSON.stringify` we know that only valid strings\n// are present (unless the user supplied a weird `options.indent` but in\n// that case we don’t care since the output would be invalid anyway).\nconst stringOrChar = /(\"(?:[^\\\\\"]|\\\\.)*\")|[:,]/g;\n\nexport default function stringify(passedObj, options = {}) {\n  const indent = JSON.stringify(\n    [1],\n    undefined,\n    options.indent === undefined ? 2 : options.indent\n  ).slice(2, -3);\n\n  const maxLength =\n    indent === \"\"\n      ? Infinity\n      : options.maxLength === undefined\n      ? 80\n      : options.maxLength;\n\n  let { replacer } = options;\n\n  return (function _stringify(obj, currentIndent, reserved) {\n    if (obj && typeof obj.toJSON === \"function\") {\n      obj = obj.toJSON();\n    }\n\n    const string = JSON.stringify(obj, replacer);\n\n    if (string === undefined) {\n      return string;\n    }\n\n    const length = maxLength - currentIndent.length - reserved;\n\n    if (string.length <= length) {\n      const prettified = string.replace(\n        stringOrChar,\n        (match, stringLiteral) => {\n          return stringLiteral || `${match} `;\n        }\n      );\n      if (prettified.length <= length) {\n        return prettified;\n      }\n    }\n\n    if (replacer != null) {\n      obj = JSON.parse(string);\n      replacer = undefined;\n    }\n\n    if (typeof obj === \"object\" && obj !== null) {\n      const nextIndent = currentIndent + indent;\n      const items = [];\n      let index = 0;\n      let start;\n      let end;\n\n      if (Array.isArray(obj)) {\n        start = \"[\";\n        end = \"]\";\n        const { length } = obj;\n        for (; index < length; index++) {\n          items.push(\n            _stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) ||\n              \"null\"\n          );\n        }\n      } else {\n        start = \"{\";\n        end = \"}\";\n        const keys = Object.keys(obj);\n        const { length } = keys;\n        for (; index < length; index++) {\n          const key = keys[index];\n          const keyPart = `${JSON.stringify(key)}: `;\n          const value = _stringify(\n            obj[key],\n            nextIndent,\n            keyPart.length + (index === length - 1 ? 0 : 1)\n          );\n          if (value !== undefined) {\n            items.push(keyPart + value);\n          }\n        }\n      }\n\n      if (items.length > 0) {\n        return [start, indent + items.join(`,\\n${nextIndent}`), end].join(\n          `\\n${currentIndent}`\n        );\n      }\n    }\n\n    return string;\n  })(passedObj, \"\", 0);\n}\n","// @ts-nocheck\n\nimport reference from './reference/latest';\nimport stringifyPretty from 'json-stringify-pretty-compact';\n\nfunction sortKeysBy(obj, reference) {\n    const result: Record<string, any> = {};\n    for (const key in reference) {\n        if (obj[key] !== undefined) {\n            result[key] = obj[key];\n        }\n    }\n    for (const key in obj) {\n        if (result[key] === undefined) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n/**\n * Format a Mapbox GL Style.  Returns a stringified style with its keys\n * sorted in the same order as the reference style.\n *\n * The optional `space` argument is passed to\n * [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n * to generate formatted output.\n *\n * If `space` is unspecified, a default of `2` spaces will be used.\n *\n * @private\n * @param {Object} style a Mapbox GL Style\n * @param {number} [space] space argument to pass to `JSON.stringify`\n * @returns {string} stringified formatted JSON\n * @example\n * var fs = require('fs');\n * var format = require('mapbox-gl-style-spec').format;\n * var style = fs.readFileSync('./source.json', 'utf8');\n * fs.writeFileSync('./dest.json', format(style));\n * fs.writeFileSync('./dest.min.json', format(style, 0));\n */\nfunction format(style, space = 2) {\n    style = sortKeysBy(style, reference.$root);\n\n    if (style.layers) {\n        style.layers = style.layers.map((layer) => sortKeysBy(layer, reference.layer));\n    }\n\n    return stringifyPretty(style, {indent: space});\n}\n\nexport default format;\n","import Reference from './reference/v8.json';\n\nimport type {StylePropertySpecification} from './style-spec';\nimport type {\n    StyleSpecification,\n    SourceSpecification,\n    LayerSpecification,\n    PropertyValueSpecification\n} from './types';\n\nfunction getPropertyReference(propertyName: string): StylePropertySpecification {\n    for (let i = 0; i < Reference.layout.length; i++) {\n        for (const key in Reference[Reference.layout[i]]) {\n            if (key === propertyName) return Reference[Reference.layout[i]][key];\n        }\n    }\n    for (let i = 0; i < Reference.paint.length; i++) {\n        for (const key in Reference[Reference.paint[i]]) {\n            if (key === propertyName) return Reference[Reference.paint[i]][key];\n        }\n    }\n\n    return null as any;\n}\n\nexport function eachSource(style: StyleSpecification, callback: (_: SourceSpecification) => void) {\n    for (const k in style.sources) {\n        callback(style.sources[k]);\n    }\n}\n\nexport function eachLayer(style: StyleSpecification, callback: (_: LayerSpecification) => void) {\n    for (const layer of style.layers) {\n        callback(layer);\n    }\n}\n\ntype PropertyCallback = (\n    arg1: {\n        path: [string, 'paint' | 'layout', string] // [layerid, paint/layout, property key];\n        key: string;\n        value: PropertyValueSpecification<unknown>  ;\n        reference: StylePropertySpecification;\n        set: (\n            arg1: PropertyValueSpecification<unknown>,\n        ) => void;\n    },\n) => void;\n\nexport function eachProperty(\n    style: StyleSpecification,\n    options: {\n        paint?: boolean;\n        layout?: boolean;\n    },\n    callback: PropertyCallback\n) {\n    function inner(layer: LayerSpecification, propertyType: 'paint' | 'layout') {\n        if (layer.type === 'slot' || layer.type === 'clip') return;\n        const properties = (layer[propertyType] as any);\n        if (!properties) return;\n        Object.keys(properties).forEach((key) => {\n            callback({\n                path: [layer.id, propertyType, key],\n                key,\n                value: properties[key],\n                reference: getPropertyReference(key),\n                set(x) {\n                    properties[key] = x;\n                }\n            });\n        });\n    }\n\n    eachLayer(style, (layer) => {\n        if (options.paint) {\n            inner(layer, 'paint');\n        }\n        if (options.layout) {\n            inner(layer, 'layout');\n        }\n    });\n}\n","// @ts-nocheck\nimport {eachSource, eachLayer, eachProperty} from '../visit';\n\nfunction eachLayout(layer, callback) {\n    for (const k in layer) {\n        if (k.indexOf('layout') === 0) {\n            callback(layer[k], k);\n        }\n    }\n}\n\nfunction eachPaint(layer, callback) {\n    for (const k in layer) {\n        if (k.indexOf('paint') === 0) {\n            callback(layer[k], k);\n        }\n    }\n}\n\nfunction resolveConstant(style, value) {\n    if (typeof value === 'string' && value[0] === '@') {\n        return resolveConstant(style, style.constants[value]);\n    } else {\n        return value;\n    }\n}\n\nfunction isFunction(value) {\n    return Array.isArray(value.stops);\n}\n\nfunction renameProperty(obj, from, to) {\n    obj[to] = obj[from]; delete obj[from];\n}\n\nexport default function(style) {\n    style.version = 8;\n\n    // Rename properties, reverse coordinates in source and layers\n    eachSource(style, (source) => {\n        if (source.type === 'video' && source.url !== undefined) {\n            renameProperty(source, 'url', 'urls');\n        }\n        if (source.type === 'video') {\n            source.coordinates.forEach((coord) => {\n                return coord.reverse();\n            });\n        }\n    });\n\n    eachLayer(style, (layer) => {\n        eachLayout(layer, (layout) => {\n            if (layout['symbol-min-distance'] !== undefined) {\n                renameProperty(layout, 'symbol-min-distance', 'symbol-spacing');\n            }\n        });\n\n        eachPaint(layer, (paint) => {\n            if (paint['background-image'] !== undefined) {\n                renameProperty(paint, 'background-image', 'background-pattern');\n            }\n            if (paint['line-image'] !== undefined) {\n                renameProperty(paint, 'line-image', 'line-pattern');\n            }\n            if (paint['fill-image'] !== undefined) {\n                renameProperty(paint, 'fill-image', 'fill-pattern');\n            }\n        });\n    });\n\n    // Inline Constants\n    eachProperty(style, {paint: true, layout: true}, (property) => {\n        const value = resolveConstant(style, property.value);\n\n        if (isFunction(value)) {\n            value.stops.forEach((stop) => {\n                stop[1] = resolveConstant(style, stop[1]);\n            });\n        }\n\n        property.set(value);\n    });\n    delete style.constants;\n\n    eachLayer(style, (layer) => {\n        // get rid of text-max-size, icon-max-size\n        // turn text-size, icon-size into layout properties\n        // https://github.com/mapbox/mapbox-gl-style-spec/issues/255\n\n        eachLayout(layer, (layout) => {\n            delete layout['text-max-size'];\n            delete layout['icon-max-size'];\n        });\n\n        eachPaint(layer, (paint) => {\n            if (paint['text-size']) {\n                if (!layer.layout) layer.layout = {};\n                layer.layout['text-size'] = paint['text-size'];\n                delete paint['text-size'];\n            }\n\n            if (paint['icon-size']) {\n                if (!layer.layout) layer.layout = {};\n                layer.layout['icon-size'] = paint['icon-size'];\n                delete paint['icon-size'];\n            }\n        });\n    });\n\n    function migrateFontstackURL(input) {\n        const inputParsed = new URL(input);\n        const inputPathnameParts = inputParsed.pathname.split('/');\n\n        if (inputParsed.protocol !== 'mapbox:') {\n            return input;\n\n        } else if (inputParsed.hostname === 'fontstack') {\n            assert(decodeURI(inputParsed.pathname) === '/{fontstack}/{range}.pbf');\n            return 'mapbox://fonts/mapbox/{fontstack}/{range}.pbf';\n\n        } else if (inputParsed.hostname === 'fonts') {\n            assert(inputPathnameParts[1] === 'v1');\n            assert(decodeURI(inputPathnameParts[3]) === '{fontstack}');\n            assert(decodeURI(inputPathnameParts[4]) === '{range}.pbf');\n            return `mapbox://fonts/${inputPathnameParts[2]}/{fontstack}/{range}.pbf`;\n\n        } else {\n            assert(false);\n        }\n\n        function assert(predicate) {\n            if (!predicate) {\n                throw new Error(`Invalid font url: \"${input}\"`);\n            }\n        }\n    }\n\n    if (style.glyphs) {\n        style.glyphs = migrateFontstackURL(style.glyphs);\n    }\n\n    function migrateFontStack(font) {\n        function splitAndTrim(string) {\n            return string.split(',').map((s) => {\n                return s.trim();\n            });\n        }\n\n        if (Array.isArray(font)) {\n            // Assume it's a previously migrated font-array.\n            return font;\n\n        } else if (typeof font === 'string') {\n            return splitAndTrim(font);\n\n        } else if (typeof font === 'object') {\n            font.stops.forEach((stop) => {\n                stop[1] = splitAndTrim(stop[1]);\n            });\n            return font;\n\n        } else {\n            throw new Error(\"unexpected font value\");\n        }\n    }\n\n    eachLayer(style, (layer) => {\n        eachLayout(layer, (layout) => {\n            if (layout['text-font']) {\n                layout['text-font'] = migrateFontStack(layout['text-font']);\n            }\n        });\n    });\n\n    // Reverse order of symbol layers. This is an imperfect migration.\n    //\n    // The order of a symbol layer in the layers list affects two things:\n    // - how it is drawn relative to other layers (like oneway arrows below bridges)\n    // - the placement priority compared to other layers\n    //\n    // It's impossible to reverse the placement priority without breaking the draw order\n    // in some cases. This migration only reverses the order of symbol layers that\n    // are above all other types of layers.\n    //\n    // Symbol layers that are at the top of the map preserve their priority.\n    // Symbol layers that are below another type (line, fill) of layer preserve their draw order.\n\n    let firstSymbolLayer = 0;\n    for (let i = style.layers.length - 1; i >= 0; i--) {\n        const layer = style.layers[i];\n        if (layer.type !== 'symbol') {\n            firstSymbolLayer = i + 1;\n            break;\n        }\n    }\n\n    const symbolLayers = style.layers.splice(firstSymbolLayer);\n    symbolLayers.reverse();\n    style.layers = style.layers.concat(symbolLayers);\n\n    return style;\n}\n","export default function(output: any, ...inputs: Array<any>): any {\n    for (const input of inputs) {\n        for (const k in input) {\n            output[k] = input[k];\n        }\n    }\n    return output;\n}\n","class ParsingError extends Error {\n    key: string;\n    override message: string;\n    constructor(key: string, message: string) {\n        super(message);\n        this.message = message;\n        this.key = key;\n    }\n}\n\nexport default ParsingError;\n","import type {Expression} from './expression';\n\n/**\n * Tracks `let` bindings during expression parsing.\n * @private\n */\nclass Scope {\n    parent: Scope | null | undefined;\n    bindings: {\n        [_: string]: Expression;\n    };\n    constructor(parent?: Scope, bindings: Array<[string, Expression]> = []) {\n        this.parent = parent;\n        this.bindings = {};\n        for (const [name, expression] of bindings) {\n            this.bindings[name] = expression;\n        }\n    }\n\n    concat(bindings: Array<[string, Expression]>): Scope {\n        return new Scope(this, bindings);\n    }\n\n    get(name: string): Expression {\n        if (this.bindings[name]) { return this.bindings[name]; }\n        if (this.parent) { return this.parent.get(name); }\n        throw new Error(`${name} not found in scope.`);\n    }\n\n    has(name: string): boolean {\n        if (this.bindings[name]) return true;\n        return this.parent ? this.parent.has(name) : false;\n    }\n}\n\nexport default Scope;\n","export type NullTypeT = {\n    kind: 'null';\n};\nexport type NumberTypeT = {\n    kind: 'number';\n};\nexport type StringTypeT = {\n    kind: 'string';\n};\nexport type BooleanTypeT = {\n    kind: 'boolean';\n};\nexport type ColorTypeT = {\n    kind: 'color';\n};\nexport type ObjectTypeT = {\n    kind: 'object';\n};\nexport type ValueTypeT = {\n    kind: 'value';\n};\nexport type ErrorTypeT = {\n    kind: 'error';\n};\nexport type CollatorTypeT = {\n    kind: 'collator';\n};\nexport type FormattedTypeT = {\n    kind: 'formatted';\n};\nexport type ResolvedImageTypeT = {\n    kind: 'resolvedImage';\n};\n\nexport type EvaluationKind = 'constant' | 'source' | 'camera' | 'composite';\n\nexport type Type = NullTypeT | NumberTypeT | StringTypeT | BooleanTypeT | ColorTypeT | ObjectTypeT | ValueTypeT | // eslint-disable-line no-use-before-define\nArrayType | ErrorTypeT | CollatorTypeT | FormattedTypeT | ResolvedImageTypeT;\n\nexport type ArrayType = {\n    kind: 'array';\n    itemType: Type;\n    N: number | null | undefined;\n};\n\nexport type NativeType = 'number' | 'string' | 'boolean' | 'null' | 'array' | 'object';\n\nexport const NullType = {kind: 'null'} as const;\nexport const NumberType = {kind: 'number'} as const;\nexport const StringType = {kind: 'string'} as const;\nexport const BooleanType = {kind: 'boolean'} as const;\nexport const ColorType = {kind: 'color'} as const;\nexport const ObjectType = {kind: 'object'} as const;\nexport const ValueType = {kind: 'value'} as const;\nexport const ErrorType = {kind: 'error'} as const;\nexport const CollatorType = {kind: 'collator'} as const;\nexport const FormattedType = {kind: 'formatted'} as const;\nexport const ResolvedImageType = {kind: 'resolvedImage'} as const;\n\nexport function array(itemType: Type, N?: number | null): ArrayType {\n    return {\n        kind: 'array',\n        itemType,\n        N\n    };\n}\n\nexport function toString(type: Type): string {\n    if (type.kind === 'array') {\n        const itemType = toString(type.itemType);\n        return typeof type.N === 'number' ?\n            `array<${itemType}, ${type.N}>` :\n            type.itemType.kind === 'value' ? 'array' : `array<${itemType}>`;\n    } else {\n        return type.kind;\n    }\n}\n\nconst valueMemberTypes = [\n    NullType,\n    NumberType,\n    StringType,\n    BooleanType,\n    ColorType,\n    FormattedType,\n    ObjectType,\n    array(ValueType),\n    ResolvedImageType\n];\n\n/**\n * Returns null if `t` is a subtype of `expected`; otherwise returns an\n * error message.\n * @private\n */\nexport function checkSubtype(expected: Type, t: Type): string | null | undefined {\n    if (t.kind === 'error') {\n        // Error is a subtype of every type\n        return null;\n    } else if (expected.kind === 'array') {\n        if (t.kind === 'array' &&\n            ((t.N === 0 && t.itemType.kind === 'value') || !checkSubtype(expected.itemType, t.itemType)) &&\n            (typeof expected.N !== 'number' || expected.N === t.N)) {\n            return null;\n        }\n    } else if (expected.kind === t.kind) {\n        return null;\n    } else if (expected.kind === 'value') {\n        for (const memberType of valueMemberTypes) {\n            if (!checkSubtype(memberType, t)) {\n                return null;\n            }\n        }\n    }\n\n    return `Expected ${toString(expected)} but found ${toString(t)} instead.`;\n}\n\nexport function isValidType(provided: Type, allowedTypes: Array<Type>): boolean {\n    return allowedTypes.some(t => t.kind === provided.kind);\n}\n\nexport function isValidNativeType(provided: any, allowedTypes: Array<NativeType>): boolean {\n    return allowedTypes.some(t => {\n        if (t === 'null') {\n            return provided === null;\n        } else if (t === 'array') {\n            return Array.isArray(provided);\n        } else if (t === 'object') {\n            return provided && !Array.isArray(provided) && typeof provided === 'object';\n        } else {\n            return t === typeof provided;\n        }\n    });\n}\n","// (c) Dean McNamee <dean@gmail.com>, 2012.\n//\n// https://github.com/deanm/css-color-parser-js\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n// http://www.w3.org/TR/css3-color/\nvar kCSSColorTable = {\n  \"transparent\": [0,0,0,0], \"aliceblue\": [240,248,255,1],\n  \"antiquewhite\": [250,235,215,1], \"aqua\": [0,255,255,1],\n  \"aquamarine\": [127,255,212,1], \"azure\": [240,255,255,1],\n  \"beige\": [245,245,220,1], \"bisque\": [255,228,196,1],\n  \"black\": [0,0,0,1], \"blanchedalmond\": [255,235,205,1],\n  \"blue\": [0,0,255,1], \"blueviolet\": [138,43,226,1],\n  \"brown\": [165,42,42,1], \"burlywood\": [222,184,135,1],\n  \"cadetblue\": [95,158,160,1], \"chartreuse\": [127,255,0,1],\n  \"chocolate\": [210,105,30,1], \"coral\": [255,127,80,1],\n  \"cornflowerblue\": [100,149,237,1], \"cornsilk\": [255,248,220,1],\n  \"crimson\": [220,20,60,1], \"cyan\": [0,255,255,1],\n  \"darkblue\": [0,0,139,1], \"darkcyan\": [0,139,139,1],\n  \"darkgoldenrod\": [184,134,11,1], \"darkgray\": [169,169,169,1],\n  \"darkgreen\": [0,100,0,1], \"darkgrey\": [169,169,169,1],\n  \"darkkhaki\": [189,183,107,1], \"darkmagenta\": [139,0,139,1],\n  \"darkolivegreen\": [85,107,47,1], \"darkorange\": [255,140,0,1],\n  \"darkorchid\": [153,50,204,1], \"darkred\": [139,0,0,1],\n  \"darksalmon\": [233,150,122,1], \"darkseagreen\": [143,188,143,1],\n  \"darkslateblue\": [72,61,139,1], \"darkslategray\": [47,79,79,1],\n  \"darkslategrey\": [47,79,79,1], \"darkturquoise\": [0,206,209,1],\n  \"darkviolet\": [148,0,211,1], \"deeppink\": [255,20,147,1],\n  \"deepskyblue\": [0,191,255,1], \"dimgray\": [105,105,105,1],\n  \"dimgrey\": [105,105,105,1], \"dodgerblue\": [30,144,255,1],\n  \"firebrick\": [178,34,34,1], \"floralwhite\": [255,250,240,1],\n  \"forestgreen\": [34,139,34,1], \"fuchsia\": [255,0,255,1],\n  \"gainsboro\": [220,220,220,1], \"ghostwhite\": [248,248,255,1],\n  \"gold\": [255,215,0,1], \"goldenrod\": [218,165,32,1],\n  \"gray\": [128,128,128,1], \"green\": [0,128,0,1],\n  \"greenyellow\": [173,255,47,1], \"grey\": [128,128,128,1],\n  \"honeydew\": [240,255,240,1], \"hotpink\": [255,105,180,1],\n  \"indianred\": [205,92,92,1], \"indigo\": [75,0,130,1],\n  \"ivory\": [255,255,240,1], \"khaki\": [240,230,140,1],\n  \"lavender\": [230,230,250,1], \"lavenderblush\": [255,240,245,1],\n  \"lawngreen\": [124,252,0,1], \"lemonchiffon\": [255,250,205,1],\n  \"lightblue\": [173,216,230,1], \"lightcoral\": [240,128,128,1],\n  \"lightcyan\": [224,255,255,1], \"lightgoldenrodyellow\": [250,250,210,1],\n  \"lightgray\": [211,211,211,1], \"lightgreen\": [144,238,144,1],\n  \"lightgrey\": [211,211,211,1], \"lightpink\": [255,182,193,1],\n  \"lightsalmon\": [255,160,122,1], \"lightseagreen\": [32,178,170,1],\n  \"lightskyblue\": [135,206,250,1], \"lightslategray\": [119,136,153,1],\n  \"lightslategrey\": [119,136,153,1], \"lightsteelblue\": [176,196,222,1],\n  \"lightyellow\": [255,255,224,1], \"lime\": [0,255,0,1],\n  \"limegreen\": [50,205,50,1], \"linen\": [250,240,230,1],\n  \"magenta\": [255,0,255,1], \"maroon\": [128,0,0,1],\n  \"mediumaquamarine\": [102,205,170,1], \"mediumblue\": [0,0,205,1],\n  \"mediumorchid\": [186,85,211,1], \"mediumpurple\": [147,112,219,1],\n  \"mediumseagreen\": [60,179,113,1], \"mediumslateblue\": [123,104,238,1],\n  \"mediumspringgreen\": [0,250,154,1], \"mediumturquoise\": [72,209,204,1],\n  \"mediumvioletred\": [199,21,133,1], \"midnightblue\": [25,25,112,1],\n  \"mintcream\": [245,255,250,1], \"mistyrose\": [255,228,225,1],\n  \"moccasin\": [255,228,181,1], \"navajowhite\": [255,222,173,1],\n  \"navy\": [0,0,128,1], \"oldlace\": [253,245,230,1],\n  \"olive\": [128,128,0,1], \"olivedrab\": [107,142,35,1],\n  \"orange\": [255,165,0,1], \"orangered\": [255,69,0,1],\n  \"orchid\": [218,112,214,1], \"palegoldenrod\": [238,232,170,1],\n  \"palegreen\": [152,251,152,1], \"paleturquoise\": [175,238,238,1],\n  \"palevioletred\": [219,112,147,1], \"papayawhip\": [255,239,213,1],\n  \"peachpuff\": [255,218,185,1], \"peru\": [205,133,63,1],\n  \"pink\": [255,192,203,1], \"plum\": [221,160,221,1],\n  \"powderblue\": [176,224,230,1], \"purple\": [128,0,128,1],\n  \"rebeccapurple\": [102,51,153,1],\n  \"red\": [255,0,0,1], \"rosybrown\": [188,143,143,1],\n  \"royalblue\": [65,105,225,1], \"saddlebrown\": [139,69,19,1],\n  \"salmon\": [250,128,114,1], \"sandybrown\": [244,164,96,1],\n  \"seagreen\": [46,139,87,1], \"seashell\": [255,245,238,1],\n  \"sienna\": [160,82,45,1], \"silver\": [192,192,192,1],\n  \"skyblue\": [135,206,235,1], \"slateblue\": [106,90,205,1],\n  \"slategray\": [112,128,144,1], \"slategrey\": [112,128,144,1],\n  \"snow\": [255,250,250,1], \"springgreen\": [0,255,127,1],\n  \"steelblue\": [70,130,180,1], \"tan\": [210,180,140,1],\n  \"teal\": [0,128,128,1], \"thistle\": [216,191,216,1],\n  \"tomato\": [255,99,71,1], \"turquoise\": [64,224,208,1],\n  \"violet\": [238,130,238,1], \"wheat\": [245,222,179,1],\n  \"white\": [255,255,255,1], \"whitesmoke\": [245,245,245,1],\n  \"yellow\": [255,255,0,1], \"yellowgreen\": [154,205,50,1]}\n\nfunction clamp_css_byte(i) {  // Clamp to integer 0 .. 255.\n  i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n  return i < 0 ? 0 : i > 255 ? 255 : i;\n}\n\nfunction clamp_css_float(f) {  // Clamp to float 0.0 .. 1.0.\n  return f < 0 ? 0 : f > 1 ? 1 : f;\n}\n\nfunction parse_css_int(str) {  // int or percentage.\n  if (str[str.length - 1] === '%')\n    return clamp_css_byte(parseFloat(str) / 100 * 255);\n  return clamp_css_byte(parseInt(str));\n}\n\nfunction parse_css_float(str) {  // float or percentage.\n  if (str[str.length - 1] === '%')\n    return clamp_css_float(parseFloat(str) / 100);\n  return clamp_css_float(parseFloat(str));\n}\n\nfunction css_hue_to_rgb(m1, m2, h) {\n  if (h < 0) h += 1;\n  else if (h > 1) h -= 1;\n\n  if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;\n  if (h * 2 < 1) return m2;\n  if (h * 3 < 2) return m1 + (m2 - m1) * (2/3 - h) * 6;\n  return m1;\n}\n\nfunction parseCSSColor(css_str) {\n  // Remove all whitespace, not compliant, but should just be more accepting.\n  var str = css_str.replace(/ /g, '').toLowerCase();\n\n  // Color keywords (and transparent) lookup.\n  if (str in kCSSColorTable) return kCSSColorTable[str].slice();  // dup.\n\n  // #abc and #abc123 syntax.\n  if (str[0] === '#') {\n    if (str.length === 4) {\n      var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n      if (!(iv >= 0 && iv <= 0xfff)) return null;  // Covers NaN.\n      return [((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n              (iv & 0xf0) | ((iv & 0xf0) >> 4),\n              (iv & 0xf) | ((iv & 0xf) << 4),\n              1];\n    } else if (str.length === 7) {\n      var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n      if (!(iv >= 0 && iv <= 0xffffff)) return null;  // Covers NaN.\n      return [(iv & 0xff0000) >> 16,\n              (iv & 0xff00) >> 8,\n              iv & 0xff,\n              1];\n    }\n\n    return null;\n  }\n\n  var op = str.indexOf('('), ep = str.indexOf(')');\n  if (op !== -1 && ep + 1 === str.length) {\n    var fname = str.substr(0, op);\n    var params = str.substr(op+1, ep-(op+1)).split(',');\n    var alpha = 1;  // To allow case fallthrough.\n    switch (fname) {\n      case 'rgba':\n        if (params.length !== 4) return null;\n        alpha = parse_css_float(params.pop());\n        // Fall through.\n      case 'rgb':\n        if (params.length !== 3) return null;\n        return [parse_css_int(params[0]),\n                parse_css_int(params[1]),\n                parse_css_int(params[2]),\n                alpha];\n      case 'hsla':\n        if (params.length !== 4) return null;\n        alpha = parse_css_float(params.pop());\n        // Fall through.\n      case 'hsl':\n        if (params.length !== 3) return null;\n        var h = (((parseFloat(params[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n        // NOTE(deanm): According to the CSS spec s/l should only be\n        // percentages, but we don't bother and let float or percentage.\n        var s = parse_css_float(params[1]);\n        var l = parse_css_float(params[2]);\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        var m1 = l * 2 - m2;\n        return [clamp_css_byte(css_hue_to_rgb(m1, m2, h+1/3) * 255),\n                clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),\n                clamp_css_byte(css_hue_to_rgb(m1, m2, h-1/3) * 255),\n                alpha];\n      default:\n        return null;\n    }\n  }\n\n  return null;\n}\n\ntry { exports.parseCSSColor = parseCSSColor } catch(e) { }\n","import Color from './color';\n\nexport function number(a: number, b: number, t: number): number {\n    return (a * (1 - t)) + (b * t);\n}\n\nexport function color(from: Color, to: Color, t: number): Color {\n    return new Color(\n        number(from.r, to.r, t),\n        number(from.g, to.g, t),\n        number(from.b, to.b, t),\n        number(from.a, to.a, t)\n    );\n}\n\nexport function array(from: Array<number>, to: Array<number>, t: number): Array<number> {\n    return from.map((d, i) => {\n        return number(d, to[i], t);\n    });\n}\n","import {parseCSSColor} from 'csscolorparser';\nimport {number as lerp} from './interpolate';\n\nimport type {LUT} from '../types/lut';\n\n/**\n * An RGBA color value. Create instances from color strings using the static\n * method `Color.parse`. The constructor accepts RGB channel values in the range\n * `[0, 1]`, premultiplied by A.\n *\n * @param {number} r The red channel.\n * @param {number} g The green channel.\n * @param {number} b The blue channel.\n * @param {number} a The alpha channel.\n * @private\n */\nclass Color {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n\n    constructor(r: number, g: number, b: number, a: number = 1) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    static black: Color;\n    static white: Color;\n    static transparent: Color;\n    static red: Color;\n    static blue: Color;\n\n    /**\n     * Parses valid CSS color strings and returns a `Color` instance.\n     * @returns A `Color` instance, or `undefined` if the input is not a valid color string.\n     */\n    static parse(input?: string | Color | null): Color | void {\n        if (!input) {\n            return undefined;\n        }\n\n        if (input instanceof Color) {\n            return input;\n        }\n\n        if (typeof input !== 'string') {\n            return undefined;\n        }\n\n        const rgba = parseCSSColor(input);\n        if (!rgba) {\n            return undefined;\n        }\n\n        return new Color(\n            rgba[0] / 255 * rgba[3],\n            rgba[1] / 255 * rgba[3],\n            rgba[2] / 255 * rgba[3],\n            rgba[3]\n        );\n    }\n\n    /**\n     * Returns an RGBA string representing the color value.\n     *\n     * @returns An RGBA string.\n     * @example\n     * var purple = new Color.parse('purple');\n     * purple.toString; // = \"rgba(128,0,128,1)\"\n     * var translucentGreen = new Color.parse('rgba(26, 207, 26, .73)');\n     * translucentGreen.toString(); // = \"rgba(26,207,26,0.73)\"\n     */\n    toString(): string {\n        const [r, g, b, a] = this.a === 0 ? [0, 0, 0, 0] : [\n            this.r * 255 / this.a,\n            this.g * 255 / this.a,\n            this.b * 255 / this.a,\n            this.a\n        ];\n        return `rgba(${Math.round(r)},${Math.round(g)},${Math.round(b)},${a})`;\n    }\n\n    toRenderColor(lut: LUT | null): RenderColor {\n        const {r, g, b, a} = this;\n        return new RenderColor(lut, r, g, b, a);\n    }\n}\n\n/**\n * Renderable color created from a Color and an optional LUT value\n */\nexport class RenderColor {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n\n    constructor(lut: LUT | null, r: number, g: number, b: number, a: number) {\n        if (!lut) {\n            this.r = r;\n            this.g = g;\n            this.b = b;\n            this.a = a;\n        } else {\n            const N = lut.image.height;\n            const N2 = N * N;\n            // Normalize to cube dimensions.\n            r = a === 0 ? 0 : (r / a) * (N - 1);\n            g = a === 0 ? 0 : (g / a) * (N - 1);\n            b = a === 0 ? 0 : (b / a) * (N - 1);\n\n            // Determine boundary values for the cube the color is in.\n            const r0 = Math.floor(r);\n            const g0 = Math.floor(g);\n            const b0 = Math.floor(b);\n            const r1 = Math.ceil(r);\n            const g1 = Math.ceil(g);\n            const b1 = Math.ceil(b);\n\n            // Determine weights within the cube.\n            const rw = r - r0;\n            const gw = g - g0;\n            const bw = b - b0;\n\n            const data = lut.image.data;\n            const i0 = (r0 + g0 * N2 + b0 * N) * 4;\n            const i1 = (r0 + g0 * N2 + b1 * N) * 4;\n            const i2 = (r0 + g1 * N2 + b0 * N) * 4;\n            const i3 = (r0 + g1 * N2 + b1 * N) * 4;\n            const i4 = (r1 + g0 * N2 + b0 * N) * 4;\n            const i5 = (r1 + g0 * N2 + b1 * N) * 4;\n            const i6 = (r1 + g1 * N2 + b0 * N) * 4;\n            const i7 = (r1 + g1 * N2 + b1 * N) * 4;\n            if (i0 < 0 || i7 >= data.length) {\n                throw new Error(\"out of range\");\n            }\n\n            // Trilinear interpolation.\n            this.r = lerp(\n                lerp(\n                    lerp(data[i0], data[i1], bw),\n                    lerp(data[i2], data[i3], bw), gw),\n                lerp(\n                    lerp(data[i4], data[i5], bw),\n                    lerp(data[i6], data[i7], bw), gw), rw) / 255 * a;\n            this.g = lerp(\n                lerp(\n                    lerp(data[i0 + 1], data[i1 + 1], bw),\n                    lerp(data[i2 + 1], data[i3 + 1], bw), gw),\n                lerp(\n                    lerp(data[i4 + 1], data[i5 + 1], bw),\n                    lerp(data[i6 + 1], data[i7 + 1], bw), gw), rw) / 255 * a;\n            this.b = lerp(\n                lerp(\n                    lerp(data[i0 + 2], data[i1 + 2], bw),\n                    lerp(data[i2 + 2], data[i3 + 2], bw), gw),\n                lerp(\n                    lerp(data[i4 + 2], data[i5 + 2], bw),\n                    lerp(data[i6 + 2], data[i7 + 2], bw), gw), rw) / 255 * a;\n            this.a = a;\n        }\n    }\n\n    /**\n     * Returns an RGBA array of values representing the color, unpremultiplied by A.\n     *\n     * @returns An array of RGBA color values in the range [0, 255].\n     */\n    toArray(): [number, number, number, number] {\n        const {r, g, b, a} = this;\n        return a === 0 ? [0, 0, 0, 0] : [\n            r * 255 / a,\n            g * 255 / a,\n            b * 255 / a,\n            a\n        ];\n    }\n\n    /**\n     * Returns a RGBA array of float values representing the color, unpremultiplied by A.\n     *\n     * @returns An array of RGBA color values in the range [0, 1].\n     */\n    toArray01(): [number, number, number, number] {\n        const {r, g, b, a} = this;\n        return a === 0 ? [0, 0, 0, 0] : [\n            r / a,\n            g / a,\n            b / a,\n            a\n        ];\n    }\n\n    /**\n     * Returns an RGB array of values representing the color, unpremultiplied by A and multiplied by a scalar.\n     *\n     * @param {number} scale A scale to apply to the unpremultiplied-alpha values.\n     * @returns An array of RGB color values in the range [0, 1].\n     */\n    toArray01Scaled(scale: number): [number, number, number] {\n        const {r, g, b, a} = this;\n        return a === 0 ? [0, 0, 0] : [\n            (r / a) * scale,\n            (g / a) * scale,\n            (b / a) * scale\n        ];\n    }\n\n    /**\n     * Returns an RGBA array of values representing the color, premultiplied by A.\n     *\n     * @returns An array of RGBA color values in the range [0, 1].\n     */\n    toArray01PremultipliedAlpha(): [number, number, number, number] {\n        const {r, g, b, a} = this;\n        return [\n            r,\n            g,\n            b,\n            a\n        ];\n    }\n\n    /**\n     * Returns an RGBA array of values representing the color, unpremultiplied by A, and converted to linear color space.\n     * The color is defined by sRGB primaries, but the sRGB transfer function is reversed to obtain linear energy.\n     *\n     * @returns An array of RGBA color values in the range [0, 1].\n     */\n    toArray01Linear(): [number, number, number, number] {\n        const {r, g, b, a} = this;\n        return a === 0 ? [0, 0, 0, 0] : [\n            Math.pow((r / a), 2.2),\n            Math.pow((g / a), 2.2),\n            Math.pow((b / a), 2.2),\n            a\n        ];\n    }\n}\n\nColor.black = new Color(0, 0, 0, 1);\nColor.white = new Color(1, 1, 1, 1);\nColor.transparent = new Color(0, 0, 0, 0);\nColor.red = new Color(1, 0, 0, 1);\nColor.blue = new Color(0, 0, 1, 1);\n\nexport default Color;\n","export default class Collator {\n    locale: string | null;\n    sensitivity: 'base' | 'accent' | 'case' | 'variant';\n    collator: Intl.Collator;\n\n    constructor(caseSensitive: boolean, diacriticSensitive: boolean, locale: string | null) {\n        if (caseSensitive)\n            this.sensitivity = diacriticSensitive ? 'variant' : 'case';\n        else\n            this.sensitivity = diacriticSensitive ? 'accent' : 'base';\n\n        this.locale = locale;\n        this.collator = new Intl.Collator(this.locale ? this.locale : [],\n            {sensitivity: this.sensitivity, usage: 'search'});\n    }\n\n    compare(lhs: string, rhs: string): number {\n        return this.collator.compare(lhs, rhs);\n    }\n\n    resolvedLocale(): string {\n        // We create a Collator without \"usage: search\" because we don't want\n        // the search options encoded in our result (e.g. \"en-u-co-search\")\n        return new Intl.Collator(this.locale ? this.locale : [])\n            .resolvedOptions().locale;\n    }\n}\n","import type Color from '../../util/color';\nimport type ResolvedImage from '../types/resolved_image';\n\nexport class FormattedSection {\n    text: string;\n    image: ResolvedImage | null;\n    scale: number | null;\n    fontStack: string | null;\n    textColor: Color | null;\n\n    constructor(text: string, image: ResolvedImage | null, scale: number | null, fontStack: string | null, textColor: Color | null) {\n        // combine characters so that diacritic marks are not separate code points\n        this.text = text.normalize ? text.normalize() : text;\n        this.image = image;\n        this.scale = scale;\n        this.fontStack = fontStack;\n        this.textColor = textColor;\n    }\n}\n\nexport default class Formatted {\n    sections: Array<FormattedSection>;\n\n    constructor(sections: Array<FormattedSection>) {\n        this.sections = sections;\n    }\n\n    static fromString(unformatted: string): Formatted {\n        return new Formatted([new FormattedSection(unformatted, null, null, null, null)]);\n    }\n\n    isEmpty(): boolean {\n        if (this.sections.length === 0) return true;\n        return !this.sections.some(section => section.text.length !== 0 ||\n                                             (section.image && section.image.namePrimary.length !== 0));\n    }\n\n    static factory(text: Formatted | string): Formatted {\n        if (text instanceof Formatted) {\n            return text;\n        } else {\n            return Formatted.fromString(text);\n        }\n    }\n\n    toString(): string {\n        if (this.sections.length === 0) return '';\n        return this.sections.map(section => section.text).join('');\n    }\n\n    serialize(): Array<unknown> {\n        const serialized: Array<unknown> = [\"format\"];\n        for (const section of this.sections) {\n            if (section.image) {\n                serialized.push([\"image\", section.image.namePrimary]);\n                continue;\n            }\n            serialized.push(section.text);\n            const options: {\n                [key: string]: unknown;\n            } = {};\n            if (section.fontStack) {\n                options[\"text-font\"] = [\"literal\", section.fontStack.split(',')];\n            }\n            if (section.scale) {\n                options[\"font-scale\"] = section.scale;\n            }\n            if (section.textColor) {\n                options[\"text-color\"] = ([\"rgba\"] as Array<unknown>).concat(section.textColor.toRenderColor(null).toArray());\n            }\n            serialized.push(options);\n        }\n        return serialized;\n    }\n}\n","export type ResolvedImageOptions = {\n    namePrimary: string;\n    nameSecondary: string | null | undefined;\n    available: boolean;\n};\n\nexport default class ResolvedImage {\n    namePrimary: string;\n    nameSecondary: string | null | undefined;\n    available: boolean;\n\n    constructor(options: ResolvedImageOptions) {\n        this.namePrimary = options.namePrimary;\n        if (options.nameSecondary) {\n            this.nameSecondary = options.nameSecondary;\n        }\n        this.available = options.available;\n    }\n\n    toString(): string {\n        if (this.nameSecondary) {\n            return `[${this.namePrimary},${this.nameSecondary}]`;\n        }\n        return this.namePrimary;\n    }\n\n    static fromString(namePrimary: string, nameSecondary?: string | null): ResolvedImage | null {\n        if (!namePrimary) return null; // treat empty values as no image\n        return new ResolvedImage({namePrimary, nameSecondary, available: false});\n    }\n\n    serialize(): Array<string> {\n        if (this.nameSecondary) {\n            return [\"image\", this.namePrimary, this.nameSecondary];\n        }\n        return [\"image\", this.namePrimary];\n    }\n}\n","import assert from 'assert';\nimport Color from '../util/color';\nimport Collator from './types/collator';\nimport Formatted from './types/formatted';\nimport ResolvedImage from './types/resolved_image';\nimport {NullType, NumberType, StringType, BooleanType, ColorType, ObjectType, ValueType, CollatorType, FormattedType, ResolvedImageType, array} from './types';\n\nimport type {Type} from './types';\n\nexport function validateRGBA(r: unknown, g: unknown, b: unknown, a?: unknown): string | null {\n    if (!(\n        typeof r === 'number' && r >= 0 && r <= 255 &&\n        typeof g === 'number' && g >= 0 && g <= 255 &&\n        typeof b === 'number' && b >= 0 && b <= 255\n    )) {\n        const value = typeof a === 'number' ? [r, g, b, a] : [r, g, b];\n        return `Invalid rgba value [${value.join(', ')}]: 'r', 'g', and 'b' must be between 0 and 255.`;\n    }\n\n    if (!(\n        typeof a === 'undefined' || (typeof a === 'number' && a >= 0 && a <= 1)\n    )) {\n        return `Invalid rgba value [${[r, g, b, a].join(', ')}]: 'a' must be between 0 and 1.`;\n    }\n\n    return null;\n}\n\nexport function validateHSLA(h: unknown, s: unknown, l: unknown, a?: unknown): string | null {\n    if (!(\n        typeof h === 'number' && h >= 0 && h <= 360\n    )) {\n        const value = typeof a === 'number' ? [h, s, l, a] : [h, s, l];\n        return `Invalid hsla value [${value.join(', ')}]: 'h' must be between 0 and 360.`;\n    }\n\n    if (!(\n        typeof s === 'number' && s >= 0 && s <= 100 &&\n        typeof l === 'number' && l >= 0 && l <= 100\n    )) {\n        const value = typeof a === 'number' ? [h, s, l, a] : [h, s, l];\n        return `Invalid hsla value [${value.join(', ')}]: 's', and 'l' must be between 0 and 100.`;\n    }\n\n    if (!(\n        typeof a === 'undefined' || (typeof a === 'number' && a >= 0 && a <= 1)\n    )) {\n        return `Invalid hsla value [${[h, s, l, a].join(', ')}]: 'a' must be between 0 and 1.`;\n    }\n\n    return null;\n}\n\nexport type Value = null | string | boolean | number | Color | Collator | Formatted | ResolvedImage | ReadonlyArray<Value> | {\n    readonly [key: string]: Value;\n};\n\nexport function isValue(mixed: unknown): boolean {\n    if (mixed === null) {\n        return true;\n    } else if (typeof mixed === 'string') {\n        return true;\n    } else if (typeof mixed === 'boolean') {\n        return true;\n    } else if (typeof mixed === 'number') {\n        return true;\n    } else if (mixed instanceof Color) {\n        return true;\n    } else if (mixed instanceof Collator) {\n        return true;\n    } else if (mixed instanceof Formatted) {\n        return true;\n    } else if (mixed instanceof ResolvedImage) {\n        return true;\n    } else if (Array.isArray(mixed)) {\n        for (const item of mixed) {\n            if (!isValue(item)) {\n                return false;\n            }\n        }\n        return true;\n    } else if (typeof mixed === 'object') {\n        for (const key in mixed) {\n            if (!isValue(mixed[key])) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function typeOf(value: Value): Type {\n    if (value === null) {\n        return NullType;\n    } else if (typeof value === 'string') {\n        return StringType;\n    } else if (typeof value === 'boolean') {\n        return BooleanType;\n    } else if (typeof value === 'number') {\n        return NumberType;\n    } else if (value instanceof Color) {\n        return ColorType;\n    } else if (value instanceof Collator) {\n        return CollatorType;\n    } else if (value instanceof Formatted) {\n        return FormattedType;\n    } else if (value instanceof ResolvedImage) {\n        return ResolvedImageType;\n    } else if (Array.isArray(value)) {\n        const length = value.length;\n        let itemType: Type;\n\n        for (const item of value) {\n            const t = typeOf(item);\n            if (!itemType) {\n                itemType = t;\n            } else if (itemType === t) {\n                continue;\n            } else {\n                itemType = ValueType;\n                break;\n            }\n        }\n\n        return array(itemType || ValueType, length);\n    } else {\n        assert(typeof value === 'object');\n        return ObjectType;\n    }\n}\n\nexport function toString(value: Value): string {\n    const type = typeof value;\n    if (value === null) {\n        return '';\n    } else if (type === 'string' || type === 'number' || type === 'boolean') {\n        return String(value);\n    } else if (value instanceof Color || value instanceof Formatted || value instanceof ResolvedImage) {\n        return value.toString();\n    } else {\n        return JSON.stringify(value);\n    }\n}\n\nexport {Color, Collator};\n","import assert from 'assert';\nimport {isValue, typeOf, Color} from '../values';\nimport Formatted from '../types/formatted';\n\nimport type {Type} from '../types';\nimport type {Value}  from '../values';\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\n\nclass Literal implements Expression {\n    type: Type;\n    value: Value;\n\n    constructor(type: Type, value: Value) {\n        this.type = type;\n        this.value = value;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): void | Literal {\n        if (args.length !== 2)\n            return context.error(`'literal' expression requires exactly one argument, but found ${args.length - 1} instead.`);\n\n        if (!isValue(args[1]))\n            return context.error(`invalid value`);\n\n        const value = (args[1] as any);\n        let type = typeOf(value);\n\n        // special case: infer the item type if possible for zero-length arrays\n        const expected = context.expectedType;\n        if (\n            type.kind === 'array' &&\n            type.N === 0 &&\n            expected &&\n            expected.kind === 'array' &&\n            (typeof expected.N !== 'number' || expected.N === 0)\n        ) {\n            type = expected;\n        }\n\n        return new Literal(type, value);\n    }\n\n    evaluate(): Value {\n        return this.value;\n    }\n\n    eachChild() {}\n\n    outputDefined(): boolean {\n        return true;\n    }\n\n    serialize(): SerializedExpression {\n        if (this.type.kind === 'array' || this.type.kind === 'object') {\n            return [\"literal\", this.value];\n        } else if (this.value instanceof Color) {\n            // Constant-folding can generate Literal expressions that you\n            // couldn't actually generate with a \"literal\" expression,\n            // so we have to implement an equivalent serialization here\n            // @ts-expect-error - TS2769 - No overload matches this call.\n            return [\"rgba\"].concat(this.value.toRenderColor(null).toArray());\n        } else if (this.value instanceof Formatted) {\n            // Same as Color\n            return this.value.serialize();\n        } else {\n            assert(this.value === null ||\n                typeof this.value === 'string' ||\n                typeof this.value === 'number' ||\n                typeof this.value === 'boolean');\n            return this.value as any;\n        }\n    }\n}\n\nexport default Literal;\n","class RuntimeError {\n    name: string;\n    message: string;\n\n    constructor(message: string) {\n        this.name = 'ExpressionEvaluationError';\n        this.message = message;\n    }\n\n    toJSON(): string {\n        return this.message;\n    }\n}\n\nexport default RuntimeError;\n","import assert from 'assert';\nimport {\n    ObjectType,\n    ValueType,\n    StringType,\n    NumberType,\n    BooleanType,\n    checkSubtype,\n    toString,\n    array\n} from '../types';\nimport RuntimeError from '../runtime_error';\nimport {typeOf} from '../values';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\nconst types = {\n    string: StringType,\n    number: NumberType,\n    boolean: BooleanType,\n    object: ObjectType\n};\n\nclass Assertion implements Expression {\n    type: Type;\n    args: Array<Expression>;\n\n    constructor(type: Type, args: Array<Expression>) {\n        this.type = type;\n        this.args = args;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Expression | void {\n        if (args.length < 2)\n            return context.error(`Expected at least one argument.`);\n\n        let i = 1;\n        let type;\n\n        const name: string = (args[0] as any);\n        if (name === 'array') {\n            let itemType;\n            if (args.length > 2) {\n                const type = args[1];\n                if (typeof type !== 'string' || !(type in types) || type === 'object')\n                    return context.error('The item type argument of \"array\" must be one of string, number, boolean', 1);\n                itemType = types[type];\n                i++;\n            } else {\n                itemType = ValueType;\n            }\n\n            let N: number | null | undefined;\n            if (args.length > 3) {\n                if (args[2] !== null &&\n                    (typeof args[2] !== 'number' ||\n                        args[2] < 0 ||\n                        args[2] !== Math.floor(args[2]))\n                ) {\n                    return context.error('The length argument to \"array\" must be a positive integer literal', 2);\n                }\n                N = (args[2] as number);\n                i++;\n            }\n\n            type = array(itemType, N);\n        } else {\n            assert(types[name], name);\n            type = types[name];\n        }\n\n        const parsed = [];\n        for (; i < args.length; i++) {\n            const input = context.parse(args[i], i, ValueType);\n            if (!input) return null;\n            parsed.push(input);\n        }\n\n        return new Assertion(type, parsed);\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        for (let i = 0; i < this.args.length; i++) {\n            const value = this.args[i].evaluate(ctx);\n            const error = checkSubtype(this.type, typeOf(value));\n            if (!error) {\n                return value;\n            } else if (i === this.args.length - 1) {\n                throw new RuntimeError(`The expression ${JSON.stringify(this.args[i].serialize())} evaluated to ${toString(typeOf(value))} but was expected to be of type ${toString(this.type)}.`);\n            }\n        }\n\n        assert(false);\n        return null;\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        this.args.forEach(fn);\n    }\n\n    outputDefined(): boolean {\n        return this.args.every(arg => arg.outputDefined());\n    }\n\n    serialize(): SerializedExpression {\n        const type = this.type;\n        const serialized = [type.kind];\n        if (type.kind === 'array') {\n            const itemType = type.itemType;\n            if (itemType.kind === 'string' ||\n                itemType.kind === 'number' ||\n                itemType.kind === 'boolean') {\n                serialized.push(itemType.kind);\n                const N = type.N;\n                if (typeof N === 'number' || this.args.length > 1) {\n                    // @ts-expect-error - TS2345 - Argument of type 'number' is not assignable to parameter of type '\"string\" | \"number\" | \"boolean\" | \"object\" | \"error\" | \"color\" | \"value\" | \"null\" | \"collator\" | \"formatted\" | \"resolvedImage\" | \"array\"'.\n                    serialized.push(N);\n                }\n            }\n        }\n        // @ts-expect-error - TS2769 - No overload matches this call.\n        return serialized.concat(this.args.map(arg => arg.serialize()));\n    }\n}\n\nexport default Assertion;\n","import {\n    NumberType,\n    ValueType,\n    FormattedType,\n    array,\n    StringType,\n    ColorType,\n    ResolvedImageType,\n} from '../types';\nimport Formatted, {FormattedSection} from '../types/formatted';\nimport {toString, typeOf} from '../values';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type EvaluationContext from '../evaluation_context';\nimport type ParsingContext from '../parsing_context';\nimport type {Type} from '../types';\n\nexport type FormattedSectionExpression = {\n    // Content of a section may be Image expression or other\n    // type of expression that is coercable to 'string'.\n    content: Expression;\n    scale: Expression | null;\n    font: Expression | null;\n    textColor: Expression | null;\n};\n\nexport default class FormatExpression implements Expression {\n    type: Type;\n    sections: Array<FormattedSectionExpression>;\n\n    constructor(sections: Array<FormattedSectionExpression>) {\n        this.type = FormattedType;\n        this.sections = sections;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Expression | null | undefined {\n        if (args.length < 2) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`Expected at least one argument.`);\n        }\n\n        const firstArg = args[1];\n        if (!Array.isArray(firstArg) && typeof firstArg === 'object')  {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`First argument must be an image or text section.`);\n        }\n\n        const sections: Array<FormattedSectionExpression> = [];\n        let nextTokenMayBeObject = false;\n        for (let i = 1; i <= args.length - 1; ++i) {\n            const arg = (args[i] as any);\n\n            if (nextTokenMayBeObject && typeof arg === \"object\" && !Array.isArray(arg)) {\n                nextTokenMayBeObject = false;\n\n                let scale = null;\n                if (arg['font-scale']) {\n                    scale = context.parseObjectValue(arg['font-scale'], i, 'font-scale', NumberType);\n                    if (!scale) return null;\n                }\n\n                let font = null;\n                if (arg['text-font']) {\n                    font = context.parseObjectValue(arg['text-font'], i, 'text-font', array(StringType));\n                    if (!font) return null;\n                }\n\n                let textColor = null;\n                if (arg['text-color']) {\n                    textColor = context.parseObjectValue(arg['text-color'], i, 'text-color', ColorType);\n                    if (!textColor) return null;\n                }\n\n                const lastExpression = sections[sections.length - 1];\n                lastExpression.scale = scale;\n                lastExpression.font = font;\n                lastExpression.textColor = textColor;\n            } else {\n                const content = context.parse(args[i], i, ValueType);\n                if (!content) return null;\n\n                const kind = content.type.kind;\n                if (kind !== 'string' && kind !== 'value' && kind !== 'null' && kind !== 'resolvedImage')\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                    return context.error(`Formatted text type must be 'string', 'value', 'image' or 'null'.`);\n\n                nextTokenMayBeObject = true;\n                sections.push({content, scale: null, font: null, textColor: null});\n            }\n        }\n\n        return new FormatExpression(sections);\n    }\n\n    evaluate(ctx: EvaluationContext): Formatted {\n        const evaluateSection = (section: FormattedSectionExpression) => {\n            const evaluatedContent = section.content.evaluate(ctx);\n            if (typeOf(evaluatedContent) === ResolvedImageType) {\n                return new FormattedSection('', evaluatedContent, null, null, null);\n            }\n\n            return new FormattedSection(\n                    toString(evaluatedContent),\n                    null,\n                    section.scale ? section.scale.evaluate(ctx) : null,\n                    section.font ? section.font.evaluate(ctx).join(',') : null,\n                    section.textColor ? section.textColor.evaluate(ctx) : null\n            );\n        };\n\n        return new Formatted(this.sections.map(evaluateSection));\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        for (const section of this.sections) {\n            fn(section.content);\n            if (section.scale) {\n                fn(section.scale);\n            }\n            if (section.font) {\n                fn(section.font);\n            }\n            if (section.textColor) {\n                fn(section.textColor);\n            }\n        }\n    }\n\n    outputDefined(): boolean {\n        // Technically the combinatoric set of all children\n        // Usually, this.text will be undefined anyway\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        const serialized = [\"format\"];\n        for (const section of this.sections) {\n            // @ts-expect-error - TS2345 - Argument of type 'SerializedExpression' is not assignable to parameter of type 'string'.\n            serialized.push(section.content.serialize());\n            const options: Record<string, any> = {};\n            if (section.scale) {\n                options['font-scale'] = section.scale.serialize();\n            }\n            if (section.font) {\n                options['text-font'] = section.font.serialize();\n            }\n            if (section.textColor) {\n                options['text-color'] = section.textColor.serialize();\n            }\n            // @ts-expect-error - TS2345 - Argument of type 'Record<string, any>' is not assignable to parameter of type 'string'.\n            serialized.push(options);\n        }\n        return serialized;\n    }\n}\n","import {ResolvedImageType, StringType} from '../types';\nimport ResolvedImage from '../types/resolved_image';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type EvaluationContext from '../evaluation_context';\nimport type ParsingContext from '../parsing_context';\nimport type {Type} from '../types';\n\nexport default class ImageExpression implements Expression {\n    type: Type;\n    inputPrimary: Expression;\n    inputSecondary: Expression | null | undefined;\n\n    constructor(inputPrimary: Expression, inputSecondary?: Expression | null) {\n        this.type = ResolvedImageType;\n        this.inputPrimary = inputPrimary;\n        this.inputSecondary = inputSecondary;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Expression | null | undefined {\n        if (args.length < 2) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`Expected two or more arguments.`);\n        }\n\n        const namePrimary = context.parse(args[1], 1, StringType);\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n        if (!namePrimary) return context.error(`No image name provided.`);\n\n        if (args.length === 2) {\n            return new ImageExpression(namePrimary);\n        }\n\n        const nameSecondary = context.parse(args[2], 1, StringType);\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n        if (!nameSecondary) return context.error(`Secondary image variant is not a string.`);\n\n        return new ImageExpression(namePrimary, nameSecondary);\n    }\n\n    evaluate(ctx: EvaluationContext): null | ResolvedImage {\n        const value = ResolvedImage.fromString(this.inputPrimary.evaluate(ctx), this.inputSecondary ? this.inputSecondary.evaluate(ctx) : undefined);\n        if (value && ctx.availableImages) {\n            value.available = ctx.availableImages.indexOf(value.namePrimary) > -1;\n            // If there's a secondary variant, only mark it available if both are present\n            if (value.nameSecondary && value.available && ctx.availableImages) {\n                value.available = ctx.availableImages.indexOf(value.nameSecondary) > -1;\n            }\n        }\n\n        return value;\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.inputPrimary);\n        if (this.inputSecondary) {\n            fn(this.inputSecondary);\n        }\n    }\n\n    outputDefined(): boolean {\n        // The output of image is determined by the list of available images in the evaluation context\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        if (this.inputSecondary) {\n            return [\"image\", this.inputPrimary.serialize(), this.inputSecondary.serialize()];\n        }\n        return [\"image\", this.inputPrimary.serialize()];\n    }\n}\n","export default function getType(val: unknown): string {\n    if (val instanceof Number) {\n        return 'number';\n    } else if (val instanceof String) {\n        return 'string';\n    } else if (val instanceof Boolean) {\n        return 'boolean';\n    } else if (Array.isArray(val)) {\n        return 'array';\n    } else if (val === null) {\n        return 'null';\n    } else {\n        return typeof val;\n    }\n}\n","import assert from 'assert';\nimport {BooleanType, ColorType, NumberType, StringType, ValueType, array, NullType} from '../types';\nimport {Color, isValue, toString as valueToString, typeOf, validateRGBA} from '../values';\nimport RuntimeError from '../runtime_error';\nimport Formatted from '../types/formatted';\nimport FormatExpression from '../definitions/format';\nimport ImageExpression from '../definitions/image';\nimport ResolvedImage from '../types/resolved_image';\nimport getType from '../../util/get_type';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type, ArrayType} from '../types';\n\nconst types = {\n    'to-boolean': BooleanType,\n    'to-color': ColorType,\n    'to-number': NumberType,\n    'to-string': StringType\n};\n\n/**\n * Special form for error-coalescing coercion expressions \"to-number\",\n * \"to-color\".  Since these coercions can fail at runtime, they accept multiple\n * arguments, only evaluating one at a time until one succeeds.\n *\n * @private\n */\nclass Coercion implements Expression {\n    type: Type | ArrayType;\n    args: Array<Expression>;\n\n    constructor(type: Type, args: Array<Expression>) {\n        this.type = type;\n        this.args = args;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Expression | null | undefined {\n        if (args.length < 2)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`Expected at least one argument.`);\n\n        const name: string = (args[0] as any);\n        const parsed = [];\n        let type: Type | ArrayType = NullType;\n        if (name === 'to-array') {\n            if (!Array.isArray(args[1])) {\n                return null;\n            }\n            const arrayLength = args[1].length;\n            if (context.expectedType) {\n                if (context.expectedType.kind === 'array') {\n                    type = array(context.expectedType.itemType, arrayLength);\n                } else {\n                    // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                    return context.error(`Expected ${context.expectedType.kind} but found array.`);\n                }\n            } else if (arrayLength > 0 && isValue(args[1][0])) {\n                const value = (args[1][0]);\n                type = array(typeOf(value), arrayLength);\n            } else {\n                return null;\n            }\n            for (let i = 0; i < arrayLength; i++) {\n                const member = args[1][i];\n                let parsedMember;\n                if (getType(member) === 'array') {\n                    parsedMember = context.parse(member, undefined, type.itemType);\n                } else {\n                    const memberType = getType(member);\n                    if (memberType !== type.itemType.kind) {\n                        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                        return context.error(`Expected ${type.itemType.kind} but found ${memberType}.`);\n                    }\n                    parsedMember = context.registry['literal'].parse(['literal', member === undefined ? null : member], context);\n                }\n                if (!parsedMember) return null;\n                parsed.push(parsedMember);\n            }\n        } else {\n            assert(types[name], name);\n\n            if ((name === 'to-boolean' || name === 'to-string') && args.length !== 2)\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                return context.error(`Expected one argument.`);\n\n            type = types[name];\n\n            for (let i = 1; i < args.length; i++) {\n                const input = context.parse(args[i], i, ValueType);\n                if (!input) return null;\n                parsed.push(input);\n            }\n        }\n\n        return new Coercion(type, parsed);\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        if (this.type.kind === 'boolean') {\n            return Boolean(this.args[0].evaluate(ctx));\n        } else if (this.type.kind === 'color') {\n            let input;\n            let error;\n            for (const arg of this.args) {\n                input = arg.evaluate(ctx);\n                error = null;\n                if (input instanceof Color) {\n                    return input;\n                } else if (typeof input === 'string') {\n                    const c = ctx.parseColor(input);\n                    if (c) return c;\n                } else if (Array.isArray(input)) {\n                    if (input.length < 3 || input.length > 4) {\n                        error = `Invalid rbga value ${JSON.stringify(input)}: expected an array containing either three or four numeric values.`;\n                    } else {\n                        error = validateRGBA(input[0], input[1], input[2], input[3]);\n                    }\n                    if (!error) {\n                        return new Color((input[0]) / 255, (input[1]) / 255, (input[2]) / 255, (input[3]));\n                    }\n                }\n            }\n            throw new RuntimeError(error || `Could not parse color from value '${typeof input === 'string' ? input : String(JSON.stringify(input))}'`);\n        } else if (this.type.kind === 'number') {\n            let value = null;\n            for (const arg of this.args) {\n                value = arg.evaluate(ctx);\n                if (value === null) return 0;\n                const num = Number(value);\n                if (isNaN(num)) continue;\n                return num;\n            }\n            throw new RuntimeError(`Could not convert ${JSON.stringify(value)} to number.`);\n        } else if (this.type.kind === 'formatted') {\n            // There is no explicit 'to-formatted' but this coercion can be implicitly\n            // created by properties that expect the 'formatted' type.\n            return Formatted.fromString(valueToString(this.args[0].evaluate(ctx)));\n        } else if (this.type.kind === 'resolvedImage') {\n            return ResolvedImage.fromString(valueToString(this.args[0].evaluate(ctx)));\n        } else if (this.type.kind === 'array') {\n            return this.args.map(arg => { return arg.evaluate(ctx); });\n        } else {\n            return valueToString(this.args[0].evaluate(ctx));\n        }\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        this.args.forEach(fn);\n    }\n\n    outputDefined(): boolean {\n        return this.args.every(arg => arg.outputDefined());\n    }\n\n    serialize(): SerializedExpression {\n        if (this.type.kind === 'formatted') {\n            return new FormatExpression([{content: this.args[0], scale: null, font: null, textColor: null}]).serialize();\n        }\n\n        if (this.type.kind === 'resolvedImage') {\n            return new ImageExpression(this.args[0]).serialize();\n        }\n\n        const serialized: Array<unknown> = this.type.kind === 'array' ? [] : [`to-${this.type.kind}`];\n        this.eachChild(child => { serialized.push(child.serialize()); });\n        return serialized;\n    }\n}\n\nexport default Coercion;\n","import {Color} from './values';\n\nimport type Point from '@mapbox/point-geometry';\nimport type {FormattedSection} from './types/formatted';\nimport type {GlobalProperties, Feature, FeatureState} from './index';\nimport type {CanonicalTileID} from '../types/tile_id';\nimport type {FeatureDistanceData} from '../feature_filter/index';\nimport type {ConfigOptions, ConfigOptionValue} from '../types/config_options';\n\nconst geometryTypes = ['Unknown', 'Point', 'LineString', 'Polygon'];\n\nclass EvaluationContext {\n    globals: GlobalProperties;\n    feature: Feature | null | undefined;\n    featureState: FeatureState | null | undefined;\n    formattedSection: FormattedSection | null | undefined;\n    availableImages: Array<string> | null | undefined;\n    canonical: null | CanonicalTileID;\n    featureTileCoord: Point | null | undefined;\n    featureDistanceData: FeatureDistanceData | null | undefined;\n    scope: string | null | undefined;\n    options: ConfigOptions | null | undefined;\n\n    _parseColorCache: {\n        [_: string]: Color | null | undefined;\n    };\n\n    constructor(scope?: string | null, options?: ConfigOptions | null) {\n        this.globals = (null as any);\n        this.feature = null;\n        this.featureState = null;\n        this.formattedSection = null;\n        this._parseColorCache = {};\n        this.availableImages = null;\n        this.canonical = null;\n        this.featureTileCoord = null;\n        this.featureDistanceData = null;\n        this.scope = scope;\n        this.options = options;\n    }\n\n    id(): number | null {\n        return this.feature && this.feature.id !== undefined ? this.feature.id : null;\n    }\n\n    geometryType(): null | string {\n        return this.feature ? typeof this.feature.type === 'number' ? geometryTypes[this.feature.type] : this.feature.type : null;\n    }\n\n    geometry(): Array<Array<Point>> | null | undefined {\n        return this.feature && 'geometry' in this.feature ? this.feature.geometry : null;\n    }\n\n    canonicalID(): null | CanonicalTileID {\n        return this.canonical;\n    }\n\n    properties(): {\n        [key: string]: any;\n        } {\n        return (this.feature && this.feature.properties) || {};\n    }\n\n    measureLight(_: string): number {\n        return this.globals.brightness || 0;\n    }\n\n    distanceFromCenter(): number {\n        if (this.featureTileCoord && this.featureDistanceData) {\n\n            const c = this.featureDistanceData.center;\n            const scale = this.featureDistanceData.scale;\n            const {x, y} = this.featureTileCoord;\n\n            // Calculate the distance vector `d` (left handed)\n            const dX = x * scale - c[0];\n            const dY = y * scale - c[1];\n\n            // The bearing vector `b` (left handed)\n            const bX = this.featureDistanceData.bearing[0];\n            const bY = this.featureDistanceData.bearing[1];\n\n            // Distance is calculated as `dot(d, v)`\n            const dist = (bX * dX + bY * dY);\n            return dist;\n        }\n\n        return 0;\n    }\n\n    parseColor(input: string): Color | null | undefined {\n        let cached = this._parseColorCache[input];\n        if (!cached) {\n            // @ts-expect-error - TS2322 - Type 'void | Color' is not assignable to type 'Color'. | TS2322 - Type 'void | Color' is not assignable to type 'Color'.\n            cached = this._parseColorCache[input] = Color.parse(input);\n        }\n        return cached;\n    }\n\n    getConfig(id: string): ConfigOptionValue | null | undefined {\n        return this.options ? this.options.get(id) : null;\n    }\n}\n\nexport default EvaluationContext;\n","import {toString} from './types';\nimport ParsingContext from './parsing_context';\nimport assert from 'assert';\n\nimport type EvaluationContext from './evaluation_context';\nimport type {Expression, ExpressionRegistry} from './expression';\nimport type {Type} from './types';\nimport type {Value} from './values';\n\nexport type Varargs = {\n    type: Type;\n};\ntype Signature = Array<Type> | Varargs;\ntype Evaluate = (arg1: EvaluationContext, arg2: Array<Expression>) => Value;\ntype Definition = [Type, Signature, Evaluate] | {\n    type: Type;\n    overloads: Array<[Signature, Evaluate]>;\n};\n\nclass CompoundExpression implements Expression {\n    name: string;\n    type: Type;\n    _evaluate: Evaluate;\n    args: Array<Expression>;\n    _overloadIndex: number;\n\n    static definitions: {\n        [_: string]: Definition;\n    };\n\n    constructor(name: string, type: Type, evaluate: Evaluate, args: Array<Expression>, overloadIndex: number) {\n        this.name = name;\n        this.type = type;\n        this._evaluate = evaluate;\n        this.args = args;\n        this._overloadIndex = overloadIndex;\n    }\n\n    evaluate(ctx: EvaluationContext): Value {\n        if (!this._evaluate) { // restore evaluate function after transfer between threads\n            const definition = CompoundExpression.definitions[this.name];\n            this._evaluate = Array.isArray(definition) ? definition[2] : definition.overloads[this._overloadIndex][1];\n        }\n        return this._evaluate(ctx, this.args);\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        this.args.forEach(fn);\n    }\n\n    outputDefined(): boolean {\n        return false;\n    }\n\n    serialize(): Array<unknown> {\n        // @ts-expect-error - TS2769 - No overload matches this call.\n        return [this.name].concat(this.args.map(arg => arg.serialize()));\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Expression | null | undefined {\n        const op: string = (args[0] as any);\n        const definition = CompoundExpression.definitions[op];\n        if (!definition) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`Unknown expression \"${op}\". If you wanted a literal array, use [\"literal\", [...]].`, 0);\n        }\n\n        // Now check argument types against each signature\n        const type = Array.isArray(definition) ?\n            definition[0] : definition.type;\n\n        const availableOverloads = Array.isArray(definition) ?\n            [[definition[1], definition[2]]] :\n            definition.overloads;\n\n        const overloadParams = [];\n\n        let signatureContext: ParsingContext = (null as any);\n\n        let overloadIndex = -1;\n\n        for (const [params, evaluate] of availableOverloads) {\n            if (Array.isArray(params) && params.length !== args.length - 1) continue; // param count doesn't match\n\n            overloadParams.push(params);\n            overloadIndex++;\n\n            // Use a fresh context for each attempted signature so that, if\n            // we eventually succeed, we haven't polluted `context.errors`.\n            signatureContext = new ParsingContext(context.registry, context.path, null, context.scope, undefined, context._scope, context.options);\n\n            // First parse all the args, potentially coercing to the\n            // types expected by this overload.\n            const parsedArgs: Array<Expression> = [];\n            let argParseFailed = false;\n            for (let i = 1; i < args.length; i++) {\n                const arg = args[i];\n                const expectedType = Array.isArray(params) ?\n                    params[i - 1] :\n                // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'Varargs | Evaluate'.\n                    params.type;\n\n                const parsed = signatureContext.parse(arg, 1 + parsedArgs.length, expectedType);\n                if (!parsed) {\n                    argParseFailed = true;\n                    break;\n                }\n                parsedArgs.push(parsed);\n            }\n            if (argParseFailed) {\n                // Couldn't coerce args of this overload to expected type, move\n                // on to next one.\n                continue;\n            }\n\n            if (Array.isArray(params)) {\n                if (params.length !== parsedArgs.length) {\n                    signatureContext.error(`Expected ${params.length} arguments, but found ${parsedArgs.length} instead.`);\n                    continue;\n                }\n            }\n\n            for (let i = 0; i < parsedArgs.length; i++) {\n                // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'Varargs | Evaluate'.\n                const expected = Array.isArray(params) ? params[i] : params.type;\n                const arg = parsedArgs[i];\n                signatureContext.concat(i + 1).checkSubtype(expected, arg.type);\n            }\n\n            if (signatureContext.errors.length === 0) {\n                // @ts-expect-error - TS2345 - Argument of type 'Signature | Evaluate' is not assignable to parameter of type 'Evaluate'.\n                return new CompoundExpression(op, type, evaluate, parsedArgs, overloadIndex);\n            }\n        }\n\n        assert(!signatureContext || signatureContext.errors.length > 0);\n\n        if (overloadParams.length === 1) {\n            context.errors.push(...signatureContext.errors);\n        } else {\n            const expected = overloadParams.length ? overloadParams : availableOverloads.map(([params]) => params);\n            const signatures = expected.map(stringifySignature).join(' | ');\n\n            const actualTypes = [];\n            // For error message, re-parse arguments without trying to\n            // apply any coercions\n            for (let i = 1; i < args.length; i++) {\n                const parsed = context.parse(args[i], 1 + actualTypes.length);\n                if (!parsed) return null;\n                actualTypes.push(toString(parsed.type));\n            }\n            context.error(`Expected arguments of type ${signatures}, but found (${actualTypes.join(', ')}) instead.`);\n        }\n\n        return null;\n    }\n\n    static register(\n        registry: ExpressionRegistry,\n        definitions: {\n            [_: string]: Definition;\n        }\n    ) {\n        assert(!CompoundExpression.definitions);\n        CompoundExpression.definitions = definitions;\n        for (const name in definitions) {\n            registry[name] = CompoundExpression;\n        }\n    }\n}\n\nfunction stringifySignature(signature: Signature): string {\n    if (Array.isArray(signature)) {\n        return `(${signature.map(toString).join(', ')})`;\n    } else {\n        return `(${toString(signature.type)}...)`;\n    }\n}\n\nexport default CompoundExpression;\n","import {StringType, BooleanType, CollatorType} from '../types';\nimport Collator from '../types/collator';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type EvaluationContext from '../evaluation_context';\nimport type ParsingContext from '../parsing_context';\nimport type {Type} from '../types';\n\nexport default class CollatorExpression implements Expression {\n    type: Type;\n    caseSensitive: Expression;\n    diacriticSensitive: Expression;\n    locale: Expression | null;\n\n    constructor(caseSensitive: Expression, diacriticSensitive: Expression, locale: Expression | null) {\n        this.type = CollatorType;\n        this.locale = locale;\n        this.caseSensitive = caseSensitive;\n        this.diacriticSensitive = diacriticSensitive;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Expression | null | undefined {\n        if (args.length !== 2)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`Expected one argument.`);\n\n        const options = (args[1] as any);\n        if (typeof options !== \"object\" || Array.isArray(options))\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`Collator options argument must be an object.`);\n\n        const caseSensitive = options['case-sensitive'] === undefined ?\n            context.parse(false, 1, BooleanType) :\n            context.parseObjectValue(options['case-sensitive'], 1, 'case-sensitive', BooleanType);\n        if (!caseSensitive) return null;\n\n        const diacriticSensitive = options['diacritic-sensitive'] === undefined ?\n            context.parse(false, 1, BooleanType) :\n            context.parseObjectValue(options['diacritic-sensitive'], 1, 'diacritic-sensitive', BooleanType);\n        if (!diacriticSensitive) return null;\n\n        let locale = null;\n        if (options['locale']) {\n            locale = context.parseObjectValue(options['locale'], 1, 'locale', StringType);\n            if (!locale) return null;\n        }\n\n        return new CollatorExpression(caseSensitive, diacriticSensitive, locale);\n    }\n\n    evaluate(ctx: EvaluationContext): Collator {\n        return new Collator(this.caseSensitive.evaluate(ctx), this.diacriticSensitive.evaluate(ctx), this.locale ? this.locale.evaluate(ctx) : null);\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.caseSensitive);\n        fn(this.diacriticSensitive);\n        if (this.locale) {\n            fn(this.locale);\n        }\n    }\n\n    outputDefined(): boolean {\n        // Technically the set of possible outputs is the combinatoric set of Collators produced\n        // by all possible outputs of locale/caseSensitive/diacriticSensitive\n        // But for the primary use of Collators in comparison operators, we ignore the Collator's\n        // possible outputs anyway, so we can get away with leaving this false for now.\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        const options: Record<string, any> = {};\n        options['case-sensitive'] = this.caseSensitive.serialize();\n        options['diacritic-sensitive'] = this.diacriticSensitive.serialize();\n        if (this.locale) {\n            options['locale'] = this.locale.serialize();\n        }\n        return [\"collator\", options];\n    }\n}\n","import quickselect from 'quickselect';\n\nimport type Point from '@mapbox/point-geometry';\n\n// minX, minY, maxX, maxY\nexport type BBox = [number, number, number, number];\n\n/**\n * Returns the signed area for the polygon ring.  Postive areas are exterior rings and\n * have a clockwise winding.  Negative areas are interior rings and have a counter clockwise\n * ordering.\n */\nfunction calculateSignedArea(ring: Array<Point>): number {\n    let sum = 0;\n    for (let i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {\n        p1 = ring[i];\n        p2 = ring[j];\n        sum += (p2.x - p1.x) * (p1.y + p2.y);\n    }\n    return sum;\n}\n\nfunction compareAreas(a: {\n    area: number;\n}, b: {\n    area: number;\n}) {\n    return b.area - a.area;\n}\n\n// classifies an array of rings into polygons with outer rings and holes\nexport function classifyRings(rings: Array<Array<Point>>, maxRings: number): Array<Array<Array<Point>>> {\n    const len = rings.length;\n\n    if (len <= 1) return [rings];\n\n    const polygons = [];\n    let polygon,\n        ccw;\n\n    for (let i = 0; i < len; i++) {\n        const area = calculateSignedArea(rings[i]);\n        if (area === 0) continue;\n\n        (rings[i] as any).area = Math.abs(area);\n\n        if (ccw === undefined) ccw = area < 0;\n\n        if (ccw === area < 0) {\n            if (polygon) polygons.push(polygon);\n            polygon = [rings[i]];\n\n        } else {\n            (polygon).push(rings[i]);\n        }\n    }\n    if (polygon) polygons.push(polygon);\n\n    // Earcut performance degrades with the # of rings in a polygon. For this\n    // reason, we limit strip out all but the `maxRings` largest rings.\n    if (maxRings > 1) {\n        for (let j = 0; j < polygons.length; j++) {\n            if (polygons[j].length <= maxRings) continue;\n            quickselect(polygons[j], maxRings, 1, polygons[j].length - 1, compareAreas);\n            polygons[j] = polygons[j].slice(0, maxRings);\n        }\n    }\n\n    return polygons;\n}\n\nexport function updateBBox(bbox: BBox, coord: GeoJSON.Position) {\n    bbox[0] = Math.min(bbox[0], coord[0]);\n    bbox[1] = Math.min(bbox[1], coord[1]);\n    bbox[2] = Math.max(bbox[2], coord[0]);\n    bbox[3] = Math.max(bbox[3], coord[1]);\n}\n\nexport function boxWithinBox(bbox1: BBox, bbox2: BBox): boolean {\n    if (bbox1[0] <= bbox2[0]) return false;\n    if (bbox1[2] >= bbox2[2]) return false;\n    if (bbox1[1] <= bbox2[1]) return false;\n    if (bbox1[3] >= bbox2[3]) return false;\n    return true;\n}\n\nfunction onBoundary(p: GeoJSON.Position, p1: GeoJSON.Position, p2: GeoJSON.Position) {\n    const x1 = p[0] - p1[0];\n    const y1 = p[1] - p1[1];\n    const x2 = p[0] - p2[0];\n    const y2 = p[1] - p2[1];\n    return (x1 * y2 - x2 * y1 === 0) && (x1 * x2 <= 0) && (y1 * y2 <= 0);\n}\n\nfunction rayIntersect(p: GeoJSON.Position, p1: GeoJSON.Position, p2: GeoJSON.Position) {\n    return ((p1[1] > p[1]) !== (p2[1] > p[1])) && (p[0] < (p2[0] - p1[0]) * (p[1] - p1[1]) / (p2[1] - p1[1]) + p1[0]);\n}\n\n// ray casting algorithm for detecting if point is in polygon\nexport function pointWithinPolygon(\n    point: GeoJSON.Position,\n    rings: Array<Array<GeoJSON.Position>>,\n    trueOnBoundary: boolean = false,\n): boolean {\n    let inside = false;\n    for (let i = 0, len = rings.length; i < len; i++) {\n        const ring = rings[i];\n        for (let j = 0, len2 = ring.length, k = len2 - 1; j < len2; k = j++) {\n            const q1 = ring[k];\n            const q2 = ring[j];\n            if (onBoundary(point, q1, q2)) return trueOnBoundary;\n            if (rayIntersect(point, q1, q2)) inside = !inside;\n        }\n    }\n    return inside;\n}\n\nfunction perp(v1: GeoJSON.Position, v2: GeoJSON.Position) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\n\n// check if p1 and p2 are in different sides of line segment q1->q2\nfunction twoSided(p1: GeoJSON.Position, p2: GeoJSON.Position, q1: GeoJSON.Position, q2: GeoJSON.Position) {\n    // q1->p1 (x1, y1), q1->p2 (x2, y2), q1->q2 (x3, y3)\n    const x1 = p1[0] - q1[0];\n    const y1 = p1[1] - q1[1];\n    const x2 = p2[0] - q1[0];\n    const y2 = p2[1] - q1[1];\n    const x3 = q2[0] - q1[0];\n    const y3 = q2[1] - q1[1];\n    const det1 = x1 * y3 - x3 * y1;\n    const det2 = x2 * y3 - x3 * y2;\n    if ((det1 > 0 && det2 < 0) || (det1 < 0 && det2 > 0)) return true;\n    return false;\n}\n// a, b are end points for line segment1, c and d are end points for line segment2\nexport function segmentIntersectSegment(\n    a: GeoJSON.Position,\n    b: GeoJSON.Position,\n    c: GeoJSON.Position,\n    d: GeoJSON.Position,\n): boolean {\n    // check if two segments are parallel or not\n    // precondition is end point a, b is inside polygon, if line a->b is\n    // parallel to polygon edge c->d, then a->b won't intersect with c->d\n    const vectorP = [b[0] - a[0], b[1] - a[1]];\n    const vectorQ = [d[0] - c[0], d[1] - c[1]];\n    if (perp(vectorQ, vectorP) === 0) return false;\n\n    // If lines are intersecting with each other, the relative location should be:\n    // a and b lie in different sides of segment c->d\n    // c and d lie in different sides of segment a->b\n    if (twoSided(a, b, c, d) && twoSided(c, d, a, b)) return true;\n    return false;\n}\n\n","import {isValue} from '../values';\nimport {BooleanType} from '../types';\nimport {updateBBox, boxWithinBox, pointWithinPolygon, segmentIntersectSegment} from '../../util/geometry_util';\n\nimport type {Type} from '../types';\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type Point from '@mapbox/point-geometry';\nimport type {CanonicalTileID} from '../../types/tile_id';\nimport type {BBox} from '../../util/geometry_util';\n\ntype GeoJSONPolygons = GeoJSON.Polygon | GeoJSON.MultiPolygon;\n\nconst EXTENT = 8192;\n\nfunction mercatorXfromLng(lng: number) {\n    return (180 + lng) / 360;\n}\n\nfunction mercatorYfromLat(lat: number) {\n    return (180 - (180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360)))) / 360;\n}\n\nfunction getTileCoordinates(p: GeoJSON.Position, canonical: CanonicalTileID) {\n    const x = mercatorXfromLng(p[0]);\n    const y = mercatorYfromLat(p[1]);\n    const tilesAtZoom = Math.pow(2, canonical.z);\n    return [Math.round(x * tilesAtZoom * EXTENT), Math.round(y * tilesAtZoom * EXTENT)];\n}\n\nfunction pointWithinPolygons(point: GeoJSON.Position, polygons: Array<Array<Array<GeoJSON.Position>>>) {\n    for (let i = 0; i < polygons.length; i++) {\n        if (pointWithinPolygon(point, polygons[i])) return true;\n    }\n    return false;\n}\n\nfunction lineIntersectPolygon(p1: GeoJSON.Position, p2: GeoJSON.Position, polygon: Array<Array<GeoJSON.Position>>) {\n    for (const ring of polygon) {\n        // loop through every edge of the ring\n        for (let j = 0, len = ring.length, k = len - 1; j < len; k = j++) {\n            const q1 = ring[k];\n            const q2 = ring[j];\n            if (segmentIntersectSegment(p1, p2, q1, q2)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction lineStringWithinPolygon(line: Array<GeoJSON.Position>, polygon: Array<Array<GeoJSON.Position>>) {\n    // First, check if geometry points of line segments are all inside polygon\n    for (let i = 0; i < line.length; ++i) {\n        if (!pointWithinPolygon(line[i], polygon)) {\n            return false;\n        }\n    }\n\n    // Second, check if there is line segment intersecting polygon edge\n    for (let i = 0; i < line.length - 1; ++i) {\n        if (lineIntersectPolygon(line[i], line[i + 1], polygon)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction lineStringWithinPolygons(line: Array<GeoJSON.Position>, polygons: Array<Array<Array<GeoJSON.Position>>>) {\n    for (let i = 0; i < polygons.length; i++) {\n        if (lineStringWithinPolygon(line, polygons[i])) return true;\n    }\n    return false;\n}\n\nfunction getTilePolygon(coordinates: Array<Array<GeoJSON.Position>>, bbox: BBox, canonical: CanonicalTileID) {\n    const polygon = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        const ring = [];\n        for (let j = 0; j < coordinates[i].length; j++) {\n            const coord = getTileCoordinates(coordinates[i][j], canonical);\n            updateBBox(bbox, coord);\n            ring.push(coord);\n        }\n        polygon.push(ring);\n    }\n    return polygon;\n}\n\nfunction getTilePolygons(coordinates: Array<Array<Array<GeoJSON.Position>>>, bbox: BBox, canonical: CanonicalTileID) {\n    const polygons = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        const polygon = getTilePolygon(coordinates[i], bbox, canonical);\n        polygons.push(polygon);\n    }\n    return polygons;\n}\n\nfunction updatePoint(p: GeoJSON.Position, bbox: BBox, polyBBox: Array<number>, worldSize: number) {\n    if (p[0] < polyBBox[0] || p[0] > polyBBox[2]) {\n        const halfWorldSize = worldSize * 0.5;\n        let shift = (p[0] - polyBBox[0] > halfWorldSize) ? -worldSize : (polyBBox[0] - p[0] > halfWorldSize) ? worldSize : 0;\n        if (shift === 0) {\n            shift = (p[0] - polyBBox[2] > halfWorldSize) ? -worldSize : (polyBBox[2] - p[0] > halfWorldSize) ? worldSize : 0;\n        }\n        p[0] += shift;\n    }\n    updateBBox(bbox, p);\n}\n\nfunction resetBBox(bbox: BBox) {\n    bbox[0] = bbox[1] = Infinity;\n    bbox[2] = bbox[3] = -Infinity;\n}\n\nfunction getTilePoints(geometry: Array<Array<Point>> | null | undefined, pointBBox: BBox, polyBBox: Array<number>, canonical: CanonicalTileID) {\n    const worldSize = Math.pow(2, canonical.z) * EXTENT;\n    const shifts = [canonical.x * EXTENT, canonical.y * EXTENT];\n    const tilePoints = [];\n    if (!geometry) return tilePoints;\n    for (const points of geometry) {\n        for (const point of points) {\n            const p = [point.x + shifts[0], point.y + shifts[1]];\n            updatePoint(p, pointBBox, polyBBox, worldSize);\n            tilePoints.push(p);\n        }\n    }\n    return tilePoints;\n}\n\nfunction getTileLines(geometry: Array<Array<Point>> | null | undefined, lineBBox: BBox, polyBBox: Array<number>, canonical: CanonicalTileID) {\n    const worldSize = Math.pow(2, canonical.z) * EXTENT;\n    const shifts = [canonical.x * EXTENT, canonical.y * EXTENT];\n    const tileLines: Array<Array<GeoJSON.Position>> = [];\n    if (!geometry) return tileLines;\n    for (const line of geometry) {\n        const tileLine = [];\n        for (const point of line) {\n            const p: GeoJSON.Position = [point.x + shifts[0], point.y + shifts[1]];\n            updateBBox(lineBBox, p);\n            tileLine.push(p);\n        }\n        tileLines.push(tileLine);\n    }\n    if (lineBBox[2] - lineBBox[0] <= worldSize / 2) {\n        resetBBox(lineBBox);\n        for (const line of tileLines) {\n            for (const p of line) {\n                updatePoint(p, lineBBox, polyBBox, worldSize);\n            }\n        }\n    }\n    return tileLines;\n}\n\nfunction pointsWithinPolygons(ctx: EvaluationContext, polygonGeometry: GeoJSONPolygons) {\n    const pointBBox: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n    const polyBBox: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n\n    const canonical = ctx.canonicalID();\n    if (!canonical) {\n        return false;\n    }\n\n    if (polygonGeometry.type === 'Polygon') {\n        const tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);\n        const tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);\n        if (!boxWithinBox(pointBBox, polyBBox)) return false;\n\n        for (const point of tilePoints) {\n            if (!pointWithinPolygon(point, tilePolygon)) return false;\n        }\n    }\n    if (polygonGeometry.type === 'MultiPolygon') {\n        const tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);\n        const tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);\n        if (!boxWithinBox(pointBBox, polyBBox)) return false;\n\n        for (const point of tilePoints) {\n            if (!pointWithinPolygons(point, tilePolygons)) return false;\n        }\n    }\n\n    return true;\n}\n\nfunction linesWithinPolygons(ctx: EvaluationContext, polygonGeometry: GeoJSONPolygons) {\n    const lineBBox: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n    const polyBBox: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n\n    const canonical = ctx.canonicalID();\n    if (!canonical) {\n        return false;\n    }\n\n    if (polygonGeometry.type === 'Polygon') {\n        const tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);\n        const tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);\n        if (!boxWithinBox(lineBBox, polyBBox)) return false;\n\n        for (const line of tileLines) {\n            if (!lineStringWithinPolygon(line, tilePolygon)) return false;\n        }\n    }\n    if (polygonGeometry.type === 'MultiPolygon') {\n        const tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);\n        const tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);\n        if (!boxWithinBox(lineBBox, polyBBox)) return false;\n\n        for (const line of tileLines) {\n            if (!lineStringWithinPolygons(line, tilePolygons)) return false;\n        }\n    }\n    return true;\n}\n\nclass Within implements Expression {\n    type: Type;\n    geojson: GeoJSON.GeoJSON;\n    geometries: GeoJSONPolygons;\n\n    constructor(geojson: GeoJSON.GeoJSON, geometries: GeoJSONPolygons) {\n        this.type = BooleanType;\n        this.geojson = geojson;\n        this.geometries = geometries;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Within | void {\n        if (args.length !== 2)\n            return context.error(`'within' expression requires exactly one argument, but found ${args.length - 1} instead.`);\n        if (isValue(args[1])) {\n            const geojson = (args[1] as any);\n            if (geojson.type === 'FeatureCollection') {\n                for (let i = 0; i < geojson.features.length; ++i) {\n                    const type = geojson.features[i].geometry.type;\n                    if (type === 'Polygon' || type === 'MultiPolygon') {\n                        return new Within(geojson, geojson.features[i].geometry);\n                    }\n                }\n            } else if (geojson.type === 'Feature') {\n                const type = geojson.geometry.type;\n                if (type === 'Polygon' || type === 'MultiPolygon') {\n                    return new Within(geojson, geojson.geometry);\n                }\n            } else if (geojson.type === 'Polygon' || geojson.type === 'MultiPolygon') {\n                return new Within(geojson, geojson);\n            }\n        }\n        return context.error(`'within' expression requires valid geojson object that contains polygon geometry type.`);\n    }\n\n    evaluate(ctx: EvaluationContext): boolean {\n        if (ctx.geometry() != null && ctx.canonicalID() != null) {\n            if (ctx.geometryType() === 'Point') {\n                return pointsWithinPolygons(ctx, this.geometries);\n            } else if (ctx.geometryType() === 'LineString') {\n                return linesWithinPolygons(ctx, this.geometries);\n            }\n        }\n        return false;\n    }\n\n    eachChild() {}\n\n    outputDefined(): boolean {\n        return true;\n    }\n\n    serialize(): SerializedExpression {\n        return [\"within\", this.geojson];\n    }\n\n}\n\nexport default Within;\n","\nconst factors = {\n    kilometers: 1,\n    miles: 1000 / 1609.344,\n    nauticalmiles: 1000 / 1852,\n    meters: 1000,\n    metres: 1000,\n    yards: 1000 / 0.9144,\n    feet: 1000 / 0.3048,\n    inches: 1000 / 0.0254\n};\n\n// Values that define WGS84 ellipsoid model of the Earth\nconst RE = 6378.137; // equatorial radius\nconst FE = 1 / 298.257223563; // flattening\n\nconst E2 = FE * (2 - FE);\nconst RAD = Math.PI / 180;\n\n/**\n * A collection of very fast approximations to common geodesic measurements. Useful for performance-sensitive code that measures things on a city scale.\n */\nexport default class CheapRuler {\n    /**\n     * Creates a ruler object from tile coordinates (y and z).\n     *\n     * @param {number} y\n     * @param {number} z\n     * @param {keyof typeof factors} [units='kilometers']\n     * @returns {CheapRuler}\n     * @example\n     * const ruler = cheapRuler.fromTile(1567, 12);\n     * //=ruler\n     */\n    static fromTile(y, z, units) {\n        const n = Math.PI * (1 - 2 * (y + 0.5) / Math.pow(2, z));\n        const lat = Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))) / RAD;\n        return new CheapRuler(lat, units);\n    }\n\n    /**\n     * Multipliers for converting between units.\n     *\n     * @example\n     * // convert 50 meters to yards\n     * 50 * CheapRuler.units.yards / CheapRuler.units.meters;\n     */\n    static get units() {\n        return factors;\n    }\n\n    /**\n     * Creates a ruler instance for very fast approximations to common geodesic measurements around a certain latitude.\n     *\n     * @param {number} lat latitude\n     * @param {keyof typeof factors} [units='kilometers']\n     * @example\n     * const ruler = cheapRuler(35.05, 'miles');\n     * //=ruler\n     */\n    constructor(lat, units) {\n        if (lat === undefined) throw new Error('No latitude given.');\n        if (units && !factors[units]) throw new Error(`Unknown unit ${  units  }. Use one of: ${  Object.keys(factors).join(', ')}`);\n\n        // Curvature formulas from https://en.wikipedia.org/wiki/Earth_radius#Meridional\n        const m = RAD * RE * (units ? factors[units] : 1);\n        const coslat = Math.cos(lat * RAD);\n        const w2 = 1 / (1 - E2 * (1 - coslat * coslat));\n        const w = Math.sqrt(w2);\n\n        // multipliers for converting longitude and latitude degrees into distance\n        this.kx = m * w * coslat;        // based on normal radius of curvature\n        this.ky = m * w * w2 * (1 - E2); // based on meridonal radius of curvature\n    }\n\n    /**\n     * Given two points of the form [longitude, latitude], returns the distance.\n     *\n     * @param {[number, number]} a point [longitude, latitude]\n     * @param {[number, number]} b point [longitude, latitude]\n     * @returns {number} distance\n     * @example\n     * const distance = ruler.distance([30.5, 50.5], [30.51, 50.49]);\n     * //=distance\n     */\n    distance(a, b) {\n        const dx = wrap(a[0] - b[0]) * this.kx;\n        const dy = (a[1] - b[1]) * this.ky;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * Returns the bearing between two points in angles.\n     *\n     * @param {[number, number]} a point [longitude, latitude]\n     * @param {[number, number]} b point [longitude, latitude]\n     * @returns {number} bearing\n     * @example\n     * const bearing = ruler.bearing([30.5, 50.5], [30.51, 50.49]);\n     * //=bearing\n     */\n    bearing(a, b) {\n        const dx = wrap(b[0] - a[0]) * this.kx;\n        const dy = (b[1] - a[1]) * this.ky;\n        return Math.atan2(dx, dy) / RAD;\n    }\n\n    /**\n     * Returns a new point given distance and bearing from the starting point.\n     *\n     * @param {[number, number]} p point [longitude, latitude]\n     * @param {number} dist distance\n     * @param {number} bearing\n     * @returns {[number, number]} point [longitude, latitude]\n     * @example\n     * const point = ruler.destination([30.5, 50.5], 0.1, 90);\n     * //=point\n     */\n    destination(p, dist, bearing) {\n        const a = bearing * RAD;\n        return this.offset(p,\n            Math.sin(a) * dist,\n            Math.cos(a) * dist);\n    }\n\n    /**\n     * Returns a new point given easting and northing offsets (in ruler units) from the starting point.\n     *\n     * @param {[number, number]} p point [longitude, latitude]\n     * @param {number} dx easting\n     * @param {number} dy northing\n     * @returns {[number, number]} point [longitude, latitude]\n     * @example\n     * const point = ruler.offset([30.5, 50.5], 10, 10);\n     * //=point\n     */\n    offset(p, dx, dy) {\n        return [\n            p[0] + dx / this.kx,\n            p[1] + dy / this.ky\n        ];\n    }\n\n    /**\n     * Given a line (an array of points), returns the total line distance.\n     *\n     * @param {[number, number][]} points [longitude, latitude]\n     * @returns {number} total line distance\n     * @example\n     * const length = ruler.lineDistance([\n     *     [-67.031, 50.458], [-67.031, 50.534],\n     *     [-66.929, 50.534], [-66.929, 50.458]\n     * ]);\n     * //=length\n     */\n    lineDistance(points) {\n        let total = 0;\n        for (let i = 0; i < points.length - 1; i++) {\n            total += this.distance(points[i], points[i + 1]);\n        }\n        return total;\n    }\n\n    /**\n     * Given a polygon (an array of rings, where each ring is an array of points), returns the area.\n     *\n     * @param {[number, number][][]} polygon\n     * @returns {number} area value in the specified units (square kilometers by default)\n     * @example\n     * const area = ruler.area([[\n     *     [-67.031, 50.458], [-67.031, 50.534], [-66.929, 50.534],\n     *     [-66.929, 50.458], [-67.031, 50.458]\n     * ]]);\n     * //=area\n     */\n    area(polygon) {\n        let sum = 0;\n\n        for (let i = 0; i < polygon.length; i++) {\n            const ring = polygon[i];\n\n            for (let j = 0, len = ring.length, k = len - 1; j < len; k = j++) {\n                sum += wrap(ring[j][0] - ring[k][0]) * (ring[j][1] + ring[k][1]) * (i ? -1 : 1);\n            }\n        }\n\n        return (Math.abs(sum) / 2) * this.kx * this.ky;\n    }\n\n    /**\n     * Returns the point at a specified distance along the line.\n     *\n     * @param {[number, number][]} line\n     * @param {number} dist distance\n     * @returns {[number, number]} point [longitude, latitude]\n     * @example\n     * const point = ruler.along(line, 2.5);\n     * //=point\n     */\n    along(line, dist) {\n        let sum = 0;\n\n        if (dist <= 0) return line[0];\n\n        for (let i = 0; i < line.length - 1; i++) {\n            const p0 = line[i];\n            const p1 = line[i + 1];\n            const d = this.distance(p0, p1);\n            sum += d;\n            if (sum > dist) return interpolate(p0, p1, (dist - (sum - d)) / d);\n        }\n\n        return line[line.length - 1];\n    }\n\n    /**\n     * Returns the distance from a point `p` to a line segment `a` to `b`.\n     *\n     * @pointToSegmentDistance\n     * @param {[number, number]} p point [longitude, latitude]\n     * @param {[number, number]} a segment point 1 [longitude, latitude]\n     * @param {[number, number]} b segment point 2 [longitude, latitude]\n     * @returns {number} distance\n     * @example\n     * const distance = ruler.pointToSegmentDistance([-67.04, 50.5], [-67.05, 50.57], [-67.03, 50.54]);\n     * //=distance\n     */\n    pointToSegmentDistance(p, a, b) {\n        let [x, y] = a;\n        let dx = wrap(b[0] - x) * this.kx;\n        let dy = (b[1] - y) * this.ky;\n\n        if (dx !== 0 || dy !== 0) {\n            const t = (wrap(p[0] - x) * this.kx * dx + (p[1] - y) * this.ky * dy) / (dx * dx + dy * dy);\n\n            if (t > 1) {\n                x = b[0];\n                y = b[1];\n\n            } else if (t > 0) {\n                x += (dx / this.kx) * t;\n                y += (dy / this.ky) * t;\n            }\n        }\n\n        dx = wrap(p[0] - x) * this.kx;\n        dy = (p[1] - y) * this.ky;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * Returns an object of the form {point, index, t}, where point is closest point on the line\n     * from the given point, index is the start index of the segment with the closest point,\n     * and t is a parameter from 0 to 1 that indicates where the closest point is on that segment.\n     *\n     * @param {[number, number][]} line\n     * @param {[number, number]} p point [longitude, latitude]\n     * @returns {{point: [number, number], index: number, t: number}} {point, index, t}\n     * @example\n     * const point = ruler.pointOnLine(line, [-67.04, 50.5]).point;\n     * //=point\n     */\n    pointOnLine(line, p) {\n        let minDist = Infinity;\n        let minX = line[0][0];\n        let minY = line[0][1];\n        let minI = 0;\n        let minT = 0;\n\n        for (let i = 0; i < line.length - 1; i++) {\n\n            let x = line[i][0];\n            let y = line[i][1];\n            let dx = wrap(line[i + 1][0] - x) * this.kx;\n            let dy = (line[i + 1][1] - y) * this.ky;\n            let t = 0;\n\n            if (dx !== 0 || dy !== 0) {\n                t = (wrap(p[0] - x) * this.kx * dx + (p[1] - y) * this.ky * dy) / (dx * dx + dy * dy);\n\n                if (t > 1) {\n                    x = line[i + 1][0];\n                    y = line[i + 1][1];\n\n                } else if (t > 0) {\n                    x += (dx / this.kx) * t;\n                    y += (dy / this.ky) * t;\n                }\n            }\n\n            dx = wrap(p[0] - x) * this.kx;\n            dy = (p[1] - y) * this.ky;\n\n            const sqDist = dx * dx + dy * dy;\n            if (sqDist < minDist) {\n                minDist = sqDist;\n                minX = x;\n                minY = y;\n                minI = i;\n                minT = t;\n            }\n        }\n\n        return {\n            point: [minX, minY],\n            index: minI,\n            t: Math.max(0, Math.min(1, minT))\n        };\n    }\n\n    /**\n     * Returns a part of the given line between the start and the stop points (or their closest points on the line).\n     *\n     * @param {[number, number]} start point [longitude, latitude]\n     * @param {[number, number]} stop point [longitude, latitude]\n     * @param {[number, number][]} line\n     * @returns {[number, number][]} line part of a line\n     * @example\n     * const line2 = ruler.lineSlice([-67.04, 50.5], [-67.05, 50.56], line1);\n     * //=line2\n     */\n    lineSlice(start, stop, line) {\n        let p1 = this.pointOnLine(line, start);\n        let p2 = this.pointOnLine(line, stop);\n\n        if (p1.index > p2.index || (p1.index === p2.index && p1.t > p2.t)) {\n            const tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n\n        const slice = [p1.point];\n\n        const l = p1.index + 1;\n        const r = p2.index;\n\n        if (!equals(line[l], slice[0]) && l <= r)\n            slice.push(line[l]);\n\n        for (let i = l + 1; i <= r; i++) {\n            slice.push(line[i]);\n        }\n\n        if (!equals(line[r], p2.point))\n            slice.push(p2.point);\n\n        return slice;\n    }\n\n    /**\n     * Returns a part of the given line between the start and the stop points indicated by distance along the line.\n     *\n     * @param {number} start start distance\n     * @param {number} stop stop distance\n     * @param {[number, number][]} line\n     * @returns {[number, number][]} part of a line\n     * @example\n     * const line2 = ruler.lineSliceAlong(10, 20, line1);\n     * //=line2\n     */\n    lineSliceAlong(start, stop, line) {\n        let sum = 0;\n        const slice = [];\n\n        for (let i = 0; i < line.length - 1; i++) {\n            const p0 = line[i];\n            const p1 = line[i + 1];\n            const d = this.distance(p0, p1);\n\n            sum += d;\n\n            if (sum > start && slice.length === 0) {\n                slice.push(interpolate(p0, p1, (start - (sum - d)) / d));\n            }\n\n            if (sum >= stop) {\n                slice.push(interpolate(p0, p1, (stop - (sum - d)) / d));\n                return slice;\n            }\n\n            if (sum > start) slice.push(p1);\n        }\n\n        return slice;\n    }\n\n    /**\n     * Given a point, returns a bounding box object ([w, s, e, n]) created from the given point buffered by a given distance.\n     *\n     * @param {[number, number]} p point [longitude, latitude]\n     * @param {number} buffer\n     * @returns {[number, number, number, number]} bbox ([w, s, e, n])\n     * @example\n     * const bbox = ruler.bufferPoint([30.5, 50.5], 0.01);\n     * //=bbox\n     */\n    bufferPoint(p, buffer) {\n        const v = buffer / this.ky;\n        const h = buffer / this.kx;\n        return [\n            p[0] - h,\n            p[1] - v,\n            p[0] + h,\n            p[1] + v\n        ];\n    }\n\n    /**\n     * Given a bounding box, returns the box buffered by a given distance.\n     *\n     * @param {[number, number, number, number]} bbox ([w, s, e, n])\n     * @param {number} buffer\n     * @returns {[number, number, number, number]} bbox ([w, s, e, n])\n     * @example\n     * const bbox = ruler.bufferBBox([30.5, 50.5, 31, 51], 0.2);\n     * //=bbox\n     */\n    bufferBBox(bbox, buffer) {\n        const v = buffer / this.ky;\n        const h = buffer / this.kx;\n        return [\n            bbox[0] - h,\n            bbox[1] - v,\n            bbox[2] + h,\n            bbox[3] + v\n        ];\n    }\n\n    /**\n     * Returns true if the given point is inside in the given bounding box, otherwise false.\n     *\n     * @param {[number, number]} p point [longitude, latitude]\n     * @param {[number, number, number, number]} bbox ([w, s, e, n])\n     * @returns {boolean}\n     * @example\n     * const inside = ruler.insideBBox([30.5, 50.5], [30, 50, 31, 51]);\n     * //=inside\n     */\n    insideBBox(p, bbox) { // eslint-disable-line\n        return wrap(p[0] - bbox[0]) >= 0 &&\n               wrap(p[0] - bbox[2]) <= 0 &&\n               p[1] >= bbox[1] &&\n               p[1] <= bbox[3];\n    }\n}\n\n/**\n * @param {[number, number]} a\n * @param {[number, number]} b\n */\nfunction equals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * @param {[number, number]} a\n * @param {[number, number]} b\n * @param {number} t\n * @returns {[number, number]}\n */\nfunction interpolate(a, b, t) {\n    const dx = wrap(b[0] - a[0]);\n    const dy = b[1] - a[1];\n    return [\n        a[0] + dx * t,\n        a[1] + dy * t\n    ];\n}\n\n/**\n * normalize a degree value into [-180..180] range\n * @param {number} deg\n */\nfunction wrap(deg) {\n    while (deg < -180) deg += 360;\n    while (deg > 180) deg -= 360;\n    return deg;\n}\n","\nexport default class TinyQueue {\n    constructor(data = [], compare = (a, b) => (a < b ? -1 : a > b ? 1 : 0)) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this._up(this.length++);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n\n        if (--this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let bestChild = (pos << 1) + 1; // initially it is the left child\n            const right = bestChild + 1;\n\n            if (right < this.length && compare(data[right], data[bestChild]) < 0) {\n                bestChild = right;\n            }\n            if (compare(data[bestChild], item) >= 0) break;\n\n            data[pos] = data[bestChild];\n            pos = bestChild;\n        }\n\n        data[pos] = item;\n    }\n}\n","/**\n * The maximum value of a coordinate in the internal tile coordinate system. Coordinates of\n * all source features normalized to this extent upon load.\n *\n * The value is a consequence of the following:\n *\n * * Vertex buffer store positions as signed 16 bit integers.\n * * One bit is lost for signedness to support tile buffers.\n * * One bit is lost because the line vertex buffer used to pack 1 bit of other data into the int.\n * * One bit is lost to support features extending past the extent on the right edge of the tile.\n * * This leaves us with 2^13 = 8192\n *\n * @private\n * @readonly\n */\nexport default 8192;\n","import {isValue} from '../values';\nimport {NumberType} from '../types';\nimport {classifyRings, updateBBox, boxWithinBox, pointWithinPolygon, segmentIntersectSegment} from '../../util/geometry_util';\nimport CheapRuler from \"cheap-ruler\";\nimport TinyQueue from \"tinyqueue\";\nimport EXTENT from '../../data/extent';\n\nimport type Point from \"@mapbox/point-geometry\";\nimport type ParsingContext from '../parsing_context';\nimport type {BBox} from '../../util/geometry_util';\nimport type {Type} from '../types';\nimport type {Expression} from '../expression';\nimport type {CanonicalTileID} from '../../types/tile_id';\nimport type EvaluationContext from '../evaluation_context';\n\ntype DistanceGeometry = GeoJSON.Point | GeoJSON.MultiPoint | GeoJSON.LineString | GeoJSON.MultiLineString | GeoJSON.Polygon | GeoJSON.MultiPolygon;\n\n// Inclusive index range for multipoint or linestring container\ntype IndexRange = [number, number];\ntype DistPair = {\n    dist: number;\n    range1: IndexRange;\n    range2: IndexRange;\n};\nfunction compareMax(a: DistPair, b: DistPair) {\n    return b.dist - a.dist;\n}\n\nconst MIN_POINT_SIZE = 100;\nconst MIN_LINE_POINT_SIZE = 50;\n\nfunction isDefaultBBOX(bbox: BBox) {\n    const defualtBBox = [Infinity, Infinity, -Infinity, -Infinity];\n    if (defualtBBox.length !== bbox.length) {\n        return false;\n    }\n    for (let i = 0; i < defualtBBox.length; i++) {\n        if (defualtBBox[i] !== bbox[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getRangeSize(range: IndexRange) {\n    return range[1] - range[0] + 1;\n}\n\nfunction isRangeSafe(range: IndexRange, threshold: number) {\n    const ret = range[1] >= range[0] && range[1] < threshold;\n    if (!ret) {\n        console.warn(\"Distance Expression: Index is out of range\");\n    }\n    return ret;\n}\n\n// Split the point set(points or linestring) into two halves, using IndexRange to do in-place splitting.\n// If geometry is a line, the last point(here is the second index) of range1 needs to be included as the first point(here is the first index) of range2.\n// If geometry are points, just split the points equally(if possible) into two new point sets(here are two index ranges).\nfunction splitRange(range: IndexRange, isLine: boolean) {\n    if (range[0] > range[1]) return [null, null];\n    const size = getRangeSize(range);\n    if (isLine) {\n        if (size === 2) {\n            return [range, null];\n        }\n        const size1 = Math.floor(size / 2);\n        const range1: IndexRange = [range[0], range[0] + size1];\n        const range2: IndexRange = [range[0] + size1, range[1]];\n        return [range1, range2];\n    } else {\n        if (size === 1) {\n            return [range, null];\n        }\n        const size1 = Math.floor(size / 2) - 1;\n        const range1: IndexRange = [range[0], range[0] + size1];\n        const range2: IndexRange = [range[0] + size1 + 1, range[1]];\n        return [range1, range2];\n    }\n}\n\nfunction getBBox(pointSets: Array<GeoJSON.Position>, range: IndexRange) {\n    const bbox: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n    if (!isRangeSafe(range, pointSets.length)) return bbox;\n    for (let i = range[0]; i <= range[1]; ++i) {\n        updateBBox(bbox, pointSets[i]);\n    }\n    return bbox;\n}\n\nfunction getPolygonBBox(polygon: Array<Array<GeoJSON.Position>>) {\n    const bbox: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n    for (let i = 0; i < polygon.length; ++i) {\n        for (let j = 0; j < polygon[i].length; ++j) {\n            updateBBox(bbox, polygon[i][j]);\n        }\n    }\n    return bbox;\n}\n\n// Calculate the distance between two bounding boxes.\n// Calculate the delta in x and y direction, and use two fake points {0.0, 0.0} and {dx, dy} to calculate the distance.\n// Distance will be 0.0 if bounding box are overlapping.\nfunction bboxToBBoxDistance(bbox1: BBox, bbox2: BBox, ruler: CheapRuler) {\n    if (isDefaultBBOX(bbox1) || isDefaultBBOX(bbox2)) {\n        return NaN;\n    }\n    let dx = 0.0;\n    let dy = 0.0;\n    // bbox1 in left side\n    if (bbox1[2] < bbox2[0]) {\n        dx = bbox2[0] - bbox1[2];\n    }\n    // bbox1 in right side\n    if (bbox1[0] > bbox2[2]) {\n        dx = bbox1[0] - bbox2[2];\n    }\n    // bbox1 in above side\n    if (bbox1[1] > bbox2[3]) {\n        dy = bbox1[1] - bbox2[3];\n    }\n    // bbox1 in down side\n    if (bbox1[3] < bbox2[1]) {\n        dy = bbox2[1] - bbox1[3];\n    }\n    return ruler.distance([0.0, 0.0], [dx, dy]);\n}\n\nfunction lngFromMercatorX(x: number): number {\n    return x * 360 - 180;\n}\n\nfunction latFromMercatorY(y: number): number {\n    const y2 = 180 - y * 360;\n    return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;\n}\n\nfunction getLngLatPoint(coord: Point, canonical: CanonicalTileID) {\n    const tilesAtZoom = Math.pow(2, canonical.z);\n    const x = (coord.x / EXTENT + canonical.x) / tilesAtZoom;\n    const y = (coord.y / EXTENT + canonical.y) / tilesAtZoom;\n    return [lngFromMercatorX(x), latFromMercatorY(y)];\n}\n\nfunction getLngLatPoints(coordinates: Array<Point>, canonical: CanonicalTileID) {\n    const coords = [];\n    for (let i = 0; i < coordinates.length; ++i) {\n        coords.push(getLngLatPoint(coordinates[i], canonical));\n    }\n    return coords;\n}\n\nfunction pointToLineDistance(point: GeoJSON.Position, line: Array<GeoJSON.Position>, ruler: CheapRuler) {\n// @ts-expect-error - TS2345 - Argument of type 'Position[]' is not assignable to parameter of type 'Line'.\n    const nearestPoint = ruler.pointOnLine(line, point).point;\n    // @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n    return ruler.distance(point, nearestPoint);\n}\n\nfunction pointsToLineDistance(points: Array<GeoJSON.Position>, rangeA: IndexRange, line: Array<GeoJSON.Position>, rangeB: IndexRange, ruler: CheapRuler) {\n    const subLine = line.slice(rangeB[0], rangeB[1] + 1);\n    let dist = Infinity;\n    for (let i = rangeA[0]; i <= rangeA[1]; ++i) {\n        if ((dist = Math.min(dist, pointToLineDistance(points[i], subLine, ruler))) === 0.0) return 0.0;\n    }\n    return dist;\n}\n\n// precondition is two segments are not intersecting with each other\nfunction segmentToSegmentDistance(p1: GeoJSON.Position, p2: GeoJSON.Position, q1: GeoJSON.Position, q2: GeoJSON.Position, ruler: CheapRuler) {\n    const dist1 = Math.min(\n        // @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n        ruler.pointToSegmentDistance(p1, q1, q2),\n        // @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n        ruler.pointToSegmentDistance(p2, q1, q2)\n    );\n    const dist2 = Math.min(\n        // @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n        ruler.pointToSegmentDistance(q1, p1, p2),\n        // @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n        ruler.pointToSegmentDistance(q2, p1, p2)\n    );\n\n    return Math.min(dist1, dist2);\n}\n\nfunction lineToLineDistance(line1: Array<GeoJSON.Position>, range1: IndexRange, line2: Array<GeoJSON.Position>, range2: IndexRange, ruler: CheapRuler) {\n    if (!isRangeSafe(range1, line1.length) || !isRangeSafe(range2, line2.length)) {\n        return NaN;\n    }\n    let dist = Infinity;\n    for (let i = range1[0]; i < range1[1]; ++i) {\n        for (let j = range2[0]; j < range2[1]; ++j) {\n            if (segmentIntersectSegment(line1[i], line1[i + 1], line2[j], line2[j + 1])) return 0.0;\n            dist = Math.min(dist, segmentToSegmentDistance(line1[i], line1[i + 1], line2[j], line2[j + 1], ruler));\n        }\n    }\n    return dist;\n}\n\nfunction pointsToPointsDistance(pointSet1: Array<GeoJSON.Position>, range1: IndexRange, pointSet2: Array<GeoJSON.Position>, range2: IndexRange, ruler: CheapRuler) {\n    if (!isRangeSafe(range1, pointSet1.length) || !isRangeSafe(range2, pointSet2.length)) {\n        return NaN;\n    }\n    let dist = Infinity;\n    for (let i = range1[0]; i <= range1[1]; ++i) {\n        for (let j = range2[0]; j <= range2[1]; ++j) {\n            // @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n            if ((dist = Math.min(dist, ruler.distance(pointSet1[i], pointSet2[j]))) === 0.0) return dist;\n        }\n    }\n    return dist;\n}\n\nfunction pointToPolygonDistance(point: GeoJSON.Position, polygon: Array<Array<GeoJSON.Position>>, ruler: CheapRuler) {\n    if (pointWithinPolygon(point, polygon, true /*trueOnBoundary*/)) return 0.0;\n    let dist = Infinity;\n    for (const ring of polygon) {\n        const ringLen = ring.length;\n        if (ringLen < 2) {\n            console.warn(\"Distance Expression: Invalid polygon!\");\n            return NaN;\n        }\n        if (ring[0] !== ring[ringLen - 1]) {\n            // @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n            if ((dist = Math.min(dist, ruler.pointToSegmentDistance(point, ring[ringLen - 1], ring[0]))) === 0.0) return dist;\n        }\n        if ((dist = Math.min(dist, pointToLineDistance(point, ring, ruler))) === 0.0) return dist;\n    }\n    return dist;\n}\n\nfunction lineToPolygonDistance(line: Array<GeoJSON.Position>, range: IndexRange, polygon: Array<Array<GeoJSON.Position>>, ruler: CheapRuler) {\n    if (!isRangeSafe(range, line.length)) {\n        return NaN;\n    }\n    for (let i = range[0]; i <= range[1]; ++i) {\n        if (pointWithinPolygon(line[i], polygon, true /*trueOnBoundary*/)) return 0.0;\n    }\n    let dist = Infinity;\n    for (let i = range[0]; i < range[1]; ++i) {\n        for (const ring of polygon) {\n            for (let j = 0, len = ring.length, k = len - 1; j < len; k = j++) {\n                if (segmentIntersectSegment(line[i], line[i + 1], ring[k], ring[j])) return 0.0;\n                dist = Math.min(dist, segmentToSegmentDistance(line[i], line[i + 1], ring[k], ring[j], ruler));\n            }\n        }\n    }\n    return dist;\n}\n\nfunction polygonIntersect(polygon1: Array<Array<GeoJSON.Position>>, polygon2: Array<Array<GeoJSON.Position>>) {\n    for (const ring of polygon1) {\n        for (let i = 0; i <= ring.length - 1; ++i) {\n            if (pointWithinPolygon(ring[i], polygon2, true /*trueOnBoundary*/)) return true;\n        }\n    }\n    return false;\n}\n\nfunction polygonToPolygonDistance(polygon1: Array<Array<GeoJSON.Position>>, polygon2: Array<Array<GeoJSON.Position>>, ruler: CheapRuler, currentMiniDist: number = Infinity) {\n    const bbox1 = getPolygonBBox(polygon1);\n    const bbox2 = getPolygonBBox(polygon2);\n    if (currentMiniDist !== Infinity && bboxToBBoxDistance(bbox1, bbox2, ruler) >= currentMiniDist) {\n        return currentMiniDist;\n    }\n    if (boxWithinBox(bbox1, bbox2)) {\n        if (polygonIntersect(polygon1, polygon2)) return 0.0;\n    } else if (polygonIntersect(polygon2, polygon1)) {\n        return 0.0;\n    }\n    let dist = currentMiniDist;\n    for (const ring1 of polygon1) {\n        for (let i = 0, len1 = ring1.length, l = len1 - 1; i < len1; l = i++) {\n            for (const ring2 of polygon2) {\n                for (let j = 0, len2 = ring2.length, k = len2 - 1; j < len2; k = j++) {\n                    if (segmentIntersectSegment(ring1[l], ring1[i], ring2[k], ring2[j])) return 0.0;\n                    dist = Math.min(dist, segmentToSegmentDistance(ring1[l], ring1[i], ring2[k], ring2[j], ruler));\n                }\n            }\n        }\n    }\n    return dist;\n}\n\nfunction updateQueue(distQueue: any, miniDist: number, ruler: CheapRuler, pointSet1: Array<GeoJSON.Position>, pointSet2: Array<GeoJSON.Position>, r1: IndexRange | null, r2: IndexRange | null) {\n    if (r1 === null || r2 === null) return;\n    const tempDist = bboxToBBoxDistance(getBBox(pointSet1, r1), getBBox(pointSet2, r2), ruler);\n    // Insert new pair to the queue if the bbox distance is less than miniDist, the pair with biggest distance will be at the top\n    if (tempDist < miniDist) distQueue.push({dist: tempDist, range1: r1, range2: r2});\n}\n\n// Divide and conquer, the time complexity is O(n*lgn), faster than Brute force O(n*n)\n// Most of the time, use index for in-place processing.\nfunction pointSetToPolygonDistance(pointSets: Array<GeoJSON.Position>, isLine: boolean, polygon: Array<Array<GeoJSON.Position>>, ruler: CheapRuler, currentMiniDist: number = Infinity) {\n// @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n    let miniDist = Math.min(ruler.distance(pointSets[0], polygon[0][0]), currentMiniDist);\n    if (miniDist === 0.0) return miniDist;\n    const initialDistPair: DistPair = {\n        dist: 0,\n        range1: [0, pointSets.length - 1],\n        range2: [0, 0]\n    };\n    const distQueue = new TinyQueue<DistPair>([initialDistPair], compareMax);\n\n    const setThreshold = isLine ? MIN_LINE_POINT_SIZE : MIN_POINT_SIZE;\n    const polyBBox = getPolygonBBox(polygon);\n\n    while (distQueue.length) {\n        const distPair = distQueue.pop();\n        if (distPair.dist >= miniDist) continue;\n        const range = distPair.range1;\n        // In case the set size are relatively small, we could use brute-force directly\n        if (getRangeSize(range) <= setThreshold) {\n            if (!isRangeSafe(range, pointSets.length)) return NaN;\n            if (isLine) {\n                const tempDist = lineToPolygonDistance(pointSets, range, polygon, ruler);\n                if ((miniDist = Math.min(miniDist, tempDist)) === 0.0) return miniDist;\n            } else {\n                for (let i = range[0]; i <= range[1]; ++i) {\n                    const tempDist = pointToPolygonDistance(pointSets[i], polygon, ruler);\n                    if ((miniDist = Math.min(miniDist, tempDist)) === 0.0) return miniDist;\n                }\n            }\n        } else {\n            const newRanges = splitRange(range, isLine);\n            if (newRanges[0] !== null) {\n                const tempDist = bboxToBBoxDistance(getBBox(pointSets, newRanges[0]), polyBBox, ruler);\n                if (tempDist < miniDist) distQueue.push({dist: tempDist, range1: newRanges[0], range2: [0, 0]});\n            }\n            if (newRanges[1] !== null) {\n                const tempDist = bboxToBBoxDistance(getBBox(pointSets, newRanges[1]), polyBBox, ruler);\n                if (tempDist < miniDist) distQueue.push({dist: tempDist, range1: newRanges[1], range2: [0, 0]});\n            }\n        }\n    }\n    return miniDist;\n}\n\nfunction pointSetsDistance(pointSet1: Array<GeoJSON.Position>, isLine1: boolean, pointSet2: Array<GeoJSON.Position>, isLine2: boolean, ruler: CheapRuler, currentMiniDist: number = Infinity) {\n// @ts-expect-error - TS2345 - Argument of type 'Position' is not assignable to parameter of type 'Point'.\n    let miniDist = Math.min(currentMiniDist, ruler.distance(pointSet1[0], pointSet2[0]));\n    if (miniDist === 0.0) return miniDist;\n    const initialDistPair: DistPair = {\n        dist: 0,\n        range1: [0, pointSet1.length - 1],\n        range2: [0, pointSet2.length - 1]\n    };\n    const distQueue = new TinyQueue<DistPair>([initialDistPair], compareMax);\n\n    const set1Threshold = isLine1 ? MIN_LINE_POINT_SIZE : MIN_POINT_SIZE;\n    const set2Threshold = isLine2 ? MIN_LINE_POINT_SIZE : MIN_POINT_SIZE;\n\n    while (distQueue.length) {\n        const distPair = distQueue.pop();\n        if (distPair.dist >= miniDist) continue;\n        const rangeA = distPair.range1;\n        const rangeB = distPair.range2;\n        // In case the set size are relatively small, we could use brute-force directly\n        if (getRangeSize(rangeA) <= set1Threshold && getRangeSize(rangeB) <= set2Threshold) {\n            if (!isRangeSafe(rangeA, pointSet1.length) || !isRangeSafe(rangeB, pointSet2.length)) {\n                return NaN;\n            }\n            if (isLine1 && isLine2) {\n                miniDist = Math.min(miniDist, lineToLineDistance(pointSet1, rangeA, pointSet2, rangeB, ruler));\n            } else if (!isLine1 && !isLine2) {\n                miniDist = Math.min(miniDist, pointsToPointsDistance(pointSet1, rangeA, pointSet2, rangeB, ruler));\n            } else if (isLine1 && !isLine2) {\n                miniDist = Math.min(miniDist, pointsToLineDistance(pointSet2, rangeB, pointSet1, rangeA, ruler));\n            } else if (!isLine1 && isLine2) {\n                miniDist = Math.min(miniDist, pointsToLineDistance(pointSet1, rangeA, pointSet2, rangeB, ruler));\n            }\n            if (miniDist === 0.0) return miniDist;\n        } else {\n            const newRangesA = splitRange(rangeA, isLine1);\n            const newRangesB = splitRange(rangeB, isLine2);\n            updateQueue(distQueue, miniDist, ruler, pointSet1, pointSet2, newRangesA[0], newRangesB[0]);\n            updateQueue(distQueue, miniDist, ruler, pointSet1, pointSet2, newRangesA[0], newRangesB[1]);\n            updateQueue(distQueue, miniDist, ruler, pointSet1, pointSet2, newRangesA[1], newRangesB[0]);\n            updateQueue(distQueue, miniDist, ruler, pointSet1, pointSet2, newRangesA[1], newRangesB[1]);\n        }\n    }\n    return miniDist;\n}\n\nfunction pointSetToLinesDistance(pointSet: Array<GeoJSON.Position>, isLine: boolean, lines: Array<Array<GeoJSON.Position>>, ruler: CheapRuler, currentMiniDist: number = Infinity) {\n    let dist = currentMiniDist;\n    const bbox1 = getBBox(pointSet, [0, pointSet.length - 1]);\n    for (const line of lines) {\n        if (dist !== Infinity && bboxToBBoxDistance(bbox1, getBBox(line, [0, line.length - 1]), ruler) >= dist) continue;\n        dist = Math.min(dist, pointSetsDistance(pointSet, isLine, line, true /*isLine*/, ruler, dist));\n        if (dist === 0.0) return dist;\n    }\n    return dist;\n}\n\nfunction pointSetToPolygonsDistance(points: Array<GeoJSON.Position>, isLine: boolean, polygons: Array<Array<Array<GeoJSON.Position>>>, ruler: CheapRuler, currentMiniDist: number = Infinity) {\n    let dist = currentMiniDist;\n    const bbox1 = getBBox(points, [0, points.length - 1]);\n    for (const polygon of polygons) {\n        if (dist !== Infinity && bboxToBBoxDistance(bbox1, getPolygonBBox(polygon), ruler) >= dist) continue;\n        const tempDist = pointSetToPolygonDistance(points, isLine, polygon, ruler, dist);\n        if (isNaN(tempDist)) return tempDist;\n        if ((dist = Math.min(dist, tempDist)) === 0.0) return dist;\n    }\n    return dist;\n}\n\nfunction polygonsToPolygonsDistance(polygons1: Array<Array<Array<GeoJSON.Position>>>, polygons2: Array<Array<Array<GeoJSON.Position>>>, ruler: CheapRuler) {\n    let dist = Infinity;\n    for (const polygon1 of polygons1) {\n        for (const polygon2 of polygons2) {\n            const tempDist = polygonToPolygonDistance(polygon1, polygon2, ruler, dist);\n            if (isNaN(tempDist)) return tempDist;\n            if ((dist = Math.min(dist, tempDist)) === 0.0) return dist;\n        }\n    }\n    return dist;\n}\n\nfunction pointsToGeometryDistance(originGeometry: Array<Array<Point>>, canonical: CanonicalTileID, geometry: DistanceGeometry) {\n    const lngLatPoints = [];\n    for (const points of originGeometry) {\n        for (const point of points) {\n            lngLatPoints.push(getLngLatPoint(point, canonical));\n        }\n    }\n    const ruler = new CheapRuler(lngLatPoints[0][1], 'meters');\n    if (geometry.type === 'Point' || geometry.type === 'MultiPoint' || geometry.type === 'LineString') {\n        return pointSetsDistance(lngLatPoints, false /*isLine*/,\n            geometry.type === \"Point\" ? [geometry.coordinates] : geometry.coordinates,\n            geometry.type === 'LineString' /*isLine*/, ruler);\n    }\n    if (geometry.type === 'MultiLineString') {\n        return pointSetToLinesDistance(lngLatPoints, false /*isLine*/,  geometry.coordinates, ruler);\n    }\n    if (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\n        return pointSetToPolygonsDistance(lngLatPoints, false /*isLine*/,\n            geometry.type === \"Polygon\" ? [geometry.coordinates] : geometry.coordinates, ruler);\n    }\n    return null;\n}\n\nfunction linesToGeometryDistance(originGeometry: Array<Array<Point>>, canonical: CanonicalTileID, geometry: DistanceGeometry) {\n    const lngLatLines = [];\n    for (const line of originGeometry) {\n        const lngLatLine = [];\n        for (const point of line) {\n            lngLatLine.push(getLngLatPoint(point, canonical));\n        }\n        lngLatLines.push(lngLatLine);\n    }\n    const ruler = new CheapRuler(lngLatLines[0][0][1], 'meters');\n    if (geometry.type === 'Point' || geometry.type === 'MultiPoint' || geometry.type === 'LineString') {\n        return pointSetToLinesDistance(\n            geometry.type === \"Point\" ? [geometry.coordinates] : geometry.coordinates,\n            geometry.type === 'LineString' /*isLine*/, lngLatLines, ruler);\n    }\n    if (geometry.type === 'MultiLineString') {\n        let dist = Infinity;\n        for (let i = 0; i < geometry.coordinates.length; i++) {\n            const tempDist = pointSetToLinesDistance(geometry.coordinates[i], true /*isLine*/, lngLatLines, ruler, dist);\n            if (isNaN(tempDist)) return tempDist;\n            if ((dist = Math.min(dist, tempDist)) === 0.0) return dist;\n        }\n        return dist;\n    }\n    if (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\n        let dist = Infinity;\n        for (let i = 0; i < lngLatLines.length; i++) {\n            const tempDist = pointSetToPolygonsDistance(lngLatLines[i], true /*isLine*/,\n                geometry.type === \"Polygon\" ? [geometry.coordinates] : geometry.coordinates,\n                ruler, dist);\n            if (isNaN(tempDist)) return tempDist;\n            if ((dist = Math.min(dist, tempDist)) === 0.0) return dist;\n        }\n        return dist;\n    }\n    return null;\n}\n\nfunction polygonsToGeometryDistance(originGeometry: Array<Array<Point>>, canonical: CanonicalTileID, geometry: DistanceGeometry) {\n    const lngLatPolygons = [];\n    for (const polygon of classifyRings(originGeometry, 0)) {\n        const lngLatPolygon = [];\n        for (let i = 0; i < polygon.length; ++i) {\n            lngLatPolygon.push(getLngLatPoints(polygon[i], canonical));\n        }\n        lngLatPolygons.push(lngLatPolygon);\n    }\n    const ruler = new CheapRuler(lngLatPolygons[0][0][0][1], 'meters');\n    if (geometry.type === 'Point' || geometry.type === 'MultiPoint' || geometry.type === 'LineString') {\n        return pointSetToPolygonsDistance(\n            geometry.type === \"Point\" ? [geometry.coordinates] : geometry.coordinates,\n            geometry.type === 'LineString' /*isLine*/, lngLatPolygons, ruler);\n    }\n    if (geometry.type === 'MultiLineString') {\n        let dist = Infinity;\n        for (let i = 0; i < geometry.coordinates.length; i++) {\n            const tempDist = pointSetToPolygonsDistance(geometry.coordinates[i], true /*isLine*/, lngLatPolygons, ruler, dist);\n            if (isNaN(tempDist)) return tempDist;\n            if ((dist = Math.min(dist, tempDist)) === 0.0) return dist;\n        }\n        return dist;\n    }\n    if (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\n        return polygonsToPolygonsDistance(\n            geometry.type === \"Polygon\" ? [geometry.coordinates] : geometry.coordinates,\n            lngLatPolygons, ruler);\n    }\n    return null;\n}\n\nfunction isTypeValid(type: string) {\n    return (\n        type === \"Point\" ||\n        type === \"MultiPoint\" ||\n        type === \"LineString\" ||\n        type === \"MultiLineString\" ||\n        type === \"Polygon\" ||\n        type === \"MultiPolygon\"\n    );\n}\nclass Distance implements Expression {\n    type: Type;\n    geojson: GeoJSON.GeoJSON;\n    geometries: DistanceGeometry;\n\n    constructor(geojson: GeoJSON.GeoJSON, geometries: DistanceGeometry) {\n        this.type = NumberType;\n        this.geojson = geojson;\n        this.geometries = geometries;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Distance | null | undefined {\n        if (args.length !== 2) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Distance'.\n            return context.error(\n                `'distance' expression requires either one argument, but found ' ${args.length -\n                    1} instead.`\n            );\n        }\n        if (isValue(args[1])) {\n            const geojson = (args[1] as any);\n            if (geojson.type === 'FeatureCollection') {\n                for (let i = 0; i < geojson.features.length; ++i) {\n                    if (isTypeValid(geojson.features[i].geometry.type)) {\n                        return new Distance(geojson, geojson.features[i].geometry);\n                    }\n                }\n            } else if (geojson.type === 'Feature') {\n                if (isTypeValid(geojson.geometry.type)) {\n                    return new Distance(geojson, geojson.geometry);\n                }\n            } else if (isTypeValid(geojson.type)) {\n                return new Distance(geojson, geojson);\n            }\n        }\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Distance'.\n        return context.error(\n            \"'distance' expression needs to be an array with format [\\'Distance\\', GeoJSONObj].\"\n        );\n    }\n\n    evaluate(ctx: EvaluationContext): number | null {\n        const geometry = ctx.geometry();\n        const canonical = ctx.canonicalID();\n        if (geometry != null && canonical != null) {\n            if (ctx.geometryType() === 'Point') {\n                return pointsToGeometryDistance(geometry, canonical, this.geometries);\n            }\n            if (ctx.geometryType() === 'LineString') {\n                return linesToGeometryDistance(geometry, canonical, this.geometries);\n            }\n            if (ctx.geometryType() === 'Polygon') {\n                return polygonsToGeometryDistance(geometry, canonical, this.geometries);\n            }\n            console.warn(\"Distance Expression: currently only evaluates valid Point/LineString/Polygon geometries.\");\n        } else {\n            console.warn(\"Distance Expression: requirs valid feature and canonical information.\");\n        }\n        return null;\n    }\n\n    eachChild() {}\n\n    outputDefined(): boolean {\n        return true;\n    }\n\n    serialize(): Array<unknown> {\n        return ['distance', this.geojson];\n    }\n}\n\nexport default Distance;\n","import {ValueType} from '../types';\nimport {Color, typeOf, toString as valueToString} from '../values';\nimport Formatted from '../types/formatted';\nimport ResolvedImage from '../types/resolved_image';\nimport Literal from './literal';\n\nimport type {Type} from '../types';\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\n\nfunction coerceValue(type: string, value: any): any {\n    switch (type) {\n    case 'string': return valueToString(value);\n    case 'number': return +value;\n    case 'boolean': return !!value;\n    case 'color': return Color.parse(value);\n    case 'formatted': {\n        return Formatted.fromString(valueToString(value));\n    }\n    case 'resolvedImage': {\n        return ResolvedImage.fromString(valueToString(value));\n    }\n    }\n    return value;\n}\n\nfunction clampToAllowedNumber(value: number, min?: number, max?: number, step?: number): number {\n    if (step !== undefined) {\n        value = step * Math.round(value / step);\n    }\n    if (min !== undefined && value < min) {\n        value = min;\n    }\n    if (max !== undefined && value > max) {\n        value = max;\n    }\n    return value;\n}\n\nclass Config implements Expression {\n    type: Type;\n    key: string;\n    scope: string | null | undefined;\n\n    constructor(type: Type, key: string, scope?: string) {\n        this.type = type;\n        this.key = key;\n        this.scope = scope;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Config | null | undefined {\n        let type = context.expectedType;\n        if (type === null || type === undefined) {\n            type = ValueType;\n        }\n        if (args.length < 2 || args.length > 3) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Config'.\n            return context.error(`Invalid number of arguments for 'config' expression.`);\n        }\n\n        const configKey = context.parse(args[1], 1);\n        if (!(configKey instanceof Literal)) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Config'.\n            return context.error(`Key name of 'config' expression must be a string literal.`);\n        }\n\n        if (args.length >= 3) {\n            const configScope = context.parse(args[2], 2);\n            if (!(configScope instanceof Literal)) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Config'.\n                return context.error(`Scope of 'config' expression must be a string literal.`);\n            }\n            return new Config(type, valueToString(configKey.value), valueToString(configScope.value));\n        }\n\n        return new Config(type, valueToString(configKey.value));\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        const FQIDSeparator = '\\u001F';\n        const configKey = [this.key, this.scope, ctx.scope].filter(Boolean).join(FQIDSeparator);\n\n        const config = ctx.getConfig(configKey);\n        if (!config) return null;\n\n        const {type, value, values, minValue, maxValue, stepValue} = config;\n\n        const defaultValue = config.default.evaluate(ctx);\n\n        let result = defaultValue;\n        if (value) {\n            // temporarily override scope to parent to evaluate config expressions passed from the parent\n            const originalScope = ctx.scope;\n            ctx.scope = (originalScope || '').split(FQIDSeparator).slice(1).join(FQIDSeparator);\n            result = value.evaluate(ctx);\n            ctx.scope = originalScope;\n        }\n        if (type) {\n            result = coerceValue(type, result);\n        }\n\n        if (result !== undefined && (minValue !== undefined || maxValue !== undefined || stepValue !== undefined)) {\n            if (typeof result === 'number') {\n                result = clampToAllowedNumber(result, minValue, maxValue, stepValue);\n            } else if (Array.isArray(result)) {\n                result = result.map((item) => typeof item === 'number' ? clampToAllowedNumber(item, minValue, maxValue, stepValue) : item);\n            }\n        }\n\n        if (value !== undefined && result !== undefined && values && !values.includes(result)) {\n            // The result is not among the allowed values. Instead, use the default value from the option.\n            result = defaultValue;\n            if (type) {\n                result = coerceValue(type, result);\n            }\n        }\n\n        // @ts-expect-error - TS2367 - This comparison appears to be unintentional because the types 'string' and 'Type' have no overlap.\n        if ((type && type !== this.type) || (result !== undefined && typeOf(result) !== this.type)) {\n            result = coerceValue(this.type.kind, result);\n        }\n\n        return result;\n    }\n\n    eachChild() { }\n\n    outputDefined(): boolean {\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        const res = [\"config\", this.key];\n        if (this.scope) {\n            res.concat(this.key);\n        }\n        return res;\n    }\n}\n\nexport default Config;\n","import CompoundExpression from './compound_expression';\nimport Within from './definitions/within';\nimport Distance from './definitions/distance';\nimport Config from './definitions/config';\n\nimport type {Expression} from './expression';\n\nfunction isFeatureConstant(e: Expression): boolean {\n    if (e instanceof CompoundExpression) {\n        if (e.name === 'get' && e.args.length === 1) {\n            return false;\n        } else if (e.name === 'feature-state') {\n            return false;\n        } else if (e.name === 'has' && e.args.length === 1) {\n            return false;\n        } else if (\n            e.name === 'properties' ||\n            e.name === 'geometry-type' ||\n            e.name === 'id'\n        ) {\n            return false;\n        } else if (/^filter-/.test(e.name)) {\n            return false;\n        }\n    }\n\n    if (e instanceof Within) {\n        return false;\n    }\n\n    if (e instanceof Distance) {\n        return false;\n    }\n\n    let result = true;\n    e.eachChild(arg => {\n        if (result && !isFeatureConstant(arg)) { result = false; }\n    });\n    return result;\n}\n\nfunction isStateConstant(e: Expression): boolean {\n    if (e instanceof CompoundExpression) {\n        if (e.name === 'feature-state') {\n            return false;\n        }\n    }\n    let result = true;\n    e.eachChild(arg => {\n        if (result && !isStateConstant(arg)) { result = false; }\n    });\n    return result;\n}\n\nfunction getConfigDependencies(e: Expression): Set<string> {\n    if (e instanceof Config) {\n        const singleConfig = new Set([e.key]);\n        return singleConfig;\n    }\n\n    let result = new Set<string>();\n    e.eachChild(arg => {\n        result = new Set([...result, ...getConfigDependencies(arg)]);\n    });\n    return result;\n}\n\nfunction isGlobalPropertyConstant(e: Expression, properties: Array<string>): boolean {\n    if (e instanceof CompoundExpression && properties.indexOf(e.name) >= 0) { return false; }\n    let result = true;\n    e.eachChild((arg) => {\n        if (result && !isGlobalPropertyConstant(arg, properties)) { result = false; }\n    });\n    return result;\n}\n\nexport {isFeatureConstant, isGlobalPropertyConstant, isStateConstant, getConfigDependencies};\n","import type {Type} from '../types';\nimport type {Expression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext  from '../evaluation_context';\n\nclass Var implements Expression {\n    type: Type;\n    name: string;\n    boundExpression: Expression;\n\n    constructor(name: string, boundExpression: Expression) {\n        this.type = boundExpression.type;\n        this.name = name;\n        this.boundExpression = boundExpression;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): void | Var {\n        if (args.length !== 2 || typeof args[1] !== 'string')\n            return context.error(`'var' expression requires exactly one string literal argument.`);\n\n        const name = args[1];\n        if (!context.scope.has(name)) {\n            return context.error(`Unknown variable \"${name}\". Make sure \"${name}\" has been bound in an enclosing \"let\" expression before using it.`, 1);\n        }\n\n        return new Var(name, context.scope.get(name));\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        return this.boundExpression.evaluate(ctx);\n    }\n\n    eachChild() {}\n\n    outputDefined(): boolean {\n        return false;\n    }\n\n    serialize(): Array<string> {\n        return [\"var\", this.name];\n    }\n}\n\nexport default Var;\n","import Scope from './scope';\nimport {checkSubtype} from './types';\nimport ParsingError from './parsing_error';\nimport Literal from './definitions/literal';\nimport Assertion from './definitions/assertion';\nimport Coercion from './definitions/coercion';\nimport EvaluationContext from './evaluation_context';\nimport CompoundExpression from './compound_expression';\nimport CollatorExpression from './definitions/collator';\nimport Within from './definitions/within';\nimport Distance from './definitions/distance';\nimport Config from './definitions/config';\nimport {isGlobalPropertyConstant, isFeatureConstant} from './is_constant';\nimport Var from './definitions/var';\n\nimport type {Expression, ExpressionRegistry} from './expression';\nimport type {Type} from './types';\nimport type {ConfigOptions} from '../types/config_options';\n\n/**\n * State associated parsing at a given point in an expression tree.\n * @private\n */\nclass ParsingContext {\n    registry: ExpressionRegistry;\n    path: Array<number | string>;\n    key: string;\n    scope: Scope;\n    errors: Array<ParsingError>;\n    _scope: string | null | undefined;\n    options: ConfigOptions | null | undefined;\n\n    // The expected type of this expression. Provided only to allow Expression\n    // implementations to infer argument types: Expression#parse() need not\n    // check that the output type of the parsed expression matches\n    // `expectedType`.\n    expectedType: Type | null | undefined;\n\n    constructor(\n        registry: ExpressionRegistry,\n        path: Array<number | string> = [],\n        expectedType?: Type | null,\n        scope: Scope = new Scope(),\n        errors: Array<ParsingError> = [],\n        _scope?: string | null,\n        options?: ConfigOptions | null\n    ) {\n        this.registry = registry;\n        this.path = path;\n        this.key = path.map(part => { if (typeof part === 'string') { return `['${part}']`; } return `[${part}]`; }).join('');\n        this.scope = scope;\n        this.errors = errors;\n        this.expectedType = expectedType;\n        this._scope = _scope;\n        this.options = options;\n    }\n\n    /**\n     * @param expr the JSON expression to parse\n     * @param index the optional argument index if this expression is an argument of a parent expression that's being parsed\n     * @param options\n     * @param options.omitTypeAnnotations set true to omit inferred type annotations.  Caller beware: with this option set, the parsed expression's type will NOT satisfy `expectedType` if it would normally be wrapped in an inferred annotation.\n     * @private\n     */\n    parse(\n        expr: unknown,\n        index?: number,\n        expectedType?: Type | null,\n        bindings?: Array<[string, Expression]>,\n        options: {\n            typeAnnotation?: 'assert' | 'coerce' | 'omit';\n        } = {},\n    ): Expression | null | undefined {\n        if (index || expectedType) {\n            return this.concat(index, null, expectedType, bindings)._parse(expr, options);\n        }\n        return this._parse(expr, options);\n    }\n\n    /**\n     * @param expr the JSON expression to parse\n     * @param index the optional argument index if parent object being is an argument of another expression\n     * @param key key of parent object being parsed\n     * @param options\n     * @param options.omitTypeAnnotations set true to omit inferred type annotations.  Caller beware: with this option set, the parsed expression's type will NOT satisfy `expectedType` if it would normally be wrapped in an inferred annotation.\n     * @private\n     */\n    parseObjectValue(\n        expr: unknown,\n        index: number,\n        key: string,\n        expectedType?: Type | null,\n        bindings?: Array<[string, Expression]>,\n        options: {\n            typeAnnotation?: 'assert' | 'coerce' | 'omit';\n        } = {},\n    ): Expression | null | undefined {\n        return this.concat(index, key, expectedType, bindings)._parse(expr, options);\n    }\n\n    _parse(\n        expr: unknown,\n        options: {\n            typeAnnotation?: 'assert' | 'coerce' | 'omit';\n        },\n    ): Expression | null | undefined {\n        if (expr === null || typeof expr === 'string' || typeof expr === 'boolean' || typeof expr === 'number') {\n            expr = ['literal', expr];\n        }\n\n        function annotate(parsed: Expression, type: Type, typeAnnotation: 'assert' | 'coerce' | 'omit') {\n            if (typeAnnotation === 'assert') {\n                return new Assertion(type, [parsed]);\n            } else if (typeAnnotation === 'coerce') {\n                return new Coercion(type, [parsed]);\n            } else {\n                return parsed;\n            }\n        }\n\n        if (Array.isArray(expr)) {\n            if (expr.length === 0) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                return this.error(`Expected an array with at least one element. If you wanted a literal array, use [\"literal\", []].`);\n            }\n\n            const Expr = typeof expr[0] === 'string' ? this.registry[expr[0]] : undefined;\n            if (Expr) {\n                let parsed = Expr.parse(expr, this);\n                if (!parsed) return null;\n\n                if (this.expectedType) {\n                    const expected = this.expectedType;\n                    const actual = parsed.type;\n\n                    // When we expect a number, string, boolean, or array but have a value, wrap it in an assertion.\n                    // When we expect a color or formatted string, but have a string or value, wrap it in a coercion.\n                    // Otherwise, we do static type-checking.\n                    //\n                    // These behaviors are overridable for:\n                    //   * The \"coalesce\" operator, which needs to omit type annotations.\n                    //   * String-valued properties (e.g. `text-field`), where coercion is more convenient than assertion.\n                    //\n                    if ((expected.kind === 'string' || expected.kind === 'number' || expected.kind === 'boolean' || expected.kind === 'object' || expected.kind === 'array') && actual.kind === 'value') {\n                        parsed = annotate(parsed, expected, options.typeAnnotation || 'assert');\n                    } else if ((expected.kind === 'color' || expected.kind === 'formatted' || expected.kind === 'resolvedImage') && (actual.kind === 'value' || actual.kind === 'string')) {\n                        parsed = annotate(parsed, expected, options.typeAnnotation || 'coerce');\n                    } else if (this.checkSubtype(expected, actual)) {\n                        return null;\n                    }\n                }\n\n                // If an expression's arguments are all literals, we can evaluate\n                // it immediately and replace it with a literal value in the\n                // parsed/compiled result. Expressions that expect an image should\n                // not be resolved here so we can later get the available images.\n                if (!(parsed instanceof Literal) && (parsed.type.kind !== 'resolvedImage') && isConstant(parsed)) {\n                    const ec = new EvaluationContext(this._scope, this.options);\n                    try {\n                        parsed = new Literal(parsed.type, parsed.evaluate(ec));\n                    } catch (e: any) {\n                        this.error(e.message);\n                        return null;\n                    }\n                }\n\n                return parsed;\n            }\n\n            // Try to parse as array\n            return Coercion.parse(['to-array', expr], this);\n        } else if (typeof expr === 'undefined') {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return this.error(`'undefined' value invalid. Use null instead.`);\n        } else if (typeof expr === 'object') {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return this.error(`Bare objects invalid. Use [\"literal\", {...}] instead.`);\n        } else {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return this.error(`Expected an array, but found ${typeof expr} instead.`);\n        }\n    }\n\n    /**\n     * Returns a copy of this context suitable for parsing the subexpression at\n     * index `index`, optionally appending to 'let' binding map.\n     *\n     * Note that `errors` property, intended for collecting errors while\n     * parsing, is copied by reference rather than cloned.\n     * @private\n     */\n    concat(\n        index?: number | null,\n        key?: string | null,\n        expectedType?: Type | null,\n        bindings?: Array<[string, Expression]>,\n    ): ParsingContext {\n        let path = typeof index === 'number' ? this.path.concat(index) : this.path;\n        path = typeof key === 'string' ? path.concat(key) : path;\n        const scope = bindings ? this.scope.concat(bindings) : this.scope;\n        return new ParsingContext(\n            this.registry,\n            path,\n            expectedType || null,\n            scope,\n            this.errors,\n            this._scope,\n            this.options\n        );\n    }\n\n    /**\n     * Push a parsing (or type checking) error into the `this.errors`\n     * @param error The message\n     * @param keys Optionally specify the source of the error at a child\n     * of the current expression at `this.key`.\n     * @private\n     */\n    error(error: string, ...keys: Array<number>) {\n        const key = `${this.key}${keys.map(k => `[${k}]`).join('')}`;\n        this.errors.push(new ParsingError(key, error));\n    }\n\n    /**\n     * Returns null if `t` is a subtype of `expected`; otherwise returns an\n     * error message and also pushes it to `this.errors`.\n     */\n    checkSubtype(expected: Type, t: Type): string | null | undefined {\n        const error = checkSubtype(expected, t);\n        if (error) this.error(error);\n        return error;\n    }\n}\n\nexport default ParsingContext;\n\nfunction isConstant(expression: Expression) {\n    if (expression instanceof Var) {\n        return isConstant(expression.boundExpression);\n    } else if (expression instanceof CompoundExpression && expression.name === 'error') {\n        return false;\n    } else if (expression instanceof CollatorExpression) {\n        // Although the results of a Collator expression with fixed arguments\n        // generally shouldn't change between executions, we can't serialize them\n        // as constant expressions because results change based on environment.\n        return false;\n    } else if (expression instanceof Within) {\n        return false;\n    } else if (expression instanceof Distance) {\n        return false;\n    } else if (expression instanceof Config) {\n        return false;\n    }\n\n    const isTypeAnnotation = expression instanceof Coercion ||\n        expression instanceof Assertion;\n\n    let childrenConstant = true;\n    expression.eachChild(child => {\n        // We can _almost_ assume that if `expressions` children are constant,\n        // they would already have been evaluated to Literal values when they\n        // were parsed.  Type annotations are the exception, because they might\n        // have been inferred and added after a child was parsed.\n\n        // So we recurse into isConstant() for the children of type annotations,\n        // but otherwise simply check whether they are Literals.\n        if (isTypeAnnotation) {\n            childrenConstant = childrenConstant && isConstant(child);\n        } else {\n            childrenConstant = childrenConstant && child instanceof Literal;\n        }\n    });\n    if (!childrenConstant) {\n        return false;\n    }\n\n    return isFeatureConstant(expression) &&\n        isGlobalPropertyConstant(expression, ['zoom', 'heatmap-density', 'line-progress', 'raster-value', 'sky-radial-progress', 'accumulated', 'is-supported-script', 'pitch', 'distance-from-center', 'measure-light', 'raster-particle-speed']);\n}\n","import RuntimeError from './runtime_error';\n\nimport type {Expression} from './expression';\n\nexport type Stops = Array<[number, Expression]>;\n\n/**\n * Returns the index of the last stop <= input, or 0 if it doesn't exist.\n * @private\n */\nexport function findStopLessThanOrEqualTo(stops: Array<number>, input: number): number {\n    const lastIndex = stops.length - 1;\n    let lowerIndex = 0;\n    let upperIndex = lastIndex;\n    let currentIndex = 0;\n    let currentValue, nextValue;\n\n    while (lowerIndex <= upperIndex) {\n        currentIndex = Math.floor((lowerIndex + upperIndex) / 2);\n        currentValue = stops[currentIndex];\n        nextValue = stops[currentIndex + 1];\n\n        if (currentValue <= input) {\n            if (currentIndex === lastIndex || input < nextValue) { // Search complete\n                return currentIndex;\n            }\n\n            lowerIndex = currentIndex + 1;\n        } else if (currentValue > input) {\n            upperIndex = currentIndex - 1;\n        } else {\n            throw new RuntimeError('Input is not a number.');\n        }\n    }\n\n    return 0;\n}\n","import {NumberType} from '../types';\nimport {findStopLessThanOrEqualTo} from '../stops';\n\nimport type {Stops} from '../stops';\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\nclass Step implements Expression {\n    type: Type;\n\n    input: Expression;\n    labels: Array<number>;\n    outputs: Array<Expression>;\n\n    constructor(type: Type, input: Expression, stops: Stops) {\n        this.type = type;\n        this.input = input;\n\n        this.labels = [];\n        this.outputs = [];\n        for (const [label, expression] of stops) {\n            this.labels.push(label);\n            this.outputs.push(expression);\n        }\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Step | null | undefined {\n        if (args.length - 1 < 4) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Step'.\n            return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);\n        }\n\n        if ((args.length - 1) % 2 !== 0) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Step'.\n            return context.error(`Expected an even number of arguments.`);\n        }\n\n        const input = context.parse(args[1], 1, NumberType);\n        if (!input) return null;\n\n        const stops: Stops = [];\n\n        let outputType: Type = (null as any);\n        if (context.expectedType && context.expectedType.kind !== 'value') {\n            outputType = context.expectedType;\n        }\n\n        for (let i = 1; i < args.length; i += 2) {\n            const label = i === 1 ? -Infinity : args[i];\n            const value = args[i + 1];\n\n            const labelKey = i;\n            const valueKey = i + 1;\n\n            if (typeof label !== 'number') {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Step'.\n                return context.error('Input/output pairs for \"step\" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);\n            }\n\n            if (stops.length && stops[stops.length - 1][0] >= label) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Step'.\n                return context.error('Input/output pairs for \"step\" expressions must be arranged with input values in strictly ascending order.', labelKey);\n            }\n\n            const parsed = context.parse(value, valueKey, outputType);\n            if (!parsed) return null;\n            outputType = outputType || parsed.type;\n            stops.push([label, parsed]);\n        }\n\n        return new Step(outputType, input, stops);\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        const labels = this.labels;\n        const outputs = this.outputs;\n\n        if (labels.length === 1) {\n            return outputs[0].evaluate(ctx);\n        }\n\n        const value = (this.input.evaluate(ctx) as number);\n        if (value <= labels[0]) {\n            return outputs[0].evaluate(ctx);\n        }\n\n        const stopCount = labels.length;\n        if (value >= labels[stopCount - 1]) {\n            return outputs[stopCount - 1].evaluate(ctx);\n        }\n\n        const index = findStopLessThanOrEqualTo(labels, value);\n        return outputs[index].evaluate(ctx);\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.input);\n        for (const expression of this.outputs) {\n            fn(expression);\n        }\n    }\n\n    outputDefined(): boolean {\n        return this.outputs.every(out => out.outputDefined());\n    }\n\n    serialize(): SerializedExpression {\n        const serialized = [\"step\", this.input.serialize()];\n        for (let i = 0; i < this.labels.length; i++) {\n            if (i > 0) {\n                serialized.push(this.labels[i]);\n            }\n            serialized.push(this.outputs[i].serialize());\n        }\n        return serialized;\n    }\n}\n\nexport default Step;\n","'use strict';\n\nmodule.exports = UnitBezier;\n\nfunction UnitBezier(p1x, p1y, p2x, p2y) {\n    // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).\n    this.cx = 3.0 * p1x;\n    this.bx = 3.0 * (p2x - p1x) - this.cx;\n    this.ax = 1.0 - this.cx - this.bx;\n\n    this.cy = 3.0 * p1y;\n    this.by = 3.0 * (p2y - p1y) - this.cy;\n    this.ay = 1.0 - this.cy - this.by;\n\n    this.p1x = p1x;\n    this.p1y = p1y;\n    this.p2x = p2x;\n    this.p2y = p2y;\n}\n\nUnitBezier.prototype = {\n    sampleCurveX: function (t) {\n        // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.\n        return ((this.ax * t + this.bx) * t + this.cx) * t;\n    },\n\n    sampleCurveY: function (t) {\n        return ((this.ay * t + this.by) * t + this.cy) * t;\n    },\n\n    sampleCurveDerivativeX: function (t) {\n        return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;\n    },\n\n    solveCurveX: function (x, epsilon) {\n        if (epsilon === undefined) epsilon = 1e-6;\n\n        if (x < 0.0) return 0.0;\n        if (x > 1.0) return 1.0;\n\n        var t = x;\n\n        // First try a few iterations of Newton's method - normally very fast.\n        for (var i = 0; i < 8; i++) {\n            var x2 = this.sampleCurveX(t) - x;\n            if (Math.abs(x2) < epsilon) return t;\n\n            var d2 = this.sampleCurveDerivativeX(t);\n            if (Math.abs(d2) < 1e-6) break;\n\n            t = t - x2 / d2;\n        }\n\n        // Fall back to the bisection method for reliability.\n        var t0 = 0.0;\n        var t1 = 1.0;\n        t = x;\n\n        for (i = 0; i < 20; i++) {\n            x2 = this.sampleCurveX(t);\n            if (Math.abs(x2 - x) < epsilon) break;\n\n            if (x > x2) {\n                t0 = t;\n            } else {\n                t1 = t;\n            }\n\n            t = (t1 - t0) * 0.5 + t0;\n        }\n\n        return t;\n    },\n\n    solve: function (x, epsilon) {\n        return this.sampleCurveY(this.solveCurveX(x, epsilon));\n    }\n};\n","import Color from './color';\nimport {number as interpolateNumber} from './interpolate';\n\ntype LABColor = {\n    l: number;\n    a: number;\n    b: number;\n    alpha: number;\n};\n\ntype HCLColor = {\n    h: number;\n    c: number;\n    l: number;\n    alpha: number;\n};\n\n// Constants\nconst Xn = 0.950470, // D65 standard referent\n    Yn = 1,\n    Zn = 1.088830,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1,\n    deg2rad = Math.PI / 180,\n    rad2deg = 180 / Math.PI;\n\n// Utilities\nfunction xyz2lab(t: number) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t: number) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction xyz2rgb(x: number) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2xyz(x: number) {\n    x /= 255;\n    return x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\n// LAB\nfunction rgbToLab(rgbColor: Color): LABColor {\n    const b = rgb2xyz(rgbColor.r),\n        a = rgb2xyz(rgbColor.g),\n        l = rgb2xyz(rgbColor.b),\n        x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n        y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),\n        z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);\n\n    return {\n        l: 116 * y - 16,\n        a: 500 * (x - y),\n        b: 200 * (y - z),\n        alpha: rgbColor.a\n    };\n}\n\nfunction labToRgb(labColor: LABColor): Color {\n    let y = (labColor.l + 16) / 116,\n        x = isNaN(labColor.a) ? y : y + labColor.a / 500,\n        z = isNaN(labColor.b) ? y : y - labColor.b / 200;\n    y = Yn * lab2xyz(y);\n    x = Xn * lab2xyz(x);\n    z = Zn * lab2xyz(z);\n    return new Color(\n        xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\n        xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n        xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\n        labColor.alpha\n    );\n}\n\nfunction interpolateLab(from: LABColor, to: LABColor, t: number): LABColor {\n    return {\n        l: interpolateNumber(from.l, to.l, t),\n        a: interpolateNumber(from.a, to.a, t),\n        b: interpolateNumber(from.b, to.b, t),\n        alpha: interpolateNumber(from.alpha, to.alpha, t)\n    };\n}\n\n// HCL\nfunction rgbToHcl(rgbColor: Color): HCLColor {\n    const {l, a, b} = rgbToLab(rgbColor);\n    const h = Math.atan2(b, a) * rad2deg;\n    return {\n        h: h < 0 ? h + 360 : h,\n        c: Math.sqrt(a * a + b * b),\n        l,\n        alpha: rgbColor.a\n    };\n}\n\nfunction hclToRgb(hclColor: HCLColor): Color {\n    const h = hclColor.h * deg2rad,\n        c = hclColor.c,\n        l = hclColor.l;\n    return labToRgb({\n        l,\n        a: Math.cos(h) * c,\n        b: Math.sin(h) * c,\n        alpha: hclColor.alpha\n    });\n}\n\nfunction interpolateHue(a: number, b: number, t: number) {\n    const d = b - a;\n    return a + t * (d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d);\n}\n\nfunction interpolateHcl(from: HCLColor, to: HCLColor, t: number): HCLColor {\n    return {\n        h: interpolateHue(from.h, to.h, t),\n        c: interpolateNumber(from.c, to.c, t),\n        l: interpolateNumber(from.l, to.l, t),\n        alpha: interpolateNumber(from.alpha, to.alpha, t)\n    };\n}\n\nexport const lab = {\n    forward: rgbToLab,\n    reverse: labToRgb,\n    interpolate: interpolateLab\n} as const;\n\nexport const hcl = {\n    forward: rgbToHcl,\n    reverse: hclToRgb,\n    interpolate: interpolateHcl\n} as const;\n","import UnitBezier from '@mapbox/unitbezier';\nimport * as interpolate from '../../util/interpolate';\nimport {toString, NumberType, ColorType} from '../types';\nimport {findStopLessThanOrEqualTo} from '../stops';\nimport {hcl, lab} from '../../util/color_spaces';\n\nimport type Color from '../../util/color';\nimport type {Stops} from '../stops';\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\nexport type InterpolationType = {\n    name: 'linear';\n} | {\n    name: 'exponential';\n    base: number;\n} | {\n    name: 'cubic-bezier';\n    controlPoints: [number, number, number, number];\n};\n\nclass Interpolate implements Expression {\n    type: Type;\n\n    operator: 'interpolate' | 'interpolate-hcl' | 'interpolate-lab';\n    interpolation: InterpolationType;\n    input: Expression;\n    labels: Array<number>;\n    outputs: Array<Expression>;\n\n    constructor(type: Type, operator: 'interpolate' | 'interpolate-hcl' | 'interpolate-lab', interpolation: InterpolationType, input: Expression, stops: Stops) {\n        this.type = type;\n        this.operator = operator;\n        this.interpolation = interpolation;\n        this.input = input;\n\n        this.labels = [];\n        this.outputs = [];\n        for (const [label, expression] of stops) {\n            this.labels.push(label);\n            this.outputs.push(expression);\n        }\n    }\n\n    static interpolationFactor(\n        interpolation: InterpolationType,\n        input: number,\n        lower: number,\n        upper: number,\n    ): number {\n        let t = 0;\n        if (interpolation.name === 'exponential') {\n            t = exponentialInterpolation(input, interpolation.base, lower, upper);\n        } else if (interpolation.name === 'linear') {\n            t = exponentialInterpolation(input, 1, lower, upper);\n        } else if (interpolation.name === 'cubic-bezier') {\n            const c = interpolation.controlPoints;\n            const ub = new UnitBezier(c[0], c[1], c[2], c[3]);\n            t = ub.solve(exponentialInterpolation(input, 1, lower, upper));\n        }\n        return t;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Interpolate | null | undefined {\n        let [operator, interpolation, input, ...rest] = args;\n\n        if (!Array.isArray(interpolation) || interpolation.length === 0) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n            return context.error(`Expected an interpolation type expression.`, 1);\n        }\n\n        if (interpolation[0] === 'linear') {\n            interpolation = {name: 'linear'};\n        } else if (interpolation[0] === 'exponential') {\n            const base = interpolation[1];\n            if (typeof base !== 'number')\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n                return context.error(`Exponential interpolation requires a numeric base.`, 1, 1);\n            interpolation = {\n                name: 'exponential',\n                base\n            };\n        } else if (interpolation[0] === 'cubic-bezier') {\n            const controlPoints = interpolation.slice(1);\n            if (\n                controlPoints.length !== 4 ||\n                controlPoints.some(t => typeof t !== 'number' || t < 0 || t > 1)\n            ) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n                return context.error('Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.', 1);\n            }\n\n            interpolation = {\n                name: 'cubic-bezier',\n                controlPoints: (controlPoints as any)\n            };\n        } else {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n            return context.error(`Unknown interpolation type ${String(interpolation[0])}`, 1, 0);\n        }\n\n        if (args.length - 1 < 4) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n            return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);\n        }\n\n        if ((args.length - 1) % 2 !== 0) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n            return context.error(`Expected an even number of arguments.`);\n        }\n\n        input = context.parse(input, 2, NumberType);\n        if (!input) return null;\n\n        const stops: Stops = [];\n\n        let outputType: Type = (null as any);\n        if (operator === 'interpolate-hcl' || operator === 'interpolate-lab') {\n            outputType = ColorType;\n        } else if (context.expectedType && context.expectedType.kind !== 'value') {\n            outputType = context.expectedType;\n        }\n\n        for (let i = 0; i < rest.length; i += 2) {\n            const label = rest[i];\n            const value = rest[i + 1];\n\n            const labelKey = i + 3;\n            const valueKey = i + 4;\n\n            if (typeof label !== 'number') {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n                return context.error('Input/output pairs for \"interpolate\" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);\n            }\n\n            if (stops.length && stops[stops.length - 1][0] >= label) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n                return context.error('Input/output pairs for \"interpolate\" expressions must be arranged with input values in strictly ascending order.', labelKey);\n            }\n\n            const parsed = context.parse(value, valueKey, outputType);\n            if (!parsed) return null;\n            outputType = outputType || parsed.type;\n            stops.push([label, parsed]);\n        }\n\n        if (outputType.kind !== 'number' &&\n            outputType.kind !== 'color' &&\n            !(\n                outputType.kind === 'array' &&\n                outputType.itemType.kind === 'number' &&\n                typeof outputType.N === 'number'\n            )\n        ) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Interpolate'.\n            return context.error(`Type ${toString(outputType)} is not interpolatable.`);\n        }\n\n        // @ts-expect-error - TS2345 - Argument of type 'unknown' is not assignable to parameter of type 'InterpolationType'.\n        return new Interpolate(outputType, (operator as any), interpolation, input, stops);\n    }\n\n    evaluate(ctx: EvaluationContext): Color {\n        const labels = this.labels;\n        const outputs = this.outputs;\n\n        if (labels.length === 1) {\n            return outputs[0].evaluate(ctx);\n        }\n\n        const value = (this.input.evaluate(ctx) as number);\n        if (value <= labels[0]) {\n            return outputs[0].evaluate(ctx);\n        }\n\n        const stopCount = labels.length;\n        if (value >= labels[stopCount - 1]) {\n            return outputs[stopCount - 1].evaluate(ctx);\n        }\n\n        const index = findStopLessThanOrEqualTo(labels, value);\n        const lower = labels[index];\n        const upper = labels[index + 1];\n        const t = Interpolate.interpolationFactor(this.interpolation, value, lower, upper);\n\n        const outputLower = outputs[index].evaluate(ctx);\n        const outputUpper = outputs[index + 1].evaluate(ctx);\n\n        if (this.operator === 'interpolate') {\n            return (interpolate[this.type.kind.toLowerCase()] as any)(outputLower, outputUpper, t); // eslint-disable-line import/namespace\n        } else if (this.operator === 'interpolate-hcl') {\n            return hcl.reverse(hcl.interpolate(hcl.forward(outputLower), hcl.forward(outputUpper), t));\n        } else {\n            return lab.reverse(lab.interpolate(lab.forward(outputLower), lab.forward(outputUpper), t));\n        }\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.input);\n        for (const expression of this.outputs) {\n            fn(expression);\n        }\n    }\n\n    outputDefined(): boolean {\n        return this.outputs.every(out => out.outputDefined());\n    }\n\n    serialize(): SerializedExpression {\n        let interpolation;\n        if (this.interpolation.name === 'linear') {\n            interpolation = [\"linear\"];\n        } else if (this.interpolation.name === 'exponential') {\n            if  (this.interpolation.base === 1) {\n                interpolation = [\"linear\"];\n            } else {\n                interpolation = [\"exponential\", this.interpolation.base];\n            }\n        } else {\n            // @ts-expect-error - TS2769 - No overload matches this call.\n            interpolation = [\"cubic-bezier\" ].concat(this.interpolation.controlPoints);\n        }\n\n        const serialized = [this.operator, interpolation, this.input.serialize()];\n\n        for (let i = 0; i < this.labels.length; i++) {\n            serialized.push(\n                this.labels[i],\n                this.outputs[i].serialize()\n            );\n        }\n        return serialized;\n    }\n}\n\n/**\n * Returns a ratio that can be used to interpolate between exponential function\n * stops.\n * How it works: Two consecutive stop values define a (scaled and shifted) exponential function `f(x) = a * base^x + b`, where `base` is the user-specified base,\n * and `a` and `b` are constants affording sufficient degrees of freedom to fit\n * the function to the given stops.\n *\n * Here's a bit of algebra that lets us compute `f(x)` directly from the stop\n * values without explicitly solving for `a` and `b`:\n *\n * First stop value: `f(x0) = y0 = a * base^x0 + b`\n * Second stop value: `f(x1) = y1 = a * base^x1 + b`\n * => `y1 - y0 = a(base^x1 - base^x0)`\n * => `a = (y1 - y0)/(base^x1 - base^x0)`\n *\n * Desired value: `f(x) = y = a * base^x + b`\n * => `f(x) = y0 + a * (base^x - base^x0)`\n *\n * From the above, we can replace the `a` in `a * (base^x - base^x0)` and do a\n * little algebra:\n * ```\n * a * (base^x - base^x0) = (y1 - y0)/(base^x1 - base^x0) * (base^x - base^x0)\n *                     = (y1 - y0) * (base^x - base^x0) / (base^x1 - base^x0)\n * ```\n *\n * If we let `(base^x - base^x0) / (base^x1 base^x0)`, then we have\n * `f(x) = y0 + (y1 - y0) * ratio`.  In other words, `ratio` may be treated as\n * an interpolation factor between the two stops' output values.\n *\n * (Note: a slightly different form for `ratio`,\n * `(base^(x-x0) - 1) / (base^(x1-x0) - 1) `, is equivalent, but requires fewer\n * expensive `Math.pow()` operations.)\n *\n * @private\n*/\nfunction exponentialInterpolation(input: number, base: number, lowerValue: number, upperValue: number) {\n    const difference = upperValue - lowerValue;\n    const progress = input - lowerValue;\n\n    if (difference === 0) {\n        return 0;\n    } else if (base === 1) {\n        return progress / difference;\n    } else {\n        return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);\n    }\n}\n\nexport default Interpolate;\n","import assert from 'assert';\nimport {checkSubtype, ValueType} from '../types';\nimport ResolvedImage from '../types/resolved_image';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\nclass Coalesce implements Expression {\n    type: Type;\n    args: Array<Expression>;\n\n    constructor(type: Type, args: Array<Expression>) {\n        this.type = type;\n        this.args = args;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Coalesce | null | undefined {\n        if (args.length < 2) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Coalesce'.\n            return context.error(\"Expectected at least one argument.\");\n        }\n        let outputType: Type = (null as any);\n        const expectedType = context.expectedType;\n        if (expectedType && expectedType.kind !== 'value') {\n            outputType = expectedType;\n        }\n        const parsedArgs = [];\n\n        for (const arg of args.slice(1)) {\n            const parsed = context.parse(arg, 1 + parsedArgs.length, outputType, undefined, {typeAnnotation: 'omit'});\n            if (!parsed) return null;\n            outputType = outputType || parsed.type;\n            parsedArgs.push(parsed);\n        }\n        assert(outputType);\n\n        // Above, we parse arguments without inferred type annotation so that\n        // they don't produce a runtime error for `null` input, which would\n        // preempt the desired null-coalescing behavior.\n        // Thus, if any of our arguments would have needed an annotation, we\n        // need to wrap the enclosing coalesce expression with it instead.\n        const needsAnnotation = expectedType &&\n            parsedArgs.some(arg => checkSubtype(expectedType, arg.type));\n\n        return needsAnnotation ?\n            new Coalesce(ValueType, parsedArgs) :\n            new Coalesce((outputType as any), parsedArgs);\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        let result = null;\n        let argCount = 0;\n        let firstImage;\n        for (const arg of this.args) {\n            argCount++;\n            result = arg.evaluate(ctx);\n            // we need to keep track of the first requested image in a coalesce statement\n            // if coalesce can't find a valid image, we return the first image so styleimagemissing can fire\n            if (result && result instanceof ResolvedImage && !result.available) {\n                // set to first image\n                if (!firstImage) {\n                    firstImage = result;\n                }\n                result = null;\n                // if we reach the end, return the first image\n                if (argCount === this.args.length) {\n                    return firstImage;\n                }\n            }\n\n            if (result !== null) break;\n        }\n        return result;\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        this.args.forEach(fn);\n    }\n\n    outputDefined(): boolean {\n        return this.args.every(arg => arg.outputDefined());\n    }\n\n    serialize(): SerializedExpression {\n        const serialized = [\"coalesce\"];\n        // @ts-expect-error - TS2345 - Argument of type 'SerializedExpression' is not assignable to parameter of type 'string'.\n        this.eachChild(child => { serialized.push(child.serialize()); });\n        return serialized;\n    }\n}\n\nexport default Coalesce;\n","import type {Type} from '../types';\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext  from '../evaluation_context';\n\nclass Let implements Expression {\n    type: Type;\n    bindings: Array<[string, Expression]>;\n    result: Expression;\n\n    constructor(bindings: Array<[string, Expression]>, result: Expression) {\n        this.type = result.type;\n        this.bindings = [].concat(bindings);\n        this.result = result;\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        return this.result.evaluate(ctx);\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        for (const binding of this.bindings) {\n            fn(binding[1]);\n        }\n        fn(this.result);\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Let | null | undefined {\n        if (args.length < 4)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Let'.\n            return context.error(`Expected at least 3 arguments, but found ${args.length - 1} instead.`);\n\n        const bindings: Array<[string, Expression]> = [];\n        for (let i = 1; i < args.length - 1; i += 2) {\n            const name = args[i];\n\n            if (typeof name !== 'string') {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Let'.\n                return context.error(`Expected string, but found ${typeof name} instead.`, i);\n            }\n\n            if (/[^a-zA-Z0-9_]/.test(name)) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Let'.\n                return context.error(`Variable names must contain only alphanumeric characters or '_'.`, i);\n            }\n\n            const value = context.parse(args[i + 1], i + 1);\n            if (!value) return null;\n\n            bindings.push([name, value]);\n        }\n\n        const result = context.parse(args[args.length - 1], args.length - 1, context.expectedType, bindings);\n        if (!result) return null;\n\n        return new Let(bindings, result);\n    }\n\n    outputDefined(): boolean {\n        return this.result.outputDefined();\n    }\n\n    serialize(): SerializedExpression {\n        const serialized = [\"let\"];\n        for (const [name, expr] of this.bindings) {\n            // @ts-expect-error - TS2345 - Argument of type 'SerializedExpression' is not assignable to parameter of type 'string'.\n            serialized.push(name, expr.serialize());\n        }\n        // @ts-expect-error - TS2345 - Argument of type 'SerializedExpression' is not assignable to parameter of type 'string'.\n        serialized.push(this.result.serialize());\n        return serialized;\n    }\n}\n\nexport default Let;\n","import {array, ValueType, NumberType} from '../types';\nimport RuntimeError from '../runtime_error';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type, ArrayType} from '../types';\nimport type {Value} from '../values';\n\nclass At implements Expression {\n    type: Type;\n    index: Expression;\n    input: Expression;\n\n    constructor(type: Type, index: Expression, input: Expression) {\n        this.type = type;\n        this.index = index;\n        this.input = input;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): At | null | undefined {\n        if (args.length !== 3)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'At'.\n            return context.error(`Expected 2 arguments, but found ${args.length - 1} instead.`);\n\n        const index = context.parse(args[1], 1, NumberType);\n        const input = context.parse(args[2], 2, array(context.expectedType || ValueType));\n\n        if (!index || !input) return null;\n\n        const t: ArrayType = (input.type as any);\n        return new At(t.itemType, index, input);\n    }\n\n    evaluate(ctx: EvaluationContext): Value {\n        const index = (this.index.evaluate(ctx) as number);\n        const array = (this.input.evaluate(ctx) as Array<Value>);\n\n        if (index < 0) {\n            throw new RuntimeError(`Array index out of bounds: ${index} < 0.`);\n        }\n\n        if (index > array.length - 1) {\n            throw new RuntimeError(`Array index out of bounds: ${index} > ${array.length - 1}.`);\n        }\n\n        if (index === Math.floor(index)) {\n            return array[index];\n        }\n\n        // Interpolation logic for non-integer indices\n        const lowerIndex = Math.floor(index);\n        const upperIndex = Math.ceil(index);\n\n        const lowerValue = array[lowerIndex];\n        const upperValue = array[upperIndex];\n\n        if (typeof lowerValue !== 'number' || typeof upperValue !== 'number') {\n            throw new RuntimeError(`Cannot interpolate between non-number values at index ${index}.`);\n        }\n\n        // Linear interpolation\n        const fraction = index - lowerIndex;\n        return lowerValue * (1 - fraction) + upperValue * fraction;\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.index);\n        fn(this.input);\n    }\n\n    outputDefined(): boolean {\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        return [\"at\", this.index.serialize(), this.input.serialize()];\n    }\n}\n\nexport default At;\n","import {\n    BooleanType,\n    StringType,\n    ValueType,\n    NullType,\n    toString,\n    NumberType,\n    isValidType,\n    isValidNativeType,\n} from '../types';\nimport RuntimeError from '../runtime_error';\nimport {typeOf} from '../values';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\nclass In implements Expression {\n    type: Type;\n    needle: Expression;\n    haystack: Expression;\n\n    constructor(needle: Expression, haystack: Expression) {\n        this.type = BooleanType;\n        this.needle = needle;\n        this.haystack = haystack;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): In | null | undefined {\n        if (args.length !== 3) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'In'.\n            return context.error(`Expected 2 arguments, but found ${args.length - 1} instead.`);\n        }\n\n        const needle = context.parse(args[1], 1, ValueType);\n\n        const haystack = context.parse(args[2], 2, ValueType);\n\n        if (!needle || !haystack) return null;\n\n        if (!isValidType(needle.type, [BooleanType, StringType, NumberType, NullType, ValueType])) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'In'.\n            return context.error(`Expected first argument to be of type boolean, string, number or null, but found ${toString(needle.type)} instead`);\n        }\n\n        return new In(needle, haystack);\n    }\n\n    evaluate(ctx: EvaluationContext): boolean {\n        const needle = (this.needle.evaluate(ctx));\n        const haystack = (this.haystack.evaluate(ctx));\n\n        if (haystack == null) return false;\n\n        if (!isValidNativeType(needle, ['boolean', 'string', 'number', 'null'])) {\n            throw new RuntimeError(`Expected first argument to be of type boolean, string, number or null, but found ${toString(typeOf(needle))} instead.`);\n        }\n\n        if (!isValidNativeType(haystack, ['string', 'array'])) {\n            throw new RuntimeError(`Expected second argument to be of type array or string, but found ${toString(typeOf(haystack))} instead.`);\n        }\n\n        return haystack.indexOf(needle) >= 0;\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.needle);\n        fn(this.haystack);\n    }\n\n    outputDefined(): boolean {\n        return true;\n    }\n\n    serialize(): SerializedExpression {\n        return [\"in\", this.needle.serialize(), this.haystack.serialize()];\n    }\n}\n\nexport default In;\n","import {\n    BooleanType,\n    StringType,\n    ValueType,\n    NullType,\n    toString,\n    NumberType,\n    isValidType,\n    isValidNativeType,\n} from '../types';\nimport RuntimeError from '../runtime_error';\nimport {typeOf} from '../values';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\nclass IndexOf implements Expression {\n    type: Type;\n    needle: Expression;\n    haystack: Expression;\n    fromIndex: Expression | null | undefined;\n\n    constructor(needle: Expression, haystack: Expression, fromIndex?: Expression) {\n        this.type = NumberType;\n        this.needle = needle;\n        this.haystack = haystack;\n        this.fromIndex = fromIndex;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): IndexOf | null | undefined {\n        if (args.length <= 2 ||  args.length >= 5) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'IndexOf'.\n            return context.error(`Expected 3 or 4 arguments, but found ${args.length - 1} instead.`);\n        }\n\n        const needle = context.parse(args[1], 1, ValueType);\n\n        const haystack = context.parse(args[2], 2, ValueType);\n\n        if (!needle || !haystack) return null;\n        if (!isValidType(needle.type, [BooleanType, StringType, NumberType, NullType, ValueType])) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'IndexOf'.\n            return context.error(`Expected first argument to be of type boolean, string, number or null, but found ${toString(needle.type)} instead`);\n        }\n\n        if (args.length === 4) {\n            const fromIndex = context.parse(args[3], 3, NumberType);\n            if (!fromIndex) return null;\n            return new IndexOf(needle, haystack, fromIndex);\n        } else {\n            return new IndexOf(needle, haystack);\n        }\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        const needle = (this.needle.evaluate(ctx));\n        const haystack = (this.haystack.evaluate(ctx));\n\n        if (!isValidNativeType(needle, ['boolean', 'string', 'number', 'null'])) {\n            throw new RuntimeError(`Expected first argument to be of type boolean, string, number or null, but found ${toString(typeOf(needle))} instead.`);\n        }\n\n        if (!isValidNativeType(haystack, ['string', 'array'])) {\n            throw new RuntimeError(`Expected second argument to be of type array or string, but found ${toString(typeOf(haystack))} instead.`);\n        }\n\n        if (this.fromIndex) {\n            const fromIndex = (this.fromIndex.evaluate(ctx) as number);\n            return haystack.indexOf(needle, fromIndex);\n        }\n\n        return haystack.indexOf(needle);\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.needle);\n        fn(this.haystack);\n        if (this.fromIndex) {\n            fn(this.fromIndex);\n        }\n    }\n\n    outputDefined(): boolean {\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        if (this.fromIndex != null && this.fromIndex !== undefined) {\n            const fromIndex = this.fromIndex.serialize();\n            return [\"index-of\", this.needle.serialize(), this.haystack.serialize(), fromIndex];\n        }\n        return [\"index-of\", this.needle.serialize(), this.haystack.serialize()];\n    }\n}\n\nexport default IndexOf;\n","import assert from 'assert';\nimport {typeOf} from '../values';\nimport {ValueType} from '../types';\n\nimport type {Type} from '../types';\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\n\n// Map input label values to output expression index\ntype Cases = Partial<Record<number | string, number>>;\n\nclass Match implements Expression {\n    type: Type;\n    inputType: Type;\n\n    input: Expression;\n    cases: Cases;\n    outputs: Array<Expression>;\n    otherwise: Expression;\n\n    constructor(inputType: Type, outputType: Type, input: Expression, cases: Cases, outputs: Array<Expression>, otherwise: Expression) {\n        this.inputType = inputType;\n        this.type = outputType;\n        this.input = input;\n        this.cases = cases;\n        this.outputs = outputs;\n        this.otherwise = otherwise;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Match | null | undefined {\n        if (args.length < 5)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Match'.\n            return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);\n        if (args.length % 2 !== 1)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Match'.\n            return context.error(`Expected an even number of arguments.`);\n\n        let inputType;\n        let outputType: Type | null | undefined;\n        if (context.expectedType && context.expectedType.kind !== 'value') {\n            outputType = context.expectedType;\n        }\n        const cases: Record<string, any> = {};\n        const outputs = [];\n        for (let i = 2; i < args.length - 1; i += 2) {\n            let labels = args[i];\n            const value = args[i + 1];\n\n            if (!Array.isArray(labels)) {\n                labels = [labels];\n            }\n\n            const labelContext = context.concat(i);\n            // @ts-expect-error - TS2339 - Property 'length' does not exist on type 'unknown'.\n            if (labels.length === 0) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Match'.\n                return labelContext.error('Expected at least one branch label.');\n            }\n\n            // @ts-expect-error - TS2488 - Type 'unknown' must have a '[Symbol.iterator]()' method that returns an iterator.\n            for (const label of labels) {\n                if (typeof label !== 'number' && typeof label !== 'string') {\n                    // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Match'.\n                    return labelContext.error(`Branch labels must be numbers or strings.`);\n                } else if (typeof label === 'number' && Math.abs(label) > Number.MAX_SAFE_INTEGER) {\n                    // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Match'.\n                    return labelContext.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);\n\n                } else if (typeof label === 'number' && Math.floor(label) !== label) {\n                    // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Match'.\n                    return labelContext.error(`Numeric branch labels must be integer values.`);\n\n                } else if (!inputType) {\n                    inputType = typeOf(label);\n                } else if (labelContext.checkSubtype(inputType, typeOf(label))) {\n                    return null;\n                }\n\n                if (typeof cases[String(label)] !== 'undefined') {\n                    // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Match'.\n                    return labelContext.error('Branch labels must be unique.');\n                }\n\n                cases[String(label)] = outputs.length;\n            }\n\n            const result = context.parse(value, i, outputType);\n            if (!result) return null;\n            outputType = outputType || result.type;\n            outputs.push(result);\n        }\n\n        const input = context.parse(args[1], 1, ValueType);\n        if (!input) return null;\n\n        const otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);\n        if (!otherwise) return null;\n\n        assert(inputType && outputType);\n\n        if (input.type.kind !== 'value' && context.concat(1).checkSubtype((inputType), input.type)) {\n            return null;\n        }\n\n        return new Match((inputType), (outputType as any), input, cases, outputs, otherwise);\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        const input = (this.input.evaluate(ctx));\n        const output = (typeOf(input) === this.inputType && this.outputs[this.cases[input]]) || this.otherwise;\n        return output.evaluate(ctx);\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.input);\n        this.outputs.forEach(fn);\n        fn(this.otherwise);\n    }\n\n    outputDefined(): boolean {\n        return this.outputs.every(out => out.outputDefined()) && this.otherwise.outputDefined();\n    }\n\n    serialize(): SerializedExpression {\n        const serialized = [\"match\", this.input.serialize()];\n\n        // Sort so serialization has an arbitrary defined order, even though\n        // branch order doesn't affect evaluation\n        const sortedLabels = Object.keys(this.cases).sort();\n\n        // Group branches by unique match expression to support condensed\n        // serializations of the form [case1, case2, ...] -> matchExpression\n        const groupedByOutput: Array<[number, Array<number | string>]> = [];\n        const outputLookup: {\n            [index: number]: number;\n        } = {}; // lookup index into groupedByOutput for a given output expression\n        for (const label of sortedLabels) {\n            const outputIndex = outputLookup[this.cases[label]];\n            if (outputIndex === undefined) {\n                // First time seeing this output, add it to the end of the grouped list\n                outputLookup[this.cases[label]] = groupedByOutput.length;\n                groupedByOutput.push([this.cases[label], [label]]);\n            } else {\n                // We've seen this expression before, add the label to that output's group\n                groupedByOutput[outputIndex][1].push(label);\n            }\n        }\n\n        const coerceLabel = (label: number | string) => this.inputType.kind === 'number' ? Number(label) : label;\n\n        for (const [outputIndex, labels] of groupedByOutput) {\n            if (labels.length === 1) {\n                // Only a single label matches this output expression\n                serialized.push(coerceLabel(labels[0]));\n            } else {\n                // Array of literal labels pointing to this output expression\n                serialized.push(labels.map(coerceLabel));\n            }\n            serialized.push(this.outputs[outputIndex].serialize());\n        }\n        serialized.push(this.otherwise.serialize());\n        return serialized;\n    }\n}\n\nexport default Match;\n","import assert from 'assert';\nimport {BooleanType} from '../types';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\ntype Branches = Array<[Expression, Expression]>;\n\nclass Case implements Expression {\n    type: Type;\n\n    branches: Branches;\n    otherwise: Expression;\n\n    constructor(type: Type, branches: Branches, otherwise: Expression) {\n        this.type = type;\n        this.branches = branches;\n        this.otherwise = otherwise;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Case | null | undefined {\n        if (args.length < 4)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Case'.\n            return context.error(`Expected at least 3 arguments, but found only ${args.length - 1}.`);\n        if (args.length % 2 !== 0)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Case'.\n            return context.error(`Expected an odd number of arguments.`);\n\n        let outputType: Type | null | undefined;\n        if (context.expectedType && context.expectedType.kind !== 'value') {\n            outputType = context.expectedType;\n        }\n\n        const branches = [];\n        for (let i = 1; i < args.length - 1; i += 2) {\n            const test = context.parse(args[i], i, BooleanType);\n            if (!test) return null;\n\n            const result = context.parse(args[i + 1], i + 1, outputType);\n            if (!result) return null;\n\n            branches.push([test, result]);\n\n            outputType = outputType || result.type;\n        }\n\n        const otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);\n        if (!otherwise) return null;\n\n        assert(outputType);\n        return new Case((outputType as any), branches, otherwise);\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        for (const [test, expression] of this.branches) {\n            if (test.evaluate(ctx)) {\n                return expression.evaluate(ctx);\n            }\n        }\n        return this.otherwise.evaluate(ctx);\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        for (const [test, expression] of this.branches) {\n            fn(test);\n            fn(expression);\n        }\n        fn(this.otherwise);\n    }\n\n    outputDefined(): boolean {\n        return this.branches.every(([_, out]: [any, any]) => out.outputDefined()) && this.otherwise.outputDefined();\n    }\n\n    serialize(): SerializedExpression {\n        const serialized = [\"case\"];\n        // @ts-expect-error - TS2345 - Argument of type 'SerializedExpression' is not assignable to parameter of type 'string'.\n        this.eachChild(child => { serialized.push(child.serialize()); });\n        return serialized;\n    }\n}\n\nexport default Case;\n","import {\n    ValueType,\n    NumberType,\n    StringType,\n    array,\n    toString,\n    isValidType,\n    isValidNativeType,\n} from '../types';\nimport RuntimeError from '../runtime_error';\nimport {typeOf} from '../values';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\nclass Slice implements Expression {\n    type: Type;\n    input: Expression;\n    beginIndex: Expression;\n    endIndex: Expression | null | undefined;\n\n    constructor(type: Type, input: Expression, beginIndex: Expression, endIndex?: Expression) {\n        this.type = type;\n        this.input = input;\n        this.beginIndex = beginIndex;\n        this.endIndex = endIndex;\n\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Slice | null | undefined {\n        if (args.length <= 2 ||  args.length >= 5) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Slice'.\n            return context.error(`Expected 3 or 4 arguments, but found ${args.length - 1} instead.`);\n        }\n\n        const input = context.parse(args[1], 1, ValueType);\n        const beginIndex = context.parse(args[2], 2, NumberType);\n\n        if (!input || !beginIndex) return null;\n\n        if (!isValidType(input.type, [array(ValueType), StringType, ValueType])) {\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Slice'.\n            return context.error(`Expected first argument to be of type array or string, but found ${toString(input.type)} instead`);\n        }\n\n        if (args.length === 4) {\n            const endIndex = context.parse(args[3], 3, NumberType);\n            if (!endIndex) return null;\n            return new Slice(input.type, input, beginIndex, endIndex);\n        } else {\n            return new Slice(input.type, input, beginIndex);\n        }\n    }\n\n    evaluate(ctx: EvaluationContext): any {\n        const input = (this.input.evaluate(ctx));\n        const beginIndex = (this.beginIndex.evaluate(ctx) as number);\n\n        if (!isValidNativeType(input, ['string', 'array'])) {\n            throw new RuntimeError(`Expected first argument to be of type array or string, but found ${toString(typeOf(input))} instead.`);\n        }\n\n        if (this.endIndex) {\n            const endIndex = (this.endIndex.evaluate(ctx) as number);\n            return input.slice(beginIndex, endIndex);\n        }\n\n        return input.slice(beginIndex);\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.input);\n        fn(this.beginIndex);\n        if (this.endIndex) {\n            fn(this.endIndex);\n        }\n    }\n\n    outputDefined(): boolean {\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        if (this.endIndex != null && this.endIndex !== undefined) {\n            const endIndex = this.endIndex.serialize();\n            return [\"slice\", this.input.serialize(), this.beginIndex.serialize(), endIndex];\n        }\n        return [\"slice\", this.input.serialize(), this.beginIndex.serialize()];\n    }\n}\n\nexport default Slice;\n","import {toString, ValueType, BooleanType, CollatorType} from '../types';\nimport Assertion from './assertion';\nimport {typeOf} from '../values';\nimport RuntimeError from '../runtime_error';\n\nimport type {Expression, SerializedExpression, ExpressionRegistration} from '../expression';\nimport type EvaluationContext from '../evaluation_context';\nimport type ParsingContext from '../parsing_context';\nimport type {Type} from '../types';\n\ntype ComparisonOperator = '==' | '!=' | '<' | '>' | '<=' | '>=';\n\nfunction isComparableType(op: ComparisonOperator, type: Type) {\n    if (op === '==' || op === '!=') {\n        // equality operator\n        return type.kind === 'boolean' ||\n            type.kind === 'string' ||\n            type.kind === 'number' ||\n            type.kind === 'null' ||\n            type.kind === 'value';\n    } else {\n        // ordering operator\n        return type.kind === 'string' ||\n            type.kind === 'number' ||\n            type.kind === 'value';\n    }\n}\n\nfunction eq(ctx: EvaluationContext, a: any, b: any): boolean { return a === b; }\nfunction neq(ctx: EvaluationContext, a: any, b: any): boolean { return a !== b; }\nfunction lt(ctx: EvaluationContext, a: any, b: any): boolean { return a < b; }\nfunction gt(ctx: EvaluationContext, a: any, b: any): boolean { return a > b; }\nfunction lteq(ctx: EvaluationContext, a: any, b: any): boolean { return a <= b; }\nfunction gteq(ctx: EvaluationContext, a: any, b: any): boolean { return a >= b; }\n\nfunction eqCollate(ctx: EvaluationContext, a: any, b: any, c: any): boolean { return c.compare(a, b) === 0; }\nfunction neqCollate(ctx: EvaluationContext, a: any, b: any, c: any): boolean { return !eqCollate(ctx, a, b, c); }\nfunction ltCollate(ctx: EvaluationContext, a: any, b: any, c: any): boolean { return c.compare(a, b) < 0; }\nfunction gtCollate(ctx: EvaluationContext, a: any, b: any, c: any): boolean { return c.compare(a, b) > 0; }\nfunction lteqCollate(ctx: EvaluationContext, a: any, b: any, c: any): boolean { return c.compare(a, b) <= 0; }\nfunction gteqCollate(ctx: EvaluationContext, a: any, b: any, c: any): boolean { return c.compare(a, b) >= 0; }\n\n/**\n * Special form for comparison operators, implementing the signatures:\n * - (T, T, ?Collator) => boolean\n * - (T, value, ?Collator) => boolean\n * - (value, T, ?Collator) => boolean\n *\n * For inequalities, T must be either value, string, or number. For ==/!=, it\n * can also be boolean or null.\n *\n * Equality semantics are equivalent to Javascript's strict equality (===/!==)\n * -- i.e., when the arguments' types don't match, == evaluates to false, != to\n * true.\n *\n * When types don't match in an ordering comparison, a runtime error is thrown.\n *\n * @private\n */\nfunction makeComparison(\n    op: ComparisonOperator,\n    compareBasic: (arg1: EvaluationContext, arg2?: any, arg3?: any) => boolean,\n    compareWithCollator: (arg1: EvaluationContext, arg2?: any, arg3?: any, arg4?: any) => boolean,\n): ExpressionRegistration {\n    const isOrderComparison = op !== '==' && op !== '!=';\n\n    return class Comparison implements Expression {\n        type: Type;\n        lhs: Expression;\n        rhs: Expression;\n        collator: Expression | null | undefined;\n        hasUntypedArgument: boolean;\n\n        constructor(lhs: Expression, rhs: Expression, collator?: Expression | null) {\n            this.type = BooleanType;\n            this.lhs = lhs;\n            this.rhs = rhs;\n            this.collator = collator;\n            this.hasUntypedArgument = lhs.type.kind === 'value' || rhs.type.kind === 'value';\n        }\n\n        static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Expression | null | undefined {\n            if (args.length !== 3 && args.length !== 4)\n            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                return context.error(`Expected two or three arguments.`);\n\n            const op: ComparisonOperator = (args[0] as any);\n\n            let lhs = context.parse(args[1], 1, ValueType);\n            if (!lhs) return null;\n            if (!isComparableType(op, lhs.type)) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                return context.concat(1).error(`\"${op}\" comparisons are not supported for type '${toString(lhs.type)}'.`);\n            }\n            let rhs = context.parse(args[2], 2, ValueType);\n            if (!rhs) return null;\n            if (!isComparableType(op, rhs.type)) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                return context.concat(2).error(`\"${op}\" comparisons are not supported for type '${toString(rhs.type)}'.`);\n            }\n\n            if (\n                lhs.type.kind !== rhs.type.kind &&\n                lhs.type.kind !== 'value' &&\n                rhs.type.kind !== 'value'\n            ) {\n                // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                return context.error(`Cannot compare types '${toString(lhs.type)}' and '${toString(rhs.type)}'.`);\n            }\n\n            if (isOrderComparison) {\n                // typing rules specific to less/greater than operators\n                if (lhs.type.kind === 'value' && rhs.type.kind !== 'value') {\n                    // (value, T)\n                    lhs = new Assertion(rhs.type, [lhs]);\n                } else if (lhs.type.kind !== 'value' && rhs.type.kind === 'value') {\n                    // (T, value)\n                    rhs = new Assertion(lhs.type, [rhs]);\n                }\n            }\n\n            let collator = null;\n            if (args.length === 4) {\n                if (\n                    lhs.type.kind !== 'string' &&\n                    rhs.type.kind !== 'string' &&\n                    lhs.type.kind !== 'value' &&\n                    rhs.type.kind !== 'value'\n                ) {\n                    // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n                    return context.error(`Cannot use collator to compare non-string types.`);\n                }\n                collator = context.parse(args[3], 3, CollatorType);\n                if (!collator) return null;\n            }\n\n            return new Comparison(lhs, rhs, collator);\n        }\n\n        evaluate(ctx: EvaluationContext): boolean {\n            const lhs = this.lhs.evaluate(ctx);\n            const rhs = this.rhs.evaluate(ctx);\n\n            if (isOrderComparison && this.hasUntypedArgument) {\n                const lt = typeOf(lhs);\n                const rt = typeOf(rhs);\n                // check that type is string or number, and equal\n                if (lt.kind !== rt.kind || !(lt.kind === 'string' || lt.kind === 'number')) {\n                    throw new RuntimeError(`Expected arguments for \"${op}\" to be (string, string) or (number, number), but found (${lt.kind}, ${rt.kind}) instead.`);\n                }\n            }\n\n            if (this.collator && !isOrderComparison && this.hasUntypedArgument) {\n                const lt = typeOf(lhs);\n                const rt = typeOf(rhs);\n                if (lt.kind !== 'string' || rt.kind !== 'string') {\n                    return compareBasic(ctx, lhs, rhs);\n                }\n            }\n\n            return this.collator ?\n                compareWithCollator(ctx, lhs, rhs, this.collator.evaluate(ctx)) :\n                compareBasic(ctx, lhs, rhs);\n        }\n\n        eachChild(fn: (_: Expression) => void) {\n            fn(this.lhs);\n            fn(this.rhs);\n            if (this.collator) {\n                fn(this.collator);\n            }\n        }\n\n        outputDefined(): boolean {\n            return true;\n        }\n\n        serialize(): SerializedExpression {\n            const serialized = [op];\n            // @ts-expect-error - TS2345 - Argument of type 'SerializedExpression' is not assignable to parameter of type 'ComparisonOperator'.\n            this.eachChild(child => { serialized.push(child.serialize()); });\n            return serialized;\n        }\n    };\n}\n\nexport const Equals: ReturnType<typeof makeComparison> = makeComparison('==', eq, eqCollate);\nexport const NotEquals: ReturnType<typeof makeComparison> = makeComparison('!=', neq, neqCollate);\nexport const LessThan: ReturnType<typeof makeComparison> = makeComparison('<', lt, ltCollate);\nexport const GreaterThan: ReturnType<typeof makeComparison> = makeComparison('>', gt, gtCollate);\nexport const LessThanOrEqual: ReturnType<typeof makeComparison> = makeComparison('<=', lteq, lteqCollate);\nexport const GreaterThanOrEqual: ReturnType<typeof makeComparison> = makeComparison('>=', gteq, gteqCollate);\n","import {StringType, NumberType} from '../types';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type EvaluationContext from '../evaluation_context';\nimport type ParsingContext from '../parsing_context';\nimport type {Type} from '../types';\n\nexport default class NumberFormat implements Expression {\n    type: Type;\n    number: Expression;\n    locale: Expression | null;   // BCP 47 language tag\n    currency: Expression | null; // ISO 4217 currency code, required if style=currency\n    unit: Expression | null;     // Simple units sanctioned for use in ECMAScript, required if style=unit. https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier\n    minFractionDigits: Expression | null; // Default 0\n    maxFractionDigits: Expression | null; // Default 3\n\n    constructor(number: Expression,\n                locale: Expression | null,\n                currency: Expression | null,\n                unit: Expression | null,\n                minFractionDigits: Expression | null,\n                maxFractionDigits: Expression | null) {\n        this.type = StringType;\n        this.number = number;\n        this.locale = locale;\n        this.currency = currency;\n        this.unit = unit;\n        this.minFractionDigits = minFractionDigits;\n        this.maxFractionDigits = maxFractionDigits;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Expression | null | undefined {\n        if (args.length !== 3)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`Expected two arguments.`);\n\n        const number = context.parse(args[1], 1, NumberType);\n        if (!number) return null;\n\n        const options = (args[2] as any);\n        if (typeof options !== \"object\" || Array.isArray(options))\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Expression'.\n            return context.error(`NumberFormat options argument must be an object.`);\n\n        let locale = null;\n        if (options['locale']) {\n            locale = context.parseObjectValue(options['locale'], 2, 'locale', StringType);\n            if (!locale) return null;\n        }\n\n        let currency = null;\n        if (options['currency']) {\n            currency = context.parseObjectValue(options['currency'], 2, 'currency', StringType);\n            if (!currency) return null;\n        }\n\n        let unit = null;\n        if (options['unit']) {\n            unit = context.parseObjectValue(options['unit'], 2, 'unit', StringType);\n            if (!unit) return null;\n        }\n\n        let minFractionDigits = null;\n        if (options['min-fraction-digits']) {\n            minFractionDigits = context.parseObjectValue(options['min-fraction-digits'], 2, 'min-fraction-digits', NumberType);\n            if (!minFractionDigits) return null;\n        }\n\n        let maxFractionDigits = null;\n        if (options['max-fraction-digits']) {\n            maxFractionDigits = context.parseObjectValue(options['max-fraction-digits'], 2, 'max-fraction-digits', NumberType);\n            if (!maxFractionDigits) return null;\n        }\n\n        return new NumberFormat(number, locale, currency, unit, minFractionDigits, maxFractionDigits);\n    }\n\n    evaluate(ctx: EvaluationContext): string {\n        return new Intl.NumberFormat(this.locale ? this.locale.evaluate(ctx) : [],\n            {\n                style:\n                    (this.currency && \"currency\") ||\n                    (this.unit && \"unit\") ||\n                    \"decimal\",\n                currency: this.currency ? this.currency.evaluate(ctx) : undefined,\n                unit: this.unit ? this.unit.evaluate(ctx) : undefined,\n                minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(ctx) : undefined,\n                maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(ctx) : undefined,\n            }).format(this.number.evaluate(ctx));\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.number);\n        if (this.locale) {\n            fn(this.locale);\n        }\n        if (this.currency) {\n            fn(this.currency);\n        }\n        if (this.unit) {\n            fn(this.unit);\n        }\n        if (this.minFractionDigits) {\n            fn(this.minFractionDigits);\n        }\n        if (this.maxFractionDigits) {\n            fn(this.maxFractionDigits);\n        }\n    }\n\n    outputDefined(): boolean {\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        const options: Record<string, any> = {};\n        if (this.locale) {\n            options['locale'] = this.locale.serialize();\n        }\n        if (this.currency) {\n            options['currency'] = this.currency.serialize();\n        }\n        if (this.unit) {\n            options['unit'] = this.unit.serialize();\n        }\n        if (this.minFractionDigits) {\n            options['min-fraction-digits'] = this.minFractionDigits.serialize();\n        }\n        if (this.maxFractionDigits) {\n            options['max-fraction-digits'] = this.maxFractionDigits.serialize();\n        }\n        return [\"number-format\", this.number.serialize(), options];\n    }\n}\n","import {NumberType, toString} from '../types';\nimport {typeOf} from '../values';\nimport RuntimeError from '../runtime_error';\n\nimport type {Expression, SerializedExpression} from '../expression';\nimport type ParsingContext from '../parsing_context';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Type} from '../types';\n\nclass Length implements Expression {\n    type: Type;\n    input: Expression;\n\n    constructor(input: Expression) {\n        this.type = NumberType;\n        this.input = input;\n    }\n\n    static parse(args: ReadonlyArray<unknown>, context: ParsingContext): Length | null | undefined {\n        if (args.length !== 2)\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Length'.\n            return context.error(`Expected 1 argument, but found ${args.length - 1} instead.`);\n\n        const input = context.parse(args[1], 1);\n        if (!input) return null;\n\n        if (input.type.kind !== 'array' && input.type.kind !== 'string' && input.type.kind !== 'value')\n        // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'Length'.\n            return context.error(`Expected argument of type string or array, but found ${toString(input.type)} instead.`);\n\n        return new Length(input);\n    }\n\n    evaluate(ctx: EvaluationContext): number {\n        const input = this.input.evaluate(ctx);\n        if (typeof input === 'string') {\n            return input.length;\n        } else if (Array.isArray(input)) {\n            return input.length;\n        } else {\n            throw new RuntimeError(`Expected value to be of type string or array, but found ${toString(typeOf(input))} instead.`);\n        }\n    }\n\n    eachChild(fn: (_: Expression) => void) {\n        fn(this.input);\n    }\n\n    outputDefined(): boolean {\n        return false;\n    }\n\n    serialize(): SerializedExpression {\n        const serialized = [\"length\"];\n        // @ts-expect-error - TS2345 - Argument of type 'SerializedExpression' is not assignable to parameter of type 'string'.\n        this.eachChild(child => { serialized.push(child.serialize()); });\n        return serialized;\n    }\n}\n\nexport default Length;\n","// Seeded pseudo random generator function\nexport function mulberry32(a: number): () => number {\n    return function () {\n        a |= 0;\n        a = (a + 0x6d2b79f5) | 0;\n        let t = Math.imul(a ^ (a >>> 15), 1 | a);\n        t = (t + Math.imul(t ^ (t >>> 7), 61 | t)) ^ t;\n        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n    };\n}\n","import {\n    NumberType,\n    StringType,\n    BooleanType,\n    ColorType,\n    ObjectType,\n    ValueType,\n    ErrorType,\n    CollatorType,\n    array,\n    toString as typeToString,\n} from '../types';\nimport {typeOf, Color, validateRGBA, validateHSLA, toString as valueToString} from '../values';\nimport CompoundExpression from '../compound_expression';\nimport RuntimeError from '../runtime_error';\nimport Let from './let';\nimport Var from './var';\nimport Literal from './literal';\nimport Assertion from './assertion';\nimport Coercion from './coercion';\nimport At from './at';\nimport In from './in';\nimport IndexOf from './index_of';\nimport Match from './match';\nimport Case from './case';\nimport Slice from './slice';\nimport Step from './step';\nimport Interpolate from './interpolate';\nimport Coalesce from './coalesce';\nimport {\n    Equals,\n    NotEquals,\n    LessThan,\n    GreaterThan,\n    LessThanOrEqual,\n    GreaterThanOrEqual\n} from './comparison';\nimport CollatorExpression from './collator';\nimport NumberFormat from './number_format';\nimport FormatExpression from './format';\nimport ImageExpression from './image';\nimport Length from './length';\nimport Within from './within';\nimport Config from './config';\nimport Distance from './distance';\nimport {mulberry32} from '../../util/random';\n\nimport type {Type} from '../types';\nimport type EvaluationContext from '../evaluation_context';\nimport type {Varargs} from '../compound_expression';\nimport type {Expression, ExpressionRegistry} from '../expression';\n\nconst expressions: ExpressionRegistry = {\n    // special forms\n    '==': Equals,\n    '!=': NotEquals,\n    '>': GreaterThan,\n    '<': LessThan,\n    '>=': GreaterThanOrEqual,\n    '<=': LessThanOrEqual,\n    'array': Assertion,\n    'at': At,\n    'boolean': Assertion,\n    'case': Case,\n    'coalesce': Coalesce,\n    'collator': CollatorExpression,\n    'format': FormatExpression,\n    'image': ImageExpression,\n    'in': In,\n    'index-of': IndexOf,\n    'interpolate': Interpolate,\n    'interpolate-hcl': Interpolate,\n    'interpolate-lab': Interpolate,\n    'length': Length,\n    'let': Let,\n    'literal': Literal,\n    'match': Match,\n    'number': Assertion,\n    'number-format': NumberFormat,\n    'object': Assertion,\n    'slice': Slice,\n    'step': Step,\n    'string': Assertion,\n    'to-boolean': Coercion,\n    'to-color': Coercion,\n    'to-number': Coercion,\n    'to-string': Coercion,\n    'var': Var,\n    'within': Within,\n    'distance': Distance,\n    'config': Config\n};\n\nfunction rgba(ctx: EvaluationContext, [r, g, b, a]: Expression[]) {\n    r = r.evaluate(ctx);\n    g = g.evaluate(ctx);\n    b = b.evaluate(ctx);\n    const alpha = a ? a.evaluate(ctx) : 1;\n    const error = validateRGBA(r, g, b, alpha);\n    if (error) throw new RuntimeError(error);\n    // @ts-expect-error\n    return new Color(r / 255 * alpha, g / 255 * alpha, b / 255 * alpha, alpha);\n}\n\nfunction hsla(ctx: EvaluationContext, [h, s, l, a]: Expression[]) {\n    h = h.evaluate(ctx);\n    s = s.evaluate(ctx);\n    l = l.evaluate(ctx);\n    const alpha = a ? a.evaluate(ctx) : 1;\n    const error = validateHSLA(h, s, l, alpha);\n    if (error) throw new RuntimeError(error);\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    const colorFunction = `hsla(${h}, ${s}%, ${l}%, ${alpha})`;\n    const color = Color.parse(colorFunction);\n    if (!color) throw new RuntimeError(`Failed to parse HSLA color: ${colorFunction}`);\n    return color;\n}\n\nfunction has(\n    key: string,\n    obj: {\n        [key: string]: any;\n    },\n): boolean {\n    return key in obj;\n}\n\nfunction get(key: string, obj: {\n    [key: string]: any;\n}) {\n    const v = obj[key];\n    return typeof v === 'undefined' ? null : v;\n}\n\nfunction binarySearch(v: any, a: {\n    [key: number]: any;\n}, i: number, j: number) {\n    while (i <= j) {\n        const m = (i + j) >> 1;\n        if (a[m] === v)\n            return true;\n        if (a[m] > v)\n            j = m - 1;\n        else\n            i = m + 1;\n    }\n    return false;\n}\n\nfunction varargs(type: Type): Varargs {\n    return {type};\n}\n\nfunction hashString(str: string) {\n    let hash = 0;\n    if (str.length === 0) {\n        return hash;\n    }\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash;\n    }\n    return hash;\n}\n\nCompoundExpression.register(expressions, {\n    'error': [\n        ErrorType,\n        [StringType],\n        (ctx, [v]) => { throw new RuntimeError(v.evaluate(ctx)); }\n    ],\n    'typeof': [\n        StringType,\n        [ValueType],\n        (ctx, [v]) => typeToString(typeOf(v.evaluate(ctx)))\n    ],\n    'to-rgba': [\n        array(NumberType, 4),\n        [ColorType],\n        (ctx, [v]) => {\n            return v.evaluate(ctx).toRenderColor(null).toArray();\n        }\n    ],\n    'rgb': [\n        ColorType,\n        [NumberType, NumberType, NumberType],\n        rgba\n    ],\n    'rgba': [\n        ColorType,\n        [NumberType, NumberType, NumberType, NumberType],\n        rgba\n    ],\n    'hsl': [\n        ColorType,\n        [NumberType, NumberType, NumberType],\n        hsla\n    ],\n    'hsla': [\n        ColorType,\n        [NumberType, NumberType, NumberType, NumberType],\n        hsla\n    ],\n    'has': {\n        type: BooleanType,\n        overloads: [\n            [\n                [StringType],\n                (ctx, [key]) => has(key.evaluate(ctx), ctx.properties())\n            ], [\n                [StringType, ObjectType],\n                (ctx, [key, obj]) => has(key.evaluate(ctx), obj.evaluate(ctx))\n            ]\n        ]\n    },\n    'get': {\n        type: ValueType,\n        overloads: [\n            [\n                [StringType],\n                (ctx, [key]) => get(key.evaluate(ctx), ctx.properties())\n            ], [\n                [StringType, ObjectType],\n                (ctx, [key, obj]) => get(key.evaluate(ctx), obj.evaluate(ctx))\n            ]\n        ]\n    },\n    'feature-state': [\n        ValueType,\n        [StringType],\n        (ctx, [key]) => get(key.evaluate(ctx), ctx.featureState || {})\n    ],\n    'properties': [\n        ObjectType,\n        [],\n        (ctx) => ctx.properties()\n    ],\n    'geometry-type': [\n        StringType,\n        [],\n        (ctx) => ctx.geometryType()\n    ],\n    'id': [\n        ValueType,\n        [],\n        (ctx) => ctx.id()\n    ],\n    'zoom': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.zoom\n    ],\n    'pitch': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.pitch || 0\n    ],\n    'distance-from-center': [\n        NumberType,\n        [],\n        (ctx) => ctx.distanceFromCenter()\n    ],\n    'measure-light': [\n        NumberType,\n        [StringType],\n        (ctx, [s]) => ctx.measureLight(s.evaluate(ctx))\n    ],\n    'heatmap-density': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.heatmapDensity || 0\n    ],\n    'line-progress': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.lineProgress || 0\n    ],\n    'raster-value': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.rasterValue || 0\n    ],\n    'raster-particle-speed': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.rasterParticleSpeed || 0\n    ],\n    'sky-radial-progress': [\n        NumberType,\n        [],\n        (ctx) => ctx.globals.skyRadialProgress || 0\n    ],\n    'accumulated': [\n        ValueType,\n        [],\n        (ctx) => ctx.globals.accumulated === undefined ? null : ctx.globals.accumulated\n    ],\n    '+': [\n        NumberType,\n        varargs(NumberType),\n        (ctx, args) => {\n            let result = 0;\n            for (const arg of args) {\n                result += arg.evaluate(ctx);\n            }\n            return result;\n        }\n    ],\n    '*': [\n        NumberType,\n        varargs(NumberType),\n        (ctx, args) => {\n            let result = 1;\n            for (const arg of args) {\n                result *= arg.evaluate(ctx);\n            }\n            return result;\n        }\n    ],\n    '-': {\n        type: NumberType,\n        overloads: [\n            [\n                [NumberType, NumberType],\n                (ctx, [a, b]) => a.evaluate(ctx) - b.evaluate(ctx)\n            ], [\n                [NumberType],\n                (ctx, [a]) => -a.evaluate(ctx)\n            ]\n        ]\n    },\n    '/': [\n        NumberType,\n        [NumberType, NumberType],\n        (ctx, [a, b]) => a.evaluate(ctx) / b.evaluate(ctx)\n    ],\n    '%': [\n        NumberType,\n        [NumberType, NumberType],\n        (ctx, [a, b]) => a.evaluate(ctx) % b.evaluate(ctx)\n    ],\n    'ln2': [\n        NumberType,\n        [],\n        () => Math.LN2\n    ],\n    'pi': [\n        NumberType,\n        [],\n        () => Math.PI\n    ],\n    'e': [\n        NumberType,\n        [],\n        () => Math.E\n    ],\n    '^': [\n        NumberType,\n        [NumberType, NumberType],\n        (ctx, [b, e]) => Math.pow(b.evaluate(ctx), e.evaluate(ctx))\n    ],\n    'sqrt': [\n        NumberType,\n        [NumberType],\n        (ctx, [x]) => Math.sqrt(x.evaluate(ctx))\n    ],\n    'log10': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.log(n.evaluate(ctx)) / Math.LN10\n    ],\n    'ln': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.log(n.evaluate(ctx))\n    ],\n    'log2': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.log(n.evaluate(ctx)) / Math.LN2\n    ],\n    'sin': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.sin(n.evaluate(ctx))\n    ],\n    'cos': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.cos(n.evaluate(ctx))\n    ],\n    'tan': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.tan(n.evaluate(ctx))\n    ],\n    'asin': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.asin(n.evaluate(ctx))\n    ],\n    'acos': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.acos(n.evaluate(ctx))\n    ],\n    'atan': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.atan(n.evaluate(ctx))\n    ],\n    'min': [\n        NumberType,\n        varargs(NumberType),\n        (ctx, args) => Math.min(...args.map(arg => arg.evaluate(ctx)))\n    ],\n    'max': [\n        NumberType,\n        varargs(NumberType),\n        (ctx, args) => Math.max(...args.map(arg => arg.evaluate(ctx)))\n    ],\n    'abs': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.abs(n.evaluate(ctx))\n    ],\n    'round': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => {\n            const v = n.evaluate(ctx);\n            // Javascript's Math.round() rounds towards +Infinity for halfway\n            // values, even when they're negative. It's more common to round\n            // away from 0 (e.g., this is what python and C++ do)\n            return v < 0 ? -Math.round(-v) : Math.round(v);\n        }\n    ],\n    'floor': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.floor(n.evaluate(ctx))\n    ],\n    'ceil': [\n        NumberType,\n        [NumberType],\n        (ctx, [n]) => Math.ceil(n.evaluate(ctx))\n    ],\n    'filter-==': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => ctx.properties()[(k).value] === (v).value\n    ],\n    'filter-id-==': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => ctx.id() === (v).value\n    ],\n    'filter-type-==': [\n        BooleanType,\n        [StringType],\n        (ctx, [v]) => ctx.geometryType() === (v).value\n    ],\n    'filter-<': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => {\n            const a = ctx.properties()[(k).value];\n            const b = (v).value;\n            return typeof a === typeof b && a < b;\n        }\n    ],\n    'filter-id-<': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => {\n            const a = ctx.id();\n            const b = (v).value;\n            return typeof a === typeof b && a < b;\n        }\n    ],\n    'filter->': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => {\n            const a = ctx.properties()[(k).value];\n            const b = (v).value;\n            return typeof a === typeof b && a > b;\n        }\n    ],\n    'filter-id->': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => {\n            const a = ctx.id();\n            const b = (v).value;\n            return typeof a === typeof b && a > b;\n        }\n    ],\n    'filter-<=': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => {\n            const a = ctx.properties()[(k).value];\n            const b = (v).value;\n            return typeof a === typeof b && a <= b;\n        }\n    ],\n    'filter-id-<=': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => {\n            const a = ctx.id();\n            const b = (v).value;\n            return typeof a === typeof b && a <= b;\n        }\n    ],\n    'filter->=': [\n        BooleanType,\n        [StringType, ValueType],\n        (ctx, [k, v]) => {\n            const a = ctx.properties()[(k).value];\n            const b = (v).value;\n            return typeof a === typeof b && a >= b;\n        }\n    ],\n    'filter-id->=': [\n        BooleanType,\n        [ValueType],\n        (ctx, [v]) => {\n            const a = ctx.id();\n            const b = (v).value;\n            return typeof a === typeof b && a >= b;\n        }\n    ],\n    'filter-has': [\n        BooleanType,\n        [ValueType],\n        (ctx, [k]) => (k).value in ctx.properties()\n    ],\n    'filter-has-id': [\n        BooleanType,\n        [],\n        (ctx) => (ctx.id() !== null && ctx.id() !== undefined)\n    ],\n    'filter-type-in': [\n        BooleanType,\n        [array(StringType)],\n        (ctx, [v]) => (v).value.indexOf(ctx.geometryType()) >= 0\n    ],\n    'filter-id-in': [\n        BooleanType,\n        [array(ValueType)],\n        (ctx, [v]) => (v).value.indexOf(ctx.id()) >= 0\n    ],\n    'filter-in-small': [\n        BooleanType,\n        [StringType, array(ValueType)],\n        // assumes v is an array literal\n        (ctx, [k, v]) => (v).value.indexOf(ctx.properties()[(k).value]) >= 0\n    ],\n    'filter-in-large': [\n        BooleanType,\n        [StringType, array(ValueType)],\n        // assumes v is a array literal with values sorted in ascending order and of a single type\n        (ctx, [k, v]) => binarySearch(ctx.properties()[(k).value], (v).value, 0, (v).value.length - 1)\n    ],\n    'all': {\n        type: BooleanType,\n        overloads: [\n            [\n                [BooleanType, BooleanType],\n                (ctx, [a, b]) => a.evaluate(ctx) && b.evaluate(ctx)\n            ],\n            [\n                varargs(BooleanType),\n                (ctx, args) => {\n                    for (const arg of args) {\n                        if (!arg.evaluate(ctx))\n                            return false;\n                    }\n                    return true;\n                }\n            ]\n        ]\n    },\n    'any': {\n        type: BooleanType,\n        overloads: [\n            [\n                [BooleanType, BooleanType],\n                (ctx, [a, b]) => a.evaluate(ctx) || b.evaluate(ctx)\n            ],\n            [\n                varargs(BooleanType),\n                (ctx, args) => {\n                    for (const arg of args) {\n                        if (arg.evaluate(ctx))\n                            return true;\n                    }\n                    return false;\n                }\n            ]\n        ]\n    },\n    '!': [\n        BooleanType,\n        [BooleanType],\n        (ctx, [b]) => !b.evaluate(ctx)\n    ],\n    'is-supported-script': [\n        BooleanType,\n        [StringType],\n        // At parse time this will always return true, so we need to exclude this expression with isGlobalPropertyConstant\n        (ctx, [s]) => {\n            const isSupportedScript = ctx.globals && ctx.globals.isSupportedScript;\n            if (isSupportedScript) {\n                return isSupportedScript(s.evaluate(ctx));\n            }\n            return true;\n        }\n    ],\n    'upcase': [\n        StringType,\n        [StringType],\n        (ctx, [s]) => s.evaluate(ctx).toUpperCase()\n    ],\n    'downcase': [\n        StringType,\n        [StringType],\n        (ctx, [s]) => s.evaluate(ctx).toLowerCase()\n    ],\n    'concat': [\n        StringType,\n        varargs(ValueType),\n        (ctx, args) => args.map(arg => valueToString(arg.evaluate(ctx))).join('')\n    ],\n    'resolved-locale': [\n        StringType,\n        [CollatorType],\n        (ctx, [collator]) => collator.evaluate(ctx).resolvedLocale()\n    ],\n    'random': [\n        NumberType,\n        [NumberType, NumberType, ValueType],\n        (ctx, args) => {\n            const [min, max, seed] = args.map(arg => arg.evaluate(ctx));\n            if (min > max) {\n                return min;\n            }\n            if (min === max) {\n                return min;\n            }\n            let seedVal;\n            if (typeof seed === 'string') {\n                seedVal = hashString(seed);\n            } else if (typeof seed === 'number') {\n                seedVal = seed;\n            } else {\n                throw new RuntimeError(`Invalid seed input: ${seed}`);\n            }\n            const random = mulberry32(seedVal)();\n            return min + random * (max - min);\n        }\n    ],\n});\n\nexport default expressions;\n","/**\n * A type used for returning and propagating errors. The first element of the union\n * represents success and contains a value, and the second represents an error and\n * contains an error value.\n * @private\n */\nexport type Result<T, E> = {\n    result: 'success';\n    value: T;\n} | {\n    result: 'error';\n    value: E;\n};\n\nexport function success<T, E>(value: T): Result<T, E> {\n    return {result: 'success', value};\n}\n\nexport function error<T, E>(value: E): Result<T, E> {\n    return {result: 'error', value};\n}\n","import type {ExpressionSpecification, StylePropertySpecification} from '../style-spec';\n\ntype ExpressionParameter = ExpressionSpecification['parameters'][number];\n\nfunction expressionHasParameter(\n    expression: ExpressionSpecification | null | undefined,\n    parameter: ExpressionParameter,\n): boolean {\n    return !!expression && !!expression.parameters && expression.parameters.indexOf(parameter) > -1;\n}\n\nexport function supportsPropertyExpression(spec: StylePropertySpecification): boolean {\n    return spec['property-type'] === 'data-driven';\n}\n\nexport function supportsLightExpression(spec: StylePropertySpecification): boolean {\n    return expressionHasParameter(spec.expression, 'measure-light');\n}\n\nexport function supportsZoomExpression(spec: StylePropertySpecification): boolean {\n    return expressionHasParameter(spec.expression, 'zoom');\n}\n\nexport function supportsLineProgressExpression(spec: StylePropertySpecification): boolean {\n    return expressionHasParameter(spec.expression, 'line-progress');\n}\n\nexport function supportsInterpolation(spec: StylePropertySpecification): boolean {\n    return !!spec.expression && spec.expression.interpolated;\n}\n","// @ts-nocheck\n\nimport * as colorSpaces from '../util/color_spaces';\nimport Color from '../util/color';\nimport extend from '../util/extend';\nimport getType from '../util/get_type';\nimport * as interpolate from '../util/interpolate';\nimport Interpolate from '../expression/definitions/interpolate';\nimport Formatted from '../expression/types/formatted';\nimport ResolvedImage from '../expression/types/resolved_image';\nimport {supportsInterpolation} from '../util/properties';\nimport {findStopLessThanOrEqualTo} from '../expression/stops';\n\nexport function isFunction(value) {\n    return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nfunction identityFunction(x) {\n    return x;\n}\n\nexport function createFunction(parameters, propertySpec) {\n    const isColor = propertySpec.type === 'color';\n    const zoomAndFeatureDependent = parameters.stops && typeof parameters.stops[0][0] === 'object';\n    const featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;\n    const zoomDependent = zoomAndFeatureDependent || !featureDependent;\n    const type = parameters.type || (supportsInterpolation(propertySpec) ? 'exponential' : 'interval');\n\n    if (isColor) {\n        parameters = extend({}, parameters);\n\n        if (parameters.stops) {\n            parameters.stops = parameters.stops.map((stop) => {\n                return [stop[0], Color.parse(stop[1])];\n            });\n        }\n\n        if (parameters.default) {\n            parameters.default = Color.parse(parameters.default);\n        } else {\n            parameters.default = Color.parse(propertySpec.default);\n        }\n    }\n\n    if (parameters.colorSpace && parameters.colorSpace !== 'rgb' && !colorSpaces[parameters.colorSpace]) { // eslint-disable-line import/namespace\n        throw new Error(`Unknown color space: ${parameters.colorSpace}`);\n    }\n\n    let innerFun;\n    let hashedStops;\n    let categoricalKeyType;\n    if (type === 'exponential') {\n        innerFun = evaluateExponentialFunction;\n    } else if (type === 'interval') {\n        innerFun = evaluateIntervalFunction;\n    } else if (type === 'categorical') {\n        innerFun = evaluateCategoricalFunction;\n\n        // For categorical functions, generate an Object as a hashmap of the stops for fast searching\n        hashedStops = Object.create(null);\n        for (const stop of parameters.stops) {\n            hashedStops[stop[0]] = stop[1];\n        }\n\n        // Infer key type based on first stop key-- used to encforce strict type checking later\n        categoricalKeyType = typeof parameters.stops[0][0];\n\n    } else if (type === 'identity') {\n        innerFun = evaluateIdentityFunction;\n    } else {\n        throw new Error(`Unknown function type \"${type}\"`);\n    }\n\n    if (zoomAndFeatureDependent) {\n        const featureFunctions: Record<string, any> = {};\n        const zoomStops = [];\n        for (let s = 0; s < parameters.stops.length; s++) {\n            const stop = parameters.stops[s];\n            const zoom = stop[0].zoom;\n            if (featureFunctions[zoom] === undefined) {\n                featureFunctions[zoom] = {\n                    zoom,\n                    type: parameters.type,\n                    property: parameters.property,\n                    default: parameters.default,\n                    stops: []\n                };\n                zoomStops.push(zoom);\n            }\n            featureFunctions[zoom].stops.push([stop[0].value, stop[1]]);\n        }\n\n        const featureFunctionStops = [];\n        for (const z of zoomStops) {\n            featureFunctionStops.push([featureFunctions[z].zoom, createFunction(featureFunctions[z], propertySpec)]);\n        }\n\n        const interpolationType = {name: 'linear'};\n        return {\n            kind: 'composite',\n            interpolationType,\n            interpolationFactor: Interpolate.interpolationFactor.bind(undefined, interpolationType),\n            zoomStops: featureFunctionStops.map(s => s[0]),\n            evaluate({zoom}, properties) {\n                return evaluateExponentialFunction({\n                    stops: featureFunctionStops,\n                    base: parameters.base\n                }, propertySpec, zoom).evaluate(zoom, properties);\n            }\n        };\n    } else if (zoomDependent) {\n        const interpolationType = type === 'exponential' ?\n            {name: 'exponential', base: parameters.base !== undefined ? parameters.base : 1} : null;\n        return {\n            kind: 'camera',\n            interpolationType,\n            interpolationFactor: Interpolate.interpolationFactor.bind(undefined, interpolationType),\n            zoomStops: parameters.stops.map(s => s[0]),\n            evaluate: ({zoom}) => innerFun(parameters, propertySpec, zoom, hashedStops, categoricalKeyType)\n        };\n    } else {\n        return {\n            kind: 'source',\n            evaluate(_, feature) {\n                const value = feature && feature.properties ? feature.properties[parameters.property] : undefined;\n                if (value === undefined) {\n                    return coalesce(parameters.default, propertySpec.default);\n                }\n                return innerFun(parameters, propertySpec, value, hashedStops, categoricalKeyType);\n            }\n        };\n    }\n}\n\nfunction coalesce(a, b, c) {\n    if (a !== undefined) return a;\n    if (b !== undefined) return b;\n    if (c !== undefined) return c;\n}\n\nfunction evaluateCategoricalFunction(parameters, propertySpec, input, hashedStops, keyType) {\n    const evaluated = typeof input === keyType ? hashedStops[input] : undefined; // Enforce strict typing on input\n    return coalesce(evaluated, parameters.default, propertySpec.default);\n}\n\nfunction evaluateIntervalFunction(parameters, propertySpec, input) {\n    // Edge cases\n    if (getType(input) !== 'number') return coalesce(parameters.default, propertySpec.default);\n    const n = parameters.stops.length;\n    if (n === 1) return parameters.stops[0][1];\n    if (input <= parameters.stops[0][0]) return parameters.stops[0][1];\n    if (input >= parameters.stops[n - 1][0]) return parameters.stops[n - 1][1];\n\n    const index = findStopLessThanOrEqualTo(parameters.stops.map((stop) => stop[0]), input);\n\n    return parameters.stops[index][1];\n}\n\nfunction evaluateExponentialFunction(parameters, propertySpec, input) {\n    const base = parameters.base !== undefined ? parameters.base : 1;\n\n    // Edge cases\n    if (getType(input) !== 'number') return coalesce(parameters.default, propertySpec.default);\n    const n = parameters.stops.length;\n    if (n === 1) return parameters.stops[0][1];\n    if (input <= parameters.stops[0][0]) return parameters.stops[0][1];\n    if (input >= parameters.stops[n - 1][0]) return parameters.stops[n - 1][1];\n\n    const index = findStopLessThanOrEqualTo(parameters.stops.map((stop) => stop[0]), input);\n    const t = interpolationFactor(\n        input, base,\n        parameters.stops[index][0],\n        parameters.stops[index + 1][0]);\n\n    const outputLower = parameters.stops[index][1];\n    const outputUpper = parameters.stops[index + 1][1];\n    let interp = interpolate[propertySpec.type] || identityFunction; // eslint-disable-line import/namespace\n\n    if (parameters.colorSpace && parameters.colorSpace !== 'rgb') {\n        const colorspace = colorSpaces[parameters.colorSpace]; // eslint-disable-line import/namespace\n        interp = (a, b) => colorspace.reverse(colorspace.interpolate(colorspace.forward(a), colorspace.forward(b), t));\n    }\n\n    if (typeof outputLower.evaluate === 'function') {\n        return {\n            evaluate(...args) {\n                const evaluatedLower = outputLower.evaluate.apply(undefined, args);\n                const evaluatedUpper = outputUpper.evaluate.apply(undefined, args);\n                // Special case for fill-outline-color, which has no spec default.\n                if (evaluatedLower === undefined || evaluatedUpper === undefined) {\n                    return undefined;\n                }\n                return interp(evaluatedLower, evaluatedUpper, t);\n            }\n        };\n    }\n\n    return interp(outputLower, outputUpper, t);\n}\n\nfunction evaluateIdentityFunction(parameters, propertySpec, input) {\n    if (propertySpec.type === 'color') {\n        input = Color.parse(input);\n    } else if (propertySpec.type === 'formatted') {\n        input = Formatted.fromString(input.toString());\n    } else if (propertySpec.type === 'resolvedImage') {\n        input = ResolvedImage.fromString(input.toString());\n    } else if (getType(input) !== propertySpec.type && (propertySpec.type !== 'enum' || !propertySpec.values[input])) {\n        input = undefined;\n    }\n    return coalesce(input, parameters.default, propertySpec.default);\n}\n\n/**\n * Returns a ratio that can be used to interpolate between exponential function\n * stops.\n *\n * How it works:\n * Two consecutive stop values define a (scaled and shifted) exponential\n * function `f(x) = a * base^x + b`, where `base` is the user-specified base,\n * and `a` and `b` are constants affording sufficient degrees of freedom to fit\n * the function to the given stops.\n *\n * Here's a bit of algebra that lets us compute `f(x)` directly from the stop\n * values without explicitly solving for `a` and `b`:\n *\n * First stop value: `f(x0) = y0 = a * base^x0 + b`\n * Second stop value: `f(x1) = y1 = a * base^x1 + b`\n * => `y1 - y0 = a(base^x1 - base^x0)`\n * => `a = (y1 - y0)/(base^x1 - base^x0)`\n *\n * Desired value: `f(x) = y = a * base^x + b`\n * => `f(x) = y0 + a * (base^x - base^x0)`\n *\n * From the above, we can replace the `a` in `a * (base^x - base^x0)` and do a\n * little algebra:\n * ```\n * a * (base^x - base^x0) = (y1 - y0)/(base^x1 - base^x0) * (base^x - base^x0)\n *                     = (y1 - y0) * (base^x - base^x0) / (base^x1 - base^x0)\n * ```\n *\n * If we let `(base^x - base^x0) / (base^x1 base^x0)`, then we have\n * `f(x) = y0 + (y1 - y0) * ratio`.  In other words, `ratio` may be treated as\n * an interpolation factor between the two stops' output values.\n *\n * (Note: a slightly different form for `ratio`,\n * `(base^(x-x0) - 1) / (base^(x1-x0) - 1) `, is equivalent, but requires fewer\n * expensive `Math.pow()` operations.)\n *\n * @private\n */\nfunction interpolationFactor(input, base, lowerValue, upperValue) {\n    const difference = upperValue - lowerValue;\n    const progress = input - lowerValue;\n\n    if (difference === 0) {\n        return 0;\n    } else if (base === 1) {\n        return progress / difference;\n    } else {\n        return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);\n    }\n}\n","import assert from 'assert';\nimport extend from '../util/extend';\nimport ParsingError from './parsing_error';\nimport ParsingContext from './parsing_context';\nimport EvaluationContext from './evaluation_context';\nimport CompoundExpression from './compound_expression';\nimport Step from './definitions/step';\nimport Interpolate from './definitions/interpolate';\nimport Coalesce from './definitions/coalesce';\nimport Let from './definitions/let';\nimport definitions from './definitions/index';\nimport * as isConstant from './is_constant';\nimport RuntimeError from './runtime_error';\nimport {success, error} from '../util/result';\nimport {\n    supportsPropertyExpression,\n    supportsZoomExpression,\n    supportsLightExpression,\n    supportsInterpolation,\n    supportsLineProgressExpression\n} from '../util/properties';\nimport {isFunction, createFunction} from '../function/index';\nimport {Color} from './values';\nimport {ColorType, StringType, NumberType, BooleanType, ValueType, FormattedType, ResolvedImageType, array} from './types';\n\nimport type {Type, EvaluationKind} from './types';\nimport type {Value} from './values';\nimport type {Expression} from './expression';\nimport type {StylePropertySpecification} from '../style-spec';\nimport type {Result} from '../util/result';\nimport type {InterpolationType} from './definitions/interpolate';\nimport type {PropertyValueSpecification} from '../types';\nimport type {FormattedSection} from './types/formatted';\nimport type Point from '@mapbox/point-geometry';\nimport type {CanonicalTileID} from '../types/tile_id';\nimport type {FeatureDistanceData} from '../feature_filter/index';\nimport type {ConfigOptions} from '../types/config_options';\n\nexport interface Feature {\n    readonly type: 0 | 1 | 2 | 3 | 'Unknown' | 'Point' | 'LineString' | 'Polygon';\n    readonly id?: number | null;\n    readonly properties: {\n        [_: string]: any;\n    };\n    readonly patterns?: {\n        [_: string]: string;\n    };\n    readonly geometry?: Array<Array<Point>>;\n}\n\nexport type FeatureState = {\n    [_: string]: unknown;\n};\n\nexport interface GlobalProperties {\n    zoom: number;\n    pitch?: number;\n    heatmapDensity?: number;\n    lineProgress?: number;\n    rasterValue?: number;\n    rasterParticleSpeed?: number;\n    skyRadialProgress?: number;\n    readonly isSupportedScript?: (_: string) => boolean;\n    accumulated?: Value;\n    brightness?: number;\n}\n\nexport class StyleExpression {\n    expression: Expression;\n\n    _evaluator: EvaluationContext;\n    _defaultValue: Value;\n    _warningHistory: {[key: string]: boolean};\n    _enumValues?: {[_: string]: unknown};\n    configDependencies: Set<string>;\n\n    constructor(expression: Expression, propertySpec?: StylePropertySpecification, scope?: string, options?: ConfigOptions) {\n        this.expression = expression;\n        this._warningHistory = {};\n        this._evaluator = new EvaluationContext(scope, options);\n        this._defaultValue = propertySpec ? getDefaultValue(propertySpec) : null;\n        this._enumValues = propertySpec && propertySpec.type === 'enum' ? propertySpec.values : null;\n        this.configDependencies = isConstant.getConfigDependencies(expression);\n    }\n\n    evaluateWithoutErrorHandling(\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n        formattedSection?: FormattedSection,\n        featureTileCoord?: Point,\n        featureDistanceData?: FeatureDistanceData,\n    ): any {\n        this._evaluator.globals = globals;\n        this._evaluator.feature = feature;\n        this._evaluator.featureState = featureState;\n        this._evaluator.canonical = canonical || null;\n        this._evaluator.availableImages = availableImages || null;\n        this._evaluator.formattedSection = formattedSection;\n        this._evaluator.featureTileCoord = featureTileCoord || null;\n        this._evaluator.featureDistanceData = featureDistanceData || null;\n\n        return this.expression.evaluate(this._evaluator);\n    }\n\n    evaluate(\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n        formattedSection?: FormattedSection,\n        featureTileCoord?: Point,\n        featureDistanceData?: FeatureDistanceData,\n    ): any {\n        this._evaluator.globals = globals;\n        this._evaluator.feature = feature || null;\n        this._evaluator.featureState = featureState || null;\n        this._evaluator.canonical = canonical || null;\n        this._evaluator.availableImages = availableImages || null;\n        this._evaluator.formattedSection = formattedSection || null;\n        this._evaluator.featureTileCoord = featureTileCoord || null;\n        this._evaluator.featureDistanceData = featureDistanceData || null;\n\n        try {\n            const val = this.expression.evaluate(this._evaluator);\n            // eslint-disable-next-line no-self-compare\n            if (val === null || val === undefined || (typeof val === 'number' && val !== val)) {\n                return this._defaultValue;\n            }\n            if (this._enumValues && !(val in this._enumValues)) {\n                throw new RuntimeError(`Expected value to be one of ${Object.keys(this._enumValues).map(v => JSON.stringify(v)).join(', ')}, but found ${JSON.stringify(val)} instead.`);\n            }\n            return val;\n        } catch (e: any) {\n            if (!this._warningHistory[e.message]) {\n                this._warningHistory[e.message] = true;\n                if (typeof console !== 'undefined') {\n                    console.warn(`Failed to evaluate expression \"${JSON.stringify(this.expression.serialize())}\". ${e.message}`);\n                }\n            }\n            return this._defaultValue;\n        }\n    }\n}\n\nexport function isExpression(expression: unknown): boolean {\n    return Array.isArray(expression) && expression.length > 0 &&\n        typeof expression[0] === 'string' && expression[0] in definitions;\n}\n\n/**\n * Parse and typecheck the given style spec JSON expression.  If\n * options.defaultValue is provided, then the resulting StyleExpression's\n * `evaluate()` method will handle errors by logging a warning (once per\n * message) and returning the default value.  Otherwise, it will throw\n * evaluation errors.\n *\n * @private\n */\nexport function createExpression(\n    expression: unknown,\n    propertySpec?: StylePropertySpecification | null,\n    scope?: string | null,\n    options?: ConfigOptions | null,\n): Result<StyleExpression, Array<ParsingError>> {\n    const parser = new ParsingContext(definitions, [], propertySpec ? getExpectedType(propertySpec) : undefined, undefined, undefined, scope, options);\n\n    // For string-valued properties, coerce to string at the top level rather than asserting.\n    const parsed = parser.parse(expression, undefined, undefined, undefined,\n        propertySpec && propertySpec.type === 'string' ? {typeAnnotation: 'coerce'} : undefined);\n\n    if (!parsed) {\n        assert(parser.errors.length > 0);\n        return error(parser.errors);\n    }\n\n    return success(new StyleExpression(parsed, propertySpec, scope, options));\n}\n\nexport class ZoomConstantExpression<Kind extends EvaluationKind> {\n    kind: Kind;\n    isStateDependent: boolean;\n    configDependencies: Set<string>;\n    _styleExpression: StyleExpression;\n    isLightConstant: boolean | null | undefined;\n\n    constructor(kind: Kind, expression: StyleExpression, isLightConstant?: boolean | null) {\n        this.kind = kind;\n        this._styleExpression = expression;\n        this.isLightConstant = isLightConstant;\n        this.isStateDependent = kind !== ('constant' as EvaluationKind) && !isConstant.isStateConstant(expression.expression);\n        this.configDependencies = isConstant.getConfigDependencies(expression.expression);\n    }\n\n    evaluateWithoutErrorHandling(\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n        formattedSection?: FormattedSection,\n    ): any {\n        return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n\n    evaluate(\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n        formattedSection?: FormattedSection,\n    ): any {\n        return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n}\n\nexport class ZoomDependentExpression<Kind extends EvaluationKind> {\n    kind: Kind;\n    zoomStops: Array<number>;\n    isStateDependent: boolean;\n    isLightConstant: boolean | null | undefined;\n    configDependencies: Set<string>;\n\n    _styleExpression: StyleExpression;\n    interpolationType: InterpolationType | null | undefined;\n\n    constructor(kind: Kind, expression: StyleExpression, zoomStops: Array<number>, interpolationType?: InterpolationType, isLightConstant?: boolean | null) {\n        this.kind = kind;\n        this.zoomStops = zoomStops;\n        this._styleExpression = expression;\n        this.isStateDependent = kind !== ('camera' as EvaluationKind) && !isConstant.isStateConstant(expression.expression);\n        this.isLightConstant = isLightConstant;\n        this.configDependencies = isConstant.getConfigDependencies(expression.expression);\n        this.interpolationType = interpolationType;\n    }\n\n    evaluateWithoutErrorHandling(\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n        formattedSection?: FormattedSection,\n    ): any {\n        return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n\n    evaluate(\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n        formattedSection?: FormattedSection,\n    ): any {\n        return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n\n    interpolationFactor(input: number, lower: number, upper: number): number {\n        if (this.interpolationType) {\n            return Interpolate.interpolationFactor(this.interpolationType, input, lower, upper);\n        } else {\n            return 0;\n        }\n    }\n}\n\nexport type ConstantExpression = {\n    kind: 'constant';\n    configDependencies: Set<string>;\n    readonly evaluate: (\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n    ) => any;\n};\n\nexport type SourceExpression = {\n    kind: 'source';\n    isStateDependent: boolean;\n    isLightConstant: boolean | null | undefined;\n    configDependencies: Set<string>;\n    readonly evaluate: (\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n        formattedSection?: FormattedSection,\n    ) => any;\n};\n\nexport type CameraExpression = {\n    kind: 'camera';\n    isStateDependent: boolean;\n    configDependencies: Set<string>;\n    readonly evaluate: (\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n    ) => any;\n    readonly interpolationFactor: (input: number, lower: number, upper: number) => number;\n    zoomStops: Array<number>;\n    interpolationType: InterpolationType | null | undefined;\n};\n\nexport interface CompositeExpression {\n    kind: 'composite';\n    isStateDependent: boolean;\n    isLightConstant: boolean | null | undefined;\n    configDependencies: Set<string>;\n    readonly evaluate: (\n        globals: GlobalProperties,\n        feature?: Feature,\n        featureState?: FeatureState,\n        canonical?: CanonicalTileID,\n        availableImages?: Array<string>,\n        formattedSection?: FormattedSection,\n    ) => any;\n    readonly interpolationFactor: (input: number, lower: number, upper: number) => number;\n    zoomStops: Array<number>;\n    interpolationType: InterpolationType | null | undefined;\n}\n\nexport type StylePropertyExpression = ConstantExpression | SourceExpression | CameraExpression | CompositeExpression;\n\nexport function createPropertyExpression(\n    expression: unknown,\n    propertySpec: StylePropertySpecification,\n    scope?: string | null,\n    options?: ConfigOptions | null,\n): Result<StylePropertyExpression, Array<ParsingError>> {\n    expression = createExpression(expression, propertySpec, scope, options);\n    // @ts-expect-error - TS2339 - Property 'result' does not exist on type 'unknown'.\n    if (expression.result === 'error') {\n        // @ts-expect-error - TS2322 - Type 'unknown' is not assignable to type 'Result<StylePropertyExpression, ParsingError[]>'.\n        return expression;\n    }\n\n    // @ts-expect-error - TS2339 - Property 'value' does not exist on type 'unknown'.\n    const parsed = expression.value.expression;\n\n    const isFeatureConstant = isConstant.isFeatureConstant(parsed);\n    if (!isFeatureConstant && !supportsPropertyExpression(propertySpec)) {\n        return error([new ParsingError('', 'data expressions not supported')]);\n    }\n\n    const isZoomConstant = isConstant.isGlobalPropertyConstant(parsed, ['zoom', 'pitch', 'distance-from-center']);\n    if (!isZoomConstant && !supportsZoomExpression(propertySpec)) {\n        return error([new ParsingError('', 'zoom expressions not supported')]);\n    }\n\n    const isLightConstant = isConstant.isGlobalPropertyConstant(parsed, ['measure-light']);\n    if (!isLightConstant && !supportsLightExpression(propertySpec)) {\n        return error([new ParsingError('', 'measure-light expression not supported')]);\n    }\n\n    const isLineProgressConstant = isConstant.isGlobalPropertyConstant(parsed, ['line-progress']);\n    if (!isLineProgressConstant && !supportsLineProgressExpression(propertySpec)) {\n        return error([new ParsingError('', 'line-progress expression not supported')]);\n    }\n\n    const canRelaxZoomRestriction = propertySpec.expression && propertySpec.expression.relaxZoomRestriction;\n    const zoomCurve = findZoomCurve(parsed);\n    if (!zoomCurve && !isZoomConstant && !canRelaxZoomRestriction) {\n        return error([new ParsingError('', '\"zoom\" expression may only be used as input to a top-level \"step\" or \"interpolate\" expression, or in the properties of atmosphere.')]);\n    } else if (zoomCurve instanceof ParsingError) {\n        return error([zoomCurve]);\n    } else if (zoomCurve instanceof Interpolate && !supportsInterpolation(propertySpec)) {\n        return error([new ParsingError('', '\"interpolate\" expressions cannot be used with this property')]);\n    }\n\n    if (!zoomCurve) {\n        return success((isFeatureConstant && isLineProgressConstant) ?\n        // @ts-expect-error - TS2339 - Property 'value' does not exist on type 'unknown'.\n            (new ZoomConstantExpression('constant', expression.value, isLightConstant) as ConstantExpression) :\n        // @ts-expect-error - TS2339 - Property 'value' does not exist on type 'unknown'.\n            (new ZoomConstantExpression('source', expression.value, isLightConstant) as SourceExpression));\n    }\n\n    const interpolationType = zoomCurve instanceof Interpolate ? zoomCurve.interpolation : undefined;\n\n    return success((isFeatureConstant && isLineProgressConstant) ?\n    // @ts-expect-error - TS2339 - Property 'value' does not exist on type 'unknown'.\n        (new ZoomDependentExpression('camera', expression.value, zoomCurve.labels, interpolationType, isLightConstant) as CameraExpression) :\n    // @ts-expect-error - TS2339 - Property 'value' does not exist on type 'unknown'.\n        (new ZoomDependentExpression('composite', expression.value, zoomCurve.labels, interpolationType, isLightConstant) as CompositeExpression));\n}\n\n// serialization wrapper for old-style stop functions normalized to the\n// expression interface\nexport class StylePropertyFunction<T> {\n    _parameters: PropertyValueSpecification<T>;\n    _specification: StylePropertySpecification;\n\n    kind: EvaluationKind;\n    evaluate: (globals: GlobalProperties, feature?: Feature) => any;\n    interpolationFactor: (input: number, lower: number, upper: number) => number | null | undefined;\n    zoomStops: Array<number> | null | undefined;\n\n    constructor(parameters: PropertyValueSpecification<T>, specification: StylePropertySpecification) {\n        this._parameters = parameters;\n        this._specification = specification;\n        extend(this, createFunction(this._parameters, this._specification));\n    }\n\n    static deserialize<T>(\n        serialized: {\n            _parameters: PropertyValueSpecification<T>;\n            _specification: StylePropertySpecification;\n        },\n    ): StylePropertyFunction<T> {\n        return new StylePropertyFunction(serialized._parameters, serialized._specification);\n    }\n\n    static serialize<T>(input: StylePropertyFunction<T>): {\n        _parameters: PropertyValueSpecification<T>;\n        _specification: StylePropertySpecification;\n    } {\n        return {\n            _parameters: input._parameters,\n            _specification: input._specification\n        };\n    }\n}\n\nexport function normalizePropertyExpression<T>(\n    value: PropertyValueSpecification<T>,\n    specification: StylePropertySpecification,\n    scope?: string | null,\n    options?: ConfigOptions | null,\n): StylePropertyExpression {\n    if (isFunction(value)) {\n        return new StylePropertyFunction(value, specification) as any;\n\n    } else if (isExpression(value) || (Array.isArray(value) && value.length > 0)) {\n        const expression = createPropertyExpression(value, specification, scope, options);\n        if (expression.result === 'error') {\n            // this should have been caught in validation\n            throw new Error(expression.value.map(err => `${err.key}: ${err.message}`).join(', '));\n        }\n        return expression.value;\n\n    } else {\n        let constant: any = value;\n        if (typeof value === 'string' && specification.type === 'color') {\n            constant = Color.parse(value);\n        }\n        return {\n            kind: 'constant',\n            configDependencies: new Set(),\n            evaluate: () => constant\n        };\n    }\n}\n\n// Zoom-dependent expressions may only use [\"zoom\"] as the input to a top-level \"step\" or \"interpolate\"\n// expression (collectively referred to as a \"curve\"). The curve may be wrapped in one or more \"let\" or\n// \"coalesce\" expressions.\nfunction findZoomCurve(expression: Expression): Step | Interpolate | ParsingError | null {\n    let result = null;\n    if (expression instanceof Let) {\n        result = findZoomCurve(expression.result);\n\n    } else if (expression instanceof Coalesce) {\n        for (const arg of expression.args) {\n            result = findZoomCurve(arg);\n            if (result) {\n                break;\n            }\n        }\n\n    } else if ((expression instanceof Step || expression instanceof Interpolate) &&\n        expression.input instanceof CompoundExpression &&\n        expression.input.name === 'zoom') {\n\n        result = expression;\n    }\n\n    if (result instanceof ParsingError) {\n        return result;\n    }\n\n    expression.eachChild((child) => {\n        const childResult = findZoomCurve(child);\n        if (childResult instanceof ParsingError) {\n            result = childResult;\n        } else if (result && childResult && result !== childResult) {\n            result = new ParsingError('', 'Only one zoom-based \"step\" or \"interpolate\" subexpression may be used in an expression.');\n        }\n    });\n\n    return result;\n}\n\nfunction getExpectedType(spec: StylePropertySpecification): Type {\n    const types = {\n        color: ColorType,\n        string: StringType,\n        number: NumberType,\n        enum: StringType,\n        boolean: BooleanType,\n        formatted: FormattedType,\n        resolvedImage: ResolvedImageType\n    };\n\n    if (spec.type === 'array') {\n        return array(types[spec.value] || ValueType, spec.length);\n    }\n\n    return types[spec.type];\n}\n\nfunction getDefaultValue(spec: StylePropertySpecification): Value {\n    if (spec.type === 'color' && (isFunction(spec.default) || Array.isArray(spec.default))) {\n        // Special case for heatmap-color: it uses the 'default:' to define a\n        // default color ramp, but createExpression expects a simple value to fall\n        // back to in case of runtime errors\n        return new Color(0, 0, 0, 0);\n    } else if (spec.type === 'color') {\n        return Color.parse(spec.default) || null;\n    } else if (spec.default === undefined) {\n        return null;\n    } else {\n        return spec.default;\n    }\n}\n","import assert from 'assert';\n\nimport type {StylePropertySpecification} from '../style-spec';\nimport type {\n    FunctionSpecification,\n    PropertyFunctionStop,\n    ZoomAndPropertyFunctionStop,\n    ExpressionSpecification,\n} from '../types';\n\nfunction convertLiteral(value: unknown) {\n    return typeof value === 'object' ? ['literal', value] : value;\n}\n\nexport default function convertFunction<T>(parameters: FunctionSpecification<T>, propertySpec: StylePropertySpecification): ExpressionSpecification {\n    let stops = parameters.stops;\n    if (!stops) {\n        // identity function\n        return convertIdentityFunction(parameters, propertySpec);\n    }\n\n    const zoomAndFeatureDependent = stops && typeof stops[0][0] === 'object';\n    const featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;\n    const zoomDependent = zoomAndFeatureDependent || !featureDependent;\n\n    stops = stops.map((stop) => {\n        if (!featureDependent && propertySpec.tokens && typeof stop[1] === 'string') {\n            return [stop[0], convertTokenString(stop[1])];\n        }\n        return [stop[0], convertLiteral(stop[1])];\n    }) as FunctionSpecification<T>['stops'];\n\n    if (zoomAndFeatureDependent) {\n        return convertZoomAndPropertyFunction(parameters, propertySpec, stops as Array<ZoomAndPropertyFunctionStop<T>>);\n    } else if (zoomDependent) {\n        return convertZoomFunction(parameters, propertySpec, stops as PropertyFunctionStop<T>[]);\n    } else {\n        return convertPropertyFunction(parameters, propertySpec, stops as PropertyFunctionStop<T>[]);\n    }\n}\n\nfunction convertIdentityFunction<T>(parameters: FunctionSpecification<T>, propertySpec: StylePropertySpecification): ExpressionSpecification {\n    const get: ExpressionSpecification = ['get', parameters.property];\n\n    if (parameters.default === undefined) {\n        // By default, expressions for string-valued properties get coerced. To preserve\n        // legacy function semantics, insert an explicit assertion instead.\n        return propertySpec.type === 'string' ? ['string', get] : get;\n    } else if (propertySpec.type === 'enum') {\n        return [\n            'match',\n            get,\n            Object.keys(propertySpec.values),\n            get,\n            parameters.default\n        ];\n    } else {\n        const expression: ExpressionSpecification = [propertySpec.type === 'color' ? 'to-color' : propertySpec.type, get, convertLiteral(parameters.default)];\n        if (propertySpec.type === 'array') {\n            expression.splice(1, 0, propertySpec.value, propertySpec.length || null);\n        }\n        return expression;\n    }\n}\n\nfunction getInterpolateOperator<T>(parameters: FunctionSpecification<T>) {\n    switch (parameters.colorSpace) {\n    case 'hcl': return 'interpolate-hcl';\n    case 'lab': return 'interpolate-lab';\n    default: return 'interpolate';\n    }\n}\n\nfunction convertZoomAndPropertyFunction<T>(\n    parameters: FunctionSpecification<T>,\n    propertySpec: StylePropertySpecification,\n    stops: Array<ZoomAndPropertyFunctionStop<T>>,\n): ExpressionSpecification {\n    const featureFunctionParameters: Record<string, any> = {};\n    const featureFunctionStops: Record<string, any> = {};\n    const zoomStops = [];\n    for (let s = 0; s < stops.length; s++) {\n        const stop = stops[s];\n        const zoom = stop[0].zoom;\n        if (featureFunctionParameters[zoom] === undefined) {\n            featureFunctionParameters[zoom] = {\n                zoom,\n                type: parameters.type,\n                property: parameters.property,\n                default: parameters.default,\n            };\n            featureFunctionStops[zoom] = [];\n            zoomStops.push(zoom);\n        }\n        featureFunctionStops[zoom].push([stop[0].value, stop[1]]);\n    }\n\n    // the interpolation type for the zoom dimension of a zoom-and-property\n    // function is determined directly from the style property specification\n    // for which it's being used: linear for interpolatable properties, step\n    // otherwise.\n    const functionType = getFunctionType({} as FunctionSpecification<unknown>, propertySpec);\n    if (functionType === 'exponential') {\n        const expression: ExpressionSpecification = [getInterpolateOperator(parameters), ['linear'], ['zoom']];\n\n        for (const z of zoomStops) {\n            const output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);\n            appendStopPair(expression, z, output, false);\n        }\n\n        return expression;\n    } else {\n        const expression: ExpressionSpecification = ['step', ['zoom']];\n\n        for (const z of zoomStops) {\n            const output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);\n            appendStopPair(expression, z, output, true);\n        }\n\n        fixupDegenerateStepCurve(expression);\n\n        return expression;\n    }\n}\n\nfunction coalesce(a: unknown, b: unknown) {\n    if (a !== undefined) return a;\n    if (b !== undefined) return b;\n}\n\nfunction getFallback<T>(parameters: FunctionSpecification<T>, propertySpec: StylePropertySpecification) {\n    const defaultValue = convertLiteral(coalesce(parameters.default, propertySpec.default));\n\n    /*\n     * Some fields with type: resolvedImage have an undefined default.\n     * Because undefined is an invalid value for resolvedImage, set fallback to\n     * an empty string instead of undefined to ensure output\n     * passes validation.\n     */\n    if (defaultValue === undefined && propertySpec.type === 'resolvedImage') {\n        return '';\n    }\n    return defaultValue;\n}\n\nfunction convertPropertyFunction<T>(\n    parameters: FunctionSpecification<T>,\n    propertySpec: StylePropertySpecification,\n    stops: Array<PropertyFunctionStop<T>>,\n): ExpressionSpecification {\n    const type = getFunctionType(parameters, propertySpec);\n    const get: ExpressionSpecification = ['get', parameters.property];\n    if (type === 'categorical' && typeof stops[0][0] === 'boolean') {\n        assert(parameters.stops.length > 0 && parameters.stops.length <= 2);\n        const expression: ExpressionSpecification = ['case'];\n        for (const stop of stops) {\n            expression.push(['==', get, stop[0]], stop[1]);\n        }\n\n        expression.push(getFallback(parameters, propertySpec));\n        return expression;\n    } else if (type === 'categorical') {\n        const expression: ExpressionSpecification = ['match', get];\n        for (const stop of stops) {\n            appendStopPair(expression, stop[0], stop[1], false);\n        }\n        expression.push(getFallback(parameters, propertySpec));\n        return expression;\n    } else if (type === 'interval') {\n        const expression: ExpressionSpecification = ['step', ['number', get]];\n        for (const stop of stops) {\n            appendStopPair(expression, stop[0], stop[1], true);\n        }\n        fixupDegenerateStepCurve(expression);\n        return parameters.default === undefined ? expression : [\n            'case',\n            ['==', ['typeof', get], 'number'],\n            expression,\n            convertLiteral(parameters.default)\n        ];\n    } else if (type === 'exponential') {\n        const base = parameters.base !== undefined ? parameters.base : 1;\n        const expression: ExpressionSpecification = [\n            getInterpolateOperator(parameters),\n            base === 1 ? [\"linear\"] : [\"exponential\", base],\n            [\"number\", get]\n        ];\n\n        for (const stop of stops) {\n            appendStopPair(expression, stop[0], stop[1], false);\n        }\n        return parameters.default === undefined ? expression : [\n            'case',\n            ['==', ['typeof', get], 'number'],\n            expression,\n            convertLiteral(parameters.default)\n        ];\n    } else {\n        throw new Error(`Unknown property function type ${type}`);\n    }\n}\n\nfunction convertZoomFunction<T>(parameters: FunctionSpecification<T>, propertySpec: StylePropertySpecification, stops: Array<PropertyFunctionStop<T>>, input: Array<string> = ['zoom']) {\n    const type = getFunctionType(parameters, propertySpec);\n    let expression;\n    let isStep = false;\n    if (type === 'interval') {\n        expression = ['step', input];\n        isStep = true;\n    } else if (type === 'exponential') {\n        const base = parameters.base !== undefined ? parameters.base : 1;\n        expression = [getInterpolateOperator(parameters), base === 1 ? [\"linear\"] : [\"exponential\", base], input];\n\n    } else {\n        throw new Error(`Unknown zoom function type \"${type}\"`);\n    }\n\n    for (const stop of stops) {\n        appendStopPair(expression, stop[0], stop[1], isStep);\n    }\n\n    fixupDegenerateStepCurve(expression);\n\n    return expression;\n}\n\nfunction fixupDegenerateStepCurve(expression: ExpressionSpecification) {\n    // degenerate step curve (i.e. a constant function): add a noop stop\n    if (expression[0] === 'step' && expression.length === 3) {\n        expression.push(0);\n        expression.push(expression[3]);\n    }\n}\n\nfunction appendStopPair(curve: ExpressionSpecification, input: unknown, output: unknown, isStep: boolean) {\n    // Skip duplicate stop values. They were not validated for functions, but they are for expressions.\n    // https://github.com/mapbox/mapbox-gl-js/issues/4107\n    if (curve.length > 3 && input === curve[curve.length - 2]) {\n        return;\n    }\n    // step curves don't get the first input value, as it is redundant.\n    if (!(isStep && curve.length === 2)) {\n        curve.push(input);\n    }\n    curve.push(output);\n}\n\nfunction getFunctionType<T>(parameters: FunctionSpecification<T>, propertySpec: StylePropertySpecification): string {\n    if (parameters.type) {\n        return parameters.type;\n    } else {\n        assert(propertySpec.expression);\n        return (propertySpec.expression as any).interpolated ? 'exponential' : 'interval';\n    }\n}\n\n// \"String with {name} token\" => [\"concat\", \"String with \", [\"get\", \"name\"], \" token\"]\nexport function convertTokenString(s: string): string | ExpressionSpecification {\n    const result: ExpressionSpecification = ['concat'];\n    const re = /{([^{}]+)}/g;\n    let pos = 0;\n    for (let match = re.exec(s); match !== null; match = re.exec(s)) {\n        const literal = s.slice(pos, re.lastIndex - match[0].length);\n        pos = re.lastIndex;\n        if (literal.length > 0) result.push(literal);\n        result.push(['get', match[1]]);\n    }\n\n    if (result.length === 1) {\n        return s;\n    }\n\n    if (pos < s.length) {\n        result.push(s.slice(pos));\n    } else if (result.length === 2) {\n        return ['to-string', result[1]];\n    }\n\n    return result;\n}\n\n","// Turn jsonlint-lines-primitives objects into primitive objects\nexport function unbundle(value: unknown): unknown {\n    if (value instanceof Number || value instanceof String || value instanceof Boolean) {\n        return value.valueOf();\n    } else {\n        return value;\n    }\n}\n\nexport function deepUnbundle(value: unknown): unknown {\n    if (Array.isArray(value)) {\n        return value.map(deepUnbundle);\n    } else if (value instanceof Object && !(value instanceof Number || value instanceof String || value instanceof Boolean)) {\n        const unbundledValue: {\n            [key: string]: unknown;\n        } = {};\n        for (const key in value) {\n            unbundledValue[key] = deepUnbundle(value[key]);\n        }\n        return unbundledValue;\n    }\n\n    return unbundle(value);\n}\n","import latest from '../reference/latest';\nimport {deepUnbundle} from '../util/unbundle_jsonlint';\nimport {createExpression} from '../expression/index';\nimport {isFeatureConstant} from '../expression/is_constant';\nimport assert from 'assert';\n\nimport type Point from '@mapbox/point-geometry';\nimport type {CanonicalTileID} from '../types/tile_id';\nimport type {GlobalProperties, Feature} from '../expression/index';\nimport type {FilterSpecification, ExpressionSpecification} from '../types';\nimport type {ConfigOptions} from '../types/config_options';\n\nexport type FeatureDistanceData = {\n    bearing: [number, number];\n    center: [number, number];\n    scale: number;\n};\nexport type FilterExpression = (\n    globalProperties: GlobalProperties,\n    feature: Feature,\n    canonical?: CanonicalTileID,\n    featureTileCoord?: Point,\n    featureDistanceData?: FeatureDistanceData,\n) => boolean;\nexport type FeatureFilter = {\n    filter: FilterExpression;\n    dynamicFilter?: FilterExpression;\n    needGeometry: boolean;\n    needFeature: boolean;\n};\n\nexport default createFilter;\nexport {isExpressionFilter, isDynamicFilter, extractStaticFilter};\n\nfunction isExpressionFilter(filter: unknown): boolean {\n    if (filter === true || filter === false) {\n        return true;\n    }\n\n    if (!Array.isArray(filter) || filter.length === 0) {\n        return false;\n    }\n    switch (filter[0]) {\n    case 'has':\n        return filter.length >= 2 && filter[1] !== '$id' && filter[1] !== '$type';\n\n    case 'in':\n        return filter.length >= 3 && (typeof filter[1] !== 'string' || Array.isArray(filter[2]));\n\n    case '!in':\n    case '!has':\n    case 'none':\n        return false;\n\n    case '==':\n    case '!=':\n    case '>':\n    case '>=':\n    case '<':\n    case '<=':\n        return filter.length !== 3 || (Array.isArray(filter[1]) || Array.isArray(filter[2]));\n\n    case 'any':\n    case 'all':\n        for (const f of filter.slice(1)) {\n            if (!isExpressionFilter(f) && typeof f !== 'boolean') {\n                return false;\n            }\n        }\n        return true;\n\n    default:\n        return true;\n    }\n}\n\n/**\n * Given a filter expressed as nested arrays, return a new function\n * that evaluates whether a given feature (with a .properties or .tags property)\n * passes its test.\n *\n * @private\n * @param {Array} filter mapbox gl filter\n * @param {string} layerType the type of the layer this filter will be applied to.\n * @returns {Function} filter-evaluating function\n */\nfunction createFilter(filter?: FilterSpecification, scope: string = \"\", options: ConfigOptions | null = null, layerType: string = 'fill'): FeatureFilter {\n    if (filter === null || filter === undefined) {\n        return {filter: () => true, needGeometry: false, needFeature: false};\n    }\n\n    if (!isExpressionFilter(filter)) {\n        filter = convertFilter(filter) as ExpressionSpecification;\n    }\n\n    const filterExp = (filter as string[] | string | boolean);\n\n    let staticFilter = true;\n    try {\n        staticFilter = extractStaticFilter(filterExp);\n    } catch (e: any) {\n        console.warn(\n`Failed to extract static filter. Filter will continue working, but at higher memory usage and slower framerate.\nThis is most likely a bug, please report this via https://github.com/mapbox/mapbox-gl-js/issues/new?assignees=&labels=&template=Bug_report.md\nand paste the contents of this message in the report.\nThank you!\nFilter Expression:\n${JSON.stringify(filterExp, null, 2)}\n        `);\n    }\n\n    // Compile the static component of the filter\n    let filterFunc = null;\n    let filterSpec = null;\n    if (layerType !== 'background' && layerType !== 'sky' && layerType !== 'slot') {\n        filterSpec = latest[`filter_${layerType}`];\n        assert(filterSpec);\n        const compiledStaticFilter = createExpression(staticFilter, filterSpec, scope, options);\n\n        if (compiledStaticFilter.result === 'error') {\n            throw new Error(compiledStaticFilter.value.map(err => `${err.key}: ${err.message}`).join(', '));\n        } else {\n            filterFunc = (globalProperties: GlobalProperties, feature: Feature, canonical?: CanonicalTileID) => compiledStaticFilter.value.evaluate(globalProperties, feature, {}, canonical);\n        }\n    }\n\n    // If the static component is not equal to the entire filter then we have a dynamic component\n    // Compile the dynamic component separately\n    let dynamicFilterFunc = null;\n    let needFeature = null;\n    if (staticFilter !== filterExp) {\n        const compiledDynamicFilter = createExpression(filterExp, filterSpec, scope, options);\n\n        if (compiledDynamicFilter.result === 'error') {\n            throw new Error(compiledDynamicFilter.value.map(err => `${err.key}: ${err.message}`).join(', '));\n        } else {\n            dynamicFilterFunc = (globalProperties: GlobalProperties, feature: Feature, canonical?: CanonicalTileID, featureTileCoord?: Point, featureDistanceData?: FeatureDistanceData) => compiledDynamicFilter.value.evaluate(globalProperties, feature, {}, canonical, undefined, undefined, featureTileCoord, featureDistanceData);\n            needFeature = !isFeatureConstant(compiledDynamicFilter.value.expression);\n        }\n    }\n\n    filterFunc = (filterFunc as FilterExpression);\n    const needGeometry = geometryNeeded(staticFilter);\n\n    return {\n        filter: filterFunc,\n        dynamicFilter: dynamicFilterFunc ? dynamicFilterFunc : undefined,\n        needGeometry,\n        needFeature: !!needFeature\n    };\n}\n\nfunction extractStaticFilter(filter: any): any {\n    if (!isDynamicFilter(filter)) {\n        return filter;\n    }\n\n    // Shallow copy so we can replace expressions in-place\n    let result = deepUnbundle(filter);\n\n    // 1. Union branches\n    unionDynamicBranches(result);\n\n    // 2. Collapse dynamic conditions to  `true`\n    result = collapseDynamicBooleanExpressions(result);\n\n    return result;\n}\n\nfunction collapseDynamicBooleanExpressions(expression: any): any {\n    if (!Array.isArray(expression)) {\n        return expression;\n    }\n\n    const collapsed = collapsedExpression(expression);\n    if (collapsed === true) {\n        return collapsed;\n    } else {\n        return collapsed.map((subExpression) => collapseDynamicBooleanExpressions(subExpression));\n    }\n}\n\n/**\n * Traverses the expression and replaces all instances of branching on a\n * `dynamic` conditional (such as `['pitch']` or `['distance-from-center']`)\n * into an `any` expression.\n * This ensures that all possible outcomes of a `dynamic` branch are considered\n * when evaluating the expression upfront during filtering.\n *\n * @param {Array<any>} filter the filter expression mutated in-place.\n */\nfunction unionDynamicBranches(filter: any) {\n    let isBranchingDynamically = false;\n    const branches = [];\n\n    if (filter[0] === 'case') {\n        for (let i = 1; i < filter.length - 1; i += 2) {\n            isBranchingDynamically = isBranchingDynamically || isDynamicFilter(filter[i]);\n            branches.push(filter[i + 1]);\n        }\n\n        branches.push(filter[filter.length - 1]);\n    } else if (filter[0] === 'match') {\n        isBranchingDynamically = isBranchingDynamically || isDynamicFilter(filter[1]);\n\n        for (let i = 2; i < filter.length - 1; i += 2) {\n            branches.push(filter[i + 1]);\n        }\n        branches.push(filter[filter.length - 1]);\n    } else if (filter[0] === 'step') {\n        isBranchingDynamically = isBranchingDynamically || isDynamicFilter(filter[1]);\n\n        for (let i = 1; i < filter.length - 1; i += 2) {\n            branches.push(filter[i + 1]);\n        }\n    }\n\n    if (isBranchingDynamically) {\n        filter.length = 0;\n        filter.push('any', ...branches);\n    }\n\n    // traverse and recurse into children\n    for (let i = 1; i < filter.length; i++) {\n        unionDynamicBranches(filter[i]);\n    }\n}\n\nfunction isDynamicFilter(filter: any): boolean {\n    // Base Cases\n    if (!Array.isArray(filter)) {\n        return false;\n    }\n    if (isRootExpressionDynamic(filter[0])) {\n        return true;\n    }\n\n    for (let i = 1; i < filter.length; i++) {\n        const child = filter[i];\n        if (isDynamicFilter(child)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isRootExpressionDynamic(expression: string): boolean {\n    return expression === 'pitch' ||\n        expression === 'distance-from-center';\n}\n\nconst dynamicConditionExpressions = new Set([\n    'in',\n    '==',\n    '!=',\n    '>',\n    '>=',\n    '<',\n    '<=',\n    'to-boolean'\n]);\n\nfunction collapsedExpression(expression: any): any {\n    if (dynamicConditionExpressions.has(expression[0])) {\n\n        for (let i = 1; i < expression.length; i++) {\n            const param = expression[i];\n            if (isDynamicFilter(param)) {\n                return true;\n            }\n        }\n    }\n    return expression;\n}\n\n// Comparison function to sort numbers and strings\nfunction compare(a: number, b: number) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nfunction geometryNeeded(filter: Array<any> | boolean) {\n    if (!Array.isArray(filter)) return false;\n    if (filter[0] === 'within' || filter[0] === 'distance') return true;\n    for (let index = 1; index < filter.length; index++) {\n        if (geometryNeeded(filter[index])) return true;\n    }\n    return false;\n}\n\nfunction convertFilter(filter?: Array<any> | null): unknown {\n    if (!filter) return true;\n    const op = filter[0];\n    if (filter.length <= 1) return (op !== 'any');\n    const converted =\n        op === '==' ? convertComparisonOp(filter[1], filter[2], '==') :\n        op === '!=' ? convertNegation(convertComparisonOp(filter[1], filter[2], '==')) :\n        op === '<' ||\n        op === '>' ||\n        op === '<=' ||\n        op === '>=' ? convertComparisonOp(filter[1], filter[2], op) :\n        op === 'any' ? convertDisjunctionOp(filter.slice(1)) :\n        // @ts-expect-error - TS2769 - No overload matches this call.\n        op === 'all' ? ['all'].concat(filter.slice(1).map(convertFilter)) :\n        // @ts-expect-error - TS2769 - No overload matches this call.\n        op === 'none' ? ['all'].concat(filter.slice(1).map(convertFilter).map(convertNegation)) :\n        op === 'in' ? convertInOp(filter[1], filter.slice(2)) :\n        op === '!in' ? convertNegation(convertInOp(filter[1], filter.slice(2))) :\n        op === 'has' ? convertHasOp(filter[1]) :\n        op === '!has' ? convertNegation(convertHasOp(filter[1])) :\n        true;\n    return converted;\n}\n\nfunction convertComparisonOp(property: string, value: any, op: string) {\n    switch (property) {\n    case '$type':\n        return [`filter-type-${op}`, value];\n    case '$id':\n        return [`filter-id-${op}`, value];\n    default:\n        return [`filter-${op}`, property, value];\n    }\n}\n\nfunction convertDisjunctionOp(filters: Array<Array<any>>) {\n// @ts-expect-error - TS2769 - No overload matches this call.\n    return ['any'].concat(filters.map(convertFilter));\n}\n\nfunction convertInOp(property: string, values: Array<any>) {\n    if (values.length === 0) { return false; }\n    switch (property) {\n    case '$type':\n        return [`filter-type-in`, ['literal', values]];\n    case '$id':\n        return [`filter-id-in`, ['literal', values]];\n    default:\n        if (values.length > 200 && !values.some(v => typeof v !== typeof values[0])) {\n            return ['filter-in-large', property, ['literal', values.sort(compare)]];\n        } else {\n            return ['filter-in-small', property, ['literal', values]];\n        }\n    }\n}\n\nfunction convertHasOp(property: string) {\n    switch (property) {\n    case '$type':\n        return true;\n    case '$id':\n        return [`filter-has-id`];\n    default:\n        return [`filter-has`, property];\n    }\n}\n\nfunction convertNegation(filter: unknown) {\n    return ['!', filter];\n}\n","import {isExpressionFilter} from './index';\n\nimport type {FilterSpecification} from '../types';\n\ntype ExpectedTypes = {\n    [_: string]: 'string' | 'number' | 'boolean';\n};\n\n/**\n * Convert the given legacy filter to (the JSON representation of) an\n * equivalent expression\n * @private\n */\nexport default function convertFilter(filter: FilterSpecification): unknown {\n    return _convertFilter(filter, {});\n}\n\n/*\n * Convert the given filter to an expression, storing the expected types for\n * any feature properties referenced in expectedTypes.\n *\n * These expected types are needed in order to construct preflight type checks\n * needed for handling 'any' filters. A preflight type check is necessary in\n * order to mimic legacy filters' semantics around expected type mismatches.\n * For example, consider the legacy filter:\n *\n *     [\"any\", [\"all\", [\">\", \"y\", 0], [\">\", \"y\", 0]], [\">\", \"x\", 0]]\n *\n * Naively, we might convert this to the expression:\n *\n *     [\"any\", [\"all\", [\">\", [\"get\", \"y\"], 0], [\">\", [\"get\", \"z\"], 0]], [\">\", [\"get\", \"x\"], 0]]\n *\n * But if we tried to evaluate this against, say `{x: 1, y: null, z: 0}`, the\n * [\">\", [\"get\", \"y\"], 0] would cause an evaluation error, leading to the\n * entire filter returning false. Legacy filter semantics, though, ask for\n * [\">\", \"y\", 0] to simply return `false` when `y` is of the wrong type,\n * allowing the subsequent terms of the outer \"any\" expression to be evaluated\n * (resulting, in this case, in a `true` value, because x > 0).\n *\n * We account for this by inserting a preflight type-checking expression before\n * each \"any\" term, allowing us to avoid evaluating the actual converted filter\n * if any type mismatches would cause it to produce an evalaution error:\n *\n *     [\"any\",\n *       [\"case\",\n *         [\"all\", [\"==\", [\"typeof\", [\"get\", \"y\"]], \"number\"], [\"==\", [\"typeof\", [\"get\", \"z\"], \"number]],\n *         [\"all\", [\">\", [\"get\", \"y\"], 0], [\">\", [\"get\", \"z\"], 0]],\n *         false\n *       ],\n *       [\"case\",\n *         [\"==\", [\"typeof\", [\"get\", \"x\"], \"number\"]],\n *         [\">\", [\"get\", \"x\"], 0],\n *         false\n *       ]\n *     ]\n *\n * An alternative, possibly more direct approach would be to use type checks\n * in the conversion of each comparison operator, so that the converted version\n * of each individual ==, >=, etc. would mimic the legacy filter semantics. The\n * downside of this approach is that it can lead to many more type checks than\n * would otherwise be necessary: outside the context of an \"any\" expression,\n * bailing out due to a runtime type error (expression semantics) and returning\n * false (legacy filter semantics) are equivalent: they cause the filter to\n * produce a `false` result.\n */\nfunction _convertFilter(filter: FilterSpecification, expectedTypes: ExpectedTypes): unknown {\n    if (isExpressionFilter(filter)) { return filter; }\n\n    if (!filter) return true;\n    const op = filter[0];\n    if (filter.length <= 1) return (op !== 'any');\n\n    let converted;\n\n    if (\n        op === '==' ||\n        op === '!=' ||\n        op === '<' ||\n        op === '>' ||\n        op === '<=' ||\n        op === '>='\n    ) {\n        const [, property, value] = (filter as any);\n        converted = convertComparisonOp(property, value, op, expectedTypes);\n    } else if (op === 'any') {\n        const children = (filter as any).slice(1).map(f => {\n            const types: Record<string, any> = {};\n            const child = _convertFilter(f, types);\n            const typechecks = runtimeTypeChecks(types);\n            return typechecks === true ? child : ['case', typechecks, child, false];\n        });\n        return ['any'].concat(children);\n    } else if (op === 'all') {\n        const children: any[] = (filter).slice(1).map(f => _convertFilter(f, expectedTypes));\n        return children.length > 1 ? ['all'].concat(children) : [].concat(...children);\n    } else if (op === 'none') {\n        return ['!', _convertFilter(['any'].concat((filter).slice(1)), {})];\n    } else if (op === 'in') {\n        converted = convertInOp((filter[1]), filter.slice(2));\n    } else if (op === '!in') {\n        converted = convertInOp((filter[1]), filter.slice(2), true);\n    } else if (op === 'has') {\n        converted = convertHasOp((filter[1]));\n    } else if (op === '!has') {\n        converted = ['!', convertHasOp((filter[1]))];\n    } else {\n        converted = true;\n    }\n\n    return converted;\n}\n\n// Given a set of feature properties and an expected type for each one,\n// construct an boolean expression that tests whether each property has the\n// right type.\n// E.g.: for {name: 'string', population: 'number'}, return\n// [ 'all',\n//   ['==', ['typeof', ['get', 'name'], 'string']],\n//   ['==', ['typeof', ['get', 'population'], 'number]]\n// ]\nfunction runtimeTypeChecks(expectedTypes: ExpectedTypes) {\n    const conditions = [];\n    for (const property in expectedTypes) {\n        const get = property === '$id' ? ['id'] : ['get', property];\n        conditions.push(['==', ['typeof', get], expectedTypes[property]]);\n    }\n    if (conditions.length === 0) return true;\n    if (conditions.length === 1) return conditions[0];\n    return ['all'].concat(conditions);\n}\n\nfunction convertComparisonOp(property: string, value: any, op: string, expectedTypes?: ExpectedTypes | null) {\n    let get;\n    if (property === '$type') {\n        return [op, ['geometry-type'], value];\n    } else if (property === '$id') {\n        get = ['id'];\n    } else {\n        get = ['get', property];\n    }\n\n    if (expectedTypes && value !== null) {\n        const type = ((typeof value) as any);\n        expectedTypes[property] = type;\n    }\n\n    if (op === '==' && property !== '$id' && value === null) {\n        return [\n            'all',\n            ['has', property], // missing property != null for legacy filters\n            ['==', get, null]\n        ];\n    } else if (op === '!=' && property !== '$id' && value === null) {\n        return [\n            'any',\n            ['!', ['has', property]], // missing property != null for legacy filters\n            ['!=', get, null]\n        ];\n    }\n\n    return [op, get, value];\n}\n\nfunction convertInOp(property: string, values: Array<any>, negate: boolean = false) {\n    if (values.length === 0) return negate;\n\n    let get: string[];\n    if (property === '$type') {\n        get = ['geometry-type'];\n    } else if (property === '$id') {\n        get = ['id'];\n    } else {\n        get = ['get', property];\n    }\n\n    // Determine if the list of values to be searched is homogenously typed.\n    // If so (and if the type is string or number), then we can use a\n    // [match, input, [...values], true, false] construction rather than a\n    // bunch of `==` tests.\n    let uniformTypes = true;\n    const type = typeof values[0];\n    for (const value of values) {\n        if (typeof value !== type) {\n            uniformTypes = false;\n            break;\n        }\n    }\n\n    if (uniformTypes && (type === 'string' || type === 'number')) {\n        // Match expressions must have unique values.\n        const uniqueValues = values.sort().filter((v, i) => i === 0 || values[i - 1] !== v);\n        return ['match', get, uniqueValues, !negate, negate];\n    }\n\n    return [negate ? 'all' : 'any'].concat(\n        values.map(v => [negate ? '!=' : '==', get, v]) as any[]\n    );\n}\n\nfunction convertHasOp(property: string) {\n    if (property === '$type') {\n        return true;\n    } else if (property === '$id') {\n        return ['!=', ['id'], null];\n    } else {\n        return ['has', property];\n    }\n}\n","import {eachLayer, eachProperty} from '../visit';\nimport {isExpression} from '../expression/index';\nimport convertFunction, {convertTokenString} from '../function/convert';\nimport convertFilter from '../feature_filter/convert';\n\nimport type {StyleSpecification, FunctionSpecification} from '../types';\n\n/**\n * Migrate the given style object in place to use expressions. Specifically,\n * this will convert (a) \"stop\" functions, and (b) legacy filters to their\n * expression equivalents.\n */\nexport default function(style: StyleSpecification): StyleSpecification {\n    const converted = [];\n\n    eachLayer(style, (layer) => {\n        if (layer.filter) {\n            layer.filter = (convertFilter(layer.filter) as any);\n        }\n    });\n\n    eachProperty(style, {paint: true, layout: true}, ({path, value, reference, set}) => {\n        if (isExpression(value)) return;\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            set(convertFunction(value as FunctionSpecification<unknown>, reference));\n            converted.push(path.join('.'));\n        } else if (reference.tokens && typeof value === 'string') {\n            set(convertTokenString(value));\n        }\n    });\n\n    return style;\n}\n","// @ts-nocheck\n\nimport migrateToV8 from './migrate/v8';\nimport migrateToExpressions from './migrate/expressions';\n\n/**\n * Migrate a Mapbox GL Style to the latest version.\n *\n * @private\n * @alias migrate\n * @param {object} style a Mapbox GL Style\n * @returns {Object} a migrated style\n * @example\n * var fs = require('fs');\n * var migrate = require('mapbox-gl-style-spec').migrate;\n * var style = fs.readFileSync('./style.json', 'utf8');\n * fs.writeFileSync('./style.json', JSON.stringify(migrate(style)));\n */\nexport default function(style) {\n    let migrated = false;\n\n    if (style.version === 7) {\n        style = migrateToV8(style);\n        migrated = true;\n    }\n\n    if (style.version === 8) {\n        migrated = migrateToExpressions(style);\n        migrated = true;\n    }\n\n    if (!migrated) {\n        throw new Error('cannot migrate from', style.version);\n    }\n\n    return style;\n}\n","// @ts-nocheck\n\nexport default function (style) {\n    const styleIDs = [];\n    const sourceIDs = [];\n    const compositedSourceLayers = [];\n\n    for (const id in style.sources) {\n        const source = style.sources[id];\n\n        if (source.type !== \"vector\")\n            continue;\n\n        const match = /^mapbox:\\/\\/(.*)/.exec(source.url);\n        if (!match)\n            continue;\n\n        styleIDs.push(id);\n        sourceIDs.push(match[1]);\n    }\n\n    if (styleIDs.length < 2)\n        return style;\n\n    styleIDs.forEach((id) => {\n        delete style.sources[id];\n    });\n\n    const compositeID = sourceIDs.join(\",\");\n\n    style.sources[compositeID] = {\n        \"type\": \"vector\",\n        \"url\": `mapbox://${compositeID}`\n    };\n\n    style.layers.forEach((layer) => {\n        if (styleIDs.indexOf(layer.source) >= 0) {\n            layer.source = compositeID;\n\n            if ('source-layer' in layer) {\n                if (compositedSourceLayers.indexOf(layer['source-layer']) >= 0) {\n                    throw new Error('Conflicting source layer names');\n                } else {\n                    compositedSourceLayers.push(layer['source-layer']);\n                }\n            }\n        }\n    });\n\n    return style;\n}\n","export default ['type', 'source', 'source-layer', 'minzoom', 'maxzoom', 'filter', 'layout'];\n","import refProperties from './util/ref_properties';\n\nimport type {LayerSpecification} from './types';\n\nfunction deref(layer: LayerSpecification, parent: LayerSpecification): LayerSpecification {\n    const result: Record<string, any> = {};\n\n    for (const k in layer) {\n        if (k !== 'ref') {\n            result[k] = layer[k];\n        }\n    }\n\n    refProperties.forEach((k) => {\n        if (k in parent) {\n            result[k] = (parent as any)[k];\n        }\n    });\n\n    return result as LayerSpecification;\n}\n\n/**\n * Given an array of layers, some of which may contain `ref` properties\n * whose value is the `id` of another property, return a new array where\n * such layers have been augmented with the 'type', 'source', etc. properties\n * from the parent layer, and the `ref` property has been removed.\n *\n * The input is not modified. The output may contain references to portions\n * of the input.\n *\n * @private\n * @param {Array<Layer>} layers\n * @returns {Array<Layer>}\n */\nexport default function derefLayers(layers: Array<LayerSpecification>): Array<LayerSpecification> {\n    layers = layers.slice();\n\n    const map: any = Object.create(null);\n    for (let i = 0; i < layers.length; i++) {\n        map[layers[i].id] = layers[i];\n    }\n\n    for (let i = 0; i < layers.length; i++) {\n        if ('ref' in layers[i]) {\n            layers[i] = deref(layers[i], map[(layers[i] as any).ref]);\n        }\n    }\n\n    return layers;\n}\n","/**\n * Deeply compares two object literals.\n *\n * @private\n */\nfunction deepEqual(a?: unknown, b?: unknown): boolean {\n    if (Array.isArray(a)) {\n        if (!Array.isArray(b) || a.length !== b.length) return false;\n        for (let i = 0; i < a.length; i++) {\n            if (!deepEqual(a[i], b[i])) return false;\n        }\n        return true;\n    }\n    if (typeof a === 'object' && a !== null && b !== null) {\n        if (!(typeof b === 'object')) return false;\n        const keys = Object.keys(a);\n        if (keys.length !== Object.keys(b).length) return false;\n        for (const key in a) {\n            if (!deepEqual(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a === b;\n}\n\nexport default deepEqual;\n","import isEqual from './util/deep_equal';\n\nimport type {StyleSpecification, ImportSpecification, SourceSpecification, LayerSpecification} from './types';\n\ntype Sources = {\n    [key: string]: SourceSpecification;\n};\n\ntype Command = {\n    command: string;\n    args: Array<any>;\n};\n\nexport const operations: {\n    [_: string]: string;\n} = {\n\n    /*\n     * { command: 'setStyle', args: [stylesheet] }\n     */\n    setStyle: 'setStyle',\n\n    /*\n     * { command: 'addLayer', args: [layer, 'beforeLayerId'] }\n     */\n    addLayer: 'addLayer',\n\n    /*\n     * { command: 'removeLayer', args: ['layerId'] }\n     */\n    removeLayer: 'removeLayer',\n\n    /*\n     * { command: 'setPaintProperty', args: ['layerId', 'prop', value] }\n     */\n    setPaintProperty: 'setPaintProperty',\n\n    /*\n     * { command: 'setLayoutProperty', args: ['layerId', 'prop', value] }\n     */\n    setLayoutProperty: 'setLayoutProperty',\n\n    /*\n     * { command: 'setSlot', args: ['layerId', slot] }\n     */\n    setSlot: 'setSlot',\n\n    /*\n     * { command: 'setFilter', args: ['layerId', filter] }\n     */\n    setFilter: 'setFilter',\n\n    /*\n     * { command: 'addSource', args: ['sourceId', source] }\n     */\n    addSource: 'addSource',\n\n    /*\n     * { command: 'removeSource', args: ['sourceId'] }\n     */\n    removeSource: 'removeSource',\n\n    /*\n     * { command: 'setGeoJSONSourceData', args: ['sourceId', data] }\n     */\n    setGeoJSONSourceData: 'setGeoJSONSourceData',\n\n    /*\n     * { command: 'setLayerZoomRange', args: ['layerId', 0, 22] }\n     */\n    setLayerZoomRange: 'setLayerZoomRange',\n\n    /*\n     * { command: 'setLayerProperty', args: ['layerId', 'prop', value] }\n     */\n    setLayerProperty: 'setLayerProperty',\n\n    /*\n     * { command: 'setCenter', args: [[lon, lat]] }\n     */\n    setCenter: 'setCenter',\n\n    /*\n     * { command: 'setZoom', args: [zoom] }\n     */\n    setZoom: 'setZoom',\n\n    /*\n     * { command: 'setBearing', args: [bearing] }\n     */\n    setBearing: 'setBearing',\n\n    /*\n     * { command: 'setPitch', args: [pitch] }\n     */\n    setPitch: 'setPitch',\n\n    /*\n     * { command: 'setSprite', args: ['spriteUrl'] }\n     */\n    setSprite: 'setSprite',\n\n    /*\n     * { command: 'setGlyphs', args: ['glyphsUrl'] }\n     */\n    setGlyphs: 'setGlyphs',\n\n    /*\n     * { command: 'setTransition', args: [transition] }\n     */\n    setTransition: 'setTransition',\n\n    /*\n     * { command: 'setLighting', args: [lightProperties] }\n     */\n    setLight: 'setLight',\n\n    /*\n     * { command: 'setTerrain', args: [terrainProperties] }\n     */\n    setTerrain: 'setTerrain',\n\n    /*\n     *  { command: 'setFog', args: [fogProperties] }\n     */\n    setFog: 'setFog',\n\n    /*\n     *  { command: 'setCamera', args: [cameraProperties] }\n     */\n    setCamera: 'setCamera',\n\n    /*\n     *  { command: 'setLights', args: [{light-3d},...] }\n     */\n    setLights: 'setLights',\n\n    /*\n     *  { command: 'setProjection', args: [projectionProperties] }\n     */\n    setProjection: 'setProjection',\n\n    /*\n     *  { command: 'addImport', args: [import] }\n     */\n    addImport: 'addImport',\n\n    /*\n     *  { command: 'removeImport', args: [importId] }\n     */\n    removeImport: 'removeImport',\n\n    /**\n     * { command: 'updateImport', args: [importId, importSpecification | styleUrl] }\n     */\n    updateImport: 'updateImport'\n};\n\nfunction addSource(sourceId: string, after: Sources, commands: Array<Command>) {\n    commands.push({command: operations.addSource, args: [sourceId, after[sourceId]]});\n}\n\nfunction removeSource(sourceId: string, commands: Array<Command>, sourcesRemoved: {\n    [key: string]: true;\n}) {\n    commands.push({command: operations.removeSource, args: [sourceId]});\n    sourcesRemoved[sourceId] = true;\n}\n\nfunction updateSource(sourceId: string, after: Sources, commands: Array<Command>, sourcesRemoved: {\n    [key: string]: true;\n}) {\n    removeSource(sourceId, commands, sourcesRemoved);\n    addSource(sourceId, after, commands);\n}\n\nfunction canUpdateGeoJSON(before: Sources, after: Sources, sourceId: string) {\n    let prop;\n    for (prop in before[sourceId]) {\n        if (!before[sourceId].hasOwnProperty(prop)) continue;\n        if (prop !== 'data' && !isEqual(before[sourceId][prop], after[sourceId][prop])) {\n            return false;\n        }\n    }\n    for (prop in after[sourceId]) {\n        if (!after[sourceId].hasOwnProperty(prop)) continue;\n        if (prop !== 'data' && !isEqual(before[sourceId][prop], after[sourceId][prop])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction diffSources(before: Sources, after: Sources, commands: Array<Command>, sourcesRemoved: {\n    [key: string]: true;\n}) {\n    before = before || {};\n    after = after || {};\n\n    let sourceId;\n\n    // look for sources to remove\n    for (sourceId in before) {\n        if (!before.hasOwnProperty(sourceId)) continue;\n        if (!after.hasOwnProperty(sourceId)) {\n            removeSource(sourceId, commands, sourcesRemoved);\n        }\n    }\n\n    // look for sources to add/update\n    for (sourceId in after) {\n        if (!after.hasOwnProperty(sourceId)) continue;\n        const source = after[sourceId];\n        if (!before.hasOwnProperty(sourceId)) {\n            addSource(sourceId, after, commands);\n        } else if (!isEqual(before[sourceId], source)) {\n            if (before[sourceId].type === 'geojson' && source.type === 'geojson' && canUpdateGeoJSON(before, after, sourceId)) {\n                commands.push({command: operations.setGeoJSONSourceData, args: [sourceId, source.data]});\n            } else {\n                // no update command, must remove then add\n                updateSource(sourceId, after, commands, sourcesRemoved);\n            }\n        }\n    }\n}\n\nfunction diffLayerPropertyChanges(before: any, after: any, commands: Array<Command>, layerId: string, klass: string | null | undefined, command: string) {\n    before = before || {};\n    after = after || {};\n\n    let prop;\n\n    for (prop in before) {\n        if (!before.hasOwnProperty(prop)) continue;\n        if (!isEqual(before[prop], after[prop])) {\n            commands.push({command, args: [layerId, prop, after[prop], klass]});\n        }\n    }\n    for (prop in after) {\n        if (!after.hasOwnProperty(prop) || before.hasOwnProperty(prop)) continue;\n        if (!isEqual(before[prop], after[prop])) {\n            commands.push({command, args: [layerId, prop, after[prop], klass]});\n        }\n    }\n}\n\nfunction pluckId<T extends {\n    id: string;\n}>(item: T): string {\n    return item.id;\n}\n\nfunction indexById<T extends {\n    id: string;\n}>(\n    group: {\n        [key: string]: T;\n    },\n    item: T,\n): {\n    [id: string]: T;\n} {\n    group[item.id] = item;\n    return group;\n}\n\nfunction diffLayers(before: Array<LayerSpecification>, after: Array<LayerSpecification>, commands: Array<Command>) {\n    before = before || [];\n    after = after || [];\n\n    // order of layers by id\n    const beforeOrder = before.map(pluckId);\n    const afterOrder = after.map(pluckId);\n\n    // index of layer by id\n    const beforeIndex = before.reduce<Record<string, any>>(indexById, {});\n    const afterIndex = after.reduce<Record<string, any>>(indexById, {});\n\n    // track order of layers as if they have been mutated\n    const tracker = beforeOrder.slice();\n\n    // layers that have been added do not need to be diffed\n    const clean: any = Object.create(null);\n\n    let i, d, layerId, beforeLayer: LayerSpecification, afterLayer: LayerSpecification, insertBeforeLayerId, prop;\n\n    // remove layers\n    for (i = 0, d = 0; i < beforeOrder.length; i++) {\n        layerId = beforeOrder[i];\n        if (!afterIndex.hasOwnProperty(layerId)) {\n            commands.push({command: operations.removeLayer, args: [layerId]});\n            tracker.splice(tracker.indexOf(layerId, d), 1);\n        } else {\n            // limit where in tracker we need to look for a match\n            d++;\n        }\n    }\n\n    // add/reorder layers\n    for (i = 0, d = 0; i < afterOrder.length; i++) {\n        // work backwards as insert is before an existing layer\n        layerId = afterOrder[afterOrder.length - 1 - i];\n\n        if (tracker[tracker.length - 1 - i] === layerId) continue;\n\n        if (beforeIndex.hasOwnProperty(layerId)) {\n            // remove the layer before we insert at the correct position\n            commands.push({command: operations.removeLayer, args: [layerId]});\n            tracker.splice(tracker.lastIndexOf(layerId, tracker.length - d), 1);\n        } else {\n            // limit where in tracker we need to look for a match\n            d++;\n        }\n\n        // add layer at correct position\n        insertBeforeLayerId = tracker[tracker.length - i];\n        commands.push({command: operations.addLayer, args: [afterIndex[layerId], insertBeforeLayerId]});\n        tracker.splice(tracker.length - i, 0, layerId);\n        clean[layerId] = true;\n    }\n\n    // update layers\n    for (i = 0; i < afterOrder.length; i++) {\n        layerId = afterOrder[i];\n        beforeLayer = beforeIndex[layerId];\n        afterLayer = afterIndex[layerId];\n\n        // no need to update if previously added (new or moved)\n        if (clean[layerId] || isEqual(beforeLayer, afterLayer)) continue;\n\n        // If source, source-layer, or type have changes, then remove the layer\n        // and add it back 'from scratch'.\n        if (!isEqual(beforeLayer.source, afterLayer.source) || !isEqual(beforeLayer['source-layer'], afterLayer['source-layer']) || !isEqual(beforeLayer.type, afterLayer.type)) {\n            commands.push({command: operations.removeLayer, args: [layerId]});\n            // we add the layer back at the same position it was already in, so\n            // there's no need to update the `tracker`\n            insertBeforeLayerId = tracker[tracker.lastIndexOf(layerId) + 1];\n            commands.push({command: operations.addLayer, args: [afterLayer, insertBeforeLayerId]});\n            continue;\n        }\n\n        // layout, paint, filter, minzoom, maxzoom\n        diffLayerPropertyChanges(beforeLayer.layout, afterLayer.layout, commands, layerId, null, operations.setLayoutProperty);\n        diffLayerPropertyChanges(beforeLayer.paint, afterLayer.paint, commands, layerId, null, operations.setPaintProperty);\n        if (!isEqual(beforeLayer.slot, afterLayer.slot)) {\n            commands.push({command: operations.setSlot, args: [layerId, afterLayer.slot]});\n        }\n        if (!isEqual(beforeLayer.filter, afterLayer.filter)) {\n            commands.push({command: operations.setFilter, args: [layerId, afterLayer.filter]});\n        }\n        if (!isEqual(beforeLayer.minzoom, afterLayer.minzoom) || !isEqual(beforeLayer.maxzoom, afterLayer.maxzoom)) {\n            commands.push({command: operations.setLayerZoomRange, args: [layerId, afterLayer.minzoom, afterLayer.maxzoom]});\n        }\n\n        // handle all other layer props, including paint.*\n        for (prop in beforeLayer) {\n            if (!beforeLayer.hasOwnProperty(prop)) continue;\n            if (prop === 'layout' || prop === 'paint' || prop === 'filter' ||\n                prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom' || prop === 'slot') continue;\n            if (prop.indexOf('paint.') === 0) {\n                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);\n            } else if (!isEqual(beforeLayer[prop], afterLayer[prop])) {\n                commands.push({command: operations.setLayerProperty, args: [layerId, prop, afterLayer[prop]]});\n            }\n        }\n        for (prop in afterLayer) {\n            if (!afterLayer.hasOwnProperty(prop) || beforeLayer.hasOwnProperty(prop)) continue;\n            if (prop === 'layout' || prop === 'paint' || prop === 'filter' ||\n                prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom' || prop === 'slot') continue;\n            if (prop.indexOf('paint.') === 0) {\n                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);\n            } else if (!isEqual(beforeLayer[prop], afterLayer[prop])) {\n                commands.push({command: operations.setLayerProperty, args: [layerId, prop, afterLayer[prop]]});\n            }\n        }\n    }\n}\n\nexport function diffImports(before: Array<ImportSpecification> | null | undefined = [], after: Array<ImportSpecification> | null | undefined = [], commands: Array<Command>) {\n    before = before || [];\n    after = after || [];\n\n    // order imports by id\n    const beforeOrder = before.map(pluckId);\n    const afterOrder = after.map(pluckId);\n\n    // index imports by id\n    const beforeIndex = before.reduce<Record<string, any>>(indexById, {});\n    const afterIndex = after.reduce<Record<string, any>>(indexById, {});\n\n    // track order of imports as if they have been mutated\n    const tracker = beforeOrder.slice();\n\n    let i, d, importId, insertBefore;\n\n    // remove imports\n    for (i = 0, d = 0; i < beforeOrder.length; i++) {\n        importId = beforeOrder[i];\n        if (!afterIndex.hasOwnProperty(importId)) {\n            commands.push({command: operations.removeImport, args: [importId]});\n            tracker.splice(tracker.indexOf(importId, d), 1);\n        } else {\n            // limit where in tracker we need to look for a match\n            d++;\n        }\n    }\n\n    // add/reorder imports\n    for (i = 0, d = 0; i < afterOrder.length; i++) {\n        // work backwards as insert is before an existing import\n        importId = afterOrder[afterOrder.length - 1 - i];\n\n        if (tracker[tracker.length - 1 - i] === importId) continue;\n\n        if (beforeIndex.hasOwnProperty(importId)) {\n            // remove the import before we insert at the correct position\n            commands.push({command: operations.removeImport, args: [importId]});\n            tracker.splice(tracker.lastIndexOf(importId, tracker.length - d), 1);\n        } else {\n            // limit where in tracker we need to look for a match\n            d++;\n        }\n\n        // add import at correct position\n        insertBefore = tracker[tracker.length - i];\n        commands.push({command: operations.addImport, args: [afterIndex[importId], insertBefore]});\n        tracker.splice(tracker.length - i, 0, importId);\n    }\n\n    // update imports\n    for (const afterImport of after) {\n        const beforeImport = beforeIndex[afterImport.id];\n        if (!beforeImport || isEqual(beforeImport, afterImport)) continue;\n\n        commands.push({command: operations.updateImport, args: [afterImport.id, afterImport]});\n    }\n}\n\n/**\n * Diff two stylesheet\n *\n * Creates semanticly aware diffs that can easily be applied at runtime.\n * Operations produced by the diff closely resemble the mapbox-gl-js API. Any\n * error creating the diff will fall back to the 'setStyle' operation.\n *\n * Example diff:\n * [\n *     { command: 'setConstant', args: ['@water', '#0000FF'] },\n *     { command: 'setPaintProperty', args: ['background', 'background-color', 'black'] }\n * ]\n *\n * @private\n * @param {*} [before] stylesheet to compare from\n * @param {*} after stylesheet to compare to\n * @returns Array list of changes\n */\nexport default function diffStyles(before: StyleSpecification, after: StyleSpecification): Array<Command> {\n    if (!before) return [{command: operations.setStyle, args: [after]}];\n\n    let commands: Array<Command> = [];\n\n    try {\n        // Handle changes to top-level properties\n        if (!isEqual(before.version, after.version)) {\n            return [{command: operations.setStyle, args: [after]}];\n        }\n        if (!isEqual(before.center, after.center)) {\n            commands.push({command: operations.setCenter, args: [after.center]});\n        }\n        if (!isEqual(before.zoom, after.zoom)) {\n            commands.push({command: operations.setZoom, args: [after.zoom]});\n        }\n        if (!isEqual(before.bearing, after.bearing)) {\n            commands.push({command: operations.setBearing, args: [after.bearing]});\n        }\n        if (!isEqual(before.pitch, after.pitch)) {\n            commands.push({command: operations.setPitch, args: [after.pitch]});\n        }\n        if (!isEqual(before.sprite, after.sprite)) {\n            commands.push({command: operations.setSprite, args: [after.sprite]});\n        }\n        if (!isEqual(before.glyphs, after.glyphs)) {\n            commands.push({command: operations.setGlyphs, args: [after.glyphs]});\n        }\n        // Handle changes to `imports` before other mergable top-level properties\n        if (!isEqual(before.imports, after.imports)) {\n            diffImports(before.imports, after.imports, commands);\n        }\n        if (!isEqual(before.transition, after.transition)) {\n            commands.push({command: operations.setTransition, args: [after.transition]});\n        }\n        if (!isEqual(before.light, after.light)) {\n            commands.push({command: operations.setLight, args: [after.light]});\n        }\n        if (!isEqual(before.fog, after.fog)) {\n            commands.push({command: operations.setFog, args: [after.fog]});\n        }\n        if (!isEqual(before.projection, after.projection)) {\n            commands.push({command: operations.setProjection, args: [after.projection]});\n        }\n        if (!isEqual(before.lights, after.lights)) {\n            commands.push({command: operations.setLights, args: [after.lights]});\n        }\n        if (!isEqual(before.camera, after.camera)) {\n            commands.push({command: operations.setCamera, args: [after.camera]});\n        }\n        if (!isEqual(before[\"color-theme\"], after[\"color-theme\"])) {\n            // Update this to setColorTheme after\n            // https://mapbox.atlassian.net/browse/GLJS-842 is implemented\n            return [{command: operations.setStyle, args: [after]}];\n        }\n\n        // Handle changes to `sources`\n        // If a source is to be removed, we also--before the removeSource\n        // command--need to remove all the style layers that depend on it.\n        const sourcesRemoved: Record<string, any> = {};\n\n        // First collect the {add,remove}Source commands\n        const removeOrAddSourceCommands = [];\n        diffSources(before.sources, after.sources, removeOrAddSourceCommands, sourcesRemoved);\n\n        // Push a removeLayer command for each style layer that depends on a\n        // source that's being removed.\n        // Also, exclude any such layers them from the input to `diffLayers`\n        // below, so that diffLayers produces the appropriate `addLayers`\n        // command\n        const beforeLayers = [];\n        if (before.layers) {\n            before.layers.forEach((layer) => {\n                if (layer.source && sourcesRemoved[layer.source]) {\n                    commands.push({command: operations.removeLayer, args: [layer.id]});\n                } else {\n                    beforeLayers.push(layer);\n                }\n            });\n        }\n\n        // Remove the terrain if the source for that terrain is being removed\n        let beforeTerrain = before.terrain;\n        if (beforeTerrain) {\n            if (sourcesRemoved[beforeTerrain.source]) {\n                commands.push({command: operations.setTerrain, args: [undefined]});\n                beforeTerrain = undefined;\n            }\n        }\n\n        commands = commands.concat(removeOrAddSourceCommands);\n\n        // Even though terrain is a top-level property\n        // Its like a layer in the sense that it depends on a source being present.\n        if (!isEqual(beforeTerrain, after.terrain)) {\n            commands.push({command: operations.setTerrain, args: [after.terrain]});\n        }\n\n        // Handle changes to `layers`\n        diffLayers(beforeLayers, after.layers, commands);\n    } catch (e: any) {\n        // fall back to setStyle\n        console.warn('Unable to compute style diff:', e);\n        commands = [{command: operations.setStyle, args: [after]}];\n    }\n\n    return commands;\n}\n","// Note: Do not inherit from Error. It breaks when transpiling to ES5.\n\nexport default class ValidationError {\n    message: string;\n    identifier: string | null | undefined;\n    line: number | null | undefined;\n\n    constructor(key: string | null | undefined, value: {\n        __line__: number;\n    } | null | undefined, message: string, identifier?: string | null) {\n        this.message = (key ? `${key}: ` : '') + message;\n        if (identifier) this.identifier = identifier;\n\n        if (value !== null && value !== undefined && value.__line__) {\n            this.line = value.__line__;\n        }\n    }\n}\n\nexport class ValidationWarning extends ValidationError {}\n","// Note: Do not inherit from Error. It breaks when transpiling to ES5.\n\nexport default class ParsingError {\n    message: string;\n    error: Error;\n    line: number;\n\n    constructor(error: Error) {\n        this.error = error;\n        this.message = error.message;\n        const match = error.message.match(/line (\\d+)/);\n        this.line = match ? parseInt(match[1], 10) : 0;\n    }\n}\n","import {default as ValidationError, ValidationWarning} from '../error/validation_error';\nimport getType from '../util/get_type';\nimport validateSpec from './validate';\n\nimport type {ValidationOptions} from './validate';\n\ntype Options = ValidationOptions & {\n    objectElementValidators?: any;\n};\n\nexport default function validateObject(options: Options): Array<ValidationError> {\n    const key = options.key;\n    const object = options.value;\n    const elementSpecs = options.valueSpec || {};\n    const elementValidators = options.objectElementValidators || {};\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n    let errors = [];\n\n    const type = getType(object);\n    if (type !== 'object') {\n        return [new ValidationError(key, object, `object expected, ${type} found`)];\n    }\n\n    for (const objectKey in object) {\n        const elementSpecKey = objectKey.split('.')[0]; // treat 'paint.*' as 'paint'\n        const elementSpec = elementSpecs[elementSpecKey] || elementSpecs['*'];\n\n        let validateElement;\n        if (elementValidators[elementSpecKey]) {\n            validateElement = elementValidators[elementSpecKey];\n        } else if (elementSpecs[elementSpecKey]) {\n            validateElement = validateSpec;\n        } else if (elementValidators['*']) {\n            validateElement = elementValidators['*'];\n        } else if (elementSpecs['*']) {\n            validateElement = validateSpec;\n        }\n\n        if (!validateElement) {\n            errors.push(new ValidationWarning(key, object[objectKey], `unknown property \"${objectKey}\"`));\n            continue;\n        }\n\n        errors = errors.concat(validateElement({\n            key: (key ? `${key}.` : key) + objectKey,\n            value: object[objectKey],\n            valueSpec: elementSpec,\n            style,\n            styleSpec,\n            object,\n            objectKey\n        }, object));\n    }\n\n    for (const elementSpecKey in elementSpecs) {\n        // Don't check `required` when there's a custom validator for that property.\n        if (elementValidators[elementSpecKey]) {\n            continue;\n        }\n\n        if (elementSpecs[elementSpecKey].required && elementSpecs[elementSpecKey]['default'] === undefined && object[elementSpecKey] === undefined) {\n            errors.push(new ValidationError(key, object, `missing required property \"${elementSpecKey}\"`));\n        }\n    }\n\n    return errors;\n}\n","import extend from '../util/extend';\nimport validateStyle from './validate_style';\nimport validateObject from './validate_object';\nimport ValidationError from '../error/validation_error';\nimport {unbundle} from '../util/unbundle_jsonlint';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateImport(options: ValidationOptions): ValidationError[] {\n    const {value, styleSpec} = options;\n    const {data, ...importSpec} = value;\n\n    // Preserve __line__ from the value\n    Object.defineProperty(importSpec, '__line__', {\n        value: value.__line__,\n        enumerable: false\n    });\n\n    let errors = validateObject(extend({}, options, {\n        value: importSpec,\n        valueSpec: styleSpec.import\n    }));\n\n    // Empty string is reserved for the root style id\n    if (unbundle(importSpec.id) === '') {\n        const key = `${options.key}.id`;\n        errors.push(new ValidationError(key, importSpec, `import id can't be an empty string`));\n    }\n\n    if (data) {\n        const key = `${options.key}.data`;\n        errors = errors.concat(validateStyle(data, styleSpec, {key}));\n    }\n\n    return errors;\n}\n","import getType from '../util/get_type';\nimport validate from './validate';\nimport ValidationError from '../error/validation_error';\n\nimport type {ValidationOptions} from './validate';\n\ntype Options = ValidationOptions & {\n    arrayElementValidator: any;\n};\n\nexport default function validateArray(options: Options): Array<ValidationError> {\n    const array = options.value;\n    const arraySpec = options.valueSpec;\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n    const key = options.key;\n    const validateArrayElement = options.arrayElementValidator || validate;\n\n    if (getType(array) !== 'array') {\n        return [new ValidationError(key, array, `array expected, ${getType(array)} found`)];\n    }\n\n    if (arraySpec.length && array.length !== arraySpec.length) {\n        return [new ValidationError(key, array, `array length ${arraySpec.length} expected, length ${array.length} found`)];\n    }\n\n    if (arraySpec['min-length'] && array.length < arraySpec['min-length']) {\n        return [new ValidationError(key, array, `array length at least ${arraySpec['min-length']} expected, length ${array.length} found`)];\n    }\n\n    let arrayElementSpec = {\n        \"type\": arraySpec.value,\n        \"values\": arraySpec.values,\n        \"minimum\": arraySpec.minimum,\n        \"maximum\": arraySpec.maximum,\n        function: undefined\n    };\n\n    if (styleSpec.$version < 7) {\n        arrayElementSpec.function = arraySpec.function;\n    }\n\n    if (getType(arraySpec.value) === 'object') {\n        arrayElementSpec = arraySpec.value;\n    }\n\n    let errors = [];\n    for (let i = 0; i < array.length; i++) {\n        errors = errors.concat(validateArrayElement({\n            array,\n            arrayIndex: i,\n            value: array[i],\n            valueSpec: arrayElementSpec,\n            style,\n            styleSpec,\n            key: `${key}[${i}]`\n        }, true));\n    }\n    return errors;\n}\n","import getType from '../util/get_type';\nimport ValidationError from '../error/validation_error';\n\nimport type {ValidationOptions} from './validate';\n\ntype Options = ValidationOptions & {\n    arrayIndex: number;\n};\n\nexport default function validateNumber(options: Options): Array<ValidationError> {\n    const key = options.key;\n    const value = options.value;\n    const valueSpec = options.valueSpec;\n    let type = getType(value);\n\n    // eslint-disable-next-line no-self-compare\n    if (type === 'number' && value !== value) {\n        type = 'NaN';\n    }\n\n    if (type !== 'number') {\n        return [new ValidationError(key, value, `number expected, ${type} found`)];\n    }\n\n    if ('minimum' in valueSpec) {\n        let specMin = valueSpec.minimum;\n        if (getType(valueSpec.minimum) === 'array') {\n            const i = options.arrayIndex;\n            specMin = valueSpec.minimum[i];\n        }\n        if (value < specMin) {\n            return [new ValidationError(key, value, `${value} is less than the minimum value ${specMin}`)];\n        }\n    }\n\n    if ('maximum' in valueSpec) {\n        let specMax = valueSpec.maximum;\n        if (getType(valueSpec.maximum) === 'array') {\n            const i = options.arrayIndex;\n            specMax = valueSpec.maximum[i];\n        }\n        if (value > specMax) {\n            return [new ValidationError(key, value, `${value} is greater than the maximum value ${specMax}`)];\n        }\n    }\n\n    return [];\n}\n","import ValidationError from '../error/validation_error';\nimport getType from '../util/get_type';\nimport validate from './validate';\nimport validateObject from './validate_object';\nimport validateArray from './validate_array';\nimport validateNumber from './validate_number';\nimport {isExpression} from '../expression/index';\nimport {unbundle, deepUnbundle} from '../util/unbundle_jsonlint';\nimport {\n    supportsPropertyExpression,\n    supportsZoomExpression,\n    supportsInterpolation\n} from '../util/properties';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateFunction(options: ValidationOptions): any {\n    const functionValueSpec = options.valueSpec;\n    const functionType = unbundle(options.value.type);\n    let stopKeyType;\n    let stopDomainValues: Partial<Record<string | number, boolean>> = {};\n    let previousStopDomainValue: unknown;\n    let previousStopDomainZoom;\n\n    const isZoomFunction = functionType !== 'categorical' && options.value.property === undefined;\n    const isPropertyFunction = !isZoomFunction;\n    const isZoomAndPropertyFunction =\n        getType(options.value.stops) === 'array' &&\n        getType(options.value.stops[0]) === 'array' &&\n        getType(options.value.stops[0][0]) === 'object';\n\n    const errors = validateObject({\n        key: options.key,\n        value: options.value,\n        valueSpec: options.styleSpec.function,\n        style: options.style,\n        styleSpec: options.styleSpec,\n        objectElementValidators: {\n            stops: validateFunctionStops,\n            default: validateFunctionDefault\n        }\n    });\n\n    if (functionType === 'identity' && isZoomFunction) {\n        errors.push(new ValidationError(options.key, options.value, 'missing required property \"property\"'));\n    }\n\n    if (functionType !== 'identity' && !options.value.stops) {\n        errors.push(new ValidationError(options.key, options.value, 'missing required property \"stops\"'));\n    }\n\n    if (functionType === 'exponential' && options.valueSpec.expression && !supportsInterpolation(options.valueSpec)) {\n        errors.push(new ValidationError(options.key, options.value, 'exponential functions not supported'));\n    }\n\n    if (options.styleSpec.$version >= 8) {\n        if (isPropertyFunction && !supportsPropertyExpression(options.valueSpec)) {\n            errors.push(new ValidationError(options.key, options.value, 'property functions not supported'));\n        } else if (isZoomFunction && !supportsZoomExpression(options.valueSpec)) {\n            errors.push(new ValidationError(options.key, options.value, 'zoom functions not supported'));\n        }\n    }\n\n    if ((functionType === 'categorical' || isZoomAndPropertyFunction) && options.value.property === undefined) {\n        errors.push(new ValidationError(options.key, options.value, '\"property\" property is required'));\n    }\n\n    return errors;\n\n    function validateFunctionStops(options: ValidationOptions) {\n        if (functionType === 'identity') {\n            return [new ValidationError(options.key, options.value, 'identity function may not have a \"stops\" property')];\n        }\n\n        let errors = [];\n        const value = options.value;\n\n        errors = errors.concat(validateArray({\n            key: options.key,\n            value,\n            valueSpec: options.valueSpec,\n            style: options.style,\n            styleSpec: options.styleSpec,\n            arrayElementValidator: validateFunctionStop\n        }));\n\n        if (getType(value) === 'array' && value.length === 0) {\n            errors.push(new ValidationError(options.key, value, 'array must have at least one stop'));\n        }\n\n        return errors;\n    }\n\n    function validateFunctionStop(options: ValidationOptions) {\n        let errors = [];\n        const value = options.value;\n        const key = options.key;\n\n        if (getType(value) !== 'array') {\n            return [new ValidationError(key, value, `array expected, ${getType(value)} found`)];\n        }\n\n        if (value.length !== 2) {\n            return [new ValidationError(key, value, `array length 2 expected, length ${value.length} found`)];\n        }\n\n        if (isZoomAndPropertyFunction) {\n            if (getType(value[0]) !== 'object') {\n                return [new ValidationError(key, value, `object expected, ${getType(value[0])} found`)];\n            }\n            if (value[0].zoom === undefined) {\n                return [new ValidationError(key, value, 'object stop key must have zoom')];\n            }\n            if (value[0].value === undefined) {\n                return [new ValidationError(key, value, 'object stop key must have value')];\n            }\n\n            const nextStopDomainZoom = unbundle(value[0].zoom);\n            if (typeof nextStopDomainZoom !== 'number') {\n                return [new ValidationError(key, value[0].zoom, 'stop zoom values must be numbers')];\n            }\n\n            if (previousStopDomainZoom && previousStopDomainZoom > nextStopDomainZoom) {\n                return [new ValidationError(key, value[0].zoom, 'stop zoom values must appear in ascending order')];\n            }\n            if (nextStopDomainZoom !== previousStopDomainZoom) {\n                previousStopDomainZoom = nextStopDomainZoom;\n                previousStopDomainValue = undefined;\n                stopDomainValues = {};\n            }\n            errors = errors.concat(validateObject({\n                key: `${key}[0]`,\n                value: value[0],\n                valueSpec: {zoom: {}},\n                style: options.style,\n                styleSpec: options.styleSpec,\n                objectElementValidators: {zoom: validateNumber, value: validateStopDomainValue}\n            }));\n        } else {\n            errors = errors.concat(validateStopDomainValue({\n                key: `${key}[0]`,\n                value: value[0],\n                valueSpec: {},\n                style: options.style,\n                styleSpec: options.styleSpec\n            }, value));\n        }\n\n        if (isExpression(deepUnbundle(value[1]))) {\n            return errors.concat([new ValidationError(`${key}[1]`, value[1], 'expressions are not allowed in function stops.')]);\n        }\n\n        return errors.concat(validate({\n            key: `${key}[1]`,\n            value: value[1],\n            valueSpec: functionValueSpec,\n            style: options.style,\n            styleSpec: options.styleSpec\n        }));\n    }\n\n    function validateStopDomainValue(options: ValidationOptions, stop: any) {\n        const type = getType(options.value);\n        const value = unbundle(options.value);\n\n        const reportValue = options.value !== null ? options.value : stop;\n\n        if (!stopKeyType) {\n            stopKeyType = type;\n        } else if (type !== stopKeyType) {\n            return [new ValidationError(options.key, reportValue, `${type} stop domain type must match previous stop domain type ${stopKeyType}`)];\n        }\n\n        if (type !== 'number' && type !== 'string' && type !== 'boolean' && typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'boolean') {\n            return [new ValidationError(options.key, reportValue, 'stop domain value must be a number, string, or boolean')];\n        }\n\n        if (type !== 'number' && functionType !== 'categorical') {\n            let message = `number expected, ${type} found`;\n            if (supportsPropertyExpression(functionValueSpec) && functionType === undefined) {\n                message += '\\nIf you intended to use a categorical function, specify `\"type\": \"categorical\"`.';\n            }\n            return [new ValidationError(options.key, reportValue, message)];\n        }\n\n        if (functionType === 'categorical' && type === 'number' && (typeof value !== 'number' || !isFinite(value) || Math.floor(value) !== value)) {\n            return [new ValidationError(options.key, reportValue, `integer expected, found ${String(value)}`)];\n        }\n\n        if (functionType !== 'categorical' && type === 'number' && typeof value === 'number' && typeof previousStopDomainValue === 'number' && previousStopDomainValue !== undefined && value < previousStopDomainValue) {\n            return [new ValidationError(options.key, reportValue, 'stop domain values must appear in ascending order')];\n        } else {\n            previousStopDomainValue = value;\n        }\n\n        if (functionType === 'categorical' && (value as any) in stopDomainValues) {\n            return [new ValidationError(options.key, reportValue, 'stop domain values must be unique')];\n        } else {\n            stopDomainValues[(value as any)] = true;\n        }\n\n        return [];\n    }\n\n    function validateFunctionDefault(options: ValidationOptions) {\n        return validate({\n            key: options.key,\n            value: options.value,\n            valueSpec: functionValueSpec,\n            style: options.style,\n            styleSpec: options.styleSpec\n        });\n    }\n}\n","import ValidationError from '../error/validation_error';\nimport {createExpression, createPropertyExpression} from '../expression/index';\nimport {deepUnbundle} from '../util/unbundle_jsonlint';\nimport {isStateConstant, isGlobalPropertyConstant, isFeatureConstant} from '../expression/is_constant';\nimport CompoundExpression from '../expression/compound_expression';\n\nimport type {Expression} from '../expression/expression';\n\nexport default function validateExpression(options: any): Array<ValidationError> {\n    const expression = (options.expressionContext === 'property' ? createPropertyExpression : createExpression)(deepUnbundle(options.value), options.valueSpec);\n    if (expression.result === 'error') {\n        return expression.value.map((error) => {\n            return new ValidationError(`${options.key}${error.key}`, options.value, error.message);\n        });\n    }\n\n    const expressionObj = (expression.value as any).expression || (expression.value as any)._styleExpression.expression;\n\n    if (options.expressionContext === 'property' && (options.propertyKey === 'text-font') &&\n        !expressionObj.outputDefined()) {\n        return [new ValidationError(options.key, options.value, `Invalid data expression for \"${options.propertyKey}\". Output values must be contained as literals within the expression.`)];\n    }\n\n    if (options.expressionContext === 'property' && options.propertyType === 'layout' &&\n        (!isStateConstant(expressionObj))) {\n        return [new ValidationError(options.key, options.value, '\"feature-state\" data expressions are not supported with layout properties.')];\n    }\n\n    if (options.expressionContext === 'filter') {\n        return disallowedFilterParameters(expressionObj, options);\n    }\n\n    if (options.expressionContext && options.expressionContext.indexOf('cluster') === 0) {\n        if (!isGlobalPropertyConstant(expressionObj, ['zoom', 'feature-state'])) {\n            return [new ValidationError(options.key, options.value, '\"zoom\" and \"feature-state\" expressions are not supported with cluster properties.')];\n        }\n        if (options.expressionContext === 'cluster-initial' && !isFeatureConstant(expressionObj)) {\n            return [new ValidationError(options.key, options.value, 'Feature data expressions are not supported with initial expression part of cluster properties.')];\n        }\n    }\n\n    return [];\n}\n\nexport function disallowedFilterParameters(e: Expression, options: any): Array<ValidationError> {\n    const disallowedParameters = new Set([\n        'zoom',\n        'feature-state',\n        'pitch',\n        'distance-from-center'\n    ]);\n\n    if (options.valueSpec && options.valueSpec.expression) {\n        for (const param of options.valueSpec.expression.parameters) {\n            disallowedParameters.delete(param);\n        }\n    }\n\n    if (disallowedParameters.size === 0) {\n        return [];\n    }\n    const errors = [];\n\n    if (e instanceof CompoundExpression) {\n        if (disallowedParameters.has(e.name)) {\n            return [new ValidationError(options.key, options.value, `[\"${e.name}\"] expression is not supported in a filter for a ${options.object.type} layer with id: ${options.object.id}`)];\n        }\n    }\n    e.eachChild((arg) => {\n        errors.push(...disallowedFilterParameters(arg, options));\n    });\n\n    return errors;\n}\n","import getType from '../util/get_type';\nimport ValidationError from '../error/validation_error';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateBoolean(options: ValidationOptions): Array<ValidationError> {\n    const value = options.value;\n    const key = options.key;\n    const type = getType(value);\n\n    if (type !== 'boolean') {\n        return [new ValidationError(key, value, `boolean expected, ${type} found`)];\n    }\n\n    return [];\n}\n","import ValidationError from '../error/validation_error';\nimport getType from '../util/get_type';\nimport {parseCSSColor} from 'csscolorparser';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateColor(options: ValidationOptions): Array<ValidationError> {\n    const key = options.key;\n    const value = options.value;\n    const type = getType(value);\n\n    if (type !== 'string') {\n        return [new ValidationError(key, value, `color expected, ${type} found`)];\n    }\n\n    if (parseCSSColor(value) === null) {\n        return [new ValidationError(key, value, `color expected, \"${value}\" found`)];\n    }\n\n    return [];\n}\n","import ValidationError from '../error/validation_error';\nimport {unbundle} from '../util/unbundle_jsonlint';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateEnum(options: ValidationOptions): Array<ValidationError> {\n    const key = options.key;\n    const value = options.value;\n    const valueSpec = options.valueSpec;\n    const errors = [];\n\n    if (Array.isArray(valueSpec.values)) { // <=v7\n        if (valueSpec.values.indexOf(unbundle(value)) === -1) {\n            errors.push(new ValidationError(key, value, `expected one of [${valueSpec.values.join(', ')}], ${JSON.stringify(value)} found`));\n        }\n    } else { // >=v8\n        if (Object.keys(valueSpec.values).indexOf(unbundle(value) as string) === -1) {\n            errors.push(new ValidationError(key, value, `expected one of [${Object.keys(valueSpec.values).join(', ')}], ${JSON.stringify(value)} found`));\n        }\n    }\n    return errors;\n}\n","import ValidationError from '../error/validation_error';\nimport validateExpression from './validate_expression';\nimport validateEnum from './validate_enum';\nimport getType from '../util/get_type';\nimport {unbundle, deepUnbundle} from '../util/unbundle_jsonlint';\nimport extend from '../util/extend';\nimport {isExpressionFilter} from '../feature_filter/index';\n\nimport type {ValidationOptions} from './validate';\n\ntype Options = ValidationOptions & {\n    layerType?: string;\n    object?: {\n        type?: string,\n        id?: string\n    }\n};\n\nexport default function validateFilter(options: Options): Array<ValidationError> {\n    if (isExpressionFilter(deepUnbundle(options.value))) {\n        // We default to a layerType of `fill` because that points to a non-dynamic filter definition within the style-spec.\n        const layerType = options.layerType || 'fill';\n\n        return validateExpression(extend({}, options, {\n            expressionContext: 'filter',\n            valueSpec: options.styleSpec[`filter_${layerType}`]\n        }));\n    } else {\n        return validateNonExpressionFilter(options);\n    }\n}\n\nfunction validateNonExpressionFilter(options: Options) {\n    const value = options.value;\n    const key = options.key;\n\n    if (getType(value) !== 'array') {\n        return [new ValidationError(key, value, `array expected, ${getType(value)} found`)];\n    }\n\n    const styleSpec = options.styleSpec;\n    let type;\n\n    let errors = [];\n\n    if (value.length < 1) {\n        return [new ValidationError(key, value, 'filter array must have at least 1 element')];\n    }\n\n    errors = errors.concat(validateEnum({\n        key: `${key}[0]`,\n        value: value[0],\n        valueSpec: styleSpec.filter_operator,\n        style: options.style,\n        styleSpec: options.styleSpec\n    }));\n\n    switch (unbundle(value[0])) {\n    case '<':\n    case '<=':\n    case '>':\n    // @ts-expect-error - falls through\n    case '>=':\n        if (value.length >= 2 && unbundle(value[1]) === '$type') {\n            errors.push(new ValidationError(key, value, `\"$type\" cannot be use with operator \"${value[0]}\"`));\n        }\n        /* falls through */\n    case '==':\n    // @ts-expect-error - falls through\n    case '!=':\n        if (value.length !== 3) {\n            errors.push(new ValidationError(key, value, `filter array for operator \"${value[0]}\" must have 3 elements`));\n        }\n        /* falls through */\n    case 'in':\n    case '!in':\n        if (value.length >= 2) {\n            type = getType(value[1]);\n            if (type !== 'string') {\n                errors.push(new ValidationError(`${key}[1]`, value[1], `string expected, ${type} found`));\n            }\n        }\n        for (let i = 2; i < value.length; i++) {\n            type = getType(value[i]);\n            if (unbundle(value[1]) === '$type') {\n                errors = errors.concat(validateEnum({\n                    key: `${key}[${i}]`,\n                    value: value[i],\n                    valueSpec: styleSpec.geometry_type,\n                    style: options.style,\n                    styleSpec: options.styleSpec\n                }));\n            } else if (type !== 'string' && type !== 'number' && type !== 'boolean') {\n                errors.push(new ValidationError(`${key}[${i}]`, value[i], `string, number, or boolean expected, ${type} found`));\n            }\n        }\n        break;\n\n    case 'any':\n    case 'all':\n    case 'none':\n        for (let i = 1; i < value.length; i++) {\n            errors = errors.concat(validateNonExpressionFilter(({\n                key: `${key}[${i}]`,\n                value: value[i],\n                style: options.style,\n                styleSpec: options.styleSpec\n            } as any)));\n        }\n        break;\n\n    case 'has':\n    case '!has':\n        type = getType(value[1]);\n        if (value.length !== 2) {\n            errors.push(new ValidationError(key, value, `filter array for \"${value[0]}\" operator must have 2 elements`));\n        } else if (type !== 'string') {\n            errors.push(new ValidationError(`${key}[1]`, value[1], `string expected, ${type} found`));\n        }\n        break;\n    }\n    return errors;\n}\n","import validate from './validate';\nimport {default as ValidationError, ValidationWarning} from '../error/validation_error';\nimport getType from '../util/get_type';\nimport {isFunction} from '../function/index';\nimport {unbundle, deepUnbundle} from '../util/unbundle_jsonlint';\nimport {supportsLightExpression, supportsPropertyExpression, supportsZoomExpression} from '../util/properties';\nimport {isGlobalPropertyConstant, isFeatureConstant, isStateConstant} from '../expression/is_constant';\nimport {createPropertyExpression} from '../expression/index';\n\nimport type {ValidationOptions} from './validate';\n\nexport type PropertyValidationOptions = ValidationOptions & {\n    objectKey: string;\n    layerType: string;\n    layer: any;\n};\n\nexport default function validateProperty(options: PropertyValidationOptions, propertyType: string): Array<ValidationError> {\n    const key = options.key;\n    const style = options.style;\n    const layer = options.layer;\n    const styleSpec = options.styleSpec;\n    const value = options.value;\n    const propertyKey = options.objectKey;\n    const layerSpec = styleSpec[`${propertyType}_${options.layerType}`];\n\n    if (!layerSpec) return [];\n\n    const transitionMatch = propertyKey.match(/^(.*)-transition$/);\n    if (propertyType === 'paint' && transitionMatch && layerSpec[transitionMatch[1]] && layerSpec[transitionMatch[1]].transition) {\n        return validate({\n            key,\n            value,\n            valueSpec: styleSpec.transition,\n            style,\n            styleSpec\n        });\n    }\n\n    const valueSpec = options.valueSpec || layerSpec[propertyKey];\n    if (!valueSpec) {\n        return [new ValidationWarning(key, value, `unknown property \"${propertyKey}\"`)];\n    }\n\n    let tokenMatch: RegExpExecArray | undefined;\n    if (getType(value) === 'string' && supportsPropertyExpression(valueSpec) && !valueSpec.tokens && (tokenMatch = /^{([^}]+)}$/.exec(value))) {\n        const example = `\\`{ \"type\": \"identity\", \"property\": ${tokenMatch ? JSON.stringify(tokenMatch[1]) : '\"_\"'} }\\``;\n        return [new ValidationError(\n            key, value,\n            `\"${propertyKey}\" does not support interpolation syntax\\n` +\n                `Use an identity property function instead: ${example}.`)];\n    }\n\n    const errors = [];\n\n    if (options.layerType === 'symbol') {\n        if (propertyKey === 'text-field' && style && !style.glyphs && !style.imports) {\n            errors.push(new ValidationError(key, value, 'use of \"text-field\" requires a style \"glyphs\" property'));\n        }\n        if (propertyKey === 'text-font' && isFunction(deepUnbundle(value)) && unbundle(value.type) === 'identity') {\n            errors.push(new ValidationError(key, value, '\"text-font\" does not support identity functions'));\n        }\n    } else if (options.layerType === 'model' && propertyType === 'paint' && layer && layer.layout && layer.layout.hasOwnProperty('model-id')) {\n        if (supportsPropertyExpression(valueSpec) && (supportsLightExpression(valueSpec) || supportsZoomExpression(valueSpec))) {\n            // Performance related style spec limitation: zoom and light expressions are not allowed for e.g. trees.\n            const expression = createPropertyExpression(deepUnbundle(value), valueSpec);\n            const expressionObj = (expression.value as any).expression || (expression.value as any)._styleExpression.expression;\n\n            if (expressionObj && !isGlobalPropertyConstant(expressionObj, ['measure-light'])) {\n                if (propertyKey !== 'model-emissive-strength' || (!isFeatureConstant(expressionObj) || !isStateConstant(expressionObj))) {\n                    errors.push(new ValidationError(key, value, `${propertyKey} does not support measure-light expressions when the model layer source is vector tile or GeoJSON.`));\n                }\n            }\n        }\n    }\n\n    return errors.concat(validate({\n        key: options.key,\n        value,\n        valueSpec,\n        style,\n        styleSpec,\n        // @ts-expect-error - TS2353 - Object literal may only specify known properties, and 'expressionContext' does not exist in type 'ValidationOptions'.\n        expressionContext: 'property',\n        propertyType,\n        propertyKey\n    }));\n}\n","import validateProperty from './validate_property';\n\nimport type ValidationError from '../error/validation_error';\nimport type {PropertyValidationOptions} from './validate_property';\n\nexport default function validatePaintProperty(options: PropertyValidationOptions): Array<ValidationError> {\n    return validateProperty(options, 'paint');\n}\n","import validateProperty from './validate_property';\n\nimport type ValidationError from '../error/validation_error';\nimport type {PropertyValidationOptions} from './validate_property';\n\nexport default function validateLayoutProperty(options: PropertyValidationOptions): Array<ValidationError> {\n    return validateProperty(options, 'layout');\n}\n","import ValidationError from '../error/validation_error';\nimport {unbundle} from '../util/unbundle_jsonlint';\nimport validateObject from './validate_object';\nimport validateFilter from './validate_filter';\nimport validatePaintProperty from './validate_paint_property';\nimport validateLayoutProperty from './validate_layout_property';\nimport validateSpec from './validate';\nimport extend from '../util/extend';\n\nimport type {ValidationOptions} from './validate';\nimport type {LayerSpecification, GeoJSONSourceSpecification} from '../types';\n\ntype Options = ValidationOptions & {\n    value: LayerSpecification;\n    arrayIndex: number;\n};\n\nexport default function validateLayer(options: Options): Array<ValidationError> {\n    let errors = [];\n\n    const layer = options.value;\n    const key = options.key;\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n\n    if (!layer.type && !layer.ref) {\n        errors.push(new ValidationError(key, layer, 'either \"type\" or \"ref\" is required'));\n    }\n    let type = unbundle(layer.type) as string;\n    const ref = unbundle(layer.ref);\n\n    if (layer.id) {\n        const layerId = unbundle(layer.id);\n        for (let i = 0; i < options.arrayIndex; i++) {\n            const otherLayer = style.layers[i];\n            if (unbundle(otherLayer.id) === layerId) {\n                // @ts-expect-error - TS2339 - Property '__line__' does not exist on type 'string'.\n                errors.push(new ValidationError(key, layer.id, `duplicate layer id \"${layer.id}\", previously used at line ${otherLayer.id.__line__}`));\n            }\n        }\n    }\n\n    if ('ref' in layer) {\n        ['type', 'source', 'source-layer', 'filter', 'layout'].forEach((p) => {\n            if (p in layer) {\n                errors.push(new ValidationError(key, layer[p], `\"${p}\" is prohibited for ref layers`));\n            }\n        });\n\n        let parent;\n\n        style.layers.forEach((layer) => {\n            if (unbundle(layer.id) === ref) parent = layer;\n        });\n\n        if (!parent) {\n            if (typeof ref === 'string')\n                errors.push(new ValidationError(key, layer.ref, `ref layer \"${ref}\" not found`));\n        } else if (parent.ref) {\n            errors.push(new ValidationError(key, layer.ref, 'ref cannot reference another ref layer'));\n        } else {\n            type = unbundle(parent.type) as string;\n        }\n    } else if (!(type === 'background' || type === 'sky' || type === 'slot')) {\n        if (!layer.source) {\n            errors.push(new ValidationError(key, layer, 'missing required property \"source\"'));\n        } else {\n            const source = style.sources && style.sources[layer.source];\n            const sourceType = source && unbundle(source.type);\n            if (!source) {\n                errors.push(new ValidationError(key, layer.source, `source \"${layer.source}\" not found`));\n            } else if (sourceType === 'vector' && type === 'raster') {\n                errors.push(new ValidationError(key, layer.source, `layer \"${layer.id}\" requires a raster source`));\n            } else if (sourceType === 'raster' && type !== 'raster') {\n                errors.push(new ValidationError(key, layer.source, `layer \"${layer.id}\" requires a vector source`));\n            } else if (sourceType === 'vector' && !layer['source-layer']) {\n                errors.push(new ValidationError(key, layer, `layer \"${layer.id}\" must specify a \"source-layer\"`));\n            } else if (sourceType === 'raster-dem' && type !== 'hillshade') {\n                errors.push(new ValidationError(key, layer.source, 'raster-dem source can only be used with layer type \\'hillshade\\'.'));\n            } else if (sourceType === 'raster-array' && !['raster', 'raster-particle'].includes(type)) {\n                errors.push(new ValidationError(key, layer.source, `raster-array source can only be used with layer type \\'raster\\'.`));\n            } else if (type === 'line' && layer.paint && (layer.paint['line-gradient'] || layer.paint['line-trim-offset']) &&\n                    (sourceType !== 'geojson' || !(source as GeoJSONSourceSpecification).lineMetrics)) {\n                errors.push(new ValidationError(key, layer, `layer \"${layer.id}\" specifies a line-gradient, which requires a GeoJSON source with \\`lineMetrics\\` enabled.`));\n            } else if (type === 'raster-particle' && sourceType !== 'raster-array') {\n                errors.push(new ValidationError(key, layer.source, `layer \"${layer.id}\" requires a \\'raster-array\\' source.`));\n            }\n        }\n    }\n\n    errors = errors.concat(validateObject({\n        key,\n        value: layer,\n        valueSpec: styleSpec.layer,\n        style: options.style,\n        styleSpec: options.styleSpec,\n        objectElementValidators: {\n            '*'() {\n                return [];\n            },\n            // We don't want to enforce the spec's `\"requires\": true` for backward compatibility with refs;\n            // the actual requirement is validated above. See https://github.com/mapbox/mapbox-gl-js/issues/5772.\n            type() {\n                return validateSpec({\n                    key: `${key}.type`,\n                    value: layer.type,\n                    valueSpec: styleSpec.layer.type,\n                    style: options.style,\n                    styleSpec: options.styleSpec,\n                    // @ts-expect-error - TS2353 - Object literal may only specify known properties, and 'object' does not exist in type 'ValidationOptions'.\n                    object: layer,\n                    objectKey: 'type'\n                });\n            },\n            filter(options) {\n                return validateFilter(extend({layerType: type}, options));\n            },\n            layout(options) {\n                return validateObject({\n                    // @ts-expect-error - TS2353 - Object literal may only specify known properties, and 'layer' does not exist in type 'Options'.\n                    layer,\n                    key: options.key,\n                    value: options.value,\n                    valueSpec: {},\n                    style: options.style,\n                    styleSpec: options.styleSpec,\n                    objectElementValidators: {\n                        '*'(options) {\n                            return validateLayoutProperty(extend({layerType: type}, options));\n                        }\n                    }\n                });\n            },\n            paint(options) {\n                return validateObject({\n                    // @ts-expect-error - TS2353 - Object literal may only specify known properties, and 'layer' does not exist in type 'Options'.\n                    layer,\n                    key: options.key,\n                    value: options.value,\n                    valueSpec: {},\n                    style: options.style,\n                    styleSpec: options.styleSpec,\n                    objectElementValidators: {\n                        '*'(options) {\n                            return validatePaintProperty(extend({layerType: type, layer}, options));\n                        }\n                    }\n                });\n            }\n        }\n    }));\n\n    return errors;\n}\n","import getType from '../util/get_type';\nimport ValidationError from '../error/validation_error';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateString(options: Partial<ValidationOptions>): Array<ValidationError> {\n    const value = options.value;\n    const key = options.key;\n    const type = getType(value);\n\n    if (type !== 'string') {\n        return [new ValidationError(key, value, `string expected, ${type} found`)];\n    }\n\n    return [];\n}\n","import {default as ValidationError, ValidationWarning} from '../error/validation_error';\nimport {unbundle} from '../util/unbundle_jsonlint';\nimport validateObject from './validate_object';\nimport validateEnum from './validate_enum';\nimport validateExpression from './validate_expression';\nimport validateString from './validate_string';\nimport getType from '../util/get_type';\n\nimport type {StyleReference} from '../reference/latest';\nimport type {ValidationOptions} from './validate';\n\nconst objectElementValidators = {\n    promoteId: validatePromoteId\n};\n\nexport default function validateSource(options: ValidationOptions): Array<ValidationError> {\n    const value = options.value;\n    const key = options.key;\n    const styleSpec = options.styleSpec;\n    const style = options.style;\n\n    if (!value.type) {\n        return [new ValidationError(key, value, '\"type\" is required')];\n    }\n\n    const type = unbundle(value.type);\n    let errors = [];\n\n    // @ts-expect-error - TS2345 - Argument of type 'unknown' is not assignable to parameter of type 'string'.\n    if (['vector', 'raster', 'raster-dem', 'raster-array'].includes(type)) {\n        if (!value.url && !value.tiles) {\n            errors.push(new ValidationWarning(key, value, 'Either \"url\" or \"tiles\" is required.'));\n        }\n    }\n\n    switch (type) {\n    case 'vector':\n    case 'raster':\n    case 'raster-dem':\n    case 'raster-array':\n        errors = errors.concat(validateObject({\n            key,\n            value,\n            valueSpec: styleSpec[`source_${type.replace('-', '_')}`],\n            style: options.style,\n            styleSpec,\n            objectElementValidators\n        }));\n        return errors;\n\n    case 'geojson':\n        errors = validateObject({\n            key,\n            value,\n            valueSpec: styleSpec.source_geojson,\n            style,\n            styleSpec,\n            objectElementValidators\n        });\n        if (value.cluster) {\n            for (const prop in value.clusterProperties) {\n                const [operator, mapExpr] = value.clusterProperties[prop];\n                const reduceExpr = typeof operator === 'string' ? [operator, ['accumulated'], ['get', prop]] : operator;\n\n                errors.push(...validateExpression({\n                    key: `${key}.${prop}.map`,\n                    value: mapExpr,\n                    expressionContext: 'cluster-map'\n                }));\n                errors.push(...validateExpression({\n                    key: `${key}.${prop}.reduce`,\n                    value: reduceExpr,\n                    expressionContext: 'cluster-reduce'\n                }));\n            }\n        }\n        return errors;\n\n    case 'video':\n        return validateObject({\n            key,\n            value,\n            valueSpec: styleSpec.source_video,\n            style,\n            styleSpec\n        });\n\n    case 'image':\n        return validateObject({\n            key,\n            value,\n            valueSpec: styleSpec.source_image,\n            style,\n            styleSpec\n        });\n\n    case 'canvas':\n        return [new ValidationError(key, null, `Please use runtime APIs to add canvas sources, rather than including them in stylesheets.`, 'source.canvas')];\n\n    default:\n        return validateEnum({\n            key: `${key}.type`,\n            value: value.type,\n            valueSpec: {values: getSourceTypeValues(styleSpec)},\n            style,\n            styleSpec\n        });\n    }\n}\n\nfunction getSourceTypeValues(styleSpec: StyleReference) {\n// @ts-expect-error - TS2347 - Untyped function calls may not accept type arguments.\n    return styleSpec.source.reduce<Array<any>>((memo, source) => {\n        const sourceType = styleSpec[source];\n        if (sourceType.type.type === 'enum') {\n            memo = memo.concat(Object.keys(sourceType.type.values));\n        }\n        return memo;\n    }, []);\n}\n\nfunction validatePromoteId({\n    key,\n    value,\n}: Partial<ValidationOptions>) {\n    if (getType(value) === 'string') {\n        return validateString({key, value});\n    } else {\n        const errors = [];\n        for (const prop in value) {\n            errors.push(...validateString({key: `${key}.${prop}`, value: value[prop]}));\n        }\n        return errors;\n    }\n}\n","import ValidationError from '../error/validation_error';\nimport getType from '../util/get_type';\n\nimport type {ValidationOptions} from './validate';\n\n// Allow any URL, use dummy base, if it's a relative URL\nexport function isValidUrl(str: string, allowRelativeUrls: boolean): boolean {\n    const isRelative = str.indexOf('://') === -1;\n    try {\n        new URL(str, isRelative && allowRelativeUrls ? 'http://example.com' : undefined);\n        return true;\n    } catch (_: any) {\n        return false;\n    }\n}\n\nexport default function validateModel(options: ValidationOptions): Array<ValidationError> {\n    const url = options.value;\n    let errors = [];\n\n    if (!url) {\n        return errors;\n    }\n\n    const type = getType(url);\n    if (type !== 'string') {\n        errors = errors.concat([new ValidationError(options.key, url, `string expected, \"${type}\" found`)]);\n        return errors;\n    }\n\n    if (!isValidUrl(url, true)) {\n        errors = errors.concat([new ValidationError(options.key, url, `invalid url \"${url}\"`)]);\n    }\n\n    return errors;\n}\n","import ValidationError from '../error/validation_error';\nimport getType from '../util/get_type';\nimport validate from './validate';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateLight(options: ValidationOptions): Array<ValidationError> {\n    const light = options.value;\n    const styleSpec = options.styleSpec;\n    const lightSpec = styleSpec.light;\n    const style = options.style;\n\n    let errors = [];\n\n    const rootType = getType(light);\n    if (light === undefined) {\n        return errors;\n    } else if (rootType !== 'object') {\n        errors = errors.concat([new ValidationError('light', light, `object expected, ${rootType} found`)]);\n        return errors;\n    }\n\n    for (const key in light) {\n        const transitionMatch = key.match(/^(.*)-transition$/);\n\n        if (transitionMatch && lightSpec[transitionMatch[1]] && lightSpec[transitionMatch[1]].transition) {\n            errors = errors.concat(validate({\n                key,\n                value: light[key],\n                valueSpec: styleSpec.transition,\n                style,\n                styleSpec\n            }));\n        } else if (lightSpec[key]) {\n            errors = errors.concat(validate({\n                key,\n                value: light[key],\n                valueSpec: lightSpec[key],\n                style,\n                styleSpec\n            }));\n        } else {\n            errors = errors.concat([new ValidationError(key, light[key], `unknown property \"${key}\"`)]);\n        }\n    }\n\n    return errors;\n}\n","import {default as ValidationError, ValidationWarning} from '../error/validation_error';\nimport getType from '../util/get_type';\nimport validate from './validate';\nimport {unbundle} from '../util/unbundle_jsonlint';\n\nimport type {ValidationOptions} from './validate';\n\ntype Options = ValidationOptions & {\n    arrayIndex: number;\n};\n\nexport default function validateLights(options: Options): Array<ValidationError> {\n    const light = options.value;\n    let errors = [];\n\n    if (!light) {\n        return errors;\n    }\n\n    const type = getType(light);\n    if (type !== 'object') {\n        errors = errors.concat([new ValidationError('light-3d', light, `object expected, ${type} found`)]);\n        return errors;\n    }\n\n    const styleSpec = options.styleSpec;\n    const lightSpec = styleSpec['light-3d'];\n    const key = options.key;\n    const style = options.style;\n    const lights = options.style.lights;\n\n    for (const key of ['type', 'id']) {\n        if (!(key in light)) {\n            errors = errors.concat([new ValidationError('light-3d', light, `missing property ${key} on light`)]);\n            return errors;\n        }\n    }\n\n    if (light.type && lights) {\n        for (let i = 0; i < options.arrayIndex; i++) {\n            const lightType = unbundle(light.type);\n            const otherLight = lights[i];\n            if (unbundle(otherLight.type) === lightType) {\n                // @ts-expect-error - TS2339 - Property '__line__' does not exist on type 'string'.\n                errors.push(new ValidationError(key, light.id, `duplicate light type \"${light.type}\", previously defined at line ${otherLight.id.__line__}`));\n            }\n        }\n    }\n\n    const lightType = `properties_light_${light['type']}`;\n    if (!(lightType in styleSpec)) {\n        errors = errors.concat([new ValidationError('light-3d', light, `Invalid light type ${light['type']}`)]);\n        return errors;\n    }\n\n    const lightPropertySpec = styleSpec[lightType];\n\n    for (const key in light) {\n        if (key === 'properties') {\n            const properties = light[key];\n            const propertiesType = getType(properties);\n            if (propertiesType !== 'object') {\n                errors = errors.concat([new ValidationError('properties', properties, `object expected, ${propertiesType} found`)]);\n                return errors;\n            }\n            for (const propertyKey in properties) {\n                if (!lightPropertySpec[propertyKey]) {\n                    errors = errors.concat([new ValidationWarning(options.key, properties[propertyKey], `unknown property \"${propertyKey}\"`)]);\n                } else {\n                    errors = errors.concat(validate({\n                        key: propertyKey,\n                        value: properties[propertyKey],\n                        valueSpec: lightPropertySpec[propertyKey],\n                        style,\n                        styleSpec\n                    }));\n                }\n            }\n        } else {\n            const transitionMatch = key.match(/^(.*)-transition$/);\n            if (transitionMatch && lightSpec[transitionMatch[1]] && lightSpec[transitionMatch[1]].transition) {\n                errors = errors.concat(validate({\n                    key,\n                    value: light[key],\n                    valueSpec: styleSpec.transition,\n                    style,\n                    styleSpec\n                }));\n            } else if (lightSpec[key]) {\n                errors = errors.concat(validate({\n                    key,\n                    value: light[key],\n                    valueSpec: lightSpec[key],\n                    style,\n                    styleSpec\n                }));\n            } else {\n                errors = errors.concat([new ValidationWarning(key, light[key], `unknown property \"${key}\"`)]);\n            }\n        }\n    }\n\n    return errors;\n}\n","import {default as ValidationError, ValidationWarning} from '../error/validation_error';\nimport validate from './validate';\nimport getType from '../util/get_type';\nimport {unbundle} from '../util/unbundle_jsonlint';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateTerrain(options: ValidationOptions): Array<ValidationError> {\n    const terrain = options.value;\n    const key = options.key;\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n    const terrainSpec = styleSpec.terrain;\n    let errors = [];\n\n    const rootType = getType(terrain);\n    if (terrain === undefined) {\n        return errors;\n    } else if (rootType === 'null') {\n        return errors;\n    } else if (rootType !== 'object') {\n        errors = errors.concat([new ValidationError('terrain', terrain, `object expected, ${rootType} found`)]);\n        return errors;\n    }\n\n    for (const key in terrain) {\n        const transitionMatch = key.match(/^(.*)-transition$/);\n\n        if (transitionMatch && terrainSpec[transitionMatch[1]] && terrainSpec[transitionMatch[1]].transition) {\n            errors = errors.concat(validate({\n                key,\n                value: terrain[key],\n                valueSpec: styleSpec.transition,\n                style,\n                styleSpec\n            }));\n        } else if (terrainSpec[key]) {\n            errors = errors.concat(validate({\n                key,\n                value: terrain[key],\n                valueSpec: terrainSpec[key],\n                style,\n                styleSpec\n            }));\n        } else {\n            errors = errors.concat([new ValidationWarning(key, terrain[key], `unknown property \"${key}\"`)]);\n        }\n    }\n\n    if (!terrain.source) {\n        errors.push(new ValidationError(key, terrain, `terrain is missing required property \"source\"`));\n    } else {\n        const source = style.sources && style.sources[terrain.source];\n        const sourceType = source && unbundle(source.type);\n        if (!source) {\n            errors.push(new ValidationError(key, terrain.source, `source \"${terrain.source}\" not found`));\n        } else if (sourceType !== 'raster-dem') {\n            errors.push(new ValidationError(key, terrain.source, `terrain cannot be used with a source of type ${String(sourceType)}, it only be used with a \"raster-dem\" source type`));\n        }\n    }\n\n    return errors;\n}\n","import {default as ValidationError, ValidationWarning} from '../error/validation_error';\nimport validate from './validate';\nimport getType from '../util/get_type';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateFog(options: ValidationOptions): Array<ValidationError> {\n    const fog = options.value;\n    const style = options.style;\n    const styleSpec = options.styleSpec;\n    const fogSpec = styleSpec.fog;\n    let errors = [];\n\n    const rootType = getType(fog);\n    if (fog === undefined) {\n        return errors;\n    } else if (rootType !== 'object') {\n        errors = errors.concat([new ValidationError('fog', fog, `object expected, ${rootType} found`)]);\n        return errors;\n    }\n\n    for (const key in fog) {\n        const transitionMatch = key.match(/^(.*)-transition$/);\n\n        if (transitionMatch && fogSpec[transitionMatch[1]] && fogSpec[transitionMatch[1]].transition) {\n            errors = errors.concat(validate({\n                key,\n                value: fog[key],\n                valueSpec: styleSpec.transition,\n                style,\n                styleSpec\n            }));\n        } else if (fogSpec[key]) {\n            errors = errors.concat(validate({\n                key,\n                value: fog[key],\n                valueSpec: fogSpec[key],\n                style,\n                styleSpec\n            }));\n        } else {\n            errors = errors.concat([new ValidationWarning(key, fog[key], `unknown property \"${key}\"`)]);\n        }\n    }\n\n    return errors;\n}\n","import validateExpression from './validate_expression';\nimport validateString from './validate_string';\n\nimport type {ValidationOptions} from './validate';\nimport type ValidationError from '../error/validation_error';\n\nexport default function validateFormatted(options: ValidationOptions): Array<ValidationError> {\n    if (validateString(options).length === 0) {\n        return [];\n    }\n\n    return validateExpression(options);\n}\n","import validateExpression from './validate_expression';\nimport validateString from './validate_string';\n\nimport type {ValidationOptions} from './validate';\nimport type ValidationError from '../error/validation_error';\n\nexport default function validateImage(options: ValidationOptions): Array<ValidationError> {\n    if (validateString(options).length === 0) {\n        return [];\n    }\n\n    return validateExpression(options);\n}\n","import ValidationError from '../error/validation_error';\nimport getType from '../util/get_type';\nimport validate from './validate';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function validateProjection(options: ValidationOptions): Array<ValidationError> {\n    const projection = options.value;\n    const styleSpec = options.styleSpec;\n    const projectionSpec = styleSpec.projection;\n    const style = options.style;\n\n    let errors = [];\n\n    const rootType = getType(projection);\n\n    if (rootType === 'object') {\n        for (const key in projection) {\n            errors = errors.concat(validate({\n                key,\n                value: projection[key],\n                valueSpec: projectionSpec[key],\n                style,\n                styleSpec\n            }));\n        }\n    } else if (rootType !== 'string') {\n        errors = errors.concat([new ValidationError('projection', projection, `object or string expected, ${rootType} found`)]);\n    }\n\n    return errors;\n}\n","import extend from '../util/extend';\nimport {unbundle, deepUnbundle} from '../util/unbundle_jsonlint';\nimport {isExpression} from '../expression/index';\nimport {isFunction} from '../function/index';\nimport validateImport from './validate_import';\nimport validateFunction from './validate_function';\nimport validateExpression from './validate_expression';\nimport validateObject from './validate_object';\nimport validateArray from './validate_array';\nimport validateBoolean from './validate_boolean';\nimport validateNumber from './validate_number';\nimport validateColor from './validate_color';\nimport validateEnum from './validate_enum';\nimport validateFilter from './validate_filter';\nimport validateLayer from './validate_layer';\nimport validateSource from './validate_source';\nimport validateModel from './validate_model';\nimport validateLight from './validate_light';\nimport validateLights from './validate_lights';\nimport validateTerrain from './validate_terrain';\nimport validateFog from './validate_fog';\nimport validateString from './validate_string';\nimport validateFormatted from './validate_formatted';\nimport validateImage from './validate_image';\nimport validateProjection from './validate_projection';\nimport getType from '../util/get_type';\n\nimport type {StyleReference} from '../reference/latest';\nimport type {StyleSpecification} from '../types';\nimport type ValidationError from '../error/validation_error';\n\nconst VALIDATORS = {\n    '*'() {\n        return [];\n    },\n    'array': validateArray,\n    'boolean': validateBoolean,\n    'number': validateNumber,\n    'color': validateColor,\n    'enum': validateEnum,\n    'filter': validateFilter,\n    'function': validateFunction,\n    'layer': validateLayer,\n    'object': validateObject,\n    'source': validateSource,\n    'model': validateModel,\n    'light': validateLight,\n    'light-3d': validateLights,\n    'terrain': validateTerrain,\n    'fog': validateFog,\n    'string': validateString,\n    'formatted': validateFormatted,\n    'resolvedImage': validateImage,\n    'projection': validateProjection,\n    'import': validateImport\n};\n\n// Main recursive validation function. Tracks:\n//\n// - key: string representing location of validation in style tree. Used only\n//   for more informative error reporting.\n// - value: current value from style being evaluated. May be anything from a\n//   high level object that needs to be descended into deeper or a simple\n//   scalar value.\n// - valueSpec: current spec being evaluated. Tracks value.\n// - styleSpec: current full spec being evaluated.\nexport type ValidationOptions = {\n    key: string;\n    value: any;\n    valueSpec?: any;\n    style: Partial<StyleSpecification>;\n    styleSpec: StyleReference;\n};\n\nexport default function validate(options: ValidationOptions, arrayAsExpression: boolean = false): Array<ValidationError> {\n    const value = options.value;\n    const valueSpec = options.valueSpec;\n    const styleSpec = options.styleSpec;\n\n    if (valueSpec.expression && isFunction(unbundle(value))) {\n        return validateFunction(options);\n    } else if (valueSpec.expression && isExpression(deepUnbundle(value))) {\n        return validateExpression(options);\n    } else if (valueSpec.type && VALIDATORS[valueSpec.type]) {\n        const valid = VALIDATORS[valueSpec.type](options);\n        if (arrayAsExpression === true && valid.length > 0 && getType(options.value) === \"array\") {\n            // Try to validate as an expression\n            return validateExpression(options);\n        } else {\n            return valid;\n        }\n    } else {\n        const valid = validateObject(extend({}, options, {\n            valueSpec: valueSpec.type ? styleSpec[valueSpec.type] : valueSpec\n        }));\n        return valid;\n    }\n}\n","import ValidationError from '../error/validation_error';\nimport validateString from './validate_string';\n\nimport type {ValidationOptions} from './validate';\n\nexport default function(options: ValidationOptions): Array<ValidationError> {\n    const value = options.value;\n    const key = options.key;\n\n    const errors = validateString(options);\n    if (errors.length) return errors;\n\n    if (value.indexOf('{fontstack}') === -1) {\n        errors.push(new ValidationError(key, value, '\"glyphs\" url must include a \"{fontstack}\" token'));\n    }\n\n    if (value.indexOf('{range}') === -1) {\n        errors.push(new ValidationError(key, value, '\"glyphs\" url must include a \"{range}\" token'));\n    }\n\n    return errors;\n}\n","import validate from './validate';\nimport latestStyleSpec from '../reference/latest';\nimport validateGlyphsURL from './validate_glyphs_url';\n\nimport type ValidationError from '../error/validation_error';\nimport type {ValidationOptions} from './validate';\nimport type {StyleSpecification} from '../types';\n\ntype StyleValidationOptions = {\n    key?: ValidationOptions['key'];\n};\n\nexport default function validateStyle(\n    style: StyleSpecification,\n    styleSpec: any = latestStyleSpec,\n    options: StyleValidationOptions = {},\n): ValidationError[] {\n    const errors = validate({\n        key: options.key || '',\n        value: style,\n        valueSpec: styleSpec.$root,\n        styleSpec,\n        style,\n        // @ts-expect-error - TS2353 - Object literal may only specify known properties, and 'objectElementValidators' does not exist in type 'ValidationOptions'.\n        objectElementValidators: {\n            glyphs: validateGlyphsURL,\n            '*': () => []\n        }\n    });\n\n    return errors;\n}\n","import latestStyleSpec from './reference/latest';\nimport _validateStyle from './validate/validate_style';\nimport _validateSource from './validate/validate_source';\nimport _validateLight from './validate/validate_light';\nimport _validateLights from './validate/validate_lights';\nimport _validateTerrain from './validate/validate_terrain';\nimport _validateFog from './validate/validate_fog';\nimport _validateLayer from './validate/validate_layer';\nimport _validateFilter from './validate/validate_filter';\nimport _validatePaintProperty from './validate/validate_paint_property';\nimport _validateLayoutProperty from './validate/validate_layout_property';\nimport _validateModel from './validate/validate_model';\n\nimport type {StyleSpecification} from './types';\n\nexport type ValidationError = {\n    message: string;\n    identifier?: string | null | undefined;\n    line?: number | null | undefined;\n};\nexport type ValidationErrors = ReadonlyArray<ValidationError>;\nexport type Validator = (arg1: any) => ValidationErrors;\n\n/**\n * Validate a Mapbox GL style against the style specification. This entrypoint,\n * `mapbox-gl-style-spec/lib/validate_style.min`, is designed to produce as\n * small a browserify bundle as possible by omitting unnecessary functionality\n * and legacy style specifications.\n *\n * @private\n * @param {Object} style The style to be validated.\n * @param {Object} [styleSpec] The style specification to validate against.\n *     If omitted, the latest style spec is used.\n * @returns {Array<ValidationError>}\n * @example\n *   var validate = require('mapbox-gl-style-spec/lib/validate_style.min');\n *   var errors = validate(style);\n */\nexport function validateStyle(style: StyleSpecification, styleSpec: any = latestStyleSpec): ValidationErrors {\n    const errors = _validateStyle(style, styleSpec);\n    return sortErrors(errors);\n}\n\nexport const validateSource: Validator = opts => sortErrors(_validateSource(opts));\nexport const validateLight: Validator = opts => sortErrors(_validateLight(opts));\nexport const validateLights: Validator = opts => sortErrors(_validateLights(opts));\nexport const validateTerrain: Validator = opts => sortErrors(_validateTerrain(opts));\nexport const validateFog: Validator = opts => sortErrors(_validateFog(opts));\nexport const validateLayer: Validator = opts => sortErrors(_validateLayer(opts));\nexport const validateFilter: Validator = opts => sortErrors(_validateFilter(opts));\nexport const validatePaintProperty: Validator = opts => sortErrors(_validatePaintProperty(opts));\nexport const validateLayoutProperty: Validator = opts => sortErrors(_validateLayoutProperty(opts));\nexport const validateModel: Validator = opts => sortErrors(_validateModel(opts));\n\nfunction sortErrors(errors: ValidationErrors) {\n    return errors.slice().sort((a, b) => a.line && b.line ? a.line - b.line : 0);\n}\n","/* parser generated by jison 0.4.15 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,14],$V6=[1,15],$V7=[14,18,22,24],$V8=[18,22],$V9=[22,24];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"JSONString\":3,\"STRING\":4,\"JSONNumber\":5,\"NUMBER\":6,\"JSONNullLiteral\":7,\"NULL\":8,\"JSONBooleanLiteral\":9,\"TRUE\":10,\"FALSE\":11,\"JSONText\":12,\"JSONValue\":13,\"EOF\":14,\"JSONObject\":15,\"JSONArray\":16,\"{\":17,\"}\":18,\"JSONMemberList\":19,\"JSONMember\":20,\":\":21,\",\":22,\"[\":23,\"]\":24,\"JSONElementList\":25,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",4:\"STRING\",6:\"NUMBER\",8:\"NULL\",10:\"TRUE\",11:\"FALSE\",14:\"EOF\",17:\"{\",18:\"}\",21:\":\",22:\",\",23:\"[\",24:\"]\"},\nproductions_: [0,[3,1],[5,1],[7,1],[9,1],[9,1],[12,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[15,2],[15,3],[20,3],[19,1],[19,3],[16,2],[16,3],[25,1],[25,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n // replace escaped characters with actual character\n          this.$ = new String(yytext.replace(/\\\\(\\\\|\")/g, \"$\"+\"1\")\n                     .replace(/\\\\n/g,'\\n')\n                     .replace(/\\\\r/g,'\\r')\n                     .replace(/\\\\t/g,'\\t')\n                     .replace(/\\\\v/g,'\\v')\n                     .replace(/\\\\f/g,'\\f')\n                     .replace(/\\\\b/g,'\\b'));\n          this.$.__line__ =  this._$.first_line;\n        \nbreak;\ncase 2:\n\n            this.$ = new Number(yytext);\n            this.$.__line__ =  this._$.first_line;\n        \nbreak;\ncase 3:\n\n            this.$ = null;\n        \nbreak;\ncase 4:\n\n            this.$ = new Boolean(true);\n            this.$.__line__ = this._$.first_line;\n        \nbreak;\ncase 5:\n\n            this.$ = new Boolean(false);\n            this.$.__line__ = this._$.first_line;\n        \nbreak;\ncase 6:\nreturn this.$ = $$[$0-1];\nbreak;\ncase 13:\nthis.$ = {}; Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n        })\nbreak;\ncase 14: case 19:\nthis.$ = $$[$0-1]; Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n        })\nbreak;\ncase 15:\nthis.$ = [$$[$0-2], $$[$0]];\nbreak;\ncase 16:\nthis.$ = {}; this.$[$$[$0][0]] = $$[$0][1];\nbreak;\ncase 17:\nthis.$ = $$[$0-2]; $$[$0-2][$$[$0][0]] = $$[$0][1];\nbreak;\ncase 18:\nthis.$ = []; Object.defineProperty(this.$, '__line__', {\n            value: this._$.first_line,\n            enumerable: false\n        })\nbreak;\ncase 20:\nthis.$ = [$$[$0]];\nbreak;\ncase 21:\nthis.$ = $$[$0-2]; $$[$0-2].push($$[$0]);\nbreak;\n}\n},\ntable: [{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,12:1,13:2,15:7,16:8,17:$V5,23:$V6},{1:[3]},{14:[1,16]},o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o([14,18,21,22,24],[2,1]),o($V7,[2,2]),{3:20,4:$V0,18:[1,17],19:18,20:19},{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:23,15:7,16:8,17:$V5,23:$V6,24:[1,21],25:22},{1:[2,6]},o($V7,[2,13]),{18:[1,24],22:[1,25]},o($V8,[2,16]),{21:[1,26]},o($V7,[2,18]),{22:[1,28],24:[1,27]},o($V9,[2,20]),o($V7,[2,14]),{3:20,4:$V0,20:29},{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:30,15:7,16:8,17:$V5,23:$V6},o($V7,[2,19]),{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:31,15:7,16:8,17:$V5,23:$V6},o($V8,[2,17]),o($V8,[2,15]),o($V9,[2,21])],\ndefaultActions: {16:[2,6]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        function lex() {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 6\nbreak;\ncase 2:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 4\nbreak;\ncase 3:return 17\nbreak;\ncase 4:return 18\nbreak;\ncase 5:return 23\nbreak;\ncase 6:return 24\nbreak;\ncase 7:return 22\nbreak;\ncase 8:return 21\nbreak;\ncase 9:return 10\nbreak;\ncase 10:return 11\nbreak;\ncase 11:return 8\nbreak;\ncase 12:return 14\nbreak;\ncase 13:return 'INVALID'\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:(-?([0-9]|[1-9][0-9]+))(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b)/,/^(?:\"(?:\\\\[\\\\\"bfnrt/]|\\\\u[a-fA-F0-9]{4}|[^\\\\\\0-\\x09\\x0a-\\x1f\"])*\")/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\[)/,/^(?:\\])/,/^(?:,)/,/^(?::)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:null\\b)/,/^(?:$)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = parser;\nexports.Parser = parser.Parser;\nexports.parse = function () { return parser.parse.apply(parser, arguments); };\n}\n","// @ts-nocheck\n\nimport ParsingError from './error/parsing_error';\nimport jsonlint from '@mapbox/jsonlint-lines-primitives';\n\nexport default function readStyle(style) {\n    if (style instanceof String || typeof style === 'string' || ArrayBuffer.isView(style)) {\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\n            return jsonlint.parse(style.toString());\n        } catch (e: any) {\n            throw new ParsingError(e);\n        }\n    }\n\n    return style;\n}\n","import {validateStyle as validateStyleMin} from './validate_style.min';\nimport {v8} from './style-spec';\nimport readStyle from './read_style';\n\nimport type {ValidationErrors} from './validate_style.min';\nimport type {StyleSpecification} from './types';\n\n/**\n * Validate a Mapbox GL style against the style specification.\n *\n * @private\n * @alias validate\n * @param {Object|String|Buffer} style The style to be validated. If a `String`\n *     or `Buffer` is provided, the returned errors will contain line numbers.\n * @param {Object} [styleSpec] The style specification to validate against.\n *     If omitted, the spec version is inferred from the stylesheet.\n * @returns {Array<ValidationError|ParsingError>}\n * @example\n *   var validate = require('mapbox-gl-style-spec').validate;\n *   var style = fs.readFileSync('./style.json', 'utf8');\n *   var errors = validate(style);\n */\n\nexport default function validateStyle(style: StyleSpecification | string | Buffer, styleSpec: any = v8): ValidationErrors {\n    let s = style;\n\n    try {\n        s = readStyle(s);\n    } catch (e: any) {\n        return [e];\n    }\n\n    // @ts-expect-error - TS2345 - Argument of type 'string | StyleSpecification | Buffer' is not assignable to parameter of type 'StyleSpecification'.\n    return validateStyleMin(s, styleSpec);\n}\n\nexport {\n    validateSource as source,\n    validateModel as model,\n    validateLight as light,\n    validateLayer as layer,\n    validateFilter as filter,\n    validateLights as lights,\n    validateTerrain as terrain,\n    validateFog as fog,\n    validatePaintProperty as paintProperty,\n    validateLayoutProperty as layoutProperty\n} from './validate_style.min';\n","import {validateStyle} from './validate_style.min';\nimport {v8} from './style-spec';\nimport readStyle from './read_style';\nimport ValidationError from './error/validation_error';\nimport getType from './util/get_type';\n\nimport type {ValidationErrors} from './validate_style.min';\n\nconst SUPPORTED_SPEC_VERSION = 8;\nconst MAX_SOURCES_IN_STYLE = 15;\n\nfunction isValid(value: string | null | undefined, regex: RegExp): boolean {\n    if (!value || getType(value) !== 'string') return true;\n    return !!value.match(regex);\n}\n\nfunction getSourceCount(source: any): number {\n    if (source.url) {\n        return source.url.split(',').length;\n    } else {\n        return 0;\n    }\n}\n\nfunction getAllowedKeyErrors(obj: any, keys: Array<any>, path?: string | null): Array<ValidationError> {\n    const allowed = new Set(keys);\n    const errors = [];\n    Object.keys(obj).forEach(k => {\n        if (!allowed.has(k)) {\n            const prop = path ? `${path}.${k}` : null;\n            errors.push(new ValidationError(prop, obj[k], `Unsupported property \"${k}\"`));\n        }\n    });\n    return errors;\n}\n\nconst acceptedSourceTypes = new Set([\"vector\", \"raster\", \"raster-dem\", \"raster-array\", \"model\", \"batched-model\"]);\nfunction getSourceErrors(source: any, i: number): Array<ValidationError> {\n    const errors = [];\n\n    /*\n     * Inlined sources are not supported by the Mapbox Styles API, so only\n     * \"type\", \"url\", and \"tileSize\" properties are valid\n     */\n    const sourceKeys = ['type', 'url', 'tileSize'];\n    errors.push(...getAllowedKeyErrors(source, sourceKeys, 'source'));\n\n    /*\n     * \"type\" is required and must be one of \"vector\", \"raster\", \"raster-dem\", \"raster-array\"\n     */\n    if (!acceptedSourceTypes.has(String(source.type))) {\n        errors.push(new ValidationError(`sources[${i}].type`, source.type, `Expected one of [${Array.from(acceptedSourceTypes).join(\", \")}]`));\n    }\n\n    /*\n     * \"source\" is required. Valid examples:\n     * mapbox://mapbox.abcd1234\n     * mapbox://penny.abcd1234\n     * mapbox://mapbox.abcd1234,penny.abcd1234\n     */\n    const sourceUrlPattern = /^mapbox:\\/\\/([^/]*)$/;\n    if (!source.url || !isValid(source.url, sourceUrlPattern)) {\n        errors.push(new ValidationError(`sources[${i}].url`, source.url, 'Expected a valid Mapbox tileset url'));\n    }\n\n    return errors;\n}\n\nfunction getMaxSourcesErrors(sourcesCount: number): Array<ValidationError> {\n    const errors = [];\n    if (sourcesCount > MAX_SOURCES_IN_STYLE) {\n        errors.push(new ValidationError('sources', null, `Styles must contain ${MAX_SOURCES_IN_STYLE} or fewer sources`));\n    }\n    return errors;\n}\n\nfunction getSourcesErrors(sources: any): {\n    errors: Array<ValidationError>;\n    sourcesCount: number;\n} {\n    const errors = [];\n    let sourcesCount = 0;\n\n    Object.keys(sources).forEach((s: string, i: number) => {\n        const sourceErrors = getSourceErrors(sources[s], i);\n\n        // If source has errors, skip counting\n        if (!sourceErrors.length) {\n            sourcesCount = sourcesCount + getSourceCount(sources[s]);\n        }\n\n        errors.push(...sourceErrors);\n    });\n\n    return {errors, sourcesCount};\n}\n\nfunction getImportErrors(imports: Array<any> = []): {\n    errors: Array<ValidationError>;\n    sourcesCount: number;\n} {\n    let errors: Array<ValidationError> = [];\n\n    let sourcesCount = 0;\n    const validateImports = (imports: Array<any> = []) => {\n        for (const importSpec of imports) {\n            const style = importSpec.data;\n            if (!style) continue;\n\n            if (style.imports) {\n                validateImports(style.imports);\n            }\n\n            errors = errors.concat(getRootErrors(style, Object.keys(v8.$root)));\n\n            if (style.sources) {\n                const sourcesErrors = getSourcesErrors(style.sources);\n                sourcesCount += sourcesErrors.sourcesCount;\n                errors = errors.concat(sourcesErrors.errors);\n            }\n        }\n    };\n\n    validateImports(imports);\n    if (imports.length !== (new Set(imports.map(i => i.id))).size) {\n        errors.push(new ValidationError(null, null, 'Duplicate ids of imports'));\n    }\n\n    return {errors, sourcesCount};\n}\n\nfunction getRootErrors(style: any, specKeys: Array<any>): Array<ValidationError> {\n    const errors = [];\n\n    /*\n     * The following keys are optional but fully managed by the Mapbox Styles\n     * API. Values on stylesheet on POST or PATCH will be ignored: \"owner\",\n     * \"id\", \"cacheControl\", \"draft\", \"created\", \"modified\", \"protected\"\n     *\n     * The following keys are optional. The Mapbox Styles API respects value on\n     * stylesheet on PATCH, but ignores the value on POST: \"visibility\"\n     */\n    const optionalRootProperties = [\n        'owner',\n        'id',\n        'cacheControl',\n        'draft',\n        'created',\n        'modified',\n        'visibility',\n        'protected',\n        'models',\n        'lights'\n    ];\n\n    const allowedKeyErrors = getAllowedKeyErrors(style, [...specKeys, ...optionalRootProperties]);\n    errors.push(...allowedKeyErrors);\n\n    if (style.version > SUPPORTED_SPEC_VERSION || style.version < SUPPORTED_SPEC_VERSION) {\n        errors.push(new ValidationError('version', style.version, `Style version must be ${SUPPORTED_SPEC_VERSION}`));\n    }\n\n    /*\n     * \"glyphs\" is optional. If present, valid examples:\n     * mapbox://fonts/penny/{fontstack}/{range}.pbf\n     * mapbox://fonts/mapbox/{fontstack}/{range}.pbf\n     */\n    const glyphUrlPattern = /^mapbox:\\/\\/fonts\\/([^/]*)\\/{fontstack}\\/{range}.pbf$/;\n    if (!isValid(style.glyphs, glyphUrlPattern)) {\n        errors.push(new ValidationError('glyphs', style.glyphs, 'Styles must reference glyphs hosted by Mapbox'));\n    }\n\n    /*\n     * \"sprite\" is optional. If present, valid examples:\n     * mapbox://sprites/penny/abcd1234\n     * mapbox://sprites/mapbox/abcd1234/draft\n     * mapbox://sprites/cyrus/abcd1234/abcd1234\n     */\n    const spriteUrlPattern = /^mapbox:\\/\\/sprites\\/([^/]*)\\/([^/]*)\\/?([^/]*)?$/;\n    if (!isValid(style.sprite, spriteUrlPattern)) {\n        errors.push(new ValidationError('sprite', style.sprite, 'Styles must reference sprites hosted by Mapbox'));\n    }\n\n    /*\n     * \"visibility\" is optional. If present, valid examples:\n     * \"private\"\n     * \"public\"\n     */\n    const visibilityPattern = /^(public|private)$/;\n    if (!isValid(style.visibility, visibilityPattern)) {\n        errors.push(new ValidationError('visibility', style.visibility, 'Style visibility must be public or private'));\n    }\n\n    if (style.protected !== undefined && getType(style.protected) !== 'boolean') {\n        errors.push(new ValidationError('protected', style.protected, 'Style protection must be true or false'));\n    }\n\n    return errors;\n}\n\n/**\n * Validate a Mapbox GL style against the style specification and check for\n * compatibility with the Mapbox Styles API.\n *\n * @param {Object} style The style to be validated.\n * @returns {Array<ValidationError>}\n * @example\n *   var validateMapboxApiSupported = require('mapbox-gl-style-spec/lib/validate_style_mapbox_api_supported.js');\n *   var errors = validateMapboxApiSupported(style);\n */\nexport default function validateMapboxApiSupported(style: any, styleSpec: any = v8): ValidationErrors {\n    let s = style;\n    try {\n        s = readStyle(s);\n    } catch (e: any) {\n        return [e];\n    }\n\n    let errors = validateStyle(s, styleSpec)\n        .concat(getRootErrors(s, Object.keys(v8.$root)));\n\n    let sourcesCount = 0;\n    if (s.sources) {\n        const sourcesErrors = getSourcesErrors(s.sources);\n        sourcesCount += sourcesErrors.sourcesCount;\n        errors = errors.concat(sourcesErrors.errors);\n    }\n\n    if (s.imports) {\n        const importsErrors = getImportErrors(s.imports);\n        sourcesCount += importsErrors.sourcesCount;\n        errors = errors.concat(importsErrors.errors);\n    }\n\n    errors = errors.concat(getMaxSourcesErrors(sourcesCount));\n\n    return errors;\n}\n","type ExpressionType = 'data-driven' | 'color-ramp' | 'data-constant' | 'constant';\ntype ExpressionParameters = Array<'zoom' | 'feature' | 'feature-state' | 'heatmap-density' | 'line-progress' | 'raster-value' | 'sky-radial-progress' | 'pitch' | 'distance-from-center' | 'measure-light' | 'raster-particle-speed'>;\n\nexport type ExpressionSpecification = {\n    interpolated: boolean,\n    parameters?: ExpressionParameters,\n    relaxZoomRestriction?: boolean\n}\n\nexport type StylePropertySpecification = {\n    type: 'number',\n    'property-type': ExpressionType,\n    expression?: ExpressionSpecification,\n    transition?: boolean,\n    default?: number,\n    tokens: never\n} | {\n    type: 'string',\n    'property-type': ExpressionType,\n    expression?: ExpressionSpecification,\n    transition?: boolean,\n    default?: string,\n    tokens?: boolean\n} | {\n    type: 'boolean',\n    'property-type': ExpressionType,\n    expression?: ExpressionSpecification,\n    transition?: boolean,\n    overridable?: boolean,\n    default?: boolean,\n    tokens?: never\n} | {\n    type: 'enum',\n    'property-type': ExpressionType,\n    expression?: ExpressionSpecification,\n    values: {[_: string]: unknown},\n    transition?: boolean,\n    default?: string,\n    tokens: never\n} | {\n    type: 'color',\n    'property-type': ExpressionType,\n    expression?: ExpressionSpecification,\n    transition?: boolean,\n    default?: string,\n    tokens: never,\n    overridable: boolean\n} | {\n    type: 'array',\n    value: 'number',\n    'property-type': ExpressionType,\n    expression?: ExpressionSpecification,\n    length?: number,\n    transition?: boolean,\n    default?: Array<number>,\n    tokens: never\n} | {\n    type: 'array',\n    value: 'string',\n    'property-type': ExpressionType,\n    expression?: ExpressionSpecification,\n    length?: number,\n    transition?: boolean,\n    default?: Array<string>,\n    tokens: never\n} | {\n    type: 'resolvedImage',\n    'property-type': ExpressionType,\n    expression?: ExpressionSpecification,\n    transition?: boolean,\n    default?: string,\n    tokens: never\n};\n\nimport v8 from './reference/v8.json';\nimport latest from './reference/latest';\nimport format from './format';\nimport migrate from './migrate';\nimport composite from './composite';\nimport derefLayers from './deref';\nimport diff from './diff';\nimport ValidationError from './error/validation_error';\nimport ParsingError from './error/parsing_error';\nimport {StyleExpression, isExpression, createExpression, createPropertyExpression, normalizePropertyExpression, ZoomConstantExpression, ZoomDependentExpression, StylePropertyFunction} from './expression/index';\nimport featureFilter, {isExpressionFilter} from './feature_filter/index';\nimport convertFilter from './feature_filter/convert';\nimport Color from './util/color';\nimport {createFunction, isFunction} from './function/index';\nimport convertFunction from './function/convert';\nimport {eachSource, eachLayer, eachProperty} from './visit';\nimport validate from './validate_style';\nimport validateMapboxApiSupported from './validate_mapbox_api_supported';\n\nconst expression = {\n    StyleExpression,\n    isExpression,\n    isExpressionFilter,\n    createExpression,\n    createPropertyExpression,\n    normalizePropertyExpression,\n    ZoomConstantExpression,\n    ZoomDependentExpression,\n    StylePropertyFunction\n};\n\nconst styleFunction = {\n    convertFunction,\n    createFunction,\n    isFunction\n};\n\nconst visit = {eachSource, eachLayer, eachProperty};\n\nexport {\n    v8,\n    latest,\n    format,\n    migrate,\n    composite,\n    derefLayers,\n    diff,\n    ValidationError,\n    ParsingError,\n    expression,\n    featureFilter,\n    convertFilter,\n    Color,\n    styleFunction as function,\n    validate,\n    validateMapboxApiSupported,\n    visit\n};\n"],"names":["stringOrChar","stringify","passedObj","options","indent","JSON","undefined","slice","maxLength","Infinity","replacer","_stringify","obj","currentIndent","reserved","toJSON","string","length","prettified","replace","match","stringLiteral","parse","nextIndent","items","index","start","end","Array","isArray","push","keys","Object","key","keyPart","value","join","sortKeysBy","reference","result","format","style","space","$root","layers","map","layer","stringifyPretty","getPropertyReference","propertyName","i","Reference","layout","paint","eachSource","callback","k","sources","eachLayer","eachProperty","inner","propertyType","type","properties","forEach","path","id","set","x","eachLayout","indexOf","eachPaint","resolveConstant","constants","isFunction","stops","renameProperty","from","to","version","source","url","coordinates","coord","reverse","property","stop","migrateFontstackURL","input","inputParsed","URL","inputPathnameParts","pathname","split","protocol","hostname","assert","decodeURI","predicate","Error","glyphs","migrateFontStack","font","splitAndTrim","s","trim","firstSymbolLayer","symbolLayers","splice","concat","output","inputs","ParsingError","constructor","message","Scope","parent","bindings","name","expression","get","has","NullType","kind","NumberType","StringType","BooleanType","ColorType","ObjectType","ValueType","ErrorType","CollatorType","FormattedType","ResolvedImageType","array","itemType","N","toString","valueMemberTypes","checkSubtype","expected","t","memberType","isValidType","provided","allowedTypes","some","isValidNativeType","kCSSColorTable","clamp_css_byte","Math","round","clamp_css_float","f","parse_css_int","str","parseFloat","parseInt","parse_css_float","css_hue_to_rgb","m1","m2","h","parseCSSColor","css_str","toLowerCase","iv","substr","op","ep","fname","params","alpha","pop","l","exports","e","number","a","b","color","Color","r","g","d","rgba","toRenderColor","lut","RenderColor","image","height","N2","r0","floor","g0","b0","r1","ceil","g1","b1","rw","gw","bw","data","i0","i1","i2","i3","i4","i5","i6","i7","lerp","toArray","toArray01","toArray01Scaled","scale","toArray01PremultipliedAlpha","toArray01Linear","pow","black","white","transparent","red","blue","Collator","caseSensitive","diacriticSensitive","locale","sensitivity","collator","Intl","usage","compare","lhs","rhs","resolvedLocale","resolvedOptions","FormattedSection","text","fontStack","textColor","normalize","Formatted","sections","fromString","unformatted","isEmpty","section","namePrimary","factory","serialize","serialized","ResolvedImage","nameSecondary","available","validateRGBA","validateHSLA","isValue","mixed","item","typeOf","String","Literal","args","context","error","expectedType","evaluate","eachChild","outputDefined","RuntimeError","types","boolean","object","Assertion","parsed","ctx","fn","every","arg","FormatExpression","firstArg","nextTokenMayBeObject","parseObjectValue","lastExpression","content","evaluateSection","evaluatedContent","ImageExpression","inputPrimary","inputSecondary","availableImages","getType","val","Number","Boolean","Coercion","arrayLength","member","parsedMember","registry","c","parseColor","num","isNaN","valueToString","child","geometryTypes","EvaluationContext","scope","globals","feature","featureState","formattedSection","_parseColorCache","canonical","featureTileCoord","featureDistanceData","geometryType","geometry","canonicalID","measureLight","_","brightness","distanceFromCenter","center","y","dX","dY","bX","bearing","bY","dist","cached","getConfig","CompoundExpression","overloadIndex","_evaluate","_overloadIndex","definition","definitions","overloads","availableOverloads","overloadParams","signatureContext","ParsingContext","_scope","parsedArgs","argParseFailed","errors","signatures","stringifySignature","actualTypes","register","signature","CollatorExpression","calculateSignedArea","ring","sum","len","j","p1","p2","classifyRings","rings","maxRings","polygons","polygon","ccw","area","abs","updateBBox","bbox","min","max","boxWithinBox","bbox1","bbox2","onBoundary","p","x1","y1","x2","y2","rayIntersect","pointWithinPolygon","point","trueOnBoundary","inside","len2","q1","q2","perp","v1","v2","twoSided","x3","y3","det1","det2","segmentIntersectSegment","vectorP","vectorQ","EXTENT","mercatorXfromLng","lng","mercatorYfromLat","lat","PI","log","tan","getTileCoordinates","tilesAtZoom","z","pointWithinPolygons","lineIntersectPolygon","lineStringWithinPolygon","line","lineStringWithinPolygons","getTilePolygon","getTilePolygons","updatePoint","polyBBox","worldSize","halfWorldSize","shift","resetBBox","getTilePoints","pointBBox","shifts","tilePoints","points","getTileLines","lineBBox","tileLines","tileLine","pointsWithinPolygons","polygonGeometry","tilePolygon","tilePolygons","linesWithinPolygons","Within","geojson","geometries","features","factors","kilometers","miles","nauticalmiles","meters","metres","yards","feet","inches","RE","FE","E2","RAD","CheapRuler","fromTile","units","n","atan","exp","m","coslat","cos","w2","w","sqrt","kx","ky","distance","dx","wrap","dy","atan2","destination","offset","sin","lineDistance","total","along","p0","interpolate","pointToSegmentDistance","pointOnLine","minDist","minX","minY","minI","minT","sqDist","lineSlice","tmp","equals","lineSliceAlong","bufferPoint","buffer","v","bufferBBox","insideBBox","deg","TinyQueue","_down","_up","top","bottom","peek","pos","current","halfLength","bestChild","right","compareMax","MIN_POINT_SIZE","MIN_LINE_POINT_SIZE","isDefaultBBOX","defualtBBox","getRangeSize","range","isRangeSafe","threshold","ret","console","warn","splitRange","isLine","size","size1","range1","range2","getBBox","pointSets","getPolygonBBox","bboxToBBoxDistance","ruler","NaN","lngFromMercatorX","latFromMercatorY","getLngLatPoint","getLngLatPoints","coords","pointToLineDistance","nearestPoint","pointsToLineDistance","rangeA","rangeB","subLine","segmentToSegmentDistance","dist1","dist2","lineToLineDistance","line1","line2","pointsToPointsDistance","pointSet1","pointSet2","pointToPolygonDistance","ringLen","lineToPolygonDistance","polygonIntersect","polygon1","polygon2","polygonToPolygonDistance","currentMiniDist","ring1","len1","ring2","updateQueue","distQueue","miniDist","r2","tempDist","pointSetToPolygonDistance","initialDistPair","setThreshold","distPair","newRanges","pointSetsDistance","isLine1","isLine2","set1Threshold","set2Threshold","newRangesA","newRangesB","pointSetToLinesDistance","pointSet","lines","pointSetToPolygonsDistance","polygonsToPolygonsDistance","polygons1","polygons2","pointsToGeometryDistance","originGeometry","lngLatPoints","linesToGeometryDistance","lngLatLines","lngLatLine","polygonsToGeometryDistance","lngLatPolygons","lngLatPolygon","isTypeValid","Distance","coerceValue","clampToAllowedNumber","step","Config","configKey","configScope","FQIDSeparator","filter","config","values","minValue","maxValue","stepValue","defaultValue","default","originalScope","includes","res","isFeatureConstant","test","isStateConstant","getConfigDependencies","singleConfig","Set","isGlobalPropertyConstant","Var","boundExpression","part","expr","_parse","annotate","typeAnnotation","Expr","actual","isConstant","ec","isTypeAnnotation","childrenConstant","findStopLessThanOrEqualTo","lastIndex","lowerIndex","upperIndex","currentIndex","currentValue","nextValue","Step","labels","outputs","label","outputType","labelKey","valueKey","stopCount","out","module","UnitBezier","p1x","p1y","p2x","p2y","cx","bx","ax","cy","by","ay","prototype","sampleCurveX","sampleCurveY","sampleCurveDerivativeX","solveCurveX","epsilon","d2","t0","t1","solve","Xn","Yn","Zn","t2","t3","deg2rad","rad2deg","xyz2lab","lab2xyz","xyz2rgb","rgb2xyz","rgbToLab","rgbColor","labToRgb","labColor","interpolateLab","interpolateNumber","rgbToHcl","hclToRgb","hclColor","interpolateHue","interpolateHcl","lab","forward","hcl","Interpolate","operator","interpolation","interpolationFactor","lower","upper","exponentialInterpolation","base","controlPoints","ub","rest","outputLower","outputUpper","lowerValue","upperValue","difference","progress","Coalesce","needsAnnotation","argCount","firstImage","Let","binding","At","fraction","In","needle","haystack","IndexOf","fromIndex","Match","inputType","cases","otherwise","labelContext","MAX_SAFE_INTEGER","sortedLabels","sort","groupedByOutput","outputLookup","outputIndex","coerceLabel","Case","branches","Slice","beginIndex","endIndex","isComparableType","eq","neq","lt","gt","lteq","gteq","eqCollate","neqCollate","ltCollate","gtCollate","lteqCollate","gteqCollate","makeComparison","compareBasic","compareWithCollator","isOrderComparison","Comparison","hasUntypedArgument","rt","Equals","NotEquals","LessThan","GreaterThan","LessThanOrEqual","GreaterThanOrEqual","NumberFormat","currency","unit","minFractionDigits","maxFractionDigits","minimumFractionDigits","maximumFractionDigits","Length","mulberry32","imul","expressions","hsla","colorFunction","binarySearch","varargs","hashString","hash","char","charCodeAt","typeToString","zoom","pitch","heatmapDensity","lineProgress","rasterValue","rasterParticleSpeed","skyRadialProgress","accumulated","LN2","E","LN10","asin","acos","isSupportedScript","toUpperCase","seed","seedVal","random","success","expressionHasParameter","parameter","parameters","supportsPropertyExpression","spec","supportsLightExpression","supportsZoomExpression","supportsLineProgressExpression","supportsInterpolation","interpolated","identityFunction","createFunction","propertySpec","isColor","zoomAndFeatureDependent","featureDependent","zoomDependent","extend","colorSpace","colorSpaces","innerFun","hashedStops","categoricalKeyType","evaluateExponentialFunction","evaluateIntervalFunction","evaluateCategoricalFunction","create","evaluateIdentityFunction","featureFunctions","zoomStops","featureFunctionStops","interpolationType","bind","coalesce","keyType","evaluated","interp","colorspace","evaluatedLower","apply","evaluatedUpper","StyleExpression","_warningHistory","_evaluator","_defaultValue","getDefaultValue","_enumValues","configDependencies","evaluateWithoutErrorHandling","isExpression","createExpression","parser","getExpectedType","ZoomConstantExpression","isLightConstant","_styleExpression","isStateDependent","ZoomDependentExpression","createPropertyExpression","isZoomConstant","isLineProgressConstant","canRelaxZoomRestriction","relaxZoomRestriction","zoomCurve","findZoomCurve","StylePropertyFunction","specification","_parameters","_specification","deserialize","normalizePropertyExpression","err","constant","childResult","enum","formatted","resolvedImage","convertLiteral","convertFunction","convertIdentityFunction","tokens","convertTokenString","convertZoomAndPropertyFunction","convertZoomFunction","convertPropertyFunction","getInterpolateOperator","featureFunctionParameters","functionType","getFunctionType","appendStopPair","fixupDegenerateStepCurve","getFallback","isStep","curve","re","exec","literal","unbundle","valueOf","deepUnbundle","unbundledValue","isExpressionFilter","createFilter","layerType","needGeometry","needFeature","convertFilter","filterExp","staticFilter","extractStaticFilter","filterFunc","filterSpec","latest","compiledStaticFilter","globalProperties","dynamicFilterFunc","compiledDynamicFilter","geometryNeeded","dynamicFilter","isDynamicFilter","unionDynamicBranches","collapseDynamicBooleanExpressions","collapsed","collapsedExpression","subExpression","isBranchingDynamically","isRootExpressionDynamic","dynamicConditionExpressions","param","converted","convertComparisonOp","convertNegation","convertDisjunctionOp","convertInOp","convertHasOp","filters","_convertFilter","expectedTypes","children","typechecks","runtimeTypeChecks","conditions","negate","uniformTypes","uniqueValues","migrated","migrateToV8","migrateToExpressions","styleIDs","sourceIDs","compositedSourceLayers","compositeID","deref","refProperties","derefLayers","ref","deepEqual","operations","setStyle","addLayer","removeLayer","setPaintProperty","setLayoutProperty","setSlot","setFilter","addSource","removeSource","setGeoJSONSourceData","setLayerZoomRange","setLayerProperty","setCenter","setZoom","setBearing","setPitch","setSprite","setGlyphs","setTransition","setLight","setTerrain","setFog","setCamera","setLights","setProjection","addImport","removeImport","updateImport","sourceId","after","commands","command","sourcesRemoved","updateSource","canUpdateGeoJSON","before","prop","hasOwnProperty","isEqual","diffSources","diffLayerPropertyChanges","layerId","klass","pluckId","indexById","group","diffLayers","beforeOrder","afterOrder","beforeIndex","reduce","afterIndex","tracker","clean","beforeLayer","afterLayer","insertBeforeLayerId","lastIndexOf","slot","minzoom","maxzoom","diffImports","importId","insertBefore","afterImport","beforeImport","diffStyles","sprite","imports","transition","light","fog","projection","lights","camera","removeOrAddSourceCommands","beforeLayers","beforeTerrain","terrain","ValidationError","identifier","__line__","ValidationWarning","validateObject","elementSpecs","valueSpec","elementValidators","objectElementValidators","styleSpec","objectKey","elementSpecKey","elementSpec","validateElement","validateSpec","required","validateImport","defineProperty","importSpec","enumerable","import","validateStyle","validateArray","arraySpec","validateArrayElement","arrayElementValidator","validate","arrayElementSpec","minimum","maximum","function","$version","arrayIndex","validateNumber","specMin","specMax","validateFunction","functionValueSpec","stopKeyType","stopDomainValues","previousStopDomainValue","previousStopDomainZoom","isZoomFunction","isPropertyFunction","isZoomAndPropertyFunction","validateFunctionStops","validateFunctionDefault","validateFunctionStop","nextStopDomainZoom","validateStopDomainValue","reportValue","isFinite","validateExpression","expressionContext","expressionObj","propertyKey","disallowedFilterParameters","disallowedParameters","delete","validateBoolean","validateColor","validateEnum","validateFilter","validateNonExpressionFilter","filter_operator","geometry_type","validateProperty","layerSpec","transitionMatch","tokenMatch","example","validatePaintProperty","validateLayoutProperty","validateLayer","otherLayer","sourceType","lineMetrics","validateString","promoteId","validatePromoteId","validateSource","tiles","source_geojson","cluster","clusterProperties","mapExpr","reduceExpr","source_video","source_image","getSourceTypeValues","memo","isValidUrl","allowRelativeUrls","isRelative","validateModel","validateLight","lightSpec","rootType","validateLights","lightType","otherLight","lightPropertySpec","propertiesType","validateTerrain","terrainSpec","validateFog","fogSpec","validateFormatted","validateImage","validateProjection","projectionSpec","VALIDATORS","arrayAsExpression","valid","latestStyleSpec","validateGlyphsURL","_validateStyle","sortErrors","o","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","trace","yy","symbols_","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","first_line","table","defaultActions","parseError","recoverable","self","stack","tstack","vstack","lstack","TERROR","EOF","call","arguments","lexer","sharedState","setInput","yylloc","yyloc","ranges","getPrototypeOf","lex","token","symbol","preErrorSymbol","state","action","yyval","newState","errStr","showPosition","loc","last_line","first_column","last_column","_input","_more","_backtrack","done","matched","conditionStack","ch","unput","oldLines","more","reject","backtrack_lexer","less","pastInput","past","upcomingInput","next","pre","test_match","indexed_rule","backup","matches","tempMatch","rules","_currentRules","flex","begin","condition","popState","topState","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","Parser","require","readStyle","ArrayBuffer","isView","jsonlint","v8","validateStyleMin","SUPPORTED_SPEC_VERSION","MAX_SOURCES_IN_STYLE","isValid","regex","getSourceCount","getAllowedKeyErrors","allowed","acceptedSourceTypes","getSourceErrors","sourceKeys","sourceUrlPattern","getMaxSourcesErrors","sourcesCount","getSourcesErrors","sourceErrors","getImportErrors","validateImports","getRootErrors","sourcesErrors","specKeys","optionalRootProperties","allowedKeyErrors","glyphUrlPattern","spriteUrlPattern","visibilityPattern","visibility","protected","validateMapboxApiSupported","importsErrors","styleFunction","visit"],"mappingse,2BAArB,CAJA;AAMe,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,OAAA,GAAU,EAAxC,EAA4C;AAAA,IACzD,MAAMC,MAAA,GAASC,IAAA,CAAKJ,SAAL,CACb,CAAC,CAAD,CADa,EAEbK,SAFa,EAGbH,OAAA,CAAQC,MAAR,KAAmBE,SAAnB,GAA+B,CAA/B,GAAmCH,OAAA,CAAQC,MAH9B,CAAA,CAIbG,KAJa,CAIP,CAJO,EAIJ,CAAC,CAJG,CAAf,CADyD;AAAA,IAOzD,MAAMC,SAAA,GACJJ,MAAA,KAAW,EAAX,GACIK,QADJ,GAEIN,OAAA,CAAQK,SAAR,KAAsBF,SAAtB,GACA,EADA,GAEAH,OAAA,CAAQK,SALd,CAPyD;AAAA,IAczD,IAAI,CAAEE,QAAF,CAAA,GAAeP,OAAnB,CAdyD;AAAA,IAgBzD,OAAQ,SAASQ,UAAT,CAAoBC,GAApB,EAAyBC,aAAzB,EAAwCC,QAAxC,EAAkD;AAAA,QACxD,IAAIF,GAAA,IAAO,OAAOA,GAAA,CAAIG,MAAX,KAAsB,UAAjC,EAA6C;AAAA,YAC3CH,GAAA,GAAMA,GAAA,CAAIG,MAAJ,EAAN,CAD2C;AAAA,SADW;AAAA,QAKxD,MAAMC,MAAA,GAASX,IAAA,CAAKJ,SAAL,CAAeW,GAAf,EAAoBF,QAApB,CAAf,CALwD;AAAA,QAOxD,IAAIM,MAAA,KAAWV,SAAf,EAA0B;AAAA,YACxB,OAAOU,MAAP,CADwB;AAAA,SAP8B;AAAA,QAWxD,MAAMC,MAAA,GAAST,SAAA,GAAYK,aAAA,CAAcI,MAA1B,GAAmCH,QAAlD,CAXwD;AAAA,QAaxD,IAAIE,MAAA,CAAOC,MAAP,IAAiBA,MAArB,EAA6B;AAAA,YAC3B,MAAMC,UAAA,GAAaF,MAAA,CAAOG,OAAP,CACjBnB,YADiB,EAEjB,CAACoB,KAAD,EAAQC,aAAR,KAA0B;AAAA,gBACxB,OAAOA,aAAA,IAAiB,CAAA,GAAGD,KAAH,EAAS,CAAT,CAAxB,CADwB;AAAA,aAFT,CAAnB,CAD2B;AAAA,YAO3B,IAAIF,UAAA,CAAWD,MAAX,IAAqBA,MAAzB,EAAiC;AAAA,gBAC/B,OAAOC,UAAP,CAD+B;AAAA,aAPN;AAAA,SAb2B;AAAA,QAyBxD,IAAIR,QAAA,IAAY,IAAhB,EAAsB;AAAA,YACpBE,GAAA,GAAMP,IAAA,CAAKiB,KAAL,CAAWN,MAAX,CAAN,CADoB;AAAA,YAEpBN,QAAA,GAAWJ,SAAX,CAFoB;AAAA,SAzBkC;AAAA,QA8BxD,IAAI,OAAOM,GAAP,KAAe,QAAf,IAA2BA,GAAA,KAAQ,IAAvC,EAA6C;AAAA,YAC3C,MAAMW,UAAA,GAAaV,aAAA,GAAgBT,MAAnC,CAD2C;AAAA,YAE3C,MAAMoB,KAAA,GAAQ,EAAd,CAF2C;AAAA,YAG3C,IAAIC,KAAA,GAAQ,CAAZ,CAH2C;AAAA,YAI3C,IAAIC,KAAJ,CAJ2C;AAAA,YAK3C,IAAIC,GAAJ,CAL2C;AAAA,YAO3C,IAAIC,KAAA,CAAMC,OAAN,CAAcjB,GAAd,CAAJ,EAAwB;AAAA,gBACtBc,KAAA,GAAQ,GAAR,CADsB;AAAA,gBAEtBC,GAAA,GAAM,GAAN,CAFsB;AAAA,gBAGtB,MAAM,CAAEV,MAAF,CAAA,GAAaL,GAAnB,CAHsB;AAAA,gBAItB,OAAOa,KAAA,GAAQR,MAAf,EAAuBQ,KAAA,EAAvB,EAAgC;AAAA,oBAC9BD,KAAA,CAAMM,IAAN,CACEnB,UAAA,CAAWC,GAAA,CAAIa,KAAJ,CAAX,EAAuBF,UAAvB,EAAmCE,KAAA,KAAUR,MAAA,GAAS,CAAnB,GAAuB,CAAvB,GAA2B,CAA9D,CACE,IAAA,MAFJ,CAD8B,CAAA;AAAA,iBAJV;AAAA,aAAxB,MAUO;AAAA,gBACLS,KAAA,GAAQ,GAAR,CADK;AAAA,gBAELC,GAAA,GAAM,GAAN,CAFK;AAAA,gBAGL,MAAMI,IAAA,GAAOC,MAAA,CAAOD,IAAP,CAAYnB,GAAZ,CAAb,CAHK;AAAA,gBAIL,MAAM,CAAEK,MAAF,CAAA,GAAac,IAAnB,CAJK;AAAA,gBAKL,OAAON,KAAA,GAAQR,MAAf,EAAuBQ,KAAA,EAAvB,EAAgC;AAAA,oBAC9B,MAAMQ,GAAA,GAAMF,IAAA,CAAKN,KAAL,CAAZ,CAD8B;AAAA,oBAE9B,MAAMS,OAAA,GAAU,CAAA,GAAG7B,IAAA,CAAKJ,SAAL,CAAegC,GAAf,CAAH,EAAuB,EAAvB,CAAhB,CAF8B;AAAA,oBAG9B,MAAME,KAAA,GAAQxB,UAAA,CACZC,GAAA,CAAIqB,GAAJ,CADY,EAEZV,UAFY,EAGZW,OAAA,CAAQjB,MAAR,IAAkBQ,KAAA,KAAUR,MAAA,GAAS,CAAnB,GAAuB,CAAvB,GAA2B,CAA3B,CAHN,CAAd,CAH8B;AAAA,oBAQ9B,IAAIkB,KAAA,KAAU7B,SAAd,EAAyB;AAAA,wBACvBkB,KAAA,CAAMM,IAAN,CAAWI,OAAA,GAAUC,KAArB,CADuB,CAAA;AAAA,qBARK;AAAA,iBAL3B;AAAA,aAjBoC;AAAA,YAoC3C,IAAIX,KAAA,CAAMP,MAAN,GAAe,CAAnB,EAAsB;AAAA,gBACpB,OAAO;AAAA,oBAACS,KAAD;AAAA,oBAAQtB,MAAA,GAASoB,KAAA,CAAMY,IAAN,CAAW,CAAC,GAAD,GAAMb,UAAN,EAAA,CAAX,CAAjB;AAAA,oBAAiDI,GAAjD;AAAA,iBAAsDS,CAAAA,IAAtD,CACL,CAAC,EAAD,GAAKvB,aAAL,EAAA,CADK,CAAP,CADoB;AAAA,aApCqB;AAAA,SA9BW;AAAA,QAyExD,OAAOG,MAAP,CAzEwD;AAAA,KAAnD,CA0EJd,SA1EI,EA0EO,EA1EP,EA0EW,CA1EX,CAAP,CAhByD;AAAA;;ACD3D,SAASmC,UAAT,CAAoBzB,GAApB,EAAyB0B,UAAzB,EAAoC;AAAA,IAChC,MAAMC,MAAA,GAA8B,EAApC,CADgC;AAAA,IAEhC,KAAWN,MAAAA,GAAX,IAAkBK,UAAlB,EAA6B;AAAA,QACrB,IAAA1B,GAAA,CAAIqB,GAAJ,CAAa,KAAA,KAAW,CAAxB,EAAwB;AAAA,YACjBM,MAAA,CAAAN,GAAA,CAAA,GAAOrB,GAAA,CAAIqB,GAAJ,CAAP,CADiB;AAAA,SADH;AAAA,KAFG;AAAA,IAOhC,KAAWA,MAAAA,GAAX,IAAkBrB,GAAlB,EAAuB;AAAA,QACf,IAAA2B,MAAA,CAAON,GAAP,CAAgB,KAAA,KAAW,CAA3B,EAA2B;AAAA,YACpBM,MAAA,CAAAN,GAAA,CAAA,GAAOrB,GAAA,CAAIqB,GAAJ,CAAP,CADoB;AAAA,SADZ;AAAA,KAPS;AAAA,IAYzB,OAAAM,MAAA,CAZyB;AAAA,CAHpC;AAuCA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,KAAA,GAAQ,CAA/B,EAAkC;AAAA,IACtBD,KAAA,GAAAJ,UAAA,CAAWI,KAAX,EAAkBH,EAAA,CAAUK,KAA5B,CAAA,CADsB;AAAA,IAG9B,IAAIF,KAAA,CAAMG,MAAV,EAAkB;AAAA,QACRH,KAAA,CAAAG,MAAA,GAASH,KAAA,CAAMG,MAAN,CAAaC,GAAb,CAAkBC,KAAD,IAAWT,UAAA,CAAWS,KAAX,EAAkBR,EAAA,CAAUQ,KAA5B,CAA5B,CAAT,CADQ;AAAA,KAHY;AAAA,IAO9B,OAAOC,SAAA,CAAgBN,KAAhB,EAAuB,EAACrC,MAAA,EAAQsC,KAAT,EAAvB,CAAP,CAP8B;AAAA;;AC/BlC,SAASM,oBAAT,CAA8BC,YAA9B,EAAgF;AAAA,IAC5E,KAAA,IAASC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIC,EAAA,CAAUC,MAAV,CAAiBnC,MAArC,EAA6CiC,CAAA,EAA7C,EAAkD;AAAA,QAC9C,KAAWjB,MAAAA,GAAX,IAAkBkB,EAAA,CAAUA,EAAA,CAAUC,MAAV,CAAiBF,CAAjB,CAAV,CAAlB,EAAkD;AAAA,YAC1C,IAAAjB,GAAA,KAAQgB,YAAR;AAAA,gBAA6B,OAAAE,EAAA,CAAUA,EAAA,CAAUC,MAAV,CAAiBF,CAAjB,CAAV,CAAA,CAA+BjB,GAA/B,CAAA,CADa;AAAA,SADJ;AAAA,KAD0B;AAAA,IAM5E,KAAA,IAASiB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIC,EAAA,CAAUE,KAAV,CAAgBpC,MAApC,EAA4CiC,CAAA,EAA5C,EAAiD;AAAA,QAC7C,KAAWjB,MAAAA,GAAX,IAAkBkB,EAAA,CAAUA,EAAA,CAAUE,KAAV,CAAgBH,CAAhB,CAAV,CAAlB,EAAiD;AAAA,YACzC,IAAAjB,GAAA,KAAQgB,YAAR;AAAA,gBAA6B,OAAAE,EAAA,CAAUA,EAAA,CAAUE,KAAV,CAAgBH,CAAhB,CAAV,CAAA,CAA8BjB,GAA9B,CAAA,CADY;AAAA,SADJ;AAAA,KAN2B;AAAA,IAYrE,OAAA,IAAA,CAZqE;AAAA,CAVhF;AAyBgB,SAAAqB,UAAA,CAAWb,KAAX,EAAsCc,QAAtC,EAAkF;AAAA,IACnF,WAAAC,CAAA,IAAKf,KAAA,CAAMgB,OAAX,EAAoB;AAAA,QAClBF,QAAA,CAAAd,KAAA,CAAMgB,OAAN,CAAcD,CAAd,CAAA,CADkB,CAAA;AAAA,KAD+D;AAAA,CAzBlG;AA+BgB,SAAAE,SAAA,CAAUjB,KAAV,EAAqCc,QAArC,EAAgF;AAAA,IACjF,WAAAT,KAAA,IAASL,KAAA,CAAMG,MAAf,EAAuB;AAAA,QAC9BW,QAAA,CAAST,KAAT,CAD8B,CAAA;AAAA,KAD0D;AAAA,CA/BhG;AAiDgB,SAAAa,YAAA,CACZlB,KADY,EAEZtC,OAFY,EAMZoD,QANY,EAOd;AAAA,IACW,SAAAK,KAAA,CAAMd,KAAN,EAAiCe,YAAjC,EAAmE;AAAA,QACxE,IAAIf,KAAA,CAAMgB,IAAN,KAAe,MAAf,IAAyBhB,KAAA,CAAMgB,IAAN,KAAe,MAA5C;AAAA,YAAoD,OADoB;AAAA,QAElE,MAAAC,UAAA,GAAcjB,KAAA,CAAMe,YAAN,CAAd,CAFkE;AAAA,QAGxE,IAAI,CAACE,UAAL;AAAA,YAAiB,OAHuD;AAAA,QAIxE/B,MAAA,CAAOD,IAAP,CAAYgC,UAAZ,CAAwBC,CAAAA,OAAxB,CAAiC/B,GAAD,IAAS;AAAA,YAC5BsB,QAAA,CAAA;AAAA,gBACLU,IAAA,EAAM;AAAA,oBAACnB,KAAA,CAAMoB,EAAP;AAAA,oBAAWL,YAAX;AAAA,oBAAyB5B,GAAzB;AAAA,iBADD;AAAA,gBAELA,GAFK;AAAA,gBAGLE,KAAA,EAAO4B,UAAA,CAAW9B,GAAX,CAHF;AAAA,gBAILK,SAAA,EAAWU,oBAAA,CAAqBf,GAArB,CAJN;AAAA,gBAKLkC,GAAA,CAAIC,CAAJ,EAAO;AAAA,oBACHL,UAAA,CAAW9B,GAAX,CAAA,GAAkBmC,CAAlB,CADG;AAAA,iBALF;AAAA,aAAA,CAD4B,CAAA;AAAA,SAAzC,CAJwE,CAAA;AAAA,KAD9E;AAAA,IAkBYV,SAAA,CAAAjB,KAAA,EAAQK,KAAD,IAAW;AAAA,QACxB,IAAI3C,OAAA,CAAQkD,KAAZ,EAAmB;AAAA,YACfO,KAAA,CAAMd,KAAN,EAAa,OAAb,CADe,CAAA;AAAA,SADK;AAAA,QAIxB,IAAI3C,OAAA,CAAQiD,MAAZ,EAAoB;AAAA,YAChBQ,KAAA,CAAMd,KAAN,EAAa,QAAb,CADgB,CAAA;AAAA,SAJI;AAAA,KAAlB,CAlBZ,CAAA;AAAA;;ACrDF,SAASuB,UAAT,CAAoBvB,KAApB,EAA2BS,QAA3B,EAAqC;AAAA,IACjC,KAAWC,MAAAA,CAAX,IAAgBV,KAAhB,EAAuB;AAAA,QACnB,IAAIU,CAAA,CAAEc,OAAF,CAAU,QAAV,CAAA,KAAwB,CAA5B,EAA+B;AAAA,YAClBf,QAAA,CAAAT,KAAA,CAAMU,CAAN,CAAA,EAAUA,CAAV,CADkB,CAAA;AAAA,SADZ;AAAA,KADU;AAAA,CAFrC;AAUA,SAASe,SAAT,CAAmBzB,KAAnB,EAA0BS,QAA1B,EAAoC;AAAA,IAChC,KAAWC,MAAAA,CAAX,IAAgBV,KAAhB,EAAuB;AAAA,QACnB,IAAIU,CAAA,CAAEc,OAAF,CAAU,OAAV,CAAA,KAAuB,CAA3B,EAA8B;AAAA,YACjBf,QAAA,CAAAT,KAAA,CAAMU,CAAN,CAAA,EAAUA,CAAV,CADiB,CAAA;AAAA,SADX;AAAA,KADS;AAAA,CAVpC;AAkBA,SAASgB,eAAT,CAAyB/B,KAAzB,EAAgCN,KAAhC,EAAuC;AAAA,IACnC,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAA,CAAM,CAAN,CAAa,KAAA,GAA9C,EAAmD;AAAA,QAC/C,OAAOqC,eAAA,CAAgB/B,KAAhB,EAAuBA,KAAA,CAAMgC,SAAN,CAAgBtC,KAAhB,CAAvB,CAAP,CAD+C;AAAA,KAAnD,MAEO;AAAA,QACI,OAAAA,KAAA,CADJ;AAAA,KAH4B;AAAA,CAlBvC;AA0BA,SAASuC,YAAT,CAAoBvC,KAApB,EAA2B;AAAA,IAChB,OAAAP,KAAA,CAAMC,OAAN,CAAcM,KAAA,CAAMwC,KAApB,CAAA,CADgB;AAAA,CA1B3B;AA8BA,SAASC,cAAT,CAAwBhE,GAAxB,EAA6BiE,IAA7B,EAAmCC,EAAnC,EAAuC;AAAA,IAC/BlE,GAAA,CAAAkE,EAAA,CAAA,GAAMlE,GAAA,CAAIiE,IAAJ,CAAN,CAD+B;AAAA,IACd,OAAOjE,GAAA,CAAIiE,IAAJ,CAAP,CADc;AAAA,CA9BvC;AAkCA,oBAAA,EAAwBpC,KAAxB,EAA+B;AAAA,IAC3BA,KAAA,CAAMsC,OAAN,GAAgB,CAAhB,CAD2B;AAAA,IAIhBzB,UAAA,CAAAb,KAAA,EAAQuC,MAAD,IAAY;AAAA,QAC1B,IAAIA,MAAA,CAAOlB,IAAP,KAAgB,OAAhB,IAA2BkB,MAAA,CAAOC,GAAP,KAAe,KAAW,CAAzD,EAAyD;AAAA,YACtCL,cAAA,CAAAI,MAAA,EAAQ,KAAR,EAAe,MAAf,CADsC,CAAA;AAAA,SAD/B;AAAA,QAItB,IAAAA,MAAA,CAAOlB,IAAP,KAAgB,OAAhB,EAAyB;AAAA,YAClBkB,MAAA,CAAAE,WAAA,CAAYlB,OAAZ,CAAqBmB,KAAD,IAAW;AAAA,gBAClC,OAAOA,KAAA,CAAMC,OAAN,EAAP,CADkC;AAAA,aAA/B,CADkB,CAAA;AAAA,SAJH;AAAA,KAAnB,CAJgB,CAAA;AAAA,IAejB1B,SAAA,CAAAjB,KAAA,EAAQK,KAAD,IAAW;AAAA,QACbuB,UAAA,CAAAvB,KAAA,EAAQM,MAAD,IAAY;AAAA,YACtB,IAAAA,MAAA,CAAO,qBAAP,CAAkC,KAAA,KAAW,CAA7C,EAA6C;AAAA,gBAC9BwB,cAAA,CAAAxB,MAAA,EAAQ,qBAAR,EAA+B,gBAA/B,CAD8B,CAAA;AAAA,aADvB;AAAA,SAAnB,CADa,CAAA;AAAA,QAOdmB,SAAA,CAAAzB,KAAA,EAAQO,KAAD,IAAW;AAAA,YACpB,IAAAA,KAAA,CAAM,kBAAN,CAA8B,KAAA,KAAW,CAAzC,EAAyC;AAAA,gBAC1BuB,cAAA,CAAAvB,KAAA,EAAO,kBAAP,EAA2B,oBAA3B,CAD0B,CAAA;AAAA,aADrB;AAAA,YAIpB,IAAAA,KAAA,CAAM,YAAN,CAAwB,KAAA,KAAW,CAAnC,EAAmC;AAAA,gBACpBuB,cAAA,CAAAvB,KAAA,EAAO,YAAP,EAAqB,cAArB,CADoB,CAAA;AAAA,aAJf;AAAA,YAOpB,IAAAA,KAAA,CAAM,YAAN,CAAwB,KAAA,KAAW,CAAnC,EAAmC;AAAA,gBACpBuB,cAAA,CAAAvB,KAAA,EAAO,YAAP,EAAqB,cAArB,CADoB,CAAA;AAAA,aAPf;AAAA,SAAlB,CAPc,CAAA;AAAA,KAAlB,CAfiB,CAAA;AAAA,IAoCdM,YAAA,CAAAlB,KAAA,EAAO;AAAA,QAACY,KAAA,EAAO,IAAR;AAAA,QAAcD,MAAA,EAAQ,IAAtB;AAAA,KAAP,EAAqCiC,QAAD,IAAc;AAAA,QAC3D,MAAMlD,KAAA,GAAQqC,eAAA,CAAgB/B,KAAhB,EAAuB4C,QAAA,CAASlD,KAAhC,CAAd,CAD2D;AAAA,QAGvD,IAAAuC,YAAA,CAAWvC,KAAX,CAAA,EAAmB;AAAA,YACbA,KAAA,CAAAwC,KAAA,CAAMX,OAAN,CAAesB,IAAD,IAAU;AAAA,gBAC1BA,IAAA,CAAK,CAAL,CAAA,GAAUd,eAAA,CAAgB/B,KAAhB,EAAuB6C,IAAA,CAAK,CAAL,CAAvB,CAAV,CAD0B;AAAA,aAAxB,CADa,CAAA;AAAA,SAHoC;AAAA,QAS3DD,QAAA,CAASlB,GAAT,CAAahC,KAAb,CAT2D,CAAA;AAAA,KAAlD,CApCc,CAAA;AAAA,IA+C3B,OAAOM,KAAA,CAAMgC,SAAb,CA/C2B;AAAA,IAiDjBf,SAAA,CAAAjB,KAAA,EAAQK,KAAD,IAAW;AAAA,QAKbuB,UAAA,CAAAvB,KAAA,EAAQM,MAAD,IAAY;AAAA,YAC1B,OAAOA,MAAA,CAAO,eAAP,CAAP,CAD0B;AAAA,YAE1B,OAAOA,MAAA,CAAO,eAAP,CAAP,CAF0B;AAAA,SAAnB,CALa,CAAA;AAAA,QAUdmB,SAAA,CAAAzB,KAAA,EAAQO,KAAD,IAAW;AAAA,YACpB,IAAAA,KAAA,CAAM,WAAN,CAAA,EAAoB;AAAA,gBACpB,IAAI,CAACP,KAAA,CAAMM,MAAX;AAAA,oBAAmBN,KAAA,CAAMM,MAAN,GAAe,EAAf,CADC;AAAA,gBAEpBN,KAAA,CAAMM,MAAN,CAAa,WAAb,IAA4BC,KAAA,CAAM,WAAN,CAA5B,CAFoB;AAAA,gBAGpB,OAAOA,KAAA,CAAM,WAAN,CAAP,CAHoB;AAAA,aADA;AAAA,YAOpB,IAAAA,KAAA,CAAM,WAAN,CAAA,EAAoB;AAAA,gBACpB,IAAI,CAACP,KAAA,CAAMM,MAAX;AAAA,oBAAmBN,KAAA,CAAMM,MAAN,GAAe,EAAf,CADC;AAAA,gBAEpBN,KAAA,CAAMM,MAAN,CAAa,WAAb,IAA4BC,KAAA,CAAM,WAAN,CAA5B,CAFoB;AAAA,gBAGpB,OAAOA,KAAA,CAAM,WAAN,CAAP,CAHoB;AAAA,aAPA;AAAA,SAAlB,CAVc,CAAA;AAAA,KAAlB,CAjDiB,CAAA;AAAA,IA0E3B,SAASkC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA,QAC1B,MAAAC,WAAA,GAAc,IAAIC,GAAJ,CAAQF,KAAR,CAAd,CAD0B;AAAA,QAEhC,MAAMG,kBAAA,GAAqBF,WAAA,CAAYG,QAAZ,CAAqBC,KAArB,CAA2B,GAA3B,CAA3B,CAFgC;AAAA,QAI5B,IAAAJ,WAAA,CAAYK,QAAZ,KAAyB,SAAzB,EAAoC;AAAA,YAC7B,OAAAN,KAAA,CAD6B;AAAA,SAApC,MAGJ,IAAWC,WAAA,CAAYM,QAAZ,KAAyB,WAApC,EAAiD;AAAA,YAC7CC,MAAA,CAAOC,SAAA,CAAUR,WAAA,CAAYG,QAAtB,CAAoC,KAAA,0BAA3C,CAD6C,CAAA;AAAA,YAEtC,OAAA,+CAAA,CAFsC;AAAA,SAAjD,MAIA,IAAWH,WAAA,CAAYM,QAAZ,KAAyB,OAApC,EAA6C;AAAA,YAClCC,MAAA,CAAAL,kBAAA,CAAmB,CAAnB,CAAA,KAA0B,IAA1B,CADkC,CAAA;AAAA,YAEzCK,MAAA,CAAOC,SAAA,CAAUN,kBAAA,CAAmB,CAAnB,CAAV,CAAqC,KAAA,aAA5C,CAFyC,CAAA;AAAA,YAGzCK,MAAA,CAAOC,SAAA,CAAUN,kBAAA,CAAmB,CAAnB,CAAV,CAAqC,KAAA,aAA5C,CAHyC,CAAA;AAAA,YAIlC,OAAA,CAAA,eAAA,GAAkBA,kBAAA,CAAmB,CAAnB,CAAlB,EAAuC,wBAAvC,CAAA,CAJkC;AAAA,SAA7C,MAMO;AAAA,YACHK,MAAA,CAAO,KAAP,CADG,CAAA;AAAA,SAjByB;AAAA,QAqBhC,SAASA,MAAT,CAAgBE,SAAhB,EAA2B;AAAA,YACvB,IAAI,CAACA,SAAL,EAAgB;AAAA,gBACZ,MAAM,IAAIC,KAAJ,CAAU,CAAsB,mBAAtB,GAAsBX,KAAtB,EAA8B,CAA9B,CAAV,CAAN,CADY;AAAA,aADO;AAAA,SArBK;AAAA,KA1ET;AAAA,IAsG3B,IAAI/C,KAAA,CAAM2D,MAAV,EAAkB;AAAA,QACR3D,KAAA,CAAA2D,MAAA,GAASb,mBAAA,CAAoB9C,KAAA,CAAM2D,MAA1B,CAAT,CADQ;AAAA,KAtGS;AAAA,IA0G3B,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAAA,QAC5B,SAASC,YAAT,CAAsBvF,MAAtB,EAA8B;AAAA,YAC1B,OAAOA,MAAA,CAAO6E,KAAP,CAAa,GAAb,CAAkBhD,CAAAA,GAAlB,CAAuB2D,CAAD,IAAO;AAAA,gBAChC,OAAOA,CAAA,CAAEC,IAAF,EAAP,CADgC;AAAA,aAA7B,CAAP,CAD0B;AAAA,SADF;AAAA,QAOxB,IAAA7E,KAAA,CAAMC,OAAN,CAAcyE,IAAd,CAAA,EAAqB;AAAA,YAEd,OAAAA,IAAA,CAFc;AAAA,SAArB,MAIJ,IAAW,OAAOA,IAAP,KAAgB,QAA3B,EAAqC;AAAA,YACjC,OAAOC,YAAA,CAAaD,IAAb,CAAP,CADiC;AAAA,SAArC,MAGA,IAAW,OAAOA,IAAP,KAAgB,QAA3B,EAAqC;AAAA,YAC5BA,IAAA,CAAA3B,KAAA,CAAMX,OAAN,CAAesB,IAAD,IAAU;AAAA,gBACzBA,IAAA,CAAK,CAAL,CAAUiB,GAAAA,YAAA,CAAajB,IAAA,CAAK,CAAL,CAAb,CAAV,CADyB;AAAA,aAAxB,CAD4B,CAAA;AAAA,YAI1B,OAAAgB,IAAA,CAJ0B;AAAA,SAArC,MAMO;AAAA,YACG,MAAA,IAAIH,KAAJ,CAAU,uBAAV,CAAA,CADH;AAAA,SApBqB;AAAA,KA1GL;AAAA,IAmIjBzC,SAAA,CAAAjB,KAAA,EAAQK,KAAD,IAAW;AAAA,QACbuB,UAAA,CAAAvB,KAAA,EAAQM,MAAD,IAAY;AAAA,YACtB,IAAAA,MAAA,CAAO,WAAP,CAAA,EAAqB;AAAA,gBACrBA,MAAA,CAAO,WAAP,CAAsBiD,GAAAA,gBAAA,CAAiBjD,MAAA,CAAO,WAAP,CAAjB,CAAtB,CADqB;AAAA,aADC;AAAA,SAAnB,CADa,CAAA;AAAA,KAAlB,CAnIiB,CAAA;AAAA,IAwJ3B,IAAIsD,gBAAA,GAAmB,CAAvB,CAxJ2B;AAAA,IAyJ3B,KAAA,IAASxD,CAAA,GAAIT,KAAA,CAAMG,MAAN,CAAa3B,MAAb,GAAsB,CAAnC,EAAsCiC,CAAA,IAAK,CAA3C,EAA8CA,CAAA,EAA9C,EAAmD;AAAA,QACzC,MAAAJ,KAAA,GAAQL,KAAA,CAAMG,MAAN,CAAaM,CAAb,CAAR,CADyC;AAAA,QAE3C,IAAAJ,KAAA,CAAMgB,IAAN,KAAe,QAAf,EAAyB;AAAA,YACzB4C,gBAAA,GAAmBxD,CAAA,GAAI,CAAvB,CADyB;AAAA,YAEzB,MAFyB;AAAA,SAFkB;AAAA,KAzJxB;AAAA,IAiK3B,MAAMyD,YAAA,GAAelE,KAAA,CAAMG,MAAN,CAAagE,MAAb,CAAoBF,gBAApB,CAArB,CAjK2B;AAAA,IAkK3BC,YAAA,CAAavB,OAAb,EAlK2B,CAAA;AAAA,IAmK3B3C,KAAA,CAAMG,MAAN,GAAeH,KAAA,CAAMG,MAAN,CAAaiE,MAAb,CAAoBF,YAApB,CAAf,CAnK2B;AAAA,IAqKpB,OAAAlE,KAAA,CArKoB;AAAA;;ACnC/B,eAAwBqE,EAAAA,MAAxB,WAAA,EAAiE;AAAA,IAC7D,KAAWtB,MAAAA,KAAX,IAAoBuB,MAApB,EAA4B;AAAA,QACxB,KAAWvD,MAAAA,CAAX,IAAgBgC,KAAhB,EAAuB;AAAA,YACZsB,MAAA,CAAAtD,CAAA,CAAA,GAAKgC,KAAA,CAAMhC,CAAN,CAAL,CADY;AAAA,SADC;AAAA,KADiC;AAAA,IAMtD,OAAAsD,MAAA,CANsD;AAAA;;qBCAjE,MAAME,YAAN,SAA2Bb,KAA3B,CAAiC;AAAA,IAG7Bc,WAAA,CAAYhF,GAAZ,EAAyBiF,OAAzB,EAA0C;AAAA,QACtC,KAAA,CAAMA,OAAN,CADsC,CAAA;AAAA,QAEtC,IAAKA,CAAAA,OAAL,GAAeA,OAAf,CAFsC;AAAA,QAGtC,IAAKjF,CAAAA,GAAL,GAAWA,GAAX,CAHsC;AAAA,KAHb;AAAA;;ACMjC,MAAMkF,KAAN,CAAY;AAAA,IAKRF,WAAA,CAAYG,MAAZ,EAA4BC,QAAA,GAAwC,EAApE,EAAwE;AAAA,QACpE,IAAKD,CAAAA,MAAL,GAAcA,MAAd,CADoE;AAAA,QAEpE,IAAKC,CAAAA,QAAL,GAAgB,EAAhB,CAFoE;AAAA,QAGpE,KAAA,MAAW,CAACC,IAAD,EAAOC,UAAP,CAAX,IAAiCF,QAAjC,EAA2C;AAAA,YAClC,KAAAA,QAAA,CAASC,IAAT,CAAA,GAAiBC,UAAjB,CADkC;AAAA,SAHyB;AAAA,KALhE;AAAA,IAaRV,MAAA,CAAOQ,QAAP,EAAqD;AAAA,QAC1C,OAAA,IAAIF,KAAJ,CAAU,IAAV,EAAgBE,QAAhB,CAAA,CAD0C;AAAA,KAb7C;AAAA,IAiBRG,GAAA,CAAIF,IAAJ,EAA8B;AAAA,QACtB,IAAA,IAAKD,CAAAA,QAAL,CAAcC,IAAd,CAAA,EAAqB;AAAA,YAAS,OAAA,IAAKD,CAAAA,QAAL,CAAcC,IAAd,CAAA,CAAT;AAAA,SADC;AAAA,QAE1B,IAAI,IAAKF,CAAAA,MAAT,EAAiB;AAAA,YAAS,OAAA,KAAKA,MAAL,CAAYI,GAAZ,CAAgBF,IAAhB,CAAA,CAAT;AAAA,SAFS;AAAA,QAG1B,MAAM,IAAInB,KAAJ,CAAU,CAAA,GAAGmB,IAAH,EAA6B,oBAA7B,CAAV,CAAN,CAH0B;AAAA,KAjBtB;AAAA,IAuBRG,GAAA,CAAIH,IAAJ,EAA2B;AAAA,QACvB,IAAI,IAAA,CAAKD,QAAL,CAAcC,IAAd,CAAJ;AAAA,YAAgC,OAAA,IAAA,CADT;AAAA,QAEvB,OAAO,IAAA,CAAKF,MAAL,GAAc,IAAKA,CAAAA,MAAL,CAAYK,GAAZ,CAAgBH,IAAhB,CAAd,GAAsC,KAA7C,CAFuB;AAAA,KAvBnB;AAAA;;ACyCC,MAAAI,QAAA,GAAW,EAACC,IAAA,EAAM,MAAP,EAAX,CAAN;AACM,MAAAC,UAAA,GAAa,EAACD,IAAA,EAAM,QAAP,EAAb,CADN;AAEM,MAAAE,UAAA,GAAa,EAACF,IAAA,EAAM,QAAP,EAAb,CAFN;AAGM,MAAAG,WAAA,GAAc,EAACH,IAAA,EAAM,SAAP,EAAd,CAHN;AAIM,MAAAI,SAAA,GAAY,EAACJ,IAAA,EAAM,OAAP,EAAZ,CAJN;AAKM,MAAAK,UAAA,GAAa,EAACL,IAAA,EAAM,QAAP,EAAb,CALN;AAMM,MAAAM,SAAA,GAAY,EAACN,IAAA,EAAM,OAAP,EAAZ,CANN;AAOM,MAAAO,SAAA,GAAY,EAACP,IAAA,EAAM,OAAP,EAAZ,CAPN;AAQM,MAAAQ,YAAA,GAAe,EAACR,IAAA,EAAM,UAAP,EAAf,CARN;AASM,MAAAS,aAAA,GAAgB,EAACT,IAAA,EAAM,WAAP,EAAhB,CATN;AAUM,MAAAU,iBAAA,GAAoB,EAACV,IAAA,EAAM,eAAP,EAApB,CAVN;AAYS,SAAAW,OAAA,CAAMC,QAAN,EAAsBC,CAAtB,EAAoD;AAAA,IACzD,OAAA;AAAA,QACHb,IAAA,EAAM,OADH;AAAA,QAEHY,QAFG;AAAA,QAGHC,CAHG;AAAA,KAAA,CADyD;AAAA,CAZ7D;AAoBA,SAASC,UAAT,CAAkB3E,IAAlB,EAAsC;AAAA,IACrC,IAAAA,IAAA,CAAK6D,IAAL,KAAc,OAAd,EAAuB;AAAA,QACjB,MAAAY,QAAA,GAAWE,UAAA,CAAS3E,IAAA,CAAKyE,QAAd,CAAX,CADiB;AAAA,QAEvB,OAAO,OAAOzE,IAAA,CAAK0E,CAAZ,KAAkB,QAAlB,GACH,CAAA,MAAA,GAASD,QAAT,EAAsB,EAAtB,GAAsBzE,IAAA,CAAK0E,CAA3B,EAA4B,CAA5B,CADG,GAEH1E,IAAA,CAAKyE,QAAL,CAAcZ,IAAd,KAAuB,OAAvB,GAAiC,OAAjC,GAA2C,OAAA,GAASY,QAAT,EAAiB,CAAjB,CAF/C,CAFuB;AAAA,KAAvB,MAKG;AAAA,QACH,OAAOzE,IAAA,CAAK6D,IAAZ,CADG;AAAA,KANkC;AAAA,CApBtC;AA+BP,MAAMe,gBAAA,GAAmB;AAAA,IACrBhB,QADqB;AAAA,IAErBE,UAFqB;AAAA,IAGrBC,UAHqB;AAAA,IAIrBC,WAJqB;AAAA,IAKrBC,SALqB;AAAA,IAMrBK,aANqB;AAAA,IAOrBJ,UAPqB;AAAA,IAQrBM,OAAA,CAAML,SAAN,CARqB;AAAA,IASrBI,iBATqB;AAAA,CAAzB,CA/BO;AAgDS,SAAAM,YAAA,CAAaC,QAAb,EAA6BC,CAA7B,EAAiE;AAAA,IACzE,IAAAA,CAAA,CAAElB,IAAF,KAAW,OAAX,EAAoB;AAAA,QAEb,OAAA,IAAA,CAFa;AAAA,KAApB,MAGJ,IAAWiB,QAAA,CAASjB,IAAT,KAAkB,OAA7B,EAAsC;AAAA,QAC9B,IAAAkB,CAAA,CAAElB,IAAF,KAAW,OAAX,KACEkB,CAAA,CAAEL,CAAF,KAAQ,CAAR,IAAaK,CAAA,CAAEN,QAAF,CAAWZ,IAAX,KAAoB,OAAjC,IAA6C,CAACgB,YAAA,CAAaC,QAAA,CAASL,QAAtB,EAAgCM,CAAA,CAAEN,QAAlC,CAA9C,CADF,KAEC,OAAOK,QAAA,CAASJ,CAAhB,KAAsB,QAAtB,IAAkCI,QAAA,CAASJ,CAAT,KAAeK,CAAA,CAAEL,CAAnD,CAFD,EAEwD;AAAA,YACjD,OAAA,IAAA,CADiD;AAAA,SAH1B;AAAA,KAAtC,MAMW,IAAAI,QAAA,CAASjB,IAAT,KAAkBkB,CAAA,CAAElB,IAApB,EAA0B;AAAA,QAC1B,OAAA,IAAA,CAD0B;AAAA,KAA1B,MAEX,IAAWiB,QAAA,CAASjB,IAAT,KAAkB,OAA7B,EAAsC;AAAA,QAClC,KAAWmB,MAAAA,UAAX,IAAyBJ,gBAAzB,EAA2C;AAAA,YACvC,IAAI,CAACC,YAAA,CAAaG,UAAb,EAAyBD,CAAzB,CAAL,EAAkC;AAAA,gBACvB,OAAA,IAAA,CADuB;AAAA,aADK;AAAA,SADT;AAAA,KAZuC;AAAA,IAoB7E,OAAO,UAAA,GAAYJ,UAAA,CAASG,QAAT,CAAZ,EAA4C,WAA5C,GAA4CH,UAAA,CAASI,CAAT,CAA5C,EAAuD,SAAvD,CAAP,CApB6E;AAAA,CAhD1E;AAuES,SAAAE,WAAA,CAAYC,QAAZ,EAA4BC,YAA5B,EAAgE;AAAA,IAC5E,OAAOA,YAAA,CAAaC,IAAb,CAAkBL,CAAA,IAAKA,CAAA,CAAElB,IAAF,KAAWqB,QAAA,CAASrB,IAA3C,CAAP,CAD4E;AAAA,CAvEzE;AA2ES,SAAAwB,iBAAA,CAAkBH,QAAlB,EAAiCC,YAAjC,EAA2E;AAAA,IAChF,OAAAA,YAAA,CAAaC,IAAb,CAAuBL,CAAL,IAAK;AAAA,QAC1B,IAAIA,CAAA,KAAM,MAAV,EAAkB;AAAA,YACd,OAAOG,QAAA,KAAa,IAApB,CADc;AAAA,SAAlB,MAEA,IAAWH,CAAA,KAAM,OAAjB,EAA0B;AAAA,YACf,OAAAjH,KAAA,CAAMC,OAAN,CAAcmH,QAAd,CAAA,CADe;AAAA,SAA1B,MAEA,IAAWH,CAAA,KAAM,QAAjB,EAA2B;AAAA,YACvB,OAAOG,QAAA,IAAY,CAACpH,KAAA,CAAMC,OAAN,CAAcmH,QAAd,CAAb,IAAwC,OAAOA,QAAP,KAAoB,QAAnE,CADuB;AAAA,SAA3B,MAEO;AAAA,YACH,OAAOH,CAAA,KAAM,OAAOG,QAApB,CADG;AAAA,SAPmB;AAAA,KAAvB,CAAA,CADgF;AAAA;;;;;;;;;;;;;ACnG3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,IAAII,cAAA,GAAiB;AAAA,KACnB,aAAe,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,CAAH;AAAA,SAAK,CAAL;SAAO,CAAA;MADH;AAAA,KACO,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MADjC;AAAA,KAEnB,cAAgB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAFV;AAAA,KAEc,MAAQ,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,GAAP;SAAW,CAAA;MAFjC;AAAA,KAGnB,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAHR;AAAA,KAGY,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAHlC;AAAA,KAInB,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAJH;AAAA,KAIO,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAJ9B;AAAA,KAKnB,OAAS,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,CAAH;AAAA,SAAK,CAAL;SAAO,CAAA;MALG;AAAA,KAKC,gBAAkB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MALhC;AAAA,KAMnB,MAAQ,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,CAAH;AAAA,SAAK,GAAL;SAAS,CAAA;MANE;AAAA,KAME,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,GAAR;SAAY,CAAA;MAN5B;AAAA,KAOnB,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,EAAR;SAAW,CAAA;MAPD;AAAA,KAOK,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAP/B;AAAA,KAQnB,WAAa,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,GAAR;SAAY,CAAA;MARN;AAAA,KAQU,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,CAAT;SAAW,CAAA;MARnC;AAAA,KASnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;MATN;AAAA,KASU,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;MAT/B;AAAA,KAUnB,gBAAkB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAVZ;AAAA,KAUgB,UAAY,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAVzC;AAAA,KAWnB,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,EAAR;SAAW,CAAA;MAXH;AAAA,KAWO,MAAQ,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,GAAP;SAAW,CAAA;MAX1B;AAAA,KAYnB,UAAY,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,CAAH;AAAA,SAAK,GAAL;SAAS,CAAA;MAZF;AAAA,KAYM,UAAY,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,GAAP;SAAW,CAAA;MAZ7B;AAAA,KAanB,eAAiB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;MAbV;AAAA,KAac,UAAY,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAbvC;AAAA,KAcnB,WAAa,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,CAAP;SAAS,CAAA;MAdH;AAAA,KAcO,UAAY,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAdhC;AAAA,KAenB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAfP;AAAA,KAeW,aAAe,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,CAAL;AAAA,SAAO,GAAP;SAAW,CAAA;MAfrC;AAAA,KAgBnB,gBAAkB,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,EAAR;SAAW,CAAA;MAhBV;AAAA,KAgBc,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,CAAT;SAAW,CAAA;MAhBvC;AAAA,KAiBnB,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,GAAR;SAAY,CAAA;MAjBP;AAAA,KAiBW,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,CAAL;AAAA,SAAO,CAAP;SAAS,CAAA;MAjB/B;AAAA,KAkBnB,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAlBR;AAAA,KAkBY,cAAgB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAlBzC;AAAA,KAmBnB,eAAiB,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,EAAJ;AAAA,SAAO,GAAP;SAAW,CAAA;MAnBT;AAAA,KAmBa,eAAiB,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,EAAJ;AAAA,SAAO,EAAP;SAAU,CAAA;MAnBxC;AAAA,KAoBnB,eAAiB,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,EAAJ;AAAA,SAAO,EAAP;SAAU,CAAA;MApBR;AAAA,KAoBY,eAAiB,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,GAAP;SAAW,CAAA;MApBxC;AAAA,KAqBnB,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,CAAL;AAAA,SAAO,GAAP;SAAW,CAAA;MArBN;AAAA,KAqBU,UAAY,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,GAAR;SAAY,CAAA;MArBlC;AAAA,KAsBnB,aAAe,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,GAAP;SAAW,CAAA;MAtBP;AAAA,KAsBW,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAtBnC;AAAA,KAuBnB,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAvBL;AAAA,KAuBS,YAAc,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,GAAR;SAAY,CAAA;MAvBnC;AAAA,KAwBnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,EAAR;SAAW,CAAA;MAxBL;AAAA,KAwBS,aAAe,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAxBrC;AAAA,KAyBnB,aAAe,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,EAAR;SAAW,CAAA;MAzBP;AAAA,KAyBW,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,CAAL;AAAA,SAAO,GAAP;SAAW,CAAA;MAzBjC;AAAA,KA0BnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA1BP;AAAA,KA0BW,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA1BtC;AAAA,KA2BnB,MAAQ,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,CAAT;SAAW,CAAA;MA3BA;AAAA,KA2BI,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;MA3B7B;AAAA,KA4BnB,MAAQ,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA5BF;AAAA,KA4BM,OAAS,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,CAAP;SAAS,CAAA;MA5BxB;AAAA,KA6BnB,aAAe,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;MA7BR;AAAA,KA6BY,MAAQ,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA7BjC;AAAA,KA8BnB,UAAY,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA9BN;AAAA,KA8BU,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA9BlC;AAAA,KA+BnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,EAAR;SAAW,CAAA;MA/BL;AAAA,KA+BS,QAAU,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,CAAJ;AAAA,SAAM,GAAN;SAAU,CAAA;MA/B7B;AAAA,KAgCnB,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAhCH;AAAA,KAgCO,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAhC7B;AAAA,KAiCnB,UAAY,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAjCN;AAAA,KAiCU,eAAiB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAjCxC;AAAA,KAkCnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,CAAT;SAAW,CAAA;MAlCL;AAAA,KAkCS,cAAgB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAlCtC;AAAA,KAmCnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAnCP;AAAA,KAmCW,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAnCtC;AAAA,KAoCnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MApCP;AAAA,KAoCW,sBAAwB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MApChD;AAAA,KAqCnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MArCP;AAAA,KAqCW,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MArCtC;AAAA,KAsCnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAtCP;AAAA,KAsCW,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAtCrC;AAAA,KAuCnB,aAAe,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAvCT;AAAA,KAuCa,eAAiB,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,GAAR;SAAY,CAAA;MAvC1C;AAAA,KAwCnB,cAAgB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAxCV;AAAA,KAwCc,gBAAkB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAxC7C;AAAA,KAyCnB,gBAAkB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAzCZ;AAAA,KAyCgB,gBAAkB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAzC/C;AAAA,KA0CnB,aAAe,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA1CT;AAAA,KA0Ca,MAAQ,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,CAAP;SAAS,CAAA;MA1C9B;AAAA,KA2CnB,WAAa,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,EAAR;SAAW,CAAA;MA3CL;AAAA,KA2CS,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA3C/B;AAAA,KA4CnB,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,CAAL;AAAA,SAAO,GAAP;SAAW,CAAA;MA5CH;AAAA,KA4CO,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,CAAL;AAAA,SAAO,CAAP;SAAS,CAAA;MA5C1B;AAAA,KA6CnB,kBAAoB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA7Cd;AAAA,KA6CkB,YAAc,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,CAAH;AAAA,SAAK,GAAL;SAAS,CAAA;MA7CzC;AAAA,KA8CnB,cAAgB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,GAAR;SAAY,CAAA;MA9CT;AAAA,KA8Ca,cAAgB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA9C1C;AAAA,KA+CnB,gBAAkB,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,GAAR;SAAY,CAAA;MA/CX;AAAA,KA+Ce,iBAAmB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA/C/C;AAAA,KAgDnB,mBAAqB,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,GAAP;SAAW,CAAA;MAhDb;AAAA,KAgDiB,iBAAmB,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,GAAR;SAAY,CAAA;MAhDhD;AAAA,KAiDnB,iBAAmB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,GAAR;SAAY,CAAA;MAjDZ;AAAA,KAiDgB,cAAgB,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,EAAJ;AAAA,SAAO,GAAP;SAAW,CAAA;MAjD3C;AAAA,KAkDnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAlDP;AAAA,KAkDW,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAlDrC;AAAA,KAmDnB,UAAY,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAnDN;AAAA,KAmDU,aAAe,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAnDtC;AAAA,KAoDnB,MAAQ,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,CAAH;AAAA,SAAK,GAAL;SAAS,CAAA;MApDE;AAAA,KAoDE,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MApD1B;AAAA,KAqDnB,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,CAAT;SAAW,CAAA;MArDD;AAAA,KAqDK,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;MArD9B;AAAA,KAsDnB,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,CAAT;SAAW,CAAA;MAtDF;AAAA,KAsDM,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,CAAR;SAAU,CAAA;MAtD7B;AAAA,KAuDnB,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAvDJ;AAAA,KAuDQ,eAAiB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAvDtC;AAAA,KAwDnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAxDP;AAAA,KAwDW,eAAiB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAxDzC;AAAA,KAyDnB,eAAiB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAzDX;AAAA,KAyDe,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAzD1C;AAAA,KA0DnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA1DP;AAAA,KA0DW,MAAQ,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;MA1D/B;AAAA,KA2DnB,MAAQ,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA3DF;AAAA,KA2DM,MAAQ,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA3D3B;AAAA,KA4DnB,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA5DR;AAAA,KA4DY,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,CAAL;AAAA,SAAO,GAAP;SAAW,CAAA;MA5DjC;AAAA,KA6DnB,eAAiB,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,GAAR;SAAY,CAAA;MA7DV;AAAA,KA8DnB,KAAO,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,CAAL;AAAA,SAAO,CAAP;SAAS,CAAA;MA9DG;AAAA,KA8DC,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA9D3B;AAAA,KA+DnB,WAAa,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,GAAR;SAAY,CAAA;MA/DN;AAAA,KA+DU,aAAe,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,EAAR;SAAW,CAAA;MA/DpC;AAAA,KAgEnB,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAhEJ;AAAA,KAgEQ,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;MAhElC;AAAA,KAiEnB,UAAY,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,EAAR;SAAW,CAAA;MAjEJ;AAAA,KAiEQ,UAAY,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAjEjC;AAAA,KAkEnB,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,EAAR;SAAW,CAAA;MAlEF;AAAA,KAkEM,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAlE7B;AAAA,KAmEnB,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAnEL;AAAA,KAmES,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,GAAR;SAAY,CAAA;MAnElC;AAAA,KAoEnB,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MApEP;AAAA,KAoEW,WAAa,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MApErC;AAAA,KAqEnB,MAAQ,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MArEF;AAAA,KAqEM,aAAe,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,GAAP;SAAW,CAAA;MArEhC;AAAA,KAsEnB,WAAa,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,GAAR;SAAY,CAAA;MAtEN;AAAA,KAsEU,KAAO,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAtE9B;AAAA,KAuEnB,MAAQ,EAAA;AAAA,SAAC,CAAD;AAAA,SAAG,GAAH;AAAA,SAAO,GAAP;SAAW,CAAA;MAvEA;AAAA,KAuEI,SAAW,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAvE5B;AAAA,KAwEnB,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,EAAL;AAAA,SAAQ,EAAR;SAAW,CAAA;MAxEF;AAAA,KAwEM,WAAa,EAAA;AAAA,SAAC,EAAD;AAAA,SAAI,GAAJ;AAAA,SAAQ,GAAR;SAAY,CAAA;MAxE/B;AAAA,KAyEnB,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAzEJ;AAAA,KAyEQ,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MAzE9B;AAAA,KA0EnB,OAAS,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA1EH;AAAA,KA0EO,YAAc,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,GAAT;SAAa,CAAA;MA1ElC;AAAA,KA2EnB,QAAU,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,CAAT;SAAW,CAAA;MA3EF;AAAA,KA2EM,aAAe,EAAA;AAAA,SAAC,GAAD;AAAA,SAAK,GAAL;AAAA,SAAS,EAAT;SAAY,CAAA;AAAZ,MAAA;EA3E1C,CAAA;CA6EA,SAASC,cAAT,CAAwBnG,CAAxB,EAA2B;AAAA;AACzB,KAAAA,CAAA,GAAIoG,IAAA,CAAKC,KAAL,CAAWrG,CAAX,CAAJ,CAAA;AADyB;AAEzB,KAAA,OAAOA,CAAA,GAAI,CAAJ,GAAQ,CAAR,GAAYA,CAAA,GAAI,GAAJ,GAAU,GAAV,GAAgBA,CAAnC,CAAA;AAFyB,EAAA;CAK3B,SAASsG,eAAT,CAAyBC,CAAzB,EAA4B;AAAA;AAC1B,KAAA,OAAOA,CAAA,GAAI,CAAJ,GAAQ,CAAR,GAAYA,CAAA,GAAI,CAAJ,GAAQ,CAAR,GAAYA,CAA/B,CAAA;AAD0B,EAAA;CAI5B,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAAA;KACtBA,IAAAA,GAAA,CAAIA,GAAA,CAAI1I,MAAJ,GAAa,CAAjB,MAAwB,GAA5B;SACE,OAAOoI,cAAA,CAAeO,UAAA,CAAWD,GAAX,CAAA,GAAkB,GAAlB,GAAwB,GAAvC,CAAP,CAAA;AAFwB,KAG1B,OAAON,cAAA,CAAeQ,QAAA,CAASF,GAAT,CAAf,CAAP,CAAA;AAH0B,EAAA;CAM5B,SAASG,eAAT,CAAyBH,GAAzB,EAA8B;AAAA;KACxBA,IAAAA,GAAA,CAAIA,GAAA,CAAI1I,MAAJ,GAAa,CAAjB,MAAwB,GAA5B;SACE,OAAOuI,eAAA,CAAgBI,UAAA,CAAWD,GAAX,CAAA,GAAkB,GAAlC,CAAP,CAAA;AAF0B,KAG5B,OAAOH,eAAA,CAAgBI,UAAA,CAAWD,GAAX,CAAhB,CAAP,CAAA;AAH4B,EAAA;AAM9B,CAAA,SAASI,cAAT,CAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,CAAhC,EAAmC;KACjC,IAAIA,CAAA,GAAI,CAAR;SAAWA,CAAA,IAAK,CAAL,CAAA;UACN,IAAIA,CAAA,GAAI,CAAR;SAAWA,CAAA,IAAK,CAAL,CAAA;AAFiB,KAIjC,IAAIA,CAAA,GAAI,CAAJ,GAAQ,CAAZ;SAAe,OAAOF,EAAA,GAAM,CAAAC,EAAA,GAAKD,EAAL,IAAWE,CAAZ,GAAgB,CAA5B,CAAA;AAJkB,KAKjC,IAAIA,CAAA,GAAI,CAAJ,GAAQ,CAAZ;AAAA,SAAe,OAAOD,EAAP,CAAA;AALkB,KAMjC,IAAIC,CAAA,GAAI,CAAJ,GAAQ,CAAZ;AAAA,SAAe,OAAOF,EAAA,GAAM,CAAAC,EAAA,GAAKD,EAAL,KAAY,CAAA,GAAE,CAAF,GAAME,CAAN,CAAb,GAAwB,CAApC,CAAA;AANkB,KAOjC,OAAOF,EAAP,CAAA;AAPiC,EAAA;CAUnC,SAASG,aAAT,CAAuBC,OAAvB,EAAgC;AAAA;AAE9B,KAAA,IAAIT,GAAA,GAAMS,OAAA,CAAQjJ,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAA,CAA0BkJ,WAA1B,EAAV,CAAA;AAF8B;KAK1BV,IAAAA,GAAA,IAAOP,cAAX;AAAA,SAA2B,OAAOA,cAAA,CAAeO,GAAf,CAAoBpJ,CAAAA,KAApB,EAAP,CAAA;AALG;AAQ9B;AAAA,KAAA,IAAIoJ,GAAA,CAAI,CAAJ,CAAA,KAAW,GAAf,EAAoB;AAAA,SAClB,IAAIA,GAAA,CAAI1I,MAAJ,KAAe,CAAnB,EAAsB;AAAA,aACpB,IAAIqJ,EAAA,GAAKT,QAAA,CAASF,GAAA,CAAIY,MAAJ,CAAW,CAAX,CAAT,EAAwB,EAAxB,CAAT,CAAA;AADoB;aAEhB,IAAA,EAAED,EAAA,IAAM,CAAN,IAAWA,EAAA,IAAM,IAAjB,CAAN;AAAA,iBAA+B,OAAO,IAAP,CAAA;AAFX;AAGpB,aAAO,OAAA;AAAA,iBAAG,CAAAA,EAAA,GAAK,IAAL,KAAe,CAAjB,GAAwB,CAAAA,EAAA,GAAK,IAAL,KAAe,CAAxC;iBACEA,EAAA,GAAK,GAAN,GAAgB,CAAAA,EAAA,GAAK,GAAL,KAAc,CAD/B;iBAEEA,EAAA,GAAK,EAAN,GAAe,CAAAA,EAAA,GAAK,EAAL,KAAa,CAF7B;iBAGC,CAAA;cAHR,CAAA;AAHoB,UAAtB,MAOO,IAAIX,GAAA,CAAI1I,MAAJ,KAAe,CAAnB,EAAsB;AAAA,aAC3B,IAAIqJ,EAAA,GAAKT,QAAA,CAASF,GAAA,CAAIY,MAAJ,CAAW,CAAX,CAAT,EAAwB,EAAxB,CAAT,CAAA;AAD2B;aAEvB,IAAA,EAAED,EAAA,IAAM,CAAN,IAAWA,EAAA,IAAM,QAAjB,CAAN;AAAA,iBAAkC,OAAO,IAAP,CAAA;AAFP;AAG3B,aAAO,OAAA;AAAA,iBAAE,CAAAA,EAAA,GAAK,QAAL,KAAkB,EAApB;AAAA,iBACE,CAAAA,EAAA,GAAK,KAAL,KAAgB,CADlB;iBAECA,EAAA,GAAK,GAFN;iBAGC,CAAA;cAHR,CAAA;AAH2B,UAAA;AARX,SAiBlB,OAAO,IAAP,CAAA;AAjBkB,MAAA;AARU,KA4B9B,IAAIE,EAAA,GAAKb,GAAA,CAAIrF,OAAJ,CAAY,GAAZ,CAAT,EAA2BmG,EAAA,GAAKd,GAAA,CAAIrF,OAAJ,CAAY,GAAZ,CAAhC,CAAA;AA5B8B,KA6B9B,IAAIkG,EAAA,KAAO,CAAC,CAAR,IAAaC,EAAA,GAAK,CAAL,KAAWd,GAAA,CAAI1I,MAAhC,EAAwC;SACtC,IAAIyJ,KAAA,GAAQf,GAAA,CAAIY,MAAJ,CAAW,CAAX,EAAcC,EAAd,CAAZ,CAAA;SACA,IAAIG,MAAA,GAAShB,GAAA,CAAIY,MAAJ,CAAWC,EAAA,GAAG,CAAd,EAAiBC,EAAA,IAAID,EAAA,GAAG,CAAH,CAArB,EAA4B3E,KAA5B,CAAkC,GAAlC,CAAb,CAAA;SACA,IAAI+E,KAAA,GAAQ,CAAZ,CAAA;AAHsC;AAItC,SAAA,QAAQF,KAAR;AAAA,SACE,KAAK,MAAL;AAAA,aACE,IAAIC,MAAA,CAAO1J,MAAP,KAAkB,CAAtB;AAAA,iBAAyB,OAAO,IAAP,CAAA;aACzB2J,KAAA,GAAQd,eAAA,CAAgBa,MAAA,CAAOE,GAAP,EAAhB,CAAR,CAAA;AAHJ;AAKE,SAAA,KAAK,KAAL;AAAA,aACE,IAAIF,MAAA,CAAO1J,MAAP,KAAkB,CAAtB;AAAA,iBAAyB,OAAO,IAAP,CAAA;AAD3B,aAEE,OAAO;AAAA,iBAACyI,aAAA,CAAciB,MAAA,CAAO,CAAP,CAAd,CAAD;AAAA,iBACCjB,aAAA,CAAciB,MAAA,CAAO,CAAP,CAAd,CADD;AAAA,iBAECjB,aAAA,CAAciB,MAAA,CAAO,CAAP,CAAd,CAFD;iBAGCC,KAAAA;cAHR,CAAA;AAPJ,SAWE,KAAK,MAAL;AAAA,aACE,IAAID,MAAA,CAAO1J,MAAP,KAAkB,CAAtB;AAAA,iBAAyB,OAAO,IAAP,CAAA;aACzB2J,KAAA,GAAQd,eAAA,CAAgBa,MAAA,CAAOE,GAAP,EAAhB,CAAR,CAAA;AAbJ;AAeE,SAAA,KAAK,KAAL;AAAA,aACE,IAAIF,MAAA,CAAO1J,MAAP,KAAkB,CAAtB;AAAA,iBAAyB,OAAO,IAAP,CAAA;AAD3B,aAEE,IAAIiJ,CAAA,GAAM,CAACN,UAAA,CAAWe,MAAA,CAAO,CAAP,CAAX,CAAwB,GAAA,GAAzB,GAAgC,GAAhC,IAAuC,GAAzC,GAAgD,GAAxD,CAAA;AAFF;AAKE;AAAA;aAAInE,IAAAA,CAAA,GAAIsD,eAAA,CAAgBa,MAAA,CAAO,CAAP,CAAhB,CAAR,CAAA;aACA,IAAIG,CAAA,GAAIhB,eAAA,CAAgBa,MAAA,CAAO,CAAP,CAAhB,CAAR,CAAA;aACA,IAAIV,EAAA,GAAKa,CAAA,IAAK,GAAL,GAAWA,CAAA,IAAKtE,CAAA,GAAI,CAAJ,CAAhB,GAAyBsE,CAAA,GAAItE,CAAJ,GAAQsE,CAAA,GAAItE,CAA9C,CAAA;AAPF,aAQE,IAAIwD,EAAA,GAAKc,CAAA,GAAI,CAAJ,GAAQb,EAAjB,CAAA;AARF,aASE,OAAO;AAAA,iBAACZ,cAAA,CAAeU,cAAA,CAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,CAAA,GAAE,CAAA,GAAE,CAA3B,CAAA,GAAgC,GAA/C,CAAD;AAAA,iBACCb,cAAA,CAAeU,cAAA,CAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,CAAvB,CAA4B,GAAA,GAA3C,CADD;AAAA,iBAECb,cAAA,CAAeU,cAAA,CAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,CAAA,GAAE,CAAA,GAAE,CAA3B,CAAA,GAAgC,GAA/C,CAFD;iBAGCU,KAAAA;cAHR,CAAA;SAIF;AAAA,aACE,OAAO,IAAP,CAAA;AA7BJ,UAAA;AAJsC,MAAA;AA7BV,KAkE9B,OAAO,IAAP,CAAA;AAlE8B,EAAA;CAqEhC,IAAI;KAAEG,cAAAA,CAAAA,aAAA,GAAwBZ,aAAxB,CAAA;EAAN,CAA8C,OAAMa,CAAN,EAAS;AAAA,EAAA;;;;;;ACtMvC,SAAAC,MAAA,CAAOC,CAAP,EAAkBC,CAAlB,EAA6BtC,CAA7B,EAAgD;AAAA,IACpD,OAAAqC,CAAA,IAASrC,CAAAA,GAAAA,CAAJ,CAAL,GAAgBsC,CAAA,GAAItC,CAApB,CADoD;AAAA,CAFhE;AAMgB,SAAAuC,KAAA,CAAMvG,IAAN,EAAmBC,EAAnB,EAA8B+D,CAA9B,EAAgD;AAAA,IAC5D,OAAO,IAAIwC,KAAJ,CACHJ,MAAA,CAAOpG,IAAA,CAAKyG,CAAZ,EAAexG,EAAA,CAAGwG,CAAlB,EAAqBzC,CAArB,CADG,EAEHoC,MAAA,CAAOpG,IAAA,CAAK0G,CAAZ,EAAezG,EAAA,CAAGyG,CAAlB,EAAqB1C,CAArB,CAFG,EAGHoC,MAAA,CAAOpG,IAAA,CAAKsG,CAAZ,EAAerG,EAAA,CAAGqG,CAAlB,EAAqBtC,CAArB,CAHG,EAIHoC,MAAA,CAAOpG,IAAA,CAAKqG,CAAZ,EAAepG,EAAA,CAAGoG,CAAlB,EAAqBrC,CAArB,CAJG,CAAP,CAD4D;AAAA,CANhE;AAegB,SAAAP,KAAA,CAAMzD,IAAN,EAA2BC,EAA3B,EAA8C+D,CAA9C,EAAwE;AAAA,IACpF,OAAOhE,IAAA,CAAKhC,GAAL,CAAS,CAAC2I,CAAD,EAAItI,CAAJ,KAAU;AAAA,QACtB,OAAO+H,MAAA,CAAOO,CAAP,EAAU1G,EAAA,CAAG5B,CAAH,CAAV,EAAiB2F,CAAjB,CAAP,CADsB;AAAA,KAAnB,CAAP,CADoF;AAAA;;;;;;;;;ACCxF,MAAMwC,KAAN,CAAY;AAAA,IAMRpE,WAAA,CAAYqE,CAAZ,EAAuBC,CAAvB,EAAkCJ,CAAlC,EAA6CD,CAAA,GAAY,CAAzD,EAA4D;AAAA,QACxD,IAAKI,CAAAA,CAAL,GAASA,CAAT,CADwD;AAAA,QAExD,IAAKC,CAAAA,CAAL,GAASA,CAAT,CAFwD;AAAA,QAGxD,IAAKJ,CAAAA,CAAL,GAASA,CAAT,CAHwD;AAAA,QAIxD,IAAKD,CAAAA,CAAL,GAASA,CAAT,CAJwD;AAAA,KANpD;AAAA;AAuBR;AAAA;AAAA;AAAA,IAAO5J,OAAAA,KAAP,CAAakE,KAAb,EAA0D;AAAA,QACtD,IAAI,CAACA,KAAL,EAAY;AAAA,YACD,OAAA,KAAA,CAAA,CADC;AAAA,SAD0C;AAAA,QAKtD,IAAIA,KAAA,YAAiB6F,KAArB,EAA4B;AAAA,YACjB,OAAA7F,KAAA,CADiB;AAAA,SAL0B;AAAA,QASlD,IAAA,OAAOA,KAAP,KAAiB,QAAjB,EAA2B;AAAA,YACpB,OAAA,KAAA,CAAA,CADoB;AAAA,SATuB;AAAA,QAahD,MAAAiG,IAAA,GAAOtB,mCAAA,CAAc3E,KAAd,CAAP,CAbgD;AAAA,QActD,IAAI,CAACiG,IAAL,EAAW;AAAA,YACA,OAAA,KAAA,CAAA,CADA;AAAA,SAd2C;AAAA,QAkBtD,OAAO,IAAIJ,KAAJ,CACHI,IAAA,CAAK,CAAL,CAAU,GAAA,GAAV,GAAgBA,IAAA,CAAK,CAAL,CADb,EAEHA,IAAA,CAAK,CAAL,IAAU,GAAV,GAAgBA,IAAA,CAAK,CAAL,CAFb,EAGHA,IAAA,CAAK,CAAL,IAAU,GAAV,GAAgBA,IAAA,CAAK,CAAL,CAHb,EAIHA,IAAA,CAAK,CAAL,CAJG,CAAP,CAlBsD;AAAA,KAvBlD;AAAA;AA2DR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAhD,QAAA,GAAmB;AAAA,QACf,MAAM,CAAC6C,CAAD,EAAIC,CAAJ,EAAOJ,CAAP,EAAUD,CAAV,CAAe,GAAA,IAAA,CAAKA,CAAL,KAAW,CAAX,GAAe;AAAA,YAAC,CAAD;AAAA,YAAI,CAAJ;AAAA,YAAO,CAAP;AAAA,YAAU,CAAV;AAAA,SAAf,GAA8B;AAAA,YAC/C,KAAKI,CAAL,GAAS,GAAT,GAAe,KAAKJ,CAD2B;AAAA,YAE/C,KAAKK,CAAL,GAAS,GAAT,GAAe,KAAKL,CAF2B;AAAA,YAG/C,KAAKC,CAAL,GAAS,GAAT,GAAe,KAAKD,CAH2B;AAAA,YAI/C,KAAKA,CAJ0C;AAAA,SAAnD,CADe;AAAA,QAOf,OAAO,MAAA,GAAQ5B,IAAA,CAAKC,KAAL,CAAW+B,CAAX,CAAR,GAAA,GAAyBhC,IAAA,CAAKC,KAAL,CAAWgC,CAAX,CAAzB,GAAA,GAA0CjC,IAAA,CAAKC,KAAL,CAAW4B,CAAX,CAA1C,GAAA,GAA2DD,CAA3D,EAA4D,CAA5D,CAAP,CAPe;AAAA,KA3DX;AAAA,IAqERQ,aAAA,CAAcC,GAAd,EAA4C;AAAA,QACxC,MAAM,CAACL,CAAD,EAAIC,CAAJ,EAAOJ,CAAP,EAAUD,CAAV,CAAe,GAAA,IAArB,CADwC;AAAA,QAExC,OAAO,IAAIU,WAAJ,CAAgBD,GAAhB,EAAqBL,CAArB,EAAwBC,CAAxB,EAA2BJ,CAA3B,EAA8BD,CAA9B,CAAP,CAFwC;AAAA,KArEpC;AAAA,CAhBZ;AA8FO,MAAMU,WAAN,CAAkB;AAAA,IAMrB3E,WAAA,CAAY0E,GAAZ,EAA6BL,CAA7B,EAAwCC,CAAxC,EAAmDJ,CAAnD,EAA8DD,CAA9D,EAAyE;AAAA,QACrE,IAAI,CAACS,GAAL,EAAU;AAAA,YACN,IAAKL,CAAAA,CAAL,GAASA,CAAT,CADM;AAAA,YAEN,IAAKC,CAAAA,CAAL,GAASA,CAAT,CAFM;AAAA,YAGN,IAAKJ,CAAAA,CAAL,GAASA,CAAT,CAHM;AAAA,YAIN,IAAKD,CAAAA,CAAL,GAASA,CAAT,CAJM;AAAA,SAAV,MAKO;AAAA,YACG,MAAA1C,CAAA,GAAImD,GAAA,CAAIE,KAAJ,CAAUC,MAAd,CADH;AAAA,YAEH,MAAMC,EAAA,GAAKvD,CAAA,GAAIA,CAAf,CAFG;AAAA,YAIH8C,CAAA,GAAIJ,CAAA,KAAM,CAAN,GAAU,CAAV,GAAeI,CAAA,GAAIJ,CAAJ,IAAU1C,CAAA,GAAI,CAAJ,CAA7B,CAJG;AAAA,YAKH+C,CAAA,GAAIL,CAAA,KAAM,CAAN,GAAU,CAAV,GAAeK,CAAA,GAAIL,CAAJ,IAAU1C,CAAA,GAAI,CAAJ,CAA7B,CALG;AAAA,YAMH2C,CAAA,GAAID,CAAA,KAAM,CAAN,GAAU,CAAV,GAAeC,CAAA,GAAID,CAAJ,IAAU1C,CAAA,GAAI,CAAJ,CAA7B,CANG;AAAA,YASG,MAAAwD,EAAA,GAAK1C,IAAA,CAAK2C,KAAL,CAAWX,CAAX,CAAL,CATH;AAAA,YAUG,MAAAY,EAAA,GAAK5C,IAAA,CAAK2C,KAAL,CAAWV,CAAX,CAAL,CAVH;AAAA,YAWG,MAAAY,EAAA,GAAK7C,IAAA,CAAK2C,KAAL,CAAWd,CAAX,CAAL,CAXH;AAAA,YAYG,MAAAiB,EAAA,GAAK9C,IAAA,CAAK+C,IAAL,CAAUf,CAAV,CAAL,CAZH;AAAA,YAaG,MAAAgB,EAAA,GAAKhD,IAAA,CAAK+C,IAAL,CAAUd,CAAV,CAAL,CAbH;AAAA,YAcG,MAAAgB,EAAA,GAAKjD,IAAA,CAAK+C,IAAL,CAAUlB,CAAV,CAAL,CAdH;AAAA,YAiBH,MAAMqB,EAAA,GAAKlB,CAAA,GAAIU,EAAf,CAjBG;AAAA,YAkBH,MAAMS,EAAA,GAAKlB,CAAA,GAAIW,EAAf,CAlBG;AAAA,YAmBH,MAAMQ,EAAA,GAAKvB,CAAA,GAAIgB,EAAf,CAnBG;AAAA,YAqBG,MAAAQ,IAAA,GAAOhB,GAAA,CAAIE,KAAJ,CAAUc,IAAjB,CArBH;AAAA,YAsBH,MAAMC,EAAA,GAAM,CAAAZ,EAAA,GAAKE,EAAA,GAAKH,EAAV,GAAeI,EAAA,GAAK3D,CAApB,IAAyB,CAArC,CAtBG;AAAA,YAuBH,MAAMqE,EAAA,GAAM,CAAAb,EAAA,GAAKE,EAAA,GAAKH,EAAV,GAAeQ,EAAA,GAAK/D,CAApB,IAAyB,CAArC,CAvBG;AAAA,YAwBH,MAAMsE,EAAA,GAAM,CAAAd,EAAA,GAAKM,EAAA,GAAKP,EAAV,GAAeI,EAAA,GAAK3D,CAApB,IAAyB,CAArC,CAxBG;AAAA,YAyBH,MAAMuE,EAAA,GAAM,CAAAf,EAAA,GAAKM,EAAA,GAAKP,EAAV,GAAeQ,EAAA,GAAK/D,CAApB,IAAyB,CAArC,CAzBG;AAAA,YA0BH,MAAMwE,EAAA,GAAM,CAAAZ,EAAA,GAAKF,EAAA,GAAKH,EAAV,GAAeI,EAAA,GAAK3D,CAApB,IAAyB,CAArC,CA1BG;AAAA,YA2BH,MAAMyE,EAAA,GAAM,CAAAb,EAAA,GAAKF,EAAA,GAAKH,EAAV,GAAeQ,EAAA,GAAK/D,CAApB,IAAyB,CAArC,CA3BG;AAAA,YA4BH,MAAM0E,EAAA,GAAM,CAAAd,EAAA,GAAKE,EAAA,GAAKP,EAAV,GAAeI,EAAA,GAAK3D,CAApB,IAAyB,CAArC,CA5BG;AAAA,YA6BH,MAAM2E,EAAA,GAAM,CAAAf,EAAA,GAAKE,EAAA,GAAKP,EAAV,GAAeQ,EAAA,GAAK/D,CAApB,IAAyB,CAArC,CA7BG;AAAA,YA8BH,IAAIoE,EAAA,GAAK,CAAL,IAAUO,EAAA,IAAMR,IAAA,CAAK1L,MAAzB,EAAiC;AAAA,gBACvB,MAAA,IAAIkF,KAAJ,CAAU,cAAV,CAAA,CADuB;AAAA,aA9B9B;AAAA,YAmCH,KAAKmF,CAAL,GAAS8B,MAAA,CACLA,MAAA,CACIA,MAAA,CAAKT,IAAA,CAAKC,EAAL,CAAL,EAAeD,IAAA,CAAKE,EAAL,CAAf,EAAyBH,EAAzB,CADJ,EAEIU,MAAA,CAAKT,IAAA,CAAKG,EAAL,CAAL,EAAeH,IAAA,CAAKI,EAAL,CAAf,EAAyBL,EAAzB,CAFJ,EAEkCD,EAFlC,CADK,EAILW,MAAA,CACIA,MAAA,CAAKT,IAAA,CAAKK,EAAL,CAAL,EAAeL,IAAA,CAAKM,EAAL,CAAf,EAAyBP,EAAzB,CADJ,EAEIU,MAAA,CAAKT,IAAA,CAAKO,EAAL,CAAL,EAAeP,IAAA,CAAKQ,EAAL,CAAf,EAAyBT,EAAzB,CAFJ,EAEkCD,EAFlC,CAJK,EAMkCD,EANlC,IAMwC,GANxC,GAM8CtB,CANvD,CAnCG;AAAA,YA0CH,IAAA,CAAKK,CAAL,GAAS6B,MAAA,CACLA,MAAA,CACIA,MAAA,CAAKT,IAAA,CAAKC,EAAA,GAAK,CAAV,CAAL,EAAmBD,IAAA,CAAKE,EAAA,GAAK,CAAV,CAAnB,EAAiCH,EAAjC,CADJ,EAEIU,MAAA,CAAKT,IAAA,CAAKG,EAAA,GAAK,CAAV,CAAL,EAAmBH,IAAA,CAAKI,EAAA,GAAK,CAAV,CAAnB,EAAiCL,EAAjC,CAFJ,EAE0CD,EAF1C,CADK,EAILW,MAAA,CACIA,MAAA,CAAKT,IAAA,CAAKK,EAAA,GAAK,CAAV,CAAL,EAAmBL,IAAA,CAAKM,EAAA,GAAK,CAAV,CAAnB,EAAiCP,EAAjC,CADJ,EAEIU,MAAA,CAAKT,IAAA,CAAKO,EAAA,GAAK,CAAV,CAAL,EAAmBP,IAAA,CAAKQ,EAAA,GAAK,CAAV,CAAnB,EAAiCT,EAAjC,CAFJ,EAE0CD,EAF1C,CAJK,EAM0CD,EAN1C,CAMgD,GAAA,GANhD,GAMsDtB,CAN/D,CA1CG;AAAA,YAiDH,IAAA,CAAKC,CAAL,GAASiC,MAAA,CACLA,MAAA,CACIA,MAAA,CAAKT,IAAA,CAAKC,EAAA,GAAK,CAAV,CAAL,EAAmBD,IAAA,CAAKE,EAAA,GAAK,CAAV,CAAnB,EAAiCH,EAAjC,CADJ,EAEIU,MAAA,CAAKT,IAAA,CAAKG,EAAA,GAAK,CAAV,CAAL,EAAmBH,IAAA,CAAKI,EAAA,GAAK,CAAV,CAAnB,EAAiCL,EAAjC,CAFJ,EAE0CD,EAF1C,CADK,EAILW,MAAA,CACIA,MAAA,CAAKT,IAAA,CAAKK,EAAA,GAAK,CAAV,CAAL,EAAmBL,IAAA,CAAKM,EAAA,GAAK,CAAV,CAAnB,EAAiCP,EAAjC,CADJ,EAEIU,MAAA,CAAKT,IAAA,CAAKO,EAAA,GAAK,CAAV,CAAL,EAAmBP,IAAA,CAAKQ,EAAA,GAAK,CAAV,CAAnB,EAAiCT,EAAjC,CAFJ,EAE0CD,EAF1C,CAJK,EAM0CD,EAN1C,CAMgD,GAAA,GANhD,GAMsDtB,CAN/D,CAjDG;AAAA,YAwDH,IAAKA,CAAAA,CAAL,GAASA,CAAT,CAxDG;AAAA,SAN8D;AAAA,KANpD;AAAA;AA6ErB;AAAA;AAAA;AAAA;AAAA,IAAAmC,OAAA,GAA4C;AAAA,QACxC,MAAM,CAAC/B,CAAD,EAAIC,CAAJ,EAAOJ,CAAP,EAAUD,CAAV,CAAe,GAAA,IAArB,CADwC;AAAA,QAExC,OAAOA,CAAA,KAAM,CAAN,GAAU;AAAA,YAAC,CAAD;AAAA,YAAI,CAAJ;AAAA,YAAO,CAAP;AAAA,YAAU,CAAV;AAAA,SAAV,GAAyB;AAAA,YAC5BI,CAAA,GAAI,GAAJ,GAAUJ,CADkB;AAAA,YAE5BK,CAAA,GAAI,GAAJ,GAAUL,CAFkB;AAAA,YAG5BC,CAAA,GAAI,GAAJ,GAAUD,CAHkB;AAAA,YAI5BA,CAJ4B;AAAA,SAAhC,CAFwC;AAAA,KA7EvB;AAAA;AA4FrB;AAAA;AAAA;AAAA;AAAA,IAAAoC,SAAA,GAA8C;AAAA,QAC1C,MAAM,CAAChC,CAAD,EAAIC,CAAJ,EAAOJ,CAAP,EAAUD,CAAV,CAAe,GAAA,IAArB,CAD0C;AAAA,QAE1C,OAAOA,CAAA,KAAM,CAAN,GAAU;AAAA,YAAC,CAAD;AAAA,YAAI,CAAJ;AAAA,YAAO,CAAP;AAAA,YAAU,CAAV;AAAA,SAAV,GAAyB;AAAA,YAC5BI,CAAA,GAAIJ,CADwB;AAAA,YAE5BK,CAAA,GAAIL,CAFwB;AAAA,YAG5BC,CAAA,GAAID,CAHwB;AAAA,YAI5BA,CAJ4B;AAAA,SAAhC,CAF0C;AAAA,KA5FzB;AAAA;AA4GrB;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAqC,eAAA,CAAgBC,KAAhB,EAAyD;AAAA,QACrD,MAAM,CAAClC,CAAD,EAAIC,CAAJ,EAAOJ,CAAP,EAAUD,CAAV,CAAe,GAAA,IAArB,CADqD;AAAA,QAErD,OAAOA,CAAA,KAAM,CAAN,GAAU;AAAA,YAAC,CAAD;AAAA,YAAI,CAAJ;AAAA,YAAO,CAAP;AAAA,SAAV,GAAsB;AAAA,YACxBI,CAAA,GAAIJ,CAAJ,GAASsC,KADe;AAAA,YAExBjC,CAAA,GAAIL,CAAJ,GAASsC,KAFe;AAAA,YAGxBrC,CAAA,GAAID,CAAJ,GAASsC,KAHe;AAAA,SAA7B,CAFqD;AAAA,KA5GpC;AAAA;AA0HrB;AAAA;AAAA;AAAA;AAAA,IAAAC,2BAAA,GAAgE;AAAA,QAC5D,MAAM,CAACnC,CAAD,EAAIC,CAAJ,EAAOJ,CAAP,EAAUD,CAAV,CAAe,GAAA,IAArB,CAD4D;AAAA,QAErD,OAAA;AAAA,YACHI,CADG;AAAA,YAEHC,CAFG;AAAA,YAGHJ,CAHG;AAAA,YAIHD,CAJG;AAAA,SAAA,CAFqD;AAAA,KA1H3C;AAAA;AA0IrB;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAwC,eAAA,GAAoD;AAAA,QAChD,MAAM,CAACpC,CAAD,EAAIC,CAAJ,EAAOJ,CAAP,EAAUD,CAAV,CAAe,GAAA,IAArB,CADgD;AAAA,QAEhD,OAAOA,CAAA,KAAM,CAAN,GAAU;AAAA,YAAC,CAAD;AAAA,YAAI,CAAJ;AAAA,YAAO,CAAP;AAAA,YAAU,CAAV;AAAA,SAAV,GAAyB;AAAA,YAC5B5B,IAAA,CAAKqE,GAAL,CAAUrC,CAAA,GAAIJ,CAAd,EAAkB,GAAlB,CAD4B;AAAA,YAE5B5B,IAAA,CAAKqE,GAAL,CAAUpC,CAAA,GAAIL,CAAd,EAAkB,GAAlB,CAF4B;AAAA,YAG5B5B,IAAA,CAAKqE,GAAL,CAAUxC,CAAA,GAAID,CAAd,EAAkB,GAAlB,CAH4B;AAAA,YAI5BA,CAJ4B;AAAA,SAAhC,CAFgD;AAAA,KA1I/B;AAAA,CA9FzB;AAmPAG,KAAA,CAAMuC,KAAN,GAAc,IAAIvC,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAd,CAnPA;AAoPAA,KAAA,CAAMwC,KAAN,GAAc,IAAIxC,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAd,CApPA;AAqPAA,KAAA,CAAMyC,WAAN,GAAoB,IAAIzC,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAApB,CArPA;AAsPAA,KAAA,CAAM0C,GAAN,GAAY,IAAI1C,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAZ,CAtPA;AAuPAA,KAAA,CAAM2C,IAAN,GAAa,IAAI3C,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAb;;ACvPA,MAAqB4C,QAArB,CAA8B;AAAA,IAK1BhH,WAAA,CAAYiH,aAAZ,EAAoCC,kBAApC,EAAiEC,MAAjE,EAAwF;AAAA,QAChF,IAAAF,aAAA;AAAA,YACK,IAAA,CAAAG,WAAA,GAAcF,kBAAA,GAAqB,SAArB,GAAiC,MAA/C,CADL;AAAA;AAAA,YAGK,IAAA,CAAAE,WAAA,GAAcF,kBAAA,GAAqB,QAArB,GAAgC,MAA9C,CAJ2E;AAAA,QAMpF,IAAKC,CAAAA,MAAL,GAAcA,MAAd,CANoF;AAAA,QAO/E,IAAAE,CAAAA,QAAA,GAAW,IAAIC,IAAA,CAAKN,QAAT,CAAkB,IAAA,CAAKG,MAAL,GAAc,IAAA,CAAKA,MAAnB,GAA4B,EAA9C,EACZ;AAAA,YAACC,WAAA,EAAa,IAAA,CAAKA,WAAnB;AAAA,YAAgCG,KAAA,EAAO,QAAvC;AAAA,SADY,CAAX,CAP+E;AAAA,KAL9D;AAAA,IAgB1BC,OAAA,CAAQC,GAAR,EAAqBC,GAArB,EAA0C;AAAA,QACtC,OAAO,IAAKL,CAAAA,QAAL,CAAcG,OAAd,CAAsBC,GAAtB,EAA2BC,GAA3B,CAAP,CADsC;AAAA,KAhBhB;AAAA,IAoB1BC,cAAA,GAAyB;AAAA,QAGd,OAAA,IAAIL,IAAA,CAAKN,QAAT,CAAkB,IAAKG,CAAAA,MAAL,GAAc,IAAA,CAAKA,MAAnB,GAA4B,EAA9C,EACFS,eADE,EAAA,CACgBT,MADhB,CAHc;AAAA,KApBC;AAAA;;ACGvB,MAAMU,gBAAN,CAAuB;AAAA,IAO1B7H,WAAA,CAAY8H,IAAZ,EAA0BlD,KAA1B,EAAuD2B,KAAvD,EAA6EwB,SAA7E,EAAuGC,SAAvG,EAAgI;AAAA,QAE5H,IAAKF,CAAAA,IAAL,GAAYA,IAAA,CAAKG,SAAL,GAAiBH,IAAA,CAAKG,SAAL,EAAjB,GAAoCH,IAAhD,CAF4H;AAAA,QAG5H,IAAKlD,CAAAA,KAAL,GAAaA,KAAb,CAH4H;AAAA,QAI5H,IAAK2B,CAAAA,KAAL,GAAaA,KAAb,CAJ4H;AAAA,QAK5H,IAAKwB,CAAAA,SAAL,GAAiBA,SAAjB,CAL4H;AAAA,QAM5H,IAAKC,CAAAA,SAAL,GAAiBA,SAAjB,CAN4H;AAAA,KAPtG;AAAA,CAAvB;AAiBP,MAAqBE,SAArB,CAA+B;AAAA,IAG3BlI,WAAA,CAAYmI,QAAZ,EAA+C;AAAA,QAC3C,IAAKA,CAAAA,QAAL,GAAgBA,QAAhB,CAD2C;AAAA,KAHpB;AAAA,IAO3B,OAAOC,UAAP,CAAkBC,WAAlB,EAAkD;AAAA,QACvC,OAAA,IAAIH,SAAJ,CAAc,CAAC,IAAIL,gBAAJ,CAAqBQ,WAArB,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAAD,CAAd,CAAA,CADuC;AAAA,KAPvB;AAAA,IAW3BC,OAAA,GAAmB;AAAA,QACf,IAAI,IAAKH,CAAAA,QAAL,CAAcnO,MAAd,KAAyB,CAA7B;AAAA,YAAuC,OAAA,IAAA,CADxB;AAAA,QAEf,OAAO,CAAC,IAAKmO,CAAAA,QAAL,CAAclG,IAAd,QAAmB,IAAWsG,OAAA,CAAQT,IAAR,CAAa9N,MAAb,KAAwB,CAAxB,IACAuO,OAAA,CAAQ3D,KAAR,IAAiB2D,OAAA,CAAQ3D,KAAR,CAAc4D,WAAd,CAA0BxO,MAA1B,KAAqC,CADpF,CAAR,CAFe;AAAA,KAXQ;AAAA,IAiB3B,OAAOyO,OAAP,CAAeX,IAAf,EAAoD;AAAA,QAChD,IAAIA,IAAA,YAAgBI,SAApB,EAA+B;AAAA,YACpB,OAAAJ,IAAA,CADoB;AAAA,SAA/B,MAEO;AAAA,YACI,OAAAI,SAAA,CAAUE,UAAV,CAAqBN,IAArB,CAAA,CADJ;AAAA,SAHyC;AAAA,KAjBzB;AAAA,IAyB3BtG,QAAA,GAAmB;AAAA,QACf,IAAI,IAAK2G,CAAAA,QAAL,CAAcnO,MAAd,KAAyB,CAA7B;AAAA,YAAuC,OAAA,EAAA,CADxB;AAAA,QAER,OAAA,IAAKmO,CAAAA,QAAL,CAAcvM,GAAd,CAAkB2M,OAAA,IAAWA,OAAA,CAAQT,IAArC,CAA2C3M,CAAAA,IAA3C,CAAgD,EAAhD,CAAA,CAFQ;AAAA,KAzBQ;AAAA,IA8B3BuN,SAAA,GAA4B;AAAA,QAClB,MAAAC,UAAA,GAA6B,CAAC,QAAD,CAA7B,CADkB;AAAA,QAEb,KAAAJ,MAAAA,OAAA,IAAW,IAAA,CAAKJ,QAAhB,EAA0B;AAAA,YACjC,IAAII,OAAA,CAAQ3D,KAAZ,EAAmB;AAAA,gBACf+D,UAAA,CAAW9N,IAAX,CAAgB;AAAA,oBAAC,OAAD;AAAA,oBAAU0N,OAAA,CAAQ3D,KAAR,CAAc4D,WAAxB;AAAA,iBAAhB,CADe,CAAA;AAAA,gBAEf,SAFe;AAAA,aADc;AAAA,YAKtBG,UAAA,CAAA9N,IAAA,CAAK0N,OAAA,CAAQT,IAAb,CALsB,CAAA;AAAA,YAMjC,MAAM5O,OAAA,GAEF,EAFJ,CANiC;AAAA,YASjC,IAAIqP,OAAA,CAAQR,SAAZ,EAAuB;AAAA,gBACX7O,OAAA,CAAA,WAAA,CAAe,GAAA;AAAA,oBAAC,SAAD;AAAA,oBAAYqP,OAAA,CAAQR,SAAR,CAAkBnJ,KAAlB,CAAwB,GAAxB,CAAZ;AAAA,iBAAf,CADW;AAAA,aATU;AAAA,YAYjC,IAAI2J,OAAA,CAAQhC,KAAZ,EAAmB;AAAA,gBACPrN,OAAA,CAAA,YAAA,IAAgBqP,OAAA,CAAQhC,KAAxB,CADO;AAAA,aAZc;AAAA,YAejC,IAAIgC,OAAA,CAAQP,SAAZ,EAAuB;AAAA,gBACnB9O,OAAA,CAAQ,YAAR,CAAA,GAAyB,CAAC,MAAD,CAAA,CAA4B0G,MAA5B,CAAmC2I,OAAA,CAAQP,SAAR,CAAkBvD,aAAlB,CAAgC,IAAhC,EAAsC2B,OAAtC,EAAnC,CAAzB,CADmB;AAAA,aAfU;AAAA,YAkBjCuC,UAAA,CAAW9N,IAAX,CAAgB3B,OAAhB,CAlBiC,CAAA;AAAA,SAFb;AAAA,QAsBjB,OAAAyP,UAAA,CAtBiB;AAAA,KA9BD;AAAA;;ACd/B,MAAqBC,aAArB,CAAmC;AAAA,IAK/B5I,WAAA,CAAY9G,OAAZ,EAA2C;AAAA,QACvC,KAAKsP,WAAL,GAAmBtP,OAAA,CAAQsP,WAA3B,CADuC;AAAA,QAEvC,IAAItP,OAAA,CAAQ2P,aAAZ,EAA2B;AAAA,YACvB,KAAKA,aAAL,GAAqB3P,OAAA,CAAQ2P,aAA7B,CADuB;AAAA,SAFY;AAAA,QAKvC,KAAKC,SAAL,GAAiB5P,OAAA,CAAQ4P,SAAzB,CALuC;AAAA,KALZ;AAAA,IAa/BtH,QAAA,GAAmB;AAAA,QACf,IAAI,IAAKqH,CAAAA,aAAT,EAAwB;AAAA,YACpB,OAAO,CAAI,CAAJ,GAAI,KAAKL,WAAT,EAAoB,CAApB,GAAwB,IAAKK,CAAAA,aAA7B,EAA0C,CAA1C,CAAP,CADoB;AAAA,SADT;AAAA,QAIf,OAAO,IAAKL,CAAAA,WAAZ,CAJe;AAAA,KAbY;AAAA,IAoB/B,OAAOJ,UAAP,CAAkBI,WAAlB,EAAuCK,aAAvC,EAA4F;AAAA,QACpF,IAAA,CAACL,WAAD;AAAA,YAAqB,OAAA,IAAA,CAD+D;AAAA,QAExF,OAAO,IAAII,aAAJ,CAAkB;AAAA,YAACJ,WAAD;AAAA,YAAcK,aAAd;AAAA,YAA6BC,SAAA,EAAW,KAAxC;AAAA,SAAlB,CAAP,CAFwF;AAAA,KApB7D;AAAA,IAyB/BJ,SAAA,GAA2B;AAAA,QACvB,IAAI,IAAKG,CAAAA,aAAT,EAAwB;AAAA,YACpB,OAAO;AAAA,gBAAC,OAAD;AAAA,gBAAU,KAAKL,WAAf;AAAA,gBAA4B,KAAKK,aAAjC;AAAA,aAAP,CADoB;AAAA,SADD;AAAA,QAIhB,OAAA;AAAA,YAAC,OAAD;AAAA,YAAU,KAAKL,WAAf;AAAA,SAAA,CAJgB;AAAA,KAzBI;AAAA;;ACG5B,SAASO,YAAT,CAAsB1E,CAAtB,EAAkCC,CAAlC,EAA8CJ,CAA9C,EAA0DD,CAA1D,EAAsF;AAAA,IACrF,IAAA,EACA,OAAOI,CAAP,KAAa,QAAb,IAAyBA,CAAA,IAAK,CAA9B,IAAmCA,CAAA,IAAK,GAAxC,IACA,OAAOC,CAAP,KAAa,QADb,IACyBA,CAAA,IAAK,CAD9B,IACmCA,CAAA,IAAK,GADxC,IAEA,OAAOJ,CAAP,KAAa,QAFb,IAEyBA,CAAA,IAAK,CAF9B,IAEmCA,CAAA,IAAK,GAFxC,CADA,EAID;AAAA,QACC,MAAMhJ,KAAA,GAAQ,OAAO+I,CAAP,KAAa,QAAb,GAAwB;AAAA,YAACI,CAAD;AAAA,YAAIC,CAAJ;AAAA,YAAOJ,CAAP;AAAA,YAAUD,CAAV;AAAA,SAAxB,GAAuC;AAAA,YAACI,CAAD;AAAA,YAAIC,CAAJ;AAAA,YAAOJ,CAAP;AAAA,SAArD,CADD;AAAA,QAEC,OAAO,CAAuB,oBAAvB,GAAuBhJ,KAAA,CAAMC,IAAN,CAAW,IAAX,CAAvB,EAAuC,+CAAvC,CAAP,CAFD;AAAA,KALsF;AAAA,IAUrF,IAAA,EACO8I,OAAAA,CAAP,KAAa,WAAb,IAA6B,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAA,IAAK,CAA9B,IAAmCA,CAAA,IAAK,CAArE,CADA,EAED;AAAA,QACQ,OAAA,CAAA,oBAAA,GAAuB;AAAA,YAACI,CAAD;AAAA,YAAIC,CAAJ;AAAA,YAAOJ,CAAP;AAAA,YAAUD,CAAV;AAAA,SAAA,CAAa9I,IAAb,CAAkB,IAAlB,CAAvB,EAA8C,+BAA9C,CAAA,CADR;AAAA,KAZsF;AAAA,IAgBlF,OAAA,IAAA,CAhBkF;AAAA,CAT7F;AA4BO,SAAS6N,YAAT,CAAsB/F,CAAtB,EAAkC1D,CAAlC,EAA8CsE,CAA9C,EAA0DI,CAA1D,EAAsF;AAAA,IACzF,IAAI,EACOhB,OAAAA,CAAP,KAAa,QAAb,IAAyBA,CAAA,IAAK,CAA9B,IAAmCA,CAAA,IAAK,GAAxC,CADJ,EAEG;AAAA,QACC,MAAM/H,KAAA,GAAQ,OAAO+I,CAAP,KAAa,QAAb,GAAwB;AAAA,YAAChB,CAAD;AAAA,YAAI1D,CAAJ;AAAA,YAAOsE,CAAP;AAAA,YAAUI,CAAV;AAAA,SAAxB,GAAuC;AAAA,YAAChB,CAAD;AAAA,YAAI1D,CAAJ;AAAA,YAAOsE,CAAP;AAAA,SAArD,CADD;AAAA,QAEC,OAAO,CAAuB,oBAAvB,GAAuB3I,KAAA,CAAMC,IAAN,CAAW,IAAX,CAAvB,EAAuC,iCAAvC,CAAP,CAFD;AAAA,KAHsF;AAAA,IAQzF,IAAI,EACOoE,OAAAA,CAAP,KAAa,QAAb,IAAyBA,CAAA,IAAK,CAA9B,IAAmCA,CAAA,IAAK,GAAxC,IACA,OAAOsE,CAAP,KAAa,QADb,IACyBA,CAAA,IAAK,CAD9B,IACmCA,CAAA,IAAK,GADxC,CADJ,EAGG;AAAA,QACC,MAAM3I,KAAA,GAAQ,OAAO+I,CAAP,KAAa,QAAb,GAAwB;AAAA,YAAChB,CAAD;AAAA,YAAI1D,CAAJ;AAAA,YAAOsE,CAAP;AAAA,YAAUI,CAAV;AAAA,SAAxB,GAAuC;AAAA,YAAChB,CAAD;AAAA,YAAI1D,CAAJ;AAAA,YAAOsE,CAAP;AAAA,SAArD,CADD;AAAA,QAEC,OAAO,CAAuB,oBAAvB,GAAuB3I,KAAA,CAAMC,IAAN,CAAW,IAAX,CAAvB,EAAuC,0CAAvC,CAAP,CAFD;AAAA,KAXsF;AAAA,IAgBrF,IAAA,EACO8I,OAAAA,CAAP,KAAa,WAAb,IAA6B,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAA,IAAK,CAA9B,IAAmCA,CAAA,IAAK,CAArE,CADA,EAED;AAAA,QACQ,OAAA,CAAA,oBAAA,GAAuB;AAAA,YAAChB,CAAD;AAAA,YAAI1D,CAAJ;AAAA,YAAOsE,CAAP;AAAA,YAAUI,CAAV;AAAA,SAAA,CAAa9I,IAAb,CAAkB,IAAlB,CAAvB,EAA8C,+BAA9C,CAAA,CADR;AAAA,KAlBsF;AAAA,IAsBlF,OAAA,IAAA,CAtBkF;AAAA,CA5B7F;AAyDO,SAAS8N,OAAT,CAAiBC,KAAjB,EAA0C;AAAA,IAC7C,IAAIA,KAAA,KAAU,IAAd,EAAoB;AAAA,QACT,OAAA,IAAA,CADS;AAAA,KAApB,MAEA,IAAW,OAAOA,KAAP,KAAiB,QAA5B,EAAsC;AAAA,QAC3B,OAAA,IAAA,CAD2B;AAAA,KAAtC,MAEA,IAAW,OAAOA,KAAP,KAAiB,SAA5B,EAAuC;AAAA,QAC5B,OAAA,IAAA,CAD4B;AAAA,KAAvC,MAEA,IAAW,OAAOA,KAAP,KAAiB,QAA5B,EAAsC;AAAA,QAC3B,OAAA,IAAA,CAD2B;AAAA,KAAtC,MAEA,IAAWA,KAAA,YAAiB9E,KAA5B,EAAmC;AAAA,QACxB,OAAA,IAAA,CADwB;AAAA,KAAnC,MAEA,IAAW8E,KAAA,YAAiBlC,QAA5B,EAAsC;AAAA,QAC3B,OAAA,IAAA,CAD2B;AAAA,KAAtC,MAEA,IAAWkC,KAAA,YAAiBhB,SAA5B,EAAuC;AAAA,QAC5B,OAAA,IAAA,CAD4B;AAAA,KAAvC,MAEA,IAAWgB,KAAA,YAAiBN,aAA5B,EAA2C;AAAA,QAChC,OAAA,IAAA,CADgC;AAAA,KAA3C,MAEW,IAAAjO,KAAA,CAAMC,OAAN,CAAcsO,KAAd,CAAA,EAAsB;AAAA,QAC7B,KAAWC,MAAAA,IAAX,IAAmBD,KAAnB,EAA0B;AAAA,YAClB,IAAA,CAACD,OAAA,CAAQE,IAAR,CAAD,EAAgB;AAAA,gBACT,OAAA,KAAA,CADS;AAAA,aADE;AAAA,SADG;AAAA,QAMtB,OAAA,IAAA,CANsB;AAAA,KAAtB,MAOX,IAAW,OAAOD,KAAP,KAAiB,QAA5B,EAAsC;AAAA,QAClC,KAAWlO,MAAAA,GAAX,IAAkBkO,KAAlB,EAAyB;AAAA,YACrB,IAAI,CAACD,OAAA,CAAQC,KAAA,CAAMlO,GAAN,CAAR,CAAL,EAA0B;AAAA,gBACf,OAAA,KAAA,CADe;AAAA,aADL;AAAA,SADS;AAAA,QAM3B,OAAA,IAAA,CAN2B;AAAA,KAAtC,MAOO;AAAA,QACI,OAAA,KAAA,CADJ;AAAA,KA/BsC;AAAA,CAzDjD;AA6FO,SAASoO,MAAT,CAAgBlO,KAAhB,EAAoC;AAAA,IACvC,IAAIA,KAAA,KAAU,IAAd,EAAoB;AAAA,QACT,OAAAuF,QAAA,CADS;AAAA,KAApB,MAEA,IAAW,OAAOvF,KAAP,KAAiB,QAA5B,EAAsC;AAAA,QAC3B,OAAA0F,UAAA,CAD2B;AAAA,KAAtC,MAEA,IAAW,OAAO1F,KAAP,KAAiB,SAA5B,EAAuC;AAAA,QAC5B,OAAA2F,WAAA,CAD4B;AAAA,KAAvC,MAEA,IAAW,OAAO3F,KAAP,KAAiB,QAA5B,EAAsC;AAAA,QAC3B,OAAAyF,UAAA,CAD2B;AAAA,KAAtC,MAEA,IAAWzF,KAAA,YAAiBkJ,KAA5B,EAAmC;AAAA,QACxB,OAAAtD,SAAA,CADwB;AAAA,KAAnC,MAEA,IAAW5F,KAAA,YAAiB8L,QAA5B,EAAsC;AAAA,QAC3B,OAAA9F,YAAA,CAD2B;AAAA,KAAtC,MAEA,IAAWhG,KAAA,YAAiBgN,SAA5B,EAAuC;AAAA,QAC5B,OAAA/G,aAAA,CAD4B;AAAA,KAAvC,MAEA,IAAWjG,KAAA,YAAiB0N,aAA5B,EAA2C;AAAA,QAChC,OAAAxH,iBAAA,CADgC;AAAA,KAA3C,MAEW,IAAAzG,KAAA,CAAMC,OAAN,CAAcM,KAAd,CAAA,EAAsB;AAAA,QAC7B,MAAMlB,MAAA,GAASkB,KAAA,CAAMlB,MAArB,CAD6B;AAAA,QAEzB,IAAAsH,QAAA,CAFyB;AAAA,QAI7B,KAAW6H,MAAAA,IAAX,IAAmBjO,KAAnB,EAA0B;AAAA,YAChB,MAAA0G,CAAA,GAAIwH,MAAA,CAAOD,IAAP,CAAJ,CADgB;AAAA,YAEtB,IAAI,CAAC7H,QAAL,EAAe;AAAA,gBACAA,QAAA,GAAAM,CAAA,CADA;AAAA,aAAf,MAEA,IAAWN,QAAA,KAAaM,CAAxB,EAA2B;AAAA,gBACvB,SADuB;AAAA,aAA3B,MAEO;AAAA,gBACQN,QAAA,GAAAN,SAAA,CADR;AAAA,gBAEH,MAFG;AAAA,aANe;AAAA,SAJG;AAAA,QAgBtB,OAAAK,OAAA,CAAMC,QAAA,IAAYN,SAAlB,EAA6BhH,MAA7B,CAAA,CAhBsB;AAAA,KAAtB,MAiBJ;AAAA,QAEI,OAAA+G,UAAA,CAFJ;AAAA,KAlCgC;AAAA,CA7F3C;AAqIO,SAASS,QAAT,CAAkBtG,KAAlB,EAAwC;AAAA,IAC3C,MAAM2B,IAAA,GAAO,OAAO3B,KAApB,CAD2C;AAAA,IAE3C,IAAIA,KAAA,KAAU,IAAd,EAAoB;AAAA,QACT,OAAA,EAAA,CADS;AAAA,KAApB,UAEW2B,IAAA,KAAS,QAAT,IAAqBA,IAAA,KAAS,QAA9B,IAA0CA,IAAA,KAAS,WAAW;AAAA,QACrE,OAAOwM,MAAA,CAAOnO,KAAP,CAAP,CADqE;AAAA,eAE9DA,KAAA,YAAiBkJ,KAAjB,IAA0BlJ,KAAA,YAAiBgN,SAA3C,IAAwDhN,KAAA,YAAiB0N,eAAe;AAAA,QAC/F,OAAO1N,KAAA,CAAMsG,QAAN,EAAP,CAD+F;AAAA,WAE5F;AAAA,QACI,OAAApI,IAAA,CAAKJ,SAAL,CAAekC,KAAf,CAAA,CADJ;AAAA,KARoC;AAAA;;AC5H/C,MAAMoO,OAAN,CAAoC;AAAA,IAIhCtJ,WAAA,CAAYnD,IAAZ,EAAwB3B,KAAxB,EAAsC;AAAA,QAClC,IAAK2B,CAAAA,IAAL,GAAYA,IAAZ,CADkC;AAAA,QAElC,IAAK3B,CAAAA,KAAL,GAAaA,KAAb,CAFkC;AAAA,KAJN;AAAA,IAShC,OAAOb,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAoF;AAAA,QAChF,IAAID,IAAA,CAAKvP,MAAL,KAAgB,CAApB;AAAA,YACI,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,8DAAA,GAAiEF,IAAA,CAAKvP,MAAL,GAAc,CAA/E,EAA2F,SAA3F,CAAd,CAAP,CAF4E;AAAA,QAIhF,IAAI,CAACiP,OAAA,CAAQM,IAAA,CAAK,CAAL,CAAR,CAAL;AAAA,YACW,OAAAC,OAAA,CAAQC,KAAR,CAAc,CAAe,aAAf,CAAd,CAAA,CALqE;AAAA,QAO1E,MAAAvO,KAAA,GAASqO,IAAA,CAAK,CAAL,CAAT,CAP0E;AAAA,QAQ5E,IAAA1M,IAAA,GAAOuM,MAAA,CAAOlO,KAAP,CAAP,CAR4E;AAAA,QAWhF,MAAMyG,QAAA,GAAW6H,OAAA,CAAQE,YAAzB,CAXgF;AAAA,QAYhF,IACI7M,IAAA,CAAK6D,IAAL,KAAc,OAAd,IACA7D,IAAA,CAAK0E,CAAL,KAAW,CADX,IAEAI,QAFA,IAGAA,QAAA,CAASjB,IAAT,KAAkB,OAHlB,KAIQiB,OAAAA,QAAA,CAASJ,CAAhB,KAAsB,QAAtB,IAAkCI,QAAA,CAASJ,CAAT,KAAe,CAAjD,CALL,EAME;AAAA,YACS1E,IAAA,GAAA8E,QAAA,CADT;AAAA,SAlB8E;AAAA,QAsBzE,OAAA,IAAI2H,OAAJ,CAAYzM,IAAZ,EAAkB3B,KAAlB,CAAA,CAtByE;AAAA,KATpD;AAAA,IAkChCyO,QAAA,GAAkB;AAAA,QACd,OAAO,IAAKzO,CAAAA,KAAZ,CADc;AAAA,KAlCc;AAAA,IAsChC0O,SAAA,GAAY;AAAA,KAtCoB;AAAA,IAwChCC,aAAA,GAAyB;AAAA,QACd,OAAA,IAAA,CADc;AAAA,KAxCO;AAAA,IA4ChCnB,SAAA,GAAkC;AAAA,QAC9B,IAAI,IAAA,CAAK7L,IAAL,CAAU6D,IAAV,KAAmB,OAAnB,IAA8B,IAAA,CAAK7D,IAAL,CAAU6D,IAAV,KAAmB,QAArD,EAA+D;AAAA,YACpD,OAAA;AAAA,gBAAC,SAAD;AAAA,gBAAY,KAAKxF,KAAjB;AAAA,aAAA,CADoD;AAAA,SAA/D,MAEA,IAAW,IAAA,CAAKA,KAAL,YAAsBkJ,KAAjC,EAAwC;AAAA,YAK7B,OAAA,CAAC,MAAD,CAASxE,CAAAA,MAAT,CAAgB,IAAK1E,CAAAA,KAAL,CAAWuJ,aAAX,CAAyB,IAAzB,CAAA,CAA+B2B,OAA/B,EAAhB,CAAA,CAL6B;AAAA,SAAxC,MAMA,IAAW,IAAA,CAAKlL,KAAL,YAAsBgN,SAAjC,EAA4C;AAAA,YAEjC,OAAA,IAAKhN,CAAAA,KAAL,CAAWwN,SAAX,EAAA,CAFiC;AAAA,SAA5C,MAGO;AAAA,YAKH,OAAO,IAAKxN,CAAAA,KAAZ,CALG;AAAA,SAZuB;AAAA,KA5CF;AAAA;;ACTpC,MAAM4O,YAAN,CAAmB;AAAA,IAIf9J,WAAA,CAAYC,OAAZ,EAA6B;AAAA,QACzB,IAAKI,CAAAA,IAAL,GAAY,2BAAZ,CADyB;AAAA,QAEzB,IAAKJ,CAAAA,OAAL,GAAeA,OAAf,CAFyB;AAAA,KAJd;AAAA,IASfnG,MAAA,GAAiB;AAAA,QACb,OAAO,IAAKmG,CAAAA,OAAZ,CADa;AAAA,KATF;AAAA;;ACmBnB,MAAM8J,OAAA,GAAQ;AAAA,IACVhQ,MAAA,EAAQ6G,UADE;AAAA,IAEVoD,MAAA,EAAQrD,UAFE;AAAA,IAGVqJ,OAAA,EAASnJ,WAHC;AAAA,IAIVoJ,MAAA,EAAQlJ,UAJE;AAAA,CAAd,CAnBA;AA0BA,MAAMmJ,SAAN,CAAsC;AAAA,IAIlClK,WAAA,CAAYnD,IAAZ,EAAwB0M,IAAxB,EAAiD;AAAA,QAC7C,IAAK1M,CAAAA,IAAL,GAAYA,IAAZ,CAD6C;AAAA,QAE7C,IAAK0M,CAAAA,IAAL,GAAYA,IAAZ,CAF6C;AAAA,KAJf;AAAA,IASlC,OAAOlP,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAuF;AAAA,QACnF,IAAID,IAAA,CAAKvP,MAAL,GAAc,CAAlB;AAAA,YACW,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAiC,+BAAjC,CAAd,CAAA,CAFwE;AAAA,QAInF,IAAIxN,CAAA,GAAI,CAAR,CAJmF;AAAA,QAK/E,IAAAY,IAAA,CAL+E;AAAA,QAO7E,MAAAwD,IAAA,GAAgBkJ,IAAA,CAAK,CAAL,CAAhB,CAP6E;AAAA,QAQnF,IAAIlJ,IAAA,KAAS,OAAb,EAAsB;AAAA,YACd,IAAAiB,QAAA,CADc;AAAA,YAEd,IAAAiI,IAAA,CAAKvP,MAAL,GAAc,CAAd,EAAiB;AAAA,gBACX6C,MAAAA,KAAAA,GAAO0M,IAAA,CAAK,CAAL,CAAP1M,CADW;AAAA,gBAEjB,IAAI,OAAOA,KAAP,KAAgB,QAAhB,IAA4B,EAAEA,KAAAA,IAAQkN,OAARlN,CAA9B,IAAgDA,KAAAA,KAAS,QAA7D;AAAA,oBACW,OAAA2M,OAAA,CAAQC,KAAR,CAAc,0EAAd,EAA0F,CAA1F,CAAA,CAHM;AAAA,gBAIjBnI,QAAA,GAAWyI,OAAA,CAAMlN,KAAN,CAAX,CAJiB;AAAA,gBAKjBZ,CAAA,EALiB,CAAA;AAAA,aAAjB,MAMG;AAAA,gBACQqF,QAAA,GAAAN,SAAA,CADR;AAAA,aARW;AAAA,YAYd,IAAAO,CAAA,CAZc;AAAA,YAad,IAAAgI,IAAA,CAAKvP,MAAL,GAAc,CAAd,EAAiB;AAAA,gBACb,IAAAuP,IAAA,CAAK,CAAL,MAAY,IAAZ,KACQA,OAAAA,IAAA,CAAK,CAAL,CAAP,KAAmB,QAAnB,IACGA,IAAA,CAAK,CAAL,CAAA,GAAU,CADb,IAEGA,IAAA,CAAK,CAAL,MAAYlH,IAAA,CAAK2C,KAAL,CAAWuE,IAAA,CAAK,CAAL,CAAX,CAFf,CADD,EAIF;AAAA,oBACS,OAAAC,OAAA,CAAQC,KAAR,CAAc,mEAAd,EAAmF,CAAnF,CAAA,CADT;AAAA,iBALe;AAAA,gBAQjBlI,CAAA,GAAKgI,IAAA,CAAK,CAAL,CAAL,CARiB;AAAA,gBASjBtN,CAAA,EATiB,CAAA;AAAA,aAbH;AAAA,YAyBXY,IAAA,GAAAwE,OAAA,CAAMC,QAAN,EAAgBC,CAAhB,CAAA,CAzBW;AAAA,SAAtB,MA0BO;AAAA,YAEH1E,IAAA,GAAOkN,OAAA,CAAM1J,IAAN,CAAP,CAFG;AAAA,SAlC4E;AAAA,QAuCnF,MAAM8J,MAAA,GAAS,EAAf,CAvCmF;AAAA,QAwC5E,OAAAlO,CAAA,GAAIsN,IAAA,CAAKvP,MAAT,EAAiBiC,CAAA,EAAjB,EAAsB;AAAA,YACzB,MAAMsC,KAAA,GAAQiL,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKtN,CAAL,CAAd,EAAuBA,CAAvB,EAA0B+E,SAA1B,CAAd,CADyB;AAAA,YAErB,IAAA,CAACzC,KAAD;AAAA,gBAAe,OAAA,IAAA,CAFM;AAAA,YAGzB4L,MAAA,CAAOtP,IAAP,CAAY0D,KAAZ,CAHyB,CAAA;AAAA,SAxCsD;AAAA,QA8C5E,OAAA,IAAI2L,SAAJ,CAAcrN,IAAd,EAAoBsN,MAApB,CAAA,CA9C4E;AAAA,KATrD;AAAA,IA0DlCR,QAAA,CAASS,GAAT,EAAsC;AAAA,QAClC,KAAA,IAASnO,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI,IAAA,CAAKsN,IAAL,CAAUvP,MAA9B,EAAsCiC,CAAA,EAAtC,EAA2C;AAAA,YACvC,MAAMf,KAAA,GAAQ,IAAA,CAAKqO,IAAL,CAAUtN,CAAV,CAAA,CAAa0N,QAAb,CAAsBS,GAAtB,CAAd,CADuC;AAAA,YAEvC,MAAMX,KAAA,GAAQ/H,YAAA,CAAa,IAAA,CAAK7E,IAAlB,EAAwBuM,MAAA,CAAOlO,KAAP,CAAxB,CAAd,CAFuC;AAAA,YAGvC,IAAI,CAACuO,KAAL,EAAY;AAAA,gBACD,OAAAvO,KAAA,CADC;AAAA,aAAZ,MAEW,IAAAe,CAAA,KAAM,IAAA,CAAKsN,IAAL,CAAUvP,MAAV,GAAmB,CAAzB,EAA4B;AAAA,gBAC7B,MAAA,IAAI8P,YAAJ,CAAiB,CAAkB,eAAlB,GAAkB1Q,IAAA,CAAKJ,SAAL,CAAe,KAAKuQ,IAAL,CAAUtN,CAAV,CAAayM,CAAAA,SAAb,EAAf,CAAlB,EAA2E,cAA3E,GAA2ElH,UAAA,CAAS4H,MAAA,CAAOlO,KAAP,CAAT,CAA3E,kCAAA,GAAqIsG,UAAA,CAAS,KAAK3E,IAAd,CAArI,EAA2J,CAA3J,CAAjB,CAAA,CAD6B;AAAA,aALA;AAAA,SADT;AAAA,QAY3B,OAAA,IAAA,CAZ2B;AAAA,KA1DJ;AAAA,IAyElC+M,SAAA,CAAUS,EAAV,EAAuC;AAAA,QAC9B,KAAAd,IAAA,CAAKxM,OAAL,CAAasN,EAAb,CAD8B,CAAA;AAAA,KAzEL;AAAA,IA6ElCR,aAAA,GAAyB;AAAA,QACrB,OAAO,IAAA,CAAKN,IAAL,CAAUe,KAAV,CAAuBC,GAAP,IAAOA,GAAA,CAAIV,aAAJ,EAAvB,CAAP,CADqB;AAAA,KA7ES;AAAA,IAiFlCnB,SAAA,GAAkC;AAAA,QAC9B,MAAM7L,IAAA,GAAO,IAAA,CAAKA,IAAlB,CAD8B;AAAA,QAExB,MAAA8L,UAAA,GAAa,CAAC9L,IAAA,CAAK6D,IAAN,CAAb,CAFwB;AAAA,QAG1B,IAAA7D,IAAA,CAAK6D,IAAL,KAAc,OAAd,EAAuB;AAAA,YACvB,MAAMY,QAAA,GAAWzE,IAAA,CAAKyE,QAAtB,CADuB;AAAA,YAEnB,IAAAA,QAAA,CAASZ,IAAT,KAAkB,QAAlB,IACAY,QAAA,CAASZ,IAAT,KAAkB,QADlB,IAEAY,QAAA,CAASZ,IAAT,KAAkB,SAFlB,EAE6B;AAAA,gBAClBiI,UAAA,CAAA9N,IAAA,CAAKyG,QAAA,CAASZ,IAAd,CADkB,CAAA;AAAA,gBAE7B,MAAMa,CAAA,GAAI1E,IAAA,CAAK0E,CAAf,CAF6B;AAAA,gBAG7B,IAAI,OAAOA,CAAP,KAAa,QAAb,IAAyB,IAAKgI,CAAAA,IAAL,CAAUvP,MAAV,GAAmB,CAAhD,EAAmD;AAAA,oBAE/C2O,UAAA,CAAW9N,IAAX,CAAgB0G,CAAhB,CAF+C,CAAA;AAAA,iBAHtB;AAAA,aAJV;AAAA,SAHG;AAAA,QAiBvB,OAAAoH,UAAA,CAAW/I,MAAX,CAAkB,IAAA,CAAK2J,IAAL,CAAU3N,GAAV,CAAqB2O,GAAP,IAAOA,GAAA,CAAI7B,SAAJ,EAArB,CAAlB,CAAA,CAjBuB;AAAA,KAjFA;AAAA;;ACAtC,MAAqB8B,gBAArB,CAA4D;AAAA,IAIxDxK,WAAA,CAAYmI,QAAZ,EAAyD;AAAA,QACrD,IAAKtL,CAAAA,IAAL,GAAYsE,aAAZ,CADqD;AAAA,QAErD,IAAKgH,CAAAA,QAAL,GAAgBA,QAAhB,CAFqD;AAAA,KAJD;AAAA,IASxD,OAAO9N,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAmG;AAAA,QAC3F,IAAAD,IAAA,CAAKvP,MAAL,GAAc,CAAd,EAAiB;AAAA,YAEV,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAiC,+BAAjC,CAAd,CAAA,CAFU;AAAA,SAD0E;AAAA,QAMzF,MAAAgB,QAAA,GAAWlB,IAAA,CAAK,CAAL,CAAX,CANyF;AAAA,QAO/F,IAAI,CAAC5O,KAAA,CAAMC,OAAN,CAAc6P,QAAd,CAAD,IAA4B,OAAOA,QAAP,KAAoB,QAApD,EAA+D;AAAA,YAEpD,OAAAjB,OAAA,CAAQC,KAAR,CAAc,CAAkD,gDAAlD,CAAd,CAAA,CAFoD;AAAA,SAPgC;AAAA,QAY/F,MAAMtB,QAAA,GAA8C,EAApD,CAZ+F;AAAA,QAa/F,IAAIuC,oBAAA,GAAuB,KAA3B,CAb+F;AAAA,QAc/F,KAAA,IAASzO,CAAA,GAAI,CAAb,EAAgBA,CAAA,IAAKsN,IAAA,CAAKvP,MAAL,GAAc,CAAnC,EAAsC,EAAEiC,CAAxC,EAA2C;AAAA,YACjC,MAAAsO,GAAA,GAAOhB,IAAA,CAAKtN,CAAL,CAAP,CADiC;AAAA,YAGnC,IAAAyO,oBAAA,IAAwB,OAAOH,GAAP,KAAe,QAAvC,IAAmD,CAAC5P,KAAA,CAAMC,OAAN,CAAc2P,GAAd,CAApD,EAAwE;AAAA,gBACjDG,oBAAA,GAAA,KAAA,CADiD;AAAA,gBAGxE,IAAInE,KAAA,GAAQ,IAAZ,CAHwE;AAAA,gBAIpE,IAAAgE,GAAA,CAAI,YAAJ,CAAA,EAAmB;AAAA,oBACnBhE,KAAA,GAAQiD,OAAA,CAAQmB,gBAAR,CAAyBJ,GAAA,CAAI,YAAJ,CAAzB,EAA4CtO,CAA5C,EAA+C,YAA/C,EAA6D0E,UAA7D,CAAR,CADmB;AAAA,oBAEf,IAAA,CAAC4F,KAAD;AAAA,wBAAe,OAAA,IAAA,CAFA;AAAA,iBAJiD;AAAA,gBASxE,IAAIlH,IAAA,GAAO,IAAX,CATwE;AAAA,gBAUpE,IAAAkL,GAAA,CAAI,WAAJ,CAAA,EAAkB;AAAA,oBACXlL,IAAA,GAAAmK,OAAA,CAAQmB,gBAAR,CAAyBJ,GAAA,CAAI,WAAJ,CAAzB,EAA2CtO,CAA3C,EAA8C,WAA9C,EAA2DoF,OAAA,CAAMT,UAAN,CAA3D,CAAA,CADW;AAAA,oBAEd,IAAA,CAACvB,IAAD;AAAA,wBAAc,OAAA,IAAA,CAFA;AAAA,iBAVkD;AAAA,gBAexE,IAAI2I,SAAA,GAAY,IAAhB,CAfwE;AAAA,gBAgBpE,IAAAuC,GAAA,CAAI,YAAJ,CAAA,EAAmB;AAAA,oBACnBvC,SAAA,GAAYwB,OAAA,CAAQmB,gBAAR,CAAyBJ,GAAA,CAAI,YAAJ,CAAzB,EAA4CtO,CAA5C,EAA+C,YAA/C,EAA6D6E,SAA7D,CAAZ,CADmB;AAAA,oBAEf,IAAA,CAACkH,SAAD;AAAA,wBAAmB,OAAA,IAAA,CAFJ;AAAA,iBAhBiD;AAAA,gBAqBxE,MAAM4C,cAAA,GAAiBzC,QAAA,CAASA,QAAA,CAASnO,MAAT,GAAkB,CAA3B,CAAvB,CArBwE;AAAA,gBAsBxE4Q,cAAA,CAAerE,KAAf,GAAuBA,KAAvB,CAtBwE;AAAA,gBAuBxEqE,cAAA,CAAevL,IAAf,GAAsBA,IAAtB,CAvBwE;AAAA,gBAwBxEuL,cAAA,CAAe5C,SAAf,GAA2BA,SAA3B,CAxBwE;AAAA,aAAxE,MAyBG;AAAA,gBACH,MAAM6C,OAAA,GAAUrB,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKtN,CAAL,CAAd,EAAuBA,CAAvB,EAA0B+E,SAA1B,CAAhB,CADG;AAAA,gBAEC,IAAA,CAAC6J,OAAD;AAAA,oBAAiB,OAAA,IAAA,CAFlB;AAAA,gBAIG,MAAAnK,IAAA,GAAOmK,OAAA,CAAQhO,IAAR,CAAa6D,IAApB,CAJH;AAAA,gBAKH,IAAIA,IAAA,KAAS,QAAT,IAAqBA,IAAA,KAAS,OAA9B,IAAyCA,IAAA,KAAS,MAAlD,IAA4DA,IAAA,KAAS,eAAzE;AAAA,oBAEW,OAAA8I,OAAA,CAAQC,KAAR,CAAc,CAAmE,iEAAnE,CAAd,CAAA,CAPR;AAAA,gBASoBiB,oBAAA,GAAA,IAAA,CATpB;AAAA,gBAUMvC,QAAA,CAAAtN,IAAA,CAAK;AAAA,oBAACgQ,OAAD;AAAA,oBAAUtE,KAAA,EAAO,IAAjB;AAAA,oBAAuBlH,IAAA,EAAM,IAA7B;AAAA,oBAAmC2I,SAAA,EAAW,IAA9C;AAAA,iBAAL,CAVN,CAAA;AAAA,aA5BgC;AAAA,SAdoD;AAAA,QAwDxF,OAAA,IAAIwC,gBAAJ,CAAqBrC,QAArB,CAAA,CAxDwF;AAAA,KAT3C;AAAA,IAoExDwB,QAAA,CAASS,GAAT,EAA4C;AAAA,QAClC,MAAAU,eAAA,GAAmBvC,OAAD,IAAyC;AAAA,YAC7D,MAAMwC,gBAAA,GAAmBxC,OAAA,CAAQsC,OAAR,CAAgBlB,QAAhB,CAAyBS,GAAzB,CAAzB,CAD6D;AAAA,YAEzD,IAAAhB,MAAA,CAAO2B,gBAAP,CAAA,KAA6B3J,iBAA7B,EAAgD;AAAA,gBAChD,OAAO,IAAIyG,gBAAJ,CAAqB,EAArB,EAAyBkD,gBAAzB,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,CAAP,CADgD;AAAA,aAFS;AAAA,YAM7D,OAAO,IAAIlD,gBAAJ,CACCrG,QAAA,CAASuJ,gBAAT,CADD,EAEC,IAFD,EAGCxC,OAAA,CAAQhC,KAAR,GAAgBgC,OAAA,CAAQhC,KAAR,CAAcoD,QAAd,CAAuBS,GAAvB,CAAhB,GAA8C,IAH/C,EAIC7B,OAAA,CAAQlJ,IAAR,GAAekJ,OAAA,CAAQlJ,IAAR,CAAasK,QAAb,CAAsBS,GAAtB,CAAA,CAA2BjP,IAA3B,CAAgC,GAAhC,CAAf,GAAsD,IAJvD,EAKCoN,OAAA,CAAQP,SAAR,GAAoBO,OAAA,CAAQP,SAAR,CAAkB2B,QAAlB,CAA2BS,GAA3B,CAApB,GAAsD,IALvD,CAAP,CAN6D;AAAA,SAA3D,CADkC;AAAA,QAgBxC,OAAO,IAAIlC,SAAJ,CAAc,IAAKC,CAAAA,QAAL,CAAcvM,GAAd,CAAkBkP,eAAlB,CAAd,CAAP,CAhBwC;AAAA,KApEY;AAAA,IAuFxDlB,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACxB,KAAA9B,MAAAA,OAAA,IAAW,IAAA,CAAKJ,QAAhB,EAA0B;AAAA,YACjCkC,EAAA,CAAG9B,OAAA,CAAQsC,OAAX,CADiC,CAAA;AAAA,YAEjC,IAAItC,OAAA,CAAQhC,KAAZ,EAAmB;AAAA,gBACf8D,EAAA,CAAG9B,OAAA,CAAQhC,KAAX,CADe,CAAA;AAAA,aAFc;AAAA,YAKjC,IAAIgC,OAAA,CAAQlJ,IAAZ,EAAkB;AAAA,gBACdgL,EAAA,CAAG9B,OAAA,CAAQlJ,IAAX,CADc,CAAA;AAAA,aALe;AAAA,YAQjC,IAAIkJ,OAAA,CAAQP,SAAZ,EAAuB;AAAA,gBACnBqC,EAAA,CAAG9B,OAAA,CAAQP,SAAX,CADmB,CAAA;AAAA,aARU;AAAA,SADF;AAAA,KAvFiB;AAAA,IAsGxD6B,aAAA,GAAyB;AAAA,QAGd,OAAA,KAAA,CAHc;AAAA,KAtG+B;AAAA,IA4GxDnB,SAAA,GAAkC;AAAA,QACxB,MAAAC,UAAA,GAAa,CAAC,QAAD,CAAb,CADwB;AAAA,QAEnB,KAAAJ,MAAAA,OAAA,IAAW,IAAA,CAAKJ,QAAhB,EAA0B;AAAA,YAEjCQ,UAAA,CAAW9N,IAAX,CAAgB0N,OAAA,CAAQsC,OAAR,CAAgBnC,SAAhB,EAAhB,CAFiC,CAAA;AAAA,YAGjC,MAAMxP,OAAA,GAA+B,EAArC,CAHiC;AAAA,YAIjC,IAAIqP,OAAA,CAAQhC,KAAZ,EAAmB;AAAA,gBACfrN,OAAA,CAAQ,YAAR,CAAwBqP,GAAAA,OAAA,CAAQhC,KAAR,CAAcmC,SAAd,EAAxB,CADe;AAAA,aAJc;AAAA,YAOjC,IAAIH,OAAA,CAAQlJ,IAAZ,EAAkB;AAAA,gBACdnG,OAAA,CAAQ,WAAR,CAAuBqP,GAAAA,OAAA,CAAQlJ,IAAR,CAAaqJ,SAAb,EAAvB,CADc;AAAA,aAPe;AAAA,YAUjC,IAAIH,OAAA,CAAQP,SAAZ,EAAuB;AAAA,gBACnB9O,OAAA,CAAQ,YAAR,CAAwBqP,GAAAA,OAAA,CAAQP,SAAR,CAAkBU,SAAlB,EAAxB,CADmB;AAAA,aAVU;AAAA,YAcjCC,UAAA,CAAW9N,IAAX,CAAgB3B,OAAhB,CAdiC,CAAA;AAAA,SAFP;AAAA,QAkBvB,OAAAyP,UAAA,CAlBuB;AAAA,KA5GsB;AAAA;;AClB5D,MAAqBqC,eAArB,CAA2D;AAAA,IAKvDhL,WAAA,CAAYiL,YAAZ,EAAsCC,cAAtC,EAA0E;AAAA,QACtE,IAAKrO,CAAAA,IAAL,GAAYuE,iBAAZ,CADsE;AAAA,QAEtE,IAAK6J,CAAAA,YAAL,GAAoBA,YAApB,CAFsE;AAAA,QAGtE,IAAKC,CAAAA,cAAL,GAAsBA,cAAtB,CAHsE;AAAA,KALnB;AAAA,IAWvD,OAAO7Q,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAmG;AAAA,QAC3F,IAAAD,IAAA,CAAKvP,MAAL,GAAc,CAAd,EAAiB;AAAA,YAEV,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAiC,+BAAjC,CAAd,CAAA,CAFU;AAAA,SAD0E;AAAA,QAM/F,MAAMjB,WAAA,GAAcgB,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0B3I,UAA1B,CAApB,CAN+F;AAAA,QAQ/F,IAAI,CAAC4H,WAAL;AAAA,YAAyB,OAAAgB,OAAA,CAAQC,KAAR,CAAc,CAAyB,uBAAzB,CAAd,CAAA,CARsE;AAAA,QAU3F,IAAAF,IAAA,CAAKvP,MAAL,KAAgB,CAAhB,EAAmB;AAAA,YACZ,OAAA,IAAIgR,eAAJ,CAAoBxC,WAApB,CAAA,CADY;AAAA,SAVwE;AAAA,QAc/F,MAAMK,aAAA,GAAgBW,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0B3I,UAA1B,CAAtB,CAd+F;AAAA,QAgB/F,IAAI,CAACiI,aAAL;AAAA,YAA2B,OAAAW,OAAA,CAAQC,KAAR,CAAc,CAA0C,wCAA1C,CAAd,CAAA,CAhBoE;AAAA,QAkBxF,OAAA,IAAIuB,eAAJ,CAAoBxC,WAApB,EAAiCK,aAAjC,CAAA,CAlBwF;AAAA,KAX5C;AAAA,IAgCvDc,QAAA,CAASS,GAAT,EAAuD;AAAA,QACnD,MAAMlP,KAAA,GAAQ0N,aAAA,CAAcR,UAAd,CAAyB,IAAA,CAAK6C,YAAL,CAAkBtB,QAAlB,CAA2BS,GAA3B,CAAzB,EAA0D,IAAA,CAAKc,cAAL,GAAsB,IAAKA,CAAAA,cAAL,CAAoBvB,QAApB,CAA6BS,GAA7B,CAAtB,GAA0D,KAAS,CAA7H,CAAd,CADmD;AAAA,QAE/C,IAAAlP,KAAA,IAASkP,GAAA,CAAIe,eAAb,EAA8B;AAAA,YAC9BjQ,KAAA,CAAM4N,SAAN,GAAkBsB,GAAA,CAAIe,eAAJ,CAAoB9N,OAApB,CAA4BnC,KAAA,CAAMsN,WAAlC,CAAiD,GAAA,CAAA,CAAnE,CAD8B;AAAA,YAG9B,IAAItN,KAAA,CAAM2N,aAAN,IAAuB3N,KAAA,CAAM4N,SAA7B,IAA0CsB,GAAA,CAAIe,eAAlD,EAAmE;AAAA,gBAC/DjQ,KAAA,CAAM4N,SAAN,GAAkBsB,GAAA,CAAIe,eAAJ,CAAoB9N,OAApB,CAA4BnC,KAAA,CAAM2N,aAAlC,CAAmD,GAAA,CAAA,CAArE,CAD+D;AAAA,aAHrC;AAAA,SAFiB;AAAA,QAU5C,OAAA3N,KAAA,CAV4C;AAAA,KAhCA;AAAA,IA6CvD0O,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAKY,CAAAA,YAAR,CADmC,CAAA;AAAA,QAEnC,IAAI,IAAKC,CAAAA,cAAT,EAAyB;AAAA,YACrBb,EAAA,CAAG,IAAKa,CAAAA,cAAR,CADqB,CAAA;AAAA,SAFU;AAAA,KA7CgB;AAAA,IAoDvDrB,aAAA,GAAyB;AAAA,QAEd,OAAA,KAAA,CAFc;AAAA,KApD8B;AAAA,IAyDvDnB,SAAA,GAAkC;AAAA,QAC9B,IAAI,IAAKwC,CAAAA,cAAT,EAAyB;AAAA,YACd,OAAA;AAAA,gBAAC,OAAD;AAAA,gBAAU,IAAKD,CAAAA,YAAL,CAAkBvC,SAAlB,EAAV;AAAA,gBAAyC,IAAKwC,CAAAA,cAAL,CAAoBxC,SAApB,EAAzC;AAAA,aAAA,CADc;AAAA,SADK;AAAA,QAI9B,OAAO;AAAA,YAAC,OAAD;AAAA,YAAU,IAAKuC,CAAAA,YAAL,CAAkBvC,SAAlB,EAAV;AAAA,SAAP,CAJ8B;AAAA,KAzDqB;AAAA;;ACR3D,SAAwB0C,OAAxB,CAAgCC,GAAhC,EAAsD;AAAA,IAClD,IAAIA,GAAA,YAAeC,MAAnB,EAA2B;AAAA,QAChB,OAAA,QAAA,CADgB;AAAA,KAA3B,MAEA,IAAWD,GAAA,YAAehC,MAA1B,EAAkC;AAAA,QACvB,OAAA,QAAA,CADuB;AAAA,KAAlC,MAEA,IAAWgC,GAAA,YAAeE,OAA1B,EAAmC;AAAA,QACxB,OAAA,SAAA,CADwB;AAAA,KAAnC,MAEW,IAAA5Q,KAAA,CAAMC,OAAN,CAAcyQ,GAAd,CAAA,EAAoB;AAAA,QACpB,OAAA,OAAA,CADoB;AAAA,KAApB,MAEX,IAAWA,GAAA,KAAQ,IAAnB,EAAyB;AAAA,QACd,OAAA,MAAA,CADc;AAAA,KAAzB,MAEO;AAAA,QACH,OAAO,OAAOA,GAAd,CADG;AAAA,KAX2C;AAAA;;ACetD,MAAMtB,KAAA,GAAQ;AAAA,IACV,cAAclJ,WADJ;AAAA,IAEV,YAAYC,SAFF;AAAA,IAGV,aAAaH,UAHH;AAAA,IAIV,aAAaC,UAJH;AAAA,CAAd,CAfA;AA6BA,MAAM4K,QAAN,CAAqC;AAAA,IAIjCxL,WAAA,CAAYnD,IAAZ,EAAwB0M,IAAxB,EAAiD;AAAA,QAC7C,IAAK1M,CAAAA,IAAL,GAAYA,IAAZ,CAD6C;AAAA,QAE7C,IAAK0M,CAAAA,IAAL,GAAYA,IAAZ,CAF6C;AAAA,KAJhB;AAAA,IASjC,OAAOlP,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAmG;AAAA,QAC/F,IAAID,IAAA,CAAKvP,MAAL,GAAc,CAAlB;AAAA,YAEW,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAiC,+BAAjC,CAAd,CAAA,CAHoF;AAAA,QAKzF,MAAApJ,IAAA,GAAgBkJ,IAAA,CAAK,CAAL,CAAhB,CALyF;AAAA,QAM/F,MAAMY,MAAA,GAAS,EAAf,CAN+F;AAAA,QAO/F,IAAItN,IAAA,GAAyB4D,QAA7B,CAP+F;AAAA,QAQ/F,IAAIJ,IAAA,KAAS,UAAb,EAAyB;AAAA,YACrB,IAAI,CAAC1F,KAAA,CAAMC,OAAN,CAAc2O,IAAA,CAAK,CAAL,CAAd,CAAL,EAA6B;AAAA,gBAClB,OAAA,IAAA,CADkB;AAAA,aADR;AAAA,YAIf,MAAAkC,WAAA,GAAclC,IAAA,CAAK,CAAL,CAAA,CAAQvP,MAAtB,CAJe;AAAA,YAKrB,IAAIwP,OAAA,CAAQE,YAAZ,EAA0B;AAAA,gBAClB,IAAAF,OAAA,CAAQE,YAAR,CAAqBhJ,IAArB,KAA8B,OAA9B,EAAuC;AAAA,oBACvC7D,IAAA,GAAOwE,OAAA,CAAMmI,OAAA,CAAQE,YAAR,CAAqBpI,QAA3B,EAAqCmK,WAArC,CAAP,CADuC;AAAA,iBAAvC,MAEG;AAAA,oBAEH,OAAOjC,OAAA,CAAQC,KAAR,CAAc,CAAA,SAAA,GAAYD,OAAA,CAAQE,YAAR,CAAqBhJ,IAAjC,EAAwD,iBAAxD,CAAd,CAAP,CAFG;AAAA,iBAHe;AAAA,aAA1B,MAOA,IAAW+K,WAAA,GAAc,CAAd,IAAmBxC,OAAA,CAAQM,IAAA,CAAK,CAAL,CAAA,CAAQ,CAAR,CAAR,CAA9B,EAAmD;AAAA,gBAC/C,MAAMrO,KAAA,GAASqO,IAAA,CAAK,CAAL,CAAA,CAAQ,CAAR,CAAf,CAD+C;AAAA,gBAE/C1M,IAAA,GAAOwE,OAAA,CAAM+H,MAAA,CAAOlO,KAAP,CAAN,EAAqBuQ,WAArB,CAAP,CAF+C;AAAA,aAAnD,MAGO;AAAA,gBACI,OAAA,IAAA,CADJ;AAAA,aAfc;AAAA,YAkBrB,KAAA,IAASxP,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIwP,WAApB,EAAiCxP,CAAA,EAAjC,EAAsC;AAAA,gBAClC,MAAMyP,MAAA,GAASnC,IAAA,CAAK,CAAL,CAAA,CAAQtN,CAAR,CAAf,CADkC;AAAA,gBAE9B,IAAA0P,YAAA,CAF8B;AAAA,gBAG9B,IAAAP,OAAA,CAAQM,MAAR,CAAA,KAAoB,OAApB,EAA6B;AAAA,oBAC7BC,YAAA,GAAenC,OAAA,CAAQnP,KAAR,CAAcqR,MAAd,EAAsB,KAAA,CAAtB,EAAiC7O,IAAA,CAAKyE,QAAtC,CAAf,CAD6B;AAAA,iBAA7B,MAEG;AAAA,oBACG,MAAAO,UAAA,GAAauJ,OAAA,CAAQM,MAAR,CAAb,CADH;AAAA,oBAEC,IAAA7J,UAAA,KAAehF,IAAA,CAAKyE,QAAL,CAAcZ,IAA7B,EAAmC;AAAA,wBAE5B,OAAA8I,OAAA,CAAQC,KAAR,CAAc,CAAY,SAAZ,GAAY5M,IAAA,CAAKyE,QAAL,CAAcZ,IAA1B,EAA8B,WAA9B,GAA4CmB,UAA5C,EAAyD,CAAzD,CAAd,CAAA,CAF4B;AAAA,qBAFpC;AAAA,oBAMH8J,YAAA,GAAenC,OAAA,CAAQoC,QAAR,CAAiB,SAAjB,CAA4BvR,CAAAA,KAA5B,CAAkC;AAAA,wBAAC,SAAD;AAAA,wBAAYqR,MAAA,KAAW,KAAY,CAAvB,GAAuB,IAAvB,GAA8BA,MAA1C;AAAA,qBAAlC,EAAqFlC,OAArF,CAAf,CANG;AAAA,iBAL2B;AAAA,gBAa9B,IAAA,CAACmC,YAAD;AAAA,oBAAsB,OAAA,IAAA,CAbQ;AAAA,gBAclCxB,MAAA,CAAOtP,IAAP,CAAY8Q,YAAZ,CAdkC,CAAA;AAAA,aAlBjB;AAAA,SAAzB,MAkCO;AAAA,YAGH,IAAK,CAAAtL,IAAA,KAAS,YAAT,IAAyBA,IAAA,KAAS,WAAlC,KAAkDkJ,IAAA,CAAKvP,MAAL,KAAgB,CAAvE;AAAA,gBAEW,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAwB,sBAAxB,CAAd,CAAA,CALR;AAAA,YAOH5M,IAAA,GAAOkN,KAAA,CAAM1J,IAAN,CAAP,CAPG;AAAA,YASH,KAAA,IAASpE,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsN,IAAA,CAAKvP,MAAzB,EAAiCiC,CAAA,EAAjC,EAAsC;AAAA,gBAClC,MAAMsC,KAAA,GAAQiL,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKtN,CAAL,CAAd,EAAuBA,CAAvB,EAA0B+E,SAA1B,CAAd,CADkC;AAAA,gBAE9B,IAAA,CAACzC,KAAD;AAAA,oBAAe,OAAA,IAAA,CAFe;AAAA,gBAGlC4L,MAAA,CAAOtP,IAAP,CAAY0D,KAAZ,CAHkC,CAAA;AAAA,aATnC;AAAA,SA1CwF;AAAA,QA0DxF,OAAA,IAAIiN,QAAJ,CAAa3O,IAAb,EAAmBsN,MAAnB,CAAA,CA1DwF;AAAA,KATlE;AAAA,IAsEjCR,QAAA,CAASS,GAAT,EAAsC;AAAA,QAC9B,IAAA,IAAKvN,CAAAA,IAAL,CAAU6D,IAAV,KAAmB,SAAnB,EAA8B;AAAA,YAC9B,OAAO6K,OAAA,CAAQ,IAAA,CAAKhC,IAAL,CAAU,CAAV,CAAA,CAAaI,QAAb,CAAsBS,GAAtB,CAAR,CAAP,CAD8B;AAAA,SAA9B,MAEO,IAAA,IAAKvN,CAAAA,IAAL,CAAU6D,IAAV,KAAmB,OAAnB,EAA4B;AAAA,YAC/B,IAAAnC,KAAA,CAD+B;AAAA,YAE/B,IAAAkL,KAAA,CAF+B;AAAA,YAGxB,KAAAc,MAAAA,GAAA,IAAO,IAAA,CAAKhB,IAAZ,EAAkB;AAAA,gBACjBhL,KAAA,GAAAgM,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAA,CADiB;AAAA,gBAEjBX,KAAA,GAAA,IAAA,CAFiB;AAAA,gBAGzB,IAAIlL,KAAA,YAAiB6F,KAArB,EAA4B;AAAA,oBACjB,OAAA7F,KAAA,CADiB;AAAA,iBAA5B,MAEA,IAAW,OAAOA,KAAP,KAAiB,QAA5B,EAAsC;AAAA,oBAC5B,MAAAsN,CAAA,GAAIzB,GAAA,CAAI0B,UAAJ,CAAevN,KAAf,CAAJ,CAD4B;AAAA,oBAElC,IAAIsN,CAAJ;AAAA,wBAAc,OAAAA,CAAA,CAFoB;AAAA,iBAAtC,MAGW,IAAAlR,KAAA,CAAMC,OAAN,CAAc2D,KAAd,CAAA,EAAsB;AAAA,oBAC7B,IAAIA,KAAA,CAAMvE,MAAN,GAAe,CAAf,IAAoBuE,KAAA,CAAMvE,MAAN,GAAe,CAAvC,EAA0C;AAAA,wBACtCyP,KAAA,GAAQ,CAAsB,mBAAtB,GAAsBrQ,IAAA,CAAKJ,SAAL,CAAeuF,KAAf,CAAtB,EAA2C,mEAA3C,CAAR,CADsC;AAAA,qBAA1C,MAEO;AAAA,wBACHkL,KAAA,GAAQV,YAAA,CAAaxK,KAAA,CAAM,CAAN,CAAb,EAAuBA,KAAA,CAAM,CAAN,CAAvB,EAAiCA,KAAA,CAAM,CAAN,CAAjC,EAA2CA,KAAA,CAAM,CAAN,CAA3C,CAAR,CADG;AAAA,qBAHsB;AAAA,oBAM7B,IAAI,CAACkL,KAAL,EAAY;AAAA,wBACR,OAAO,IAAIrF,KAAJ,CAAW7F,KAAA,CAAM,CAAN,CAAY,GAAA,GAAvB,EAA6BA,KAAA,CAAM,CAAN,CAAY,GAAA,GAAzC,EAA+CA,KAAA,CAAM,CAAN,CAAY,GAAA,GAA3D,EAAiEA,KAAA,CAAM,CAAN,CAAjE,CAAP,CADQ;AAAA,qBANiB;AAAA,iBARR;AAAA,aAHM;AAAA,YAsBnC,MAAM,IAAIuL,YAAJ,CAAiBL,KAAA,IAAS,CAAA,kCAAA,GAAqC,OAAOlL,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC8K,MAAA,CAAOjQ,IAAA,CAAKJ,SAAL,CAAeuF,KAAf,CAAP,CAAzE,EAAyG,CAAzG,CAA1B,CAAN,CAtBmC;AAAA,SAA5B,MAuBA,IAAA,IAAK1B,CAAAA,IAAL,CAAU6D,IAAV,KAAmB,QAAnB,EAA6B;AAAA,YACpC,IAAIxF,KAAA,GAAQ,IAAZ,CADoC;AAAA,YAEzB,KAAAqP,MAAAA,GAAA,IAAO,IAAA,CAAKhB,IAAZ,EAAkB;AAAA,gBACjBrO,KAAA,GAAAqP,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAA,CADiB;AAAA,gBAErB,IAAAlP,KAAA,KAAU,IAAV;AAAA,oBAAuB,OAAA,CAAA,CAFF;AAAA,gBAGnB,MAAA6Q,GAAA,GAAMT,MAAA,CAAOpQ,KAAP,CAAN,CAHmB;AAAA,gBAIrB,IAAA8Q,KAAA,CAAMD,GAAN,CAAA;AAAA,oBAAY,SAJS;AAAA,gBAKlB,OAAAA,GAAA,CALkB;AAAA,aAFO;AAAA,YASpC,MAAM,IAAIjC,YAAJ,CAAiB,CAAA,kBAAA,GAAqB1Q,IAAA,CAAKJ,SAAL,CAAekC,KAAf,CAArB,EAAuD,WAAvD,CAAjB,CAAN,CAToC;AAAA,SAA7B,MAUA,IAAA,IAAK2B,CAAAA,IAAL,CAAU6D,IAAV,KAAmB,WAAnB,EAAgC;AAAA,YAGhC,OAAAwH,SAAA,CAAUE,UAAV,CAAqB6D,QAAA,CAAc,IAAK1C,CAAAA,IAAL,CAAU,CAAV,EAAaI,QAAb,CAAsBS,GAAtB,CAAd,CAArB,CAAA,CAHgC;AAAA,SAAhC,MAIA,IAAA,IAAKvN,CAAAA,IAAL,CAAU6D,IAAV,KAAmB,eAAnB,EAAoC;AAAA,YACpC,OAAAkI,aAAA,CAAcR,UAAd,CAAyB6D,QAAA,CAAc,IAAK1C,CAAAA,IAAL,CAAU,CAAV,EAAaI,QAAb,CAAsBS,GAAtB,CAAd,CAAzB,CAAA,CADoC;AAAA,SAApC,MAEA,IAAA,IAAKvN,CAAAA,IAAL,CAAU6D,IAAV,KAAmB,OAAnB,EAA4B;AAAA,YAC5B,OAAA,IAAK6I,CAAAA,IAAL,CAAU3N,GAAV,CAAqB2O,GAAP,IAAO;AAAA,gBAAS,OAAAA,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAA,CAAT;AAAA,aAArB,CAAA,CAD4B;AAAA,SAA5B,MAEJ;AAAA,YACH,OAAO6B,QAAA,CAAc,IAAA,CAAK1C,IAAL,CAAU,CAAV,CAAA,CAAaI,QAAb,CAAsBS,GAAtB,CAAd,CAAP,CADG;AAAA,SA5C2B;AAAA,KAtEL;AAAA,IAuHjCR,SAAA,CAAUS,EAAV,EAAuC;AAAA,QAC9B,KAAAd,IAAA,CAAKxM,OAAL,CAAasN,EAAb,CAD8B,CAAA;AAAA,KAvHN;AAAA,IA2HjCR,aAAA,GAAyB;AAAA,QACrB,OAAO,IAAA,CAAKN,IAAL,CAAUe,KAAV,CAAuBC,GAAP,IAAOA,GAAA,CAAIV,aAAJ,EAAvB,CAAP,CADqB;AAAA,KA3HQ;AAAA,IA+HjCnB,SAAA,GAAkC;AAAA,QAC1B,IAAA,IAAK7L,CAAAA,IAAL,CAAU6D,IAAV,KAAmB,WAAnB,EAAgC;AAAA,YAChC,OAAO,IAAI8J,gBAAJ,CAAqB,CAAC;AAAA,oBAACK,OAAA,EAAS,IAAA,CAAKtB,IAAL,CAAU,CAAV,CAAV;AAAA,oBAAwBhD,KAAA,EAAO,IAA/B;AAAA,oBAAqClH,IAAA,EAAM,IAA3C;AAAA,oBAAiD2I,SAAA,EAAW,IAA5D;AAAA,iBAAD,CAArB,CAAA,CAA0FU,SAA1F,EAAP,CADgC;AAAA,SADN;AAAA,QAK1B,IAAA,IAAK7L,CAAAA,IAAL,CAAU6D,IAAV,KAAmB,eAAnB,EAAoC;AAAA,YACpC,OAAO,IAAIsK,eAAJ,CAAoB,IAAKzB,CAAAA,IAAL,CAAU,CAAV,CAApB,CAAA,CAAkCb,SAAlC,EAAP,CADoC;AAAA,SALV;AAAA,QAS9B,MAAMC,UAAA,GAA6B,IAAA,CAAK9L,IAAL,CAAU6D,IAAV,KAAmB,OAAnB,GAA6B,EAA7B,GAAkC,CAAC,CAAM,GAAN,GAAM,IAAA,CAAK7D,IAAL,CAAU6D,IAAhB,EAAD,CAAA,CAArE,CAT8B;AAAA,QAU9B,IAAKkJ,CAAAA,SAAL,CAAwBsC,KAAT,IAAS;AAAA,YAAavD,UAAA,CAAA9N,IAAA,CAAKqR,KAAA,CAAMxD,SAAN,EAAL,CAAb,CAAA;AAAA,SAAxB,CAV8B,CAAA;AAAA,QAWvB,OAAAC,UAAA,CAXuB;AAAA,KA/HD;AAAA;;ACpBrC,MAAMwD,aAAA,GAAgB;AAAA,IAAC,SAAD;AAAA,IAAY,OAAZ;AAAA,IAAqB,YAArB;AAAA,IAAmC,SAAnC;AAAA,CAAtB,CATA;AAWA,MAAMC,iBAAN,CAAwB;AAAA,IAgBpBpM,WAAA,CAAYqM,KAAZ,EAAmCnT,OAAnC,EAAmE;AAAA,QAC/D,IAAKoT,CAAAA,OAAL,GAAgB,IAAhB,CAD+D;AAAA,QAE/D,IAAKC,CAAAA,OAAL,GAAe,IAAf,CAF+D;AAAA,QAG/D,IAAKC,CAAAA,YAAL,GAAoB,IAApB,CAH+D;AAAA,QAI/D,IAAKC,CAAAA,gBAAL,GAAwB,IAAxB,CAJ+D;AAAA,QAK/D,IAAKC,CAAAA,gBAAL,GAAwB,EAAxB,CAL+D;AAAA,QAM/D,IAAKvB,CAAAA,eAAL,GAAuB,IAAvB,CAN+D;AAAA,QAO/D,IAAKwB,CAAAA,SAAL,GAAiB,IAAjB,CAP+D;AAAA,QAQ/D,IAAKC,CAAAA,gBAAL,GAAwB,IAAxB,CAR+D;AAAA,QAS/D,IAAKC,CAAAA,mBAAL,GAA2B,IAA3B,CAT+D;AAAA,QAU/D,IAAKR,CAAAA,KAAL,GAAaA,KAAb,CAV+D;AAAA,QAW/D,IAAKnT,CAAAA,OAAL,GAAeA,OAAf,CAX+D;AAAA,KAhB/C;AAAA,IA8BpB+D,EAAA,GAAoB;AAAA,QACT,OAAA,IAAKsP,CAAAA,OAAL,IAAgB,IAAKA,CAAAA,OAAL,CAAatP,EAAb,KAAoB,KAAY,CAAhD,GAAgD,IAAKsP,CAAAA,OAAL,CAAatP,EAA7D,GAAkE,IAAlE,CADS;AAAA,KA9BA;AAAA,IAkCpB6P,YAAA,GAA8B;AAAA,QAC1B,OAAO,IAAKP,CAAAA,OAAL,GAAe,OAAO,IAAKA,CAAAA,OAAL,CAAa1P,IAApB,KAA6B,QAA7B,GAAwCsP,aAAA,CAAc,IAAKI,CAAAA,OAAL,CAAa1P,IAA3B,CAAxC,GAA2E,IAAK0P,CAAAA,OAAL,CAAa1P,IAAvG,GAA8G,IAArH,CAD0B;AAAA,KAlCV;AAAA,IAsCpBkQ,QAAA,GAAmD;AAAA,QAC/C,OAAO,IAAA,CAAKR,OAAL,IAAgB,cAAc,IAAKA,CAAAA,OAAnC,GAA6C,IAAA,CAAKA,OAAL,CAAaQ,QAA1D,GAAqE,IAA5E,CAD+C;AAAA,KAtC/B;AAAA,IA0CpBC,WAAA,GAAsC;AAAA,QAClC,OAAO,IAAKL,CAAAA,SAAZ,CADkC;AAAA,KA1ClB;AAAA,IA8CpB7P,UAAA,GAEM;AAAA,QACF,OAAQ,IAAKyP,CAAAA,OAAL,IAAgB,IAAA,CAAKA,OAAL,CAAazP,UAA7B,IAA4C,EAApD,CADE;AAAA,KAhDc;AAAA,IAoDpBmQ,YAAA,CAAaC,CAAb,EAAgC;AAAA,QACrB,OAAA,IAAKZ,CAAAA,OAAL,CAAaa,UAAb,IAA2B,CAA3B,CADqB;AAAA,KApDZ;AAAA,IAwDpBC,kBAAA,GAA6B;AAAA,QACrB,IAAA,IAAKR,CAAAA,gBAAL,IAAyB,IAAA,CAAKC,mBAA9B,EAAmD;AAAA,YAE7C,MAAAhB,CAAA,GAAI,KAAKgB,mBAAL,CAAyBQ,MAA7B,CAF6C;AAAA,YAG7C,MAAA9G,KAAA,GAAQ,KAAKsG,mBAAL,CAAyBtG,KAAjC,CAH6C;AAAA,YAInD,MAAM,CAACpJ,CAAD,EAAImQ,CAAJ,CAAS,GAAA,IAAA,CAAKV,gBAApB,CAJmD;AAAA,YAOnD,MAAMW,EAAA,GAAKpQ,CAAA,GAAIoJ,KAAJ,GAAYsF,CAAA,CAAE,CAAF,CAAvB,CAPmD;AAAA,YAQnD,MAAM2B,EAAA,GAAKF,CAAA,GAAI/G,KAAJ,GAAYsF,CAAA,CAAE,CAAF,CAAvB,CARmD;AAAA,YAWnD,MAAM4B,EAAA,GAAK,IAAKZ,CAAAA,mBAAL,CAAyBa,OAAzB,CAAiC,CAAjC,CAAX,CAXmD;AAAA,YAYnD,MAAMC,EAAA,GAAK,IAAKd,CAAAA,mBAAL,CAAyBa,OAAzB,CAAiC,CAAjC,CAAX,CAZmD;AAAA,YAe7C,MAAAE,IAAA,GAAQH,EAAA,GAAKF,EAAL,GAAUI,EAAA,GAAKH,EAAvB,CAf6C;AAAA,YAgB5C,OAAAI,IAAA,CAhB4C;AAAA,SAD9B;AAAA,QAoBlB,OAAA,CAAA,CApBkB;AAAA,KAxDT;AAAA,IA+EpB9B,UAAA,CAAWvN,KAAX,EAAoD;AAAA,QAC5C,IAAAsP,MAAA,GAAS,IAAA,CAAKnB,gBAAL,CAAsBnO,KAAtB,CAAT,CAD4C;AAAA,QAEhD,IAAI,CAACsP,MAAL,EAAa;AAAA,YAETA,MAAA,GAAS,IAAKnB,CAAAA,gBAAL,CAAsBnO,KAAtB,CAA+B6F,GAAAA,KAAA,CAAM/J,KAAN,CAAYkE,KAAZ,CAAxC,CAFS;AAAA,SAFmC;AAAA,QAMzC,OAAAsP,MAAA,CANyC;AAAA,KA/EhC;AAAA,IAwFpBC,SAAA,CAAU7Q,EAAV,EAA4D;AAAA,QACxD,OAAO,IAAA,CAAK/D,OAAL,GAAe,IAAKA,CAAAA,OAAL,CAAaqH,GAAb,CAAiBtD,EAAjB,CAAf,GAAsC,IAA7C,CADwD;AAAA,KAxFxC;AAAA;;ACQxB,MAAM8Q,kBAAN,CAA+C;AAAA,IAW3C/N,WAAA,CAAYK,IAAZ,EAA0BxD,IAA1B,EAAsC8M,QAAtC,EAA0DJ,IAA1D,EAAmFyE,aAAnF,EAA0G;AAAA,QACtG,IAAK3N,CAAAA,IAAL,GAAYA,IAAZ,CADsG;AAAA,QAEtG,IAAKxD,CAAAA,IAAL,GAAYA,IAAZ,CAFsG;AAAA,QAGtG,IAAKoR,CAAAA,SAAL,GAAiBtE,QAAjB,CAHsG;AAAA,QAItG,IAAKJ,CAAAA,IAAL,GAAYA,IAAZ,CAJsG;AAAA,QAKtG,IAAK2E,CAAAA,cAAL,GAAsBF,aAAtB,CALsG;AAAA,KAX/D;AAAA,IAmB3CrE,QAAA,CAASS,GAAT,EAAwC;AAAA,QAChC,IAAA,CAAC,IAAK6D,CAAAA,SAAN,EAAiB;AAAA,YACjB,MAAME,UAAA,GAAaJ,kBAAA,CAAmBK,WAAnB,CAA+B,IAAA,CAAK/N,IAApC,CAAnB,CADiB;AAAA,YAEjB,IAAA,CAAK4N,SAAL,GAAiBtT,KAAA,CAAMC,OAAN,CAAcuT,UAAd,CAAA,GAA4BA,UAAA,CAAW,CAAX,CAA5B,GAA4CA,UAAA,CAAWE,SAAX,CAAqB,KAAKH,cAA1B,CAAA,CAA0C,CAA1C,CAA7D,CAFiB;AAAA,SADe;AAAA,QAKpC,OAAO,KAAKD,SAAL,CAAe7D,GAAf,EAAoB,IAAA,CAAKb,IAAzB,CAAP,CALoC;AAAA,KAnBG;AAAA,IA2B3CK,SAAA,CAAUS,EAAV,EAAuC;AAAA,QAC9B,KAAAd,IAAA,CAAKxM,OAAL,CAAasN,EAAb,CAD8B,CAAA;AAAA,KA3BI;AAAA,IA+B3CR,aAAA,GAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KA/BkB;AAAA,IAmC3CnB,SAAA,GAA4B;AAAA,QAExB,OAAO,CAAC,IAAKrI,CAAAA,IAAN,EAAYT,MAAZ,CAAmB,KAAK2J,IAAL,CAAU3N,GAAV,CAAqB2O,GAAP,IAAOA,GAAA,CAAI7B,SAAJ,EAArB,CAAnB,CAAP,CAFwB;AAAA,KAnCe;AAAA,IAwC3C,OAAOrO,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAmG;AAAA,QACzF,MAAAjG,EAAA,GAAcgG,IAAA,CAAK,CAAL,CAAd,CADyF;AAAA,QAEzF,MAAA4E,UAAA,GAAaJ,kBAAA,CAAmBK,WAAnB,CAA+B7K,EAA/B,CAAb,CAFyF;AAAA,QAG/F,IAAI,CAAC4K,UAAL,EAAiB;AAAA,YAEb,OAAO3E,OAAA,CAAQC,KAAR,CAAc,CAAuB,oBAAvB,GAAuBlG,EAAvB,2DAAA,CAAd,EAAoG,CAApG,CAAP,CAFa;AAAA,SAH8E;AAAA,QASzF,MAAA1G,IAAA,GAAOlC,KAAA,CAAMC,OAAN,CAAcuT,UAAd,CACTA,GAAAA,UAAA,CAAW,CAAX,CADS,GACOA,UAAA,CAAWtR,IADzB,CATyF;AAAA,QAY/F,MAAMyR,kBAAA,GAAqB3T,KAAA,CAAMC,OAAN,CAAcuT,UAAd,CAAA,GACvB,CAAC;AAAA,gBAACA,UAAA,CAAW,CAAX,CAAD;AAAA,gBAAgBA,UAAA,CAAW,CAAX,CAAhB;AAAA,aAAD,CADuB,GAEvBA,UAAA,CAAWE,SAFf,CAZ+F;AAAA,QAgB/F,MAAME,cAAA,GAAiB,EAAvB,CAhB+F;AAAA,QAkB/F,IAAIC,gBAAA,GAAoC,IAAxC,CAlB+F;AAAA,QAoB/F,IAAIR,aAAA,GAAgB,CAAA,CAApB,CApB+F;AAAA,QAsB/F,KAAA,MAAW,CAACtK,MAAD,EAASiG,QAAT,CAAX,IAAiC2E,kBAAjC,EAAqD;AAAA,YAC7C,IAAA3T,KAAA,CAAMC,OAAN,CAAc8I,MAAd,CAAA,IAAyBA,MAAA,CAAO1J,MAAP,KAAkBuP,IAAA,CAAKvP,MAAL,GAAc,CAAzD;AAAA,gBAA4D,SADf;AAAA,YAGjDuU,cAAA,CAAe1T,IAAf,CAAoB6I,MAApB,CAHiD,CAAA;AAAA,YAIjDsK,aAAA,EAJiD,CAAA;AAAA,YAQjDQ,gBAAA,GAAmB,IAAIC,gBAAJ,CAAmBjF,OAAA,CAAQoC,QAA3B,EAAqCpC,OAAA,CAAQxM,IAA7C,EAAmD,IAAnD,EAAyDwM,OAAA,CAAQ6C,KAAjE,EAAwE,KAAA,CAAxE,EAAmF7C,OAAA,CAAQkF,MAA3F,EAAmGlF,OAAA,CAAQtQ,OAA3G,CAAnB,CARiD;AAAA,YAYjD,MAAMyV,UAAA,GAAgC,EAAtC,CAZiD;AAAA,YAajD,IAAIC,cAAA,GAAiB,KAArB,CAbiD;AAAA,YAcjD,KAAA,IAAS3S,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsN,IAAA,CAAKvP,MAAzB,EAAiCiC,CAAA,EAAjC,EAAsC;AAAA,gBAC5B,MAAAsO,GAAA,GAAMhB,IAAA,CAAKtN,CAAL,CAAN,CAD4B;AAAA,gBAElC,MAAMyN,YAAA,GAAe/O,KAAA,CAAMC,OAAN,CAAc8I,MAAd,CAAA,GACjBA,MAAA,CAAOzH,CAAA,GAAI,CAAX,CADiB;AAGjB,gBAAAyH,MAAA,CAAO7G,IAHX,CAFkC;AAAA,gBAOlC,MAAMsN,MAAA,GAASqE,gBAAA,CAAiBnU,KAAjB,CAAuBkQ,GAAvB,EAA4B,CAAA,GAAIoE,UAAA,CAAW3U,MAA3C,EAAmD0P,YAAnD,CAAf,CAPkC;AAAA,gBAQlC,IAAI,CAACS,MAAL,EAAa;AAAA,oBACQyE,cAAA,GAAA,IAAA,CADR;AAAA,oBAET,MAFS;AAAA,iBARqB;AAAA,gBAYlCD,UAAA,CAAW9T,IAAX,CAAgBsP,MAAhB,CAZkC,CAAA;AAAA,aAdW;AAAA,YA4BjD,IAAIyE,cAAJ,EAAoB;AAAA,gBAGhB,SAHgB;AAAA,aA5B6B;AAAA,YAkC7C,IAAAjU,KAAA,CAAMC,OAAN,CAAc8I,MAAd,CAAA,EAAuB;AAAA,gBACnB,IAAAA,MAAA,CAAO1J,MAAP,KAAkB2U,UAAA,CAAW3U,MAA7B,EAAqC;AAAA,oBACrCwU,gBAAA,CAAiB/E,KAAjB,CAAuB,CAAY,SAAZ,GAAY/F,MAAA,CAAO1J,MAAnB,EAAkD,sBAAlD,GAAkD2U,UAAA,CAAW3U,MAA7D,EAA8E,SAA9E,CAAvB,CADqC,CAAA;AAAA,oBAErC,SAFqC;AAAA,iBADlB;AAAA,aAlCsB;AAAA,YAyCjD,KAAA,IAASiC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI0S,UAAA,CAAW3U,MAA/B,EAAuCiC,CAAA,EAAvC,EAA4C;AAAA,gBAElC,MAAA0F,QAAA,GAAWhH,KAAA,CAAMC,OAAN,CAAc8I,MAAd,CAAwBA,GAAAA,MAAA,CAAOzH,CAAP,CAAxB,GAAoCyH,MAAA,CAAO7G,IAAtD,CAFkC;AAAA,gBAGlC,MAAA0N,GAAA,GAAMoE,UAAA,CAAW1S,CAAX,CAAN,CAHkC;AAAA,gBAIxCuS,gBAAA,CAAiB5O,MAAjB,CAAwB3D,CAAA,GAAI,CAA5B,CAA+ByF,CAAAA,YAA/B,CAA4CC,QAA5C,EAAsD4I,GAAA,CAAI1N,IAA1D,CAJwC,CAAA;AAAA,aAzCK;AAAA,YAgD7C,IAAA2R,gBAAA,CAAiBK,MAAjB,CAAwB7U,MAAxB,KAAmC,CAAnC,EAAsC;AAAA,gBAEtC,OAAO,IAAI+T,kBAAJ,CAAuBxK,EAAvB,EAA2B1G,IAA3B,EAAiC8M,QAAjC,EAA2CgF,UAA3C,EAAuDX,aAAvD,CAAP,CAFsC;AAAA,aAhDO;AAAA,SAtB0C;AAAA,QA8E3F,IAAAO,cAAA,CAAevU,MAAf,KAA0B,CAA1B,EAA6B;AAAA,YAC7BwP,OAAA,CAAQqF,MAAR,CAAehU,IAAf,CAAoB,GAAG2T,gBAAA,CAAiBK,MAAxC,CAD6B,CAAA;AAAA,SAA7B,MAEG;AAAA,YACG,MAAAlN,QAAA,GAAW4M,cAAA,CAAevU,MAAf,GAAwBuU,cAAxB,GAAyCD,kBAAA,CAAmB1S,GAAnB,CAAuB,CAAC,CAAC8H,MAAD,CAAD,KAAcA,MAArC,CAApD,CADH;AAAA,YAEH,MAAMoL,UAAA,GAAanN,QAAA,CAAS/F,GAAT,CAAamT,kBAAb,CAAiC5T,CAAAA,IAAjC,CAAsC,KAAtC,CAAnB,CAFG;AAAA,YAIH,MAAM6T,WAAA,GAAc,EAApB,CAJG;AAAA,YAOH,KAAA,IAAS/S,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsN,IAAA,CAAKvP,MAAzB,EAAiCiC,CAAA,EAAjC,EAAsC;AAAA,gBAC5B,MAAAkO,MAAA,GAASX,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKtN,CAAL,CAAd,EAAuB,CAAA,GAAI+S,WAAA,CAAYhV,MAAvC,CAAT,CAD4B;AAAA,gBAE9B,IAAA,CAACmQ,MAAD;AAAA,oBAAgB,OAAA,IAAA,CAFc;AAAA,gBAGlC6E,WAAA,CAAYnU,IAAZ,CAAiB2G,UAAA,CAAS2I,MAAA,CAAOtN,IAAhB,CAAjB,CAHkC,CAAA;AAAA,aAPnC;AAAA,YAYK2M,OAAA,CAAAC,KAAA,CAAM,4BAAA,GAA8BqF,UAA9B,EAAwC,aAAxC,GAAwDE,WAAA,CAAY7T,IAAZ,CAAiB,IAAjB,CAAxD,EAA0F,UAA1F,CAAN,CAZL,CAAA;AAAA,SAhFwF;AAAA,QA+FxF,OAAA,IAAA,CA/FwF;AAAA,KAxCxD;AAAA,IA0I3C,OAAO8T,QAAP,CACIrD,QADJ,EAEIwC,WAFJ,EAKE;AAAA,QAEEL,kBAAA,CAAmBK,WAAnB,GAAiCA,WAAjC,CAFF;AAAA,QAGE,KAAW/N,MAAAA,IAAX,IAAmB+N,WAAnB,EAAgC;AAAA,YAC5BxC,QAAA,CAASvL,IAAT,CAAA,GAAiB0N,kBAAjB,CAD4B;AAAA,SAHlC;AAAA,KA/IyC;AAAA,CAnB/C;AA2KA,SAASgB,kBAAT,CAA4BG,SAA5B,EAA0D;AAAA,IAClD,IAAAvU,KAAA,CAAMC,OAAN,CAAcsU,SAAd,CAAA,EAA0B;AAAA,QAC1B,OAAO,EAAA,GAAIA,SAAA,CAAUtT,GAAV,CAAc4F,UAAd,CAAA,CAAwBrG,IAAxB,CAA6B,IAA7B,CAAJ,EAAsC,CAAtC,CAAP,CAD0B;AAAA,KAA1B,MAEG;AAAA,QACH,OAAO,CAAI,CAAJ,GAAIqG,UAAA,CAAS0N,SAAA,CAAUrS,IAAnB,CAAJ,EAA4B,IAA5B,CAAP,CADG;AAAA,KAH+C;AAAA;;ACnK1D,MAAqBsS,kBAArB,CAA8D;AAAA,IAM1DnP,WAAA,CAAYiH,aAAZ,EAAuCC,kBAAvC,EAAuEC,MAAvE,EAAkG;AAAA,QAC9F,IAAKtK,CAAAA,IAAL,GAAYqE,YAAZ,CAD8F;AAAA,QAE9F,IAAKiG,CAAAA,MAAL,GAAcA,MAAd,CAF8F;AAAA,QAG9F,IAAKF,CAAAA,aAAL,GAAqBA,aAArB,CAH8F;AAAA,QAI9F,IAAKC,CAAAA,kBAAL,GAA0BA,kBAA1B,CAJ8F;AAAA,KANxC;AAAA,IAa1D,OAAO7M,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAmG;AAAA,QAC/F,IAAID,IAAA,CAAKvP,MAAL,KAAgB,CAApB;AAAA,YAEW,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAwB,sBAAxB,CAAd,CAAA,CAHoF;AAAA,QAKzF,MAAAvQ,OAAA,GAAWqQ,IAAA,CAAK,CAAL,CAAX,CALyF;AAAA,QAM/F,IAAI,OAAOrQ,OAAP,KAAmB,QAAnB,IAA+ByB,KAAA,CAAMC,OAAN,CAAc1B,OAAd,CAAnC;AAAA,YAEW,OAAAsQ,OAAA,CAAQC,KAAR,CAAc,CAA8C,4CAA9C,CAAd,CAAA,CARoF;AAAA,QAU/F,MAAMxC,aAAA,GAAgB/N,OAAA,CAAQ,gBAAR,CAA8B,KAAA,KAChD,CADkB,GAClBsQ,OAAA,CAAQnP,KAAR,CAAc,KAAd,EAAqB,CAArB,EAAwBwG,WAAxB,CADkB,GAElB2I,OAAA,CAAQmB,gBAAR,CAAyBzR,OAAA,CAAQ,gBAAR,CAAzB,EAAoD,CAApD,EAAuD,gBAAvD,EAAyE2H,WAAzE,CAFJ,CAV+F;AAAA,QAa3F,IAAA,CAACoG,aAAD;AAAA,YAAuB,OAAA,IAAA,CAboE;AAAA,QAe/F,MAAMC,kBAAA,GAAqBhO,OAAA,CAAQ,qBAAR,CAAmC,KAAA,KAC1D,CADuB,GACvBsQ,OAAA,CAAQnP,KAAR,CAAc,KAAd,EAAqB,CAArB,EAAwBwG,WAAxB,CADuB,GAEvB2I,OAAA,CAAQmB,gBAAR,CAAyBzR,OAAA,CAAQ,qBAAR,CAAzB,EAAyD,CAAzD,EAA4D,qBAA5D,EAAmF2H,WAAnF,CAFJ,CAf+F;AAAA,QAkB3F,IAAA,CAACqG,kBAAD;AAAA,YAA4B,OAAA,IAAA,CAlB+D;AAAA,QAoB/F,IAAIC,MAAA,GAAS,IAAb,CApB+F;AAAA,QAqB3F,IAAAjO,OAAA,CAAQ,QAAR,CAAA,EAAmB;AAAA,YACnBiO,MAAA,GAASqC,OAAA,CAAQmB,gBAAR,CAAyBzR,OAAA,CAAQ,QAAR,CAAzB,EAA4C,CAA5C,EAA+C,QAA/C,EAAyD0H,UAAzD,CAAT,CADmB;AAAA,YAEf,IAAA,CAACuG,MAAD;AAAA,gBAAgB,OAAA,IAAA,CAFD;AAAA,SArBwE;AAAA,QA0B/F,OAAO,IAAIgI,kBAAJ,CAAuBlI,aAAvB,EAAsCC,kBAAtC,EAA0DC,MAA1D,CAAP,CA1B+F;AAAA,KAbzC;AAAA,IA0C1DwC,QAAA,CAASS,GAAT,EAA2C;AAAA,QACvC,OAAO,IAAIpD,QAAJ,CAAa,KAAKC,aAAL,CAAmB0C,QAAnB,CAA4BS,GAA5B,CAAb,EAA+C,IAAA,CAAKlD,kBAAL,CAAwByC,QAAxB,CAAiCS,GAAjC,CAA/C,EAAsF,IAAKjD,CAAAA,MAAL,GAAc,IAAKA,CAAAA,MAAL,CAAYwC,QAAZ,CAAqBS,GAArB,CAAd,GAA0C,IAAhI,CAAP,CADuC;AAAA,KA1Ce;AAAA,IA8C1DR,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAKpD,CAAAA,aAAR,CADmC,CAAA;AAAA,QAEnCoD,EAAA,CAAG,IAAKnD,CAAAA,kBAAR,CAFmC,CAAA;AAAA,QAGnC,IAAI,IAAKC,CAAAA,MAAT,EAAiB;AAAA,YACbkD,EAAA,CAAG,IAAKlD,CAAAA,MAAR,CADa,CAAA;AAAA,SAHkB;AAAA,KA9CmB;AAAA,IAsD1D0C,aAAA,GAAyB;AAAA,QAKd,OAAA,KAAA,CALc;AAAA,KAtDiC;AAAA,IA8D1DnB,SAAA,GAAkC;AAAA,QAC9B,MAAMxP,OAAA,GAA+B,EAArC,CAD8B;AAAA,QAE9BA,OAAA,CAAQ,gBAAR,CAAA,GAA4B,KAAK+N,aAAL,CAAmByB,SAAnB,EAA5B,CAF8B;AAAA,QAG9BxP,OAAA,CAAQ,qBAAR,CAAA,GAAiC,KAAKgO,kBAAL,CAAwBwB,SAAxB,EAAjC,CAH8B;AAAA,QAI9B,IAAI,IAAKvB,CAAAA,MAAT,EAAiB;AAAA,YACbjO,OAAA,CAAQ,QAAR,CAAA,GAAoB,KAAKiO,MAAL,CAAYuB,SAAZ,EAApB,CADa;AAAA,SAJa;AAAA,QAOvB,OAAA;AAAA,YAAC,UAAD;AAAA,YAAaxP,OAAb;AAAA,SAAA,CAPuB;AAAA,KA9DwB;AAAA;;ACI9D,SAASkW,mBAAT,CAA6BC,IAA7B,EAAyD;AAAA,IACrD,IAAIC,GAAA,GAAM,CAAV,CADqD;AAAA,IAErD,KAAA,IAASrT,CAAA,GAAI,CAAb,EAAgBsT,GAAA,GAAMF,IAAA,CAAKrV,MAA3B,EAAmCwV,CAAA,GAAID,GAAA,GAAM,CAA7C,EAAgDE,EAAhD,EAAoDC,EAApD,EAAwDzT,CAAA,GAAIsT,GAA5D,EAAiEC,CAAA,GAAIvT,CAAA,EAArE,EAA0E;AAAA,QACtEwT,EAAA,GAAKJ,IAAA,CAAKpT,CAAL,CAAL,CADsE;AAAA,QAEtEyT,EAAA,GAAKL,IAAA,CAAKG,CAAL,CAAL,CAFsE;AAAA,QAGtEF,GAAA,IAAQ,CAAAI,EAAA,CAAGvS,CAAH,GAAOsS,EAAA,CAAGtS,CAAV,KAAgBsS,EAAA,CAAGnC,CAAH,GAAOoC,EAAA,CAAGpC,CAAV,CAAxB,CAHsE;AAAA,KAFrB;AAAA,IAO9C,OAAAgC,GAAA,CAP8C;AAAA,CAZzD;AA+BgB,SAAAK,aAAA,CAAcC,KAAd,EAA0CC,QAA1C,EAAwF;AAAA,IACpG,MAAMN,GAAA,GAAMK,KAAA,CAAM5V,MAAlB,CADoG;AAAA,IAGpG,IAAIuV,GAAA,IAAO,CAAX;AAAA,QAAqB,OAAA,CAACK,KAAD,CAAA,CAH+E;AAAA,IAKpG,MAAME,QAAA,GAAW,EAAjB,CALoG;AAAA,IAMpG,IAAIC,OAAJ,EACIC,GADJ,CANoG;AAAA,IASpG,KAAA,IAAS/T,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsT,GAApB,EAAyBtT,CAAA,EAAzB,EAA8B;AAAA,QAC1B,MAAMgU,IAAA,GAAOb,mBAAA,CAAoBQ,KAAA,CAAM3T,CAAN,CAApB,CAAb,CAD0B;AAAA,QAE1B,IAAIgU,IAAA,KAAS,CAAb;AAAA,YAAgB,SAFU;AAAA,QAIzBL,KAAA,CAAM3T,CAAN,CAAA,CAAiBgU,IAAjB,GAAwB5N,IAAA,CAAK6N,GAAL,CAASD,IAAT,CAAxB,CAJyB;AAAA,QAMtB,IAAAD,GAAA,KAAQ,KAAW,CAAnB;AAAA,YAAmBA,GAAA,GAAMC,IAAA,GAAO,CAAb,CANG;AAAA,QAQtB,IAAAD,GAAA,KAAQC,IAAA,GAAO,CAAf,EAAkB;AAAA,YACd,IAAAF,OAAA;AAAA,gBAAkBD,QAAA,CAAAjV,IAAA,CAAKkV,OAAL,CADJ,CAAA;AAAA,YAERA,OAAA,GAAA,CAACH,KAAA,CAAM3T,CAAN,CAAD,CAAA,CAFQ;AAAA,SAAlB,MAIG;AAAA,YACF8T,OAAA,CAASlV,IAAT,CAAc+U,KAAA,CAAM3T,CAAN,CAAd,CADE,CAAA;AAAA,SAZmB;AAAA,KATsE;AAAA,IAyBhG,IAAA8T,OAAA;AAAA,QAAkBD,QAAA,CAAAjV,IAAA,CAAKkV,OAAL,CAzB8E,CAAA;AAAA,IAqC7F,OAAAD,QAAA,CArC6F;AAAA,CA/BxG;AAuEgB,SAAAK,UAAA,CAAWC,IAAX,EAAuBlS,KAAvB,EAAgD;AAAA,IACvDkS,IAAA,CAAA,CAAA,IAAK/N,IAAA,CAAKgO,GAAL,CAASD,IAAA,CAAK,CAAL,CAAT,EAAkBlS,KAAA,CAAM,CAAN,CAAlB,CAAL,CADuD;AAAA,IAEvDkS,IAAA,CAAA,CAAA,IAAK/N,IAAA,CAAKgO,GAAL,CAASD,IAAA,CAAK,CAAL,CAAT,EAAkBlS,KAAA,CAAM,CAAN,CAAlB,CAAL,CAFuD;AAAA,IAGvDkS,IAAA,CAAA,CAAA,IAAK/N,IAAA,CAAKiO,GAAL,CAASF,IAAA,CAAK,CAAL,CAAT,EAAkBlS,KAAA,CAAM,CAAN,CAAlB,CAAL,CAHuD;AAAA,IAIvDkS,IAAA,CAAA,CAAA,IAAK/N,IAAA,CAAKiO,GAAL,CAASF,IAAA,CAAK,CAAL,CAAT,EAAkBlS,KAAA,CAAM,CAAN,CAAlB,CAAL,CAJuD;AAAA,CAvEhE;AA8EgB,SAAAqS,YAAA,CAAaC,KAAb,EAA0BC,KAA1B,EAAgD;AAAA,IAC5D,IAAID,KAAA,CAAM,CAAN,KAAYC,KAAA,CAAM,CAAN,CAAhB;AAAA,QAAiC,OAAA,KAAA,CAD2B;AAAA,IAE5D,IAAID,KAAA,CAAM,CAAN,KAAYC,KAAA,CAAM,CAAN,CAAhB;AAAA,QAAiC,OAAA,KAAA,CAF2B;AAAA,IAG5D,IAAID,KAAA,CAAM,CAAN,KAAYC,KAAA,CAAM,CAAN,CAAhB;AAAA,QAAiC,OAAA,KAAA,CAH2B;AAAA,IAI5D,IAAID,KAAA,CAAM,CAAN,KAAYC,KAAA,CAAM,CAAN,CAAhB;AAAA,QAAiC,OAAA,KAAA,CAJ2B;AAAA,IAKrD,OAAA,IAAA,CALqD;AAAA,CA9EhE;AAsFA,SAASC,UAAT,CAAoBC,CAApB,EAAyClB,EAAzC,EAA+DC,EAA/D,EAAqF;AAAA,IACjF,MAAMkB,EAAA,GAAKD,CAAA,CAAE,CAAF,CAAA,GAAOlB,EAAA,CAAG,CAAH,CAAlB,CADiF;AAAA,IAEjF,MAAMoB,EAAA,GAAKF,CAAA,CAAE,CAAF,CAAA,GAAOlB,EAAA,CAAG,CAAH,CAAlB,CAFiF;AAAA,IAGjF,MAAMqB,EAAA,GAAKH,CAAA,CAAE,CAAF,CAAA,GAAOjB,EAAA,CAAG,CAAH,CAAlB,CAHiF;AAAA,IAIjF,MAAMqB,EAAA,GAAKJ,CAAA,CAAE,CAAF,CAAA,GAAOjB,EAAA,CAAG,CAAH,CAAlB,CAJiF;AAAA,IAKzE,OAAAkB,EAAA,GAAKG,EAAL,GAAUD,EAAA,GAAKD,EAAf,KAAsB,CAAtB,IAA6BD,EAAA,GAAKE,EAAL,IAAW,CAAxC,IAA+CD,EAAA,GAAKE,EAAL,IAAW,CAA1D,CALyE;AAAA,CAtFrF;AA8FA,SAASC,YAAT,CAAsBL,CAAtB,EAA2ClB,EAA3C,EAAiEC,EAAjE,EAAuF;AAAA,IACnF,OAASD,EAAA,CAAG,CAAH,CAAQkB,GAAAA,CAAA,CAAE,CAAF,CAAR,KAAmBjB,EAAA,CAAG,CAAH,CAAA,GAAQiB,CAAA,CAAE,CAAF,CAA3B,IAAsCA,CAAA,CAAE,CAAF,CAAQ,GAAA,CAAAjB,EAAA,CAAG,CAAH,CAAA,GAAQD,EAAA,CAAG,CAAH,CAAR,KAAkBkB,CAAA,CAAE,CAAF,CAAOlB,GAAAA,EAAA,CAAG,CAAH,CAAP,KAAiBC,EAAA,CAAG,CAAH,CAAA,GAAQD,EAAA,CAAG,CAAH,CAAR,IAAiBA,EAAA,CAAG,CAAH,CAA3G,CADmF;AAAA,CA9FvF;AAmGO,SAASwB,kBAAT,CACHC,KADG,EAEHtB,KAFG,EAGHuB,cAAA,GAA0B,KAHvB,EAII;AAAA,IACP,IAAIC,MAAA,GAAS,KAAb,CADO;AAAA,IAEP,KAAA,IAASnV,CAAA,GAAI,CAAb,EAAgBsT,GAAA,GAAMK,KAAA,CAAM5V,MAA5B,EAAoCiC,CAAA,GAAIsT,GAAxC,EAA6CtT,CAAA,EAA7C,EAAkD;AAAA,QACxC,MAAAoT,IAAA,GAAOO,KAAA,CAAM3T,CAAN,CAAP,CADwC;AAAA,QAErC,KAAA,IAAAuT,CAAA,GAAI,CAAJ,EAAO6B,IAAA,GAAOhC,IAAA,CAAKrV,MAAnB,EAA2BuC,CAAA,GAAI8U,IAAA,GAAO,CAAtC,EAAyC7B,CAAA,GAAI6B,IAA7C,EAAmD9U,CAAA,GAAIiT,CAAA,EAAvD,EAA4D;AAAA,YAC3D,MAAA8B,EAAA,GAAKjC,IAAA,CAAK9S,CAAL,CAAL,CAD2D;AAAA,YAE3D,MAAAgV,EAAA,GAAKlC,IAAA,CAAKG,CAAL,CAAL,CAF2D;AAAA,YAGjE,IAAIkB,UAAA,CAAWQ,KAAX,EAAkBI,EAAlB,EAAsBC,EAAtB,CAAJ;AAAA,gBAAsC,OAAAJ,cAAA,CAH2B;AAAA,YAIjE,IAAIH,YAAA,CAAaE,KAAb,EAAoBI,EAApB,EAAwBC,EAAxB,CAAJ;AAAA,yBAA0C,CAACH,OAJsB;AAAA,SAFvB;AAAA,KAF3C;AAAA,IAWA,OAAAA,MAAA,CAXA;AAAA,CAvGX;AAqHA,SAASI,IAAT,CAAcC,EAAd,EAAoCC,EAApC,EAA0D;AAAA,IAC/C,OAAAD,EAAA,CAAG,CAAH,CAAQC,GAAAA,EAAA,CAAG,CAAH,CAAR,GAAgBD,EAAA,CAAG,CAAH,CAAA,GAAQC,EAAA,CAAG,CAAH,CAAxB,CAD+C;AAAA,CArH1D;AA0HA,SAASC,QAAT,CAAkBlC,EAAlB,EAAwCC,EAAxC,EAA8D4B,EAA9D,EAAoFC,EAApF,EAA0G;AAAA,IAEtG,MAAMX,EAAA,GAAKnB,EAAA,CAAG,CAAH,CAAA,GAAQ6B,EAAA,CAAG,CAAH,CAAnB,CAFsG;AAAA,IAGtG,MAAMT,EAAA,GAAKpB,EAAA,CAAG,CAAH,CAAA,GAAQ6B,EAAA,CAAG,CAAH,CAAnB,CAHsG;AAAA,IAItG,MAAMR,EAAA,GAAKpB,EAAA,CAAG,CAAH,CAAA,GAAQ4B,EAAA,CAAG,CAAH,CAAnB,CAJsG;AAAA,IAKtG,MAAMP,EAAA,GAAKrB,EAAA,CAAG,CAAH,CAAA,GAAQ4B,EAAA,CAAG,CAAH,CAAnB,CALsG;AAAA,IAMtG,MAAMM,EAAA,GAAKL,EAAA,CAAG,CAAH,CAAA,GAAQD,EAAA,CAAG,CAAH,CAAnB,CANsG;AAAA,IAOtG,MAAMO,EAAA,GAAKN,EAAA,CAAG,CAAH,CAAA,GAAQD,EAAA,CAAG,CAAH,CAAnB,CAPsG;AAAA,IAQhG,MAAAQ,IAAA,GAAOlB,EAAA,GAAKiB,EAAL,GAAUD,EAAA,GAAKf,EAAtB,CARgG;AAAA,IAShG,MAAAkB,IAAA,GAAOjB,EAAA,GAAKe,EAAL,GAAUD,EAAA,GAAKb,EAAtB,CATgG;AAAA,IAUjG,IAAAe,IAAA,GAAO,CAAP,IAAYC,IAAA,GAAO,CAAnB,IAA0BD,IAAA,GAAO,CAAP,IAAYC,IAAA,GAAO,CAA7C;AAAA,QAAwD,OAAA,IAAA,CAVyC;AAAA,IAW/F,OAAA,KAAA,CAX+F;AAAA,CA1H1G;AAwIO,SAASC,uBAAT,CACH/N,CADG,EAEHC,CAFG,EAGH2H,CAHG,EAIHtH,CAJG,EAKI;AAAA,IAIP,MAAM0N,OAAA,GAAU;AAAA,QAAC/N,CAAA,CAAE,CAAF,IAAOD,CAAA,CAAE,CAAF,CAAR;AAAA,QAAcC,CAAA,CAAE,CAAF,IAAOD,CAAA,CAAE,CAAF,CAArB;AAAA,KAAhB,CAJO;AAAA,IAKP,MAAMiO,OAAA,GAAU;AAAA,QAAC3N,CAAA,CAAE,CAAF,IAAOsH,CAAA,CAAE,CAAF,CAAR;AAAA,QAActH,CAAA,CAAE,CAAF,IAAOsH,CAAA,CAAE,CAAF,CAArB;AAAA,KAAhB,CALO;AAAA,IAMP,IAAI2F,IAAA,CAAKU,OAAL,EAAcD,OAAd,MAA2B,CAA/B;AAAA,QAAyC,OAAA,KAAA,CANlC;AAAA,IAWP,IAAIN,QAAA,CAAS1N,CAAT,EAAYC,CAAZ,EAAe2H,CAAf,EAAkBtH,CAAlB,KAAwBoN,QAAA,CAAS9F,CAAT,EAAYtH,CAAZ,EAAeN,CAAf,EAAkBC,CAAlB,CAA5B;AAAA,QAAyD,OAAA,IAAA,CAXlD;AAAA,IAYA,OAAA,KAAA,CAZA;AAAA;;AC/HX,MAAMiO,QAAA,GAAS,IAAf,CAdA;AAgBA,SAASC,gBAAT,CAA0BC,GAA1B,EAAuC;AAAA,IACnC,OAAQ,CAAMA,GAAAA,GAAAA,GAAN,IAAa,GAArB,CADmC;AAAA,CAhBvC;AAoBA,SAASC,gBAAT,CAA0BC,GAA1B,EAAuC;AAAA,IACnC,OAAQ,CAAA,GAAA,GAAO,GAAMlQ,GAAAA,IAAA,CAAKmQ,EAAX,GAAgBnQ,IAAA,CAAKoQ,GAAL,CAASpQ,IAAA,CAAKqQ,GAAL,CAASrQ,IAAA,CAAKmQ,EAAL,GAAU,CAAV,GAAcD,GAAA,GAAMlQ,IAAA,CAAKmQ,EAAX,GAAgB,GAAvC,CAAT,CAAvB,IAAiF,GAAzF,CADmC;AAAA,CApBvC;AAwBA,SAASG,kBAAT,CAA4BhC,CAA5B,EAAiDhE,SAAjD,EAA6E;AAAA,IACzE,MAAMxP,CAAA,GAAIiV,gBAAA,CAAiBzB,CAAA,CAAE,CAAF,CAAjB,CAAV,CADyE;AAAA,IAEzE,MAAMrD,CAAA,GAAIgF,gBAAA,CAAiB3B,CAAA,CAAE,CAAF,CAAjB,CAAV,CAFyE;AAAA,IAGzE,MAAMiC,WAAA,GAAcvQ,IAAA,CAAKqE,GAAL,CAAS,CAAT,EAAYiG,SAAA,CAAUkG,CAAtB,CAApB,CAHyE;AAAA,IAIzE,OAAO;AAAA,QAACxQ,IAAA,CAAKC,KAAL,CAAWnF,CAAA,GAAIyV,WAAJ,GAAkBT,QAA7B,CAAD;AAAA,QAAuC9P,IAAA,CAAKC,KAAL,CAAWgL,CAAA,GAAIsF,WAAJ,GAAkBT,QAA7B,CAAvC;AAAA,KAAP,CAJyE;AAAA,CAxB7E;AA+BA,SAASW,mBAAT,CAA6B5B,KAA7B,EAAsDpB,QAAtD,EAAuG;AAAA,IACnG,KAAA,IAAS7T,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI6T,QAAA,CAAS9V,MAA7B,EAAqCiC,CAAA,EAArC,EAA0C;AAAA,QACtC,IAAIgV,kBAAA,CAAmBC,KAAnB,EAA0BpB,QAAA,CAAS7T,CAAT,CAA1B,CAAJ;AAAA,YAAmD,OAAA,IAAA,CADb;AAAA,KADyD;AAAA,IAI5F,OAAA,KAAA,CAJ4F;AAAA,CA/BvG;AAsCA,SAAS8W,oBAAT,CAA8BtD,EAA9B,EAAoDC,EAApD,EAA0EK,OAA1E,EAAmH;AAAA,IAC/G,KAAWV,MAAAA,IAAX,IAAmBU,OAAnB,EAA4B;AAAA,QAEf,KAAA,IAAAP,CAAA,GAAI,CAAJ,EAAOD,GAAA,GAAMF,IAAA,CAAKrV,MAAlB,EAA0BuC,CAAA,GAAIgT,GAAA,GAAM,CAApC,EAAuCC,CAAA,GAAID,GAA3C,EAAgDhT,CAAA,GAAIiT,CAAA,EAApD,EAAyD;AAAA,YACxD,MAAA8B,EAAA,GAAKjC,IAAA,CAAK9S,CAAL,CAAL,CADwD;AAAA,YAExD,MAAAgV,EAAA,GAAKlC,IAAA,CAAKG,CAAL,CAAL,CAFwD;AAAA,YAG9D,IAAIwC,uBAAA,CAAwBvC,EAAxB,EAA4BC,EAA5B,EAAgC4B,EAAhC,EAAoCC,EAApC,CAAJ,EAA6C;AAAA,gBAClC,OAAA,IAAA,CADkC;AAAA,aAHiB;AAAA,SAF1C;AAAA,KADmF;AAAA,IAWxG,OAAA,KAAA,CAXwG;AAAA,CAtCnH;AAoDA,SAASyB,uBAAT,CAAiCC,IAAjC,EAAgElD,OAAhE,EAAyG;AAAA,IAErG,KAAA,IAAS9T,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIgX,IAAA,CAAKjZ,MAAzB,EAAiC,EAAEiC,CAAnC,EAAsC;AAAA,QAClC,IAAI,CAACgV,kBAAA,CAAmBgC,IAAA,CAAKhX,CAAL,CAAnB,EAA4B8T,OAA5B,CAAL,EAA2C;AAAA,YAChC,OAAA,KAAA,CADgC;AAAA,SADT;AAAA,KAF+D;AAAA,IASrG,KAAA,IAAS9T,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIgX,IAAA,CAAKjZ,MAAL,GAAc,CAAlC,EAAqC,EAAEiC,CAAvC,EAA0C;AAAA,QAClC,IAAA8W,oBAAA,CAAqBE,IAAA,CAAKhX,CAAL,CAArB,EAA8BgX,IAAA,CAAKhX,CAAA,GAAI,CAAT,CAA9B,EAA2C8T,OAA3C,CAAA,EAAqD;AAAA,YAC9C,OAAA,KAAA,CAD8C;AAAA,SADnB;AAAA,KAT2D;AAAA,IAc9F,OAAA,IAAA,CAd8F;AAAA,CApDzG;AAqEA,SAASmD,wBAAT,CAAkCD,IAAlC,EAAiEnD,QAAjE,EAAkH;AAAA,IAC9G,KAAA,IAAS7T,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI6T,QAAA,CAAS9V,MAA7B,EAAqCiC,CAAA,EAArC,EAA0C;AAAA,QACtC,IAAI+W,uBAAA,CAAwBC,IAAxB,EAA8BnD,QAAA,CAAS7T,CAAT,CAA9B,CAAJ;AAAA,YAAuD,OAAA,IAAA,CADjB;AAAA,KADoE;AAAA,IAIvG,OAAA,KAAA,CAJuG;AAAA,CArElH;AA4EA,SAASkX,cAAT,CAAwBlV,WAAxB,EAAqEmS,IAArE,EAAiFzD,SAAjF,EAA6G;AAAA,IACzG,MAAMoD,OAAA,GAAU,EAAhB,CADyG;AAAA,IAEzG,KAAA,IAAS9T,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIgC,WAAA,CAAYjE,MAAhC,EAAwCiC,CAAA,EAAxC,EAA6C;AAAA,QACzC,MAAMoT,IAAA,GAAO,EAAb,CADyC;AAAA,QAEzC,KAAA,IAASG,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIvR,WAAA,CAAYhC,CAAZ,CAAA,CAAejC,MAAnC,EAA2CwV,CAAA,EAA3C,EAAgD;AAAA,YAC5C,MAAMtR,KAAA,GAAQyU,kBAAA,CAAmB1U,WAAA,CAAYhC,CAAZ,CAAA,CAAeuT,CAAf,CAAnB,EAAsC7C,SAAtC,CAAd,CAD4C;AAAA,YAE5CwD,UAAA,CAAWC,IAAX,EAAiBlS,KAAjB,CAF4C,CAAA;AAAA,YAG5CmR,IAAA,CAAKxU,IAAL,CAAUqD,KAAV,CAH4C,CAAA;AAAA,SAFP;AAAA,QAOzC6R,OAAA,CAAQlV,IAAR,CAAawU,IAAb,CAPyC,CAAA;AAAA,KAF4D;AAAA,IAWlG,OAAAU,OAAA,CAXkG;AAAA,CA5E7G;AA0FA,SAASqD,eAAT,CAAyBnV,WAAzB,EAA6EmS,IAA7E,EAAyFzD,SAAzF,EAAqH;AAAA,IACjH,MAAMmD,QAAA,GAAW,EAAjB,CADiH;AAAA,IAEjH,KAAA,IAAS7T,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIgC,WAAA,CAAYjE,MAAhC,EAAwCiC,CAAA,EAAxC,EAA6C;AAAA,QACzC,MAAM8T,OAAA,GAAUoD,cAAA,CAAelV,WAAA,CAAYhC,CAAZ,CAAf,EAA+BmU,IAA/B,EAAqCzD,SAArC,CAAhB,CADyC;AAAA,QAEzCmD,QAAA,CAASjV,IAAT,CAAckV,OAAd,CAFyC,CAAA;AAAA,KAFoE;AAAA,IAM1G,OAAAD,QAAA,CAN0G;AAAA,CA1FrH;AAmGA,SAASuD,WAAT,CAAqB1C,CAArB,EAA0CP,IAA1C,EAAsDkD,QAAtD,EAA+EC,SAA/E,EAAkG;AAAA,IAC1F,IAAA5C,CAAA,CAAE,CAAF,CAAO2C,GAAAA,QAAA,CAAS,CAAT,CAAP,IAAsB3C,CAAA,CAAE,CAAF,CAAA,GAAO2C,QAAA,CAAS,CAAT,CAA7B,EAA0C;AAAA,QAC1C,MAAME,aAAA,GAAgBD,SAAA,GAAY,GAAlC,CAD0C;AAAA,QAE1C,IAAIE,KAAA,GAAS9C,CAAA,CAAE,CAAF,CAAO2C,GAAAA,QAAA,CAAS,CAAT,CAAP,GAAqBE,aAArB,GAAsC,CAACD,SAAvC,GAAoDD,QAAA,CAAS,CAAT,CAAA,GAAc3C,CAAA,CAAE,CAAF,CAAd,GAAqB6C,aAArB,GAAsCD,SAAtC,GAAkD,CAAnH,CAF0C;AAAA,QAG1C,IAAIE,KAAA,KAAU,CAAd,EAAiB;AAAA,YACbA,KAAA,GAAS9C,CAAA,CAAE,CAAF,CAAA,GAAO2C,QAAA,CAAS,CAAT,CAAP,GAAqBE,aAArB,GAAsC,CAACD,SAAvC,GAAoDD,QAAA,CAAS,CAAT,CAAc3C,GAAAA,CAAA,CAAE,CAAF,CAAd,GAAqB6C,aAArB,GAAsCD,SAAtC,GAAkD,CAA/G,CADa;AAAA,SAHyB;AAAA,QAM1C5C,CAAA,CAAE,CAAF,CAAA,IAAQ8C,KAAR,CAN0C;AAAA,KADgD;AAAA,IAS9FtD,UAAA,CAAWC,IAAX,EAAiBO,CAAjB,CAT8F,CAAA;AAAA,CAnGlG;AA+GA,SAAS+C,SAAT,CAAmBtD,IAAnB,EAA+B;AAAA,IAC3BA,IAAA,CAAK,CAAL,CAAA,GAAUA,IAAA,CAAK,CAAL,CAAU5W,GAAAA,QAApB,CAD2B;AAAA,IAE3B4W,IAAA,CAAK,CAAL,CAAUA,GAAAA,IAAA,CAAK,CAAL,CAAA,GAAU,CAAA5W,QAApB,CAF2B;AAAA,CA/G/B;AAoHA,SAASma,aAAT,CAAuB5G,QAAvB,EAAyE6G,SAAzE,EAA0FN,QAA1F,EAAmH3G,SAAnH,EAA+I;AAAA,IAC3I,MAAM4G,SAAA,GAAYlR,IAAA,CAAKqE,GAAL,CAAS,CAAT,EAAYiG,SAAA,CAAUkG,CAAtB,CAAA,GAA2BV,QAA7C,CAD2I;AAAA,IAE3I,MAAM0B,MAAA,GAAS;AAAA,QAAClH,SAAA,CAAUxP,CAAV,GAAcgV,QAAf;AAAA,QAAuBxF,SAAA,CAAUW,CAAV,GAAc6E,QAArC;AAAA,KAAf,CAF2I;AAAA,IAG3I,MAAM2B,UAAA,GAAa,EAAnB,CAH2I;AAAA,IAIvI,IAAA,CAAC/G,QAAD;AAAA,QAAkB,OAAA+G,UAAA,CAJqH;AAAA,IAK3I,KAAWC,MAAAA,MAAX,IAAqBhH,QAArB,EAA+B;AAAA,QAC3B,KAAWmE,MAAAA,KAAX,IAAoB6C,MAApB,EAA4B;AAAA,YAClB,MAAApD,CAAA,GAAI;AAAA,gBAACO,KAAA,CAAM/T,CAAN,GAAU0W,MAAA,CAAO,CAAP,CAAX;AAAA,gBAAsB3C,KAAA,CAAM5D,CAAN,GAAUuG,MAAA,CAAO,CAAP,CAAhC;AAAA,aAAJ,CADkB;AAAA,YAEZR,WAAA,CAAA1C,CAAA,EAAGiD,SAAH,EAAcN,QAAd,EAAwBC,SAAxB,CAFY,CAAA;AAAA,YAGxBO,UAAA,CAAWjZ,IAAX,CAAgB8V,CAAhB,CAHwB,CAAA;AAAA,SADD;AAAA,KAL4G;AAAA,IAYpI,OAAAmD,UAAA,CAZoI;AAAA,CApH/I;AAmIA,SAASE,YAAT,CAAsBjH,QAAtB,EAAwEkH,QAAxE,EAAwFX,QAAxF,EAAiH3G,SAAjH,EAA6I;AAAA,IACzI,MAAM4G,SAAA,GAAYlR,IAAA,CAAKqE,GAAL,CAAS,CAAT,EAAYiG,SAAA,CAAUkG,CAAtB,CAAA,GAA2BV,QAA7C,CADyI;AAAA,IAEzI,MAAM0B,MAAA,GAAS;AAAA,QAAClH,SAAA,CAAUxP,CAAV,GAAcgV,QAAf;AAAA,QAAuBxF,SAAA,CAAUW,CAAV,GAAc6E,QAArC;AAAA,KAAf,CAFyI;AAAA,IAGzI,MAAM+B,SAAA,GAA4C,EAAlD,CAHyI;AAAA,IAIrI,IAAA,CAACnH,QAAD;AAAA,QAAkB,OAAAmH,SAAA,CAJmH;AAAA,IAKzI,KAAWjB,MAAAA,IAAX,IAAmBlG,QAAnB,EAA6B;AAAA,QACzB,MAAMoH,QAAA,GAAW,EAAjB,CADyB;AAAA,QAEzB,KAAWjD,MAAAA,KAAX,IAAoB+B,IAApB,EAA0B;AAAA,YAChB,MAAAtC,CAAA,GAAsB;AAAA,gBAACO,KAAA,CAAM/T,CAAN,GAAU0W,MAAA,CAAO,CAAP,CAAX;AAAA,gBAAsB3C,KAAA,CAAM5D,CAAN,GAAUuG,MAAA,CAAO,CAAP,CAAhC;AAAA,aAAtB,CADgB;AAAA,YAEtB1D,UAAA,CAAW8D,QAAX,EAAqBtD,CAArB,CAFsB,CAAA;AAAA,YAGtBwD,QAAA,CAAStZ,IAAT,CAAc8V,CAAd,CAHsB,CAAA;AAAA,SAFD;AAAA,QAOzBuD,SAAA,CAAUrZ,IAAV,CAAesZ,QAAf,CAPyB,CAAA;AAAA,KAL4G;AAAA,IAczI,IAAIF,QAAA,CAAS,CAAT,CAAcA,GAAAA,QAAA,CAAS,CAAT,CAAd,IAA6BV,SAAA,GAAY,CAA7C,EAAgD;AAAA,QAC5CG,SAAA,CAAUO,QAAV,CAD4C,CAAA;AAAA,QAE5C,KAAWhB,MAAAA,IAAX,IAAmBiB,SAAnB,EAA8B;AAAA,YAC1B,KAAWvD,MAAAA,CAAX,IAAgBsC,IAAhB,EAAsB;AAAA,gBACNI,WAAA,CAAA1C,CAAA,EAAGsD,QAAH,EAAaX,QAAb,EAAuBC,SAAvB,CADM,CAAA;AAAA,aADI;AAAA,SAFc;AAAA,KAdyF;AAAA,IAsBlI,OAAAW,SAAA,CAtBkI;AAAA,CAnI7I;AA4JA,SAASE,oBAAT,CAA8BhK,GAA9B,EAAsDiK,eAAtD,EAAwF;AAAA,IACpF,MAAMT,SAAA,GAAkB;AAAA,QAACpa,QAAD;AAAA,QAAWA,QAAX;AAAA,QAAqB,SAArB;AAAA,QAAgC,CAASA,QAAzC;AAAA,KAAxB,CADoF;AAAA,IAEpF,MAAM8Z,QAAA,GAAiB;AAAA,QAAC9Z,QAAD;AAAA,QAAWA,QAAX;AAAA,QAAqB,SAArB;AAAA,QAAgC,CAASA,QAAzC;AAAA,KAAvB,CAFoF;AAAA,IAI9E,MAAAmT,SAAA,GAAYvC,GAAA,CAAI4C,WAAJ,EAAZ,CAJ8E;AAAA,IAKpF,IAAI,CAACL,SAAL,EAAgB;AAAA,QACL,OAAA,KAAA,CADK;AAAA,KALoE;AAAA,IAShF,IAAA0H,eAAA,CAAgBxX,IAAhB,KAAyB,SAAzB,EAAoC;AAAA,QACpC,MAAMyX,WAAA,GAAcnB,cAAA,CAAekB,eAAA,CAAgBpW,WAA/B,EAA4CqV,QAA5C,EAAsD3G,SAAtD,CAApB,CADoC;AAAA,QAEpC,MAAMmH,UAAA,GAAaH,aAAA,CAAcvJ,GAAA,CAAI2C,QAAJ,EAAd,EAA8B6G,SAA9B,EAAyCN,QAAzC,EAAmD3G,SAAnD,CAAnB,CAFoC;AAAA,QAGpC,IAAI,CAAC4D,YAAA,CAAaqD,SAAb,EAAwBN,QAAxB,CAAL;AAAA,YAA+C,OAAA,KAAA,CAHX;AAAA,QAKpC,KAAWpC,MAAAA,KAAX,IAAoB4C,UAApB,EAAgC;AAAA,YAC5B,IAAI,CAAC7C,kBAAA,CAAmBC,KAAnB,EAA0BoD,WAA1B,CAAL;AAAA,gBAAoD,OAAA,KAAA,CADxB;AAAA,SALI;AAAA,KAT4C;AAAA,IAkBhF,IAAAD,eAAA,CAAgBxX,IAAhB,KAAyB,cAAzB,EAAyC;AAAA,QACzC,MAAM0X,YAAA,GAAenB,eAAA,CAAgBiB,eAAA,CAAgBpW,WAAhC,EAA6CqV,QAA7C,EAAuD3G,SAAvD,CAArB,CADyC;AAAA,QAEzC,MAAMmH,UAAA,GAAaH,aAAA,CAAcvJ,GAAA,CAAI2C,QAAJ,EAAd,EAA8B6G,SAA9B,EAAyCN,QAAzC,EAAmD3G,SAAnD,CAAnB,CAFyC;AAAA,QAGzC,IAAI,CAAC4D,YAAA,CAAaqD,SAAb,EAAwBN,QAAxB,CAAL;AAAA,YAA+C,OAAA,KAAA,CAHN;AAAA,QAKzC,KAAWpC,MAAAA,KAAX,IAAoB4C,UAApB,EAAgC;AAAA,YAC5B,IAAI,CAAChB,mBAAA,CAAoB5B,KAApB,EAA2BqD,YAA3B,CAAL;AAAA,gBAAsD,OAAA,KAAA,CAD1B;AAAA,SALS;AAAA,KAlBuC;AAAA,IA4B7E,OAAA,IAAA,CA5B6E;AAAA,CA5JxF;AA2LA,SAASC,mBAAT,CAA6BpK,GAA7B,EAAqDiK,eAArD,EAAuF;AAAA,IACnF,MAAMJ,QAAA,GAAiB;AAAA,QAACza,QAAD;AAAA,QAAWA,QAAX;AAAA,QAAqB,SAArB;AAAA,QAAgC,CAASA,QAAzC;AAAA,KAAvB,CADmF;AAAA,IAEnF,MAAM8Z,QAAA,GAAiB;AAAA,QAAC9Z,QAAD;AAAA,QAAWA,QAAX;AAAA,QAAqB,SAArB;AAAA,QAAgC,CAASA,QAAzC;AAAA,KAAvB,CAFmF;AAAA,IAI7E,MAAAmT,SAAA,GAAYvC,GAAA,CAAI4C,WAAJ,EAAZ,CAJ6E;AAAA,IAKnF,IAAI,CAACL,SAAL,EAAgB;AAAA,QACL,OAAA,KAAA,CADK;AAAA,KALmE;AAAA,IAS/E,IAAA0H,eAAA,CAAgBxX,IAAhB,KAAyB,SAAzB,EAAoC;AAAA,QACpC,MAAMyX,WAAA,GAAcnB,cAAA,CAAekB,eAAA,CAAgBpW,WAA/B,EAA4CqV,QAA5C,EAAsD3G,SAAtD,CAApB,CADoC;AAAA,QAEpC,MAAMuH,SAAA,GAAYF,YAAA,CAAa5J,GAAA,CAAI2C,QAAJ,EAAb,EAA6BkH,QAA7B,EAAuCX,QAAvC,EAAiD3G,SAAjD,CAAlB,CAFoC;AAAA,QAGpC,IAAI,CAAC4D,YAAA,CAAa0D,QAAb,EAAuBX,QAAvB,CAAL;AAAA,YAA8C,OAAA,KAAA,CAHV;AAAA,QAKpC,KAAWL,MAAAA,IAAX,IAAmBiB,SAAnB,EAA8B;AAAA,YAC1B,IAAI,CAAClB,uBAAA,CAAwBC,IAAxB,EAA8BqB,WAA9B,CAAL;AAAA,gBAAwD,OAAA,KAAA,CAD9B;AAAA,SALM;AAAA,KAT2C;AAAA,IAkB/E,IAAAD,eAAA,CAAgBxX,IAAhB,KAAyB,cAAzB,EAAyC;AAAA,QACzC,MAAM0X,YAAA,GAAenB,eAAA,CAAgBiB,eAAA,CAAgBpW,WAAhC,EAA6CqV,QAA7C,EAAuD3G,SAAvD,CAArB,CADyC;AAAA,QAEzC,MAAMuH,SAAA,GAAYF,YAAA,CAAa5J,GAAA,CAAI2C,QAAJ,EAAb,EAA6BkH,QAA7B,EAAuCX,QAAvC,EAAiD3G,SAAjD,CAAlB,CAFyC;AAAA,QAGzC,IAAI,CAAC4D,YAAA,CAAa0D,QAAb,EAAuBX,QAAvB,CAAL;AAAA,YAA8C,OAAA,KAAA,CAHL;AAAA,QAKzC,KAAWL,MAAAA,IAAX,IAAmBiB,SAAnB,EAA8B;AAAA,YAC1B,IAAI,CAAChB,wBAAA,CAAyBD,IAAzB,EAA+BsB,YAA/B,CAAL;AAAA,gBAA0D,OAAA,KAAA,CADhC;AAAA,SALW;AAAA,KAlBsC;AAAA,IA2B5E,OAAA,IAAA,CA3B4E;AAAA,CA3LvF;AAyNA,MAAME,MAAN,CAAmC;AAAA,IAK/BzU,WAAA,CAAY0U,OAAZ,EAAsCC,UAAtC,EAAmE;AAAA,QAC/D,IAAK9X,CAAAA,IAAL,GAAYgE,WAAZ,CAD+D;AAAA,QAE/D,IAAK6T,CAAAA,OAAL,GAAeA,OAAf,CAF+D;AAAA,QAG/D,IAAKC,CAAAA,UAAL,GAAkBA,UAAlB,CAH+D;AAAA,KALpC;AAAA,IAW/B,OAAOta,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAmF;AAAA,QAC/E,IAAID,IAAA,CAAKvP,MAAL,KAAgB,CAApB;AAAA,YACI,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,6DAAA,GAAgEF,IAAA,CAAKvP,MAAL,GAAc,CAA9E,EAA0F,SAA1F,CAAd,CAAP,CAF2E;AAAA,QAG/E,IAAIiP,OAAA,CAAQM,IAAA,CAAK,CAAL,CAAR,CAAJ,EAAsB;AAAA,YACZ,MAAAmL,OAAA,GAAWnL,IAAA,CAAK,CAAL,CAAX,CADY;AAAA,YAEd,IAAAmL,OAAA,CAAQ7X,IAAR,KAAiB,mBAAjB,EAAsC;AAAA,gBACtC,KAAA,IAASZ,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIyY,OAAA,CAAQE,QAAR,CAAiB5a,MAArC,EAA6C,EAAEiC,CAA/C,EAAkD;AAAA,oBAC9C,MAAMY,IAAA,GAAO6X,OAAA,CAAQE,QAAR,CAAiB3Y,CAAjB,CAAoB8Q,CAAAA,QAApB,CAA6BlQ,IAA1C,CAD8C;AAAA,oBAE1C,IAAAA,IAAA,KAAS,SAAT,IAAsBA,IAAA,KAAS,cAA/B,EAA+C;AAAA,wBAC/C,OAAO,IAAI4X,MAAJ,CAAWC,OAAX,EAAoBA,OAAA,CAAQE,QAAR,CAAiB3Y,CAAjB,CAAoB8Q,CAAAA,QAAxC,CAAP,CAD+C;AAAA,qBAFL;AAAA,iBADZ;AAAA,aAAtC,MAOJ,IAAW2H,OAAA,CAAQ7X,IAAR,KAAiB,SAA5B,EAAuC;AAAA,gBAC7B,MAAAA,IAAA,GAAO6X,OAAA,CAAQ3H,QAAR,CAAiBlQ,IAAxB,CAD6B;AAAA,gBAE/B,IAAAA,IAAA,KAAS,SAAT,IAAsBA,IAAA,KAAS,cAA/B,EAA+C;AAAA,oBAC/C,OAAO,IAAI4X,MAAJ,CAAWC,OAAX,EAAoBA,OAAA,CAAQ3H,QAA5B,CAAP,CAD+C;AAAA,iBAFhB;AAAA,aAAvC,UAKW2H,OAAA,CAAQ7X,IAAR,KAAiB,SAAjB,IAA8B6X,OAAA,CAAQ7X,IAAR,KAAiB,gBAAgB;AAAA,gBAC/D,OAAA,IAAI4X,MAAJ,CAAWC,OAAX,EAAoBA,OAApB,CAAA,CAD+D;AAAA,aAdxD;AAAA,SAHyD;AAAA,QAqBxE,OAAAlL,OAAA,CAAQC,KAAR,CAAc,CAAwF,sFAAxF,CAAd,CAAA,CArBwE;AAAA,KAXpD;AAAA,IAmC/BE,QAAA,CAASS,GAAT,EAA0C;AAAA,QACtC,IAAIA,GAAA,CAAI2C,QAAJ,EAAkB,IAAA,IAAlB,IAA0B3C,GAAA,CAAI4C,WAAJ,EAAqB,IAAA,IAAnD,EAAyD;AAAA,YACjD,IAAA5C,GAAA,CAAI0C,YAAJ,EAAA,KAAuB,OAAvB,EAAgC;AAAA,gBACzB,OAAAsH,oBAAA,CAAqBhK,GAArB,EAA0B,IAAKuK,CAAAA,UAA/B,CAAA,CADyB;AAAA,aAAhC,MAEO,IAAAvK,GAAA,CAAI0C,YAAJ,EAAA,KAAuB,YAAvB,EAAqC;AAAA,gBACrC,OAAA0H,mBAAA,CAAoBpK,GAApB,EAAyB,IAAKuK,CAAAA,UAA9B,CAAA,CADqC;AAAA,aAHK;AAAA,SADnB;AAAA,QAQ/B,OAAA,KAAA,CAR+B;AAAA,KAnCX;AAAA,IA8C/B/K,SAAA,GAAY;AAAA,KA9CmB;AAAA,IAgD/BC,aAAA,GAAyB;AAAA,QACd,OAAA,IAAA,CADc;AAAA,KAhDM;AAAA,IAoD/BnB,SAAA,GAAkC;AAAA,QACvB,OAAA;AAAA,YAAC,QAAD;AAAA,YAAW,KAAKgM,OAAhB;AAAA,SAAA,CADuB;AAAA,KApDH;AAAA;;ACxNnC,MAAMG,OAAA,GAAU;AAAA,IACZC,UAAA,EAAY,CADA;AAAA,IAEZC,KAAA,EAAO,IAAA,GAAO,QAFF;AAAA,IAGZC,aAAA,EAAe,IAAA,GAAO,IAHV;AAAA,IAIZC,MAAA,EAAQ,IAJI;AAAA,IAKZC,MAAA,EAAQ,IALI;AAAA,IAMZC,KAAA,EAAO,IAAA,GAAO,MANF;AAAA,IAOZC,IAAA,EAAM,IAAA,GAAO,MAPD;AAAA,IAQZC,MAAA,EAAQ,IAAA,GAAO,MARH;AAAA,CAAhB,CADA;AAaA;AAAA,MAAMC,EAAA,GAAK,QAAX,CAbA;AAcA;AAAA,MAAMC,EAAA,GAAK,CAAI,GAAA,aAAf,CAdA;AAgBA;AAAA,MAAMC,EAAA,GAAKD,EAAA,IAAUA,CAAAA,GAAAA,EAAJ,CAAjB,CAhBA;AAiBA,MAAME,GAAA,GAAMpT,IAAA,CAAKmQ,EAAL,GAAU,GAAtB,CAjBA;AAsBA;AAAA;AAAA;AAAe,MAAMkD,UAAN,CAAiB;AAAA;AAY5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,OAAOC,QAAP,CAAgBrI,CAAhB,EAAmBuF,CAAnB,EAAsB+C,KAAtB,EAA6B;AAAA,QACzB,MAAMC,CAAA,GAAIxT,IAAA,CAAKmQ,EAAL,IAAW,CAAA,GAAI,CAAK,IAAAlF,CAAA,GAAI,GAAJ,CAAL,GAAgBjL,IAAA,CAAKqE,GAAL,CAAS,CAAT,EAAYmM,CAAZ,CAApB,CAArB,CADyB;AAAA,QAEzB,MAAMN,GAAA,GAAMlQ,IAAA,CAAKyT,IAAL,CAAU,GAAA,IAAOzT,IAAA,CAAK0T,GAAL,CAASF,CAAT,CAAA,GAAcxT,IAAA,CAAK0T,GAAL,CAAS,CAACF,CAAV,CAAd,CAAjB,CAAgDJ,GAAAA,GAA5D,CAFyB;AAAA,QAGzB,OAAO,IAAIC,UAAJ,CAAenD,GAAf,EAAoBqD,KAApB,CAAP,CAHyB;AAAA,KAZD;AAAA;AAyB5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,WAAWA,KAAX,GAAmB;AAAA,QACf,OAAOf,OAAP,CADe;AAAA,KAzBS;AAAA;AAsC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA7U,WAAA,CAAYuS,GAAZ,EAAiBqD,KAAjB,EAAwB;AAAA,QACpB,IAAIrD,GAAA,KAAQlZ,SAAZ;AAAA,YAAuB,MAAM,IAAI6F,KAAJ,CAAU,oBAAV,CAAN,CADH;AAAA,QAEpB,IAAI0W,KAAA,IAAS,CAACf,OAAA,CAAQe,KAAR,CAAd;AAAA,YAA8B,MAAM,IAAI1W,KAAJ,CAAU,CAAC,aAAD,GAAkB0W,KAAlB,EAA0B,cAA1B,GAA4C7a,MAAA,CAAOD,IAAP,CAAY+Z,OAAZ,CAAqB1Z,CAAAA,IAArB,CAA0B,IAA1B,CAA5C,EAAV,CAAA,CAAN,CAFV;AAAA;AAKpB,QAAA,MAAM6a,CAAA,GAAIP,GAAA,GAAMH,EAAN,IAAYM,KAAA,GAAQf,OAAA,CAAQe,KAAR,CAAR,GAAyB,CAAzB,CAAtB,CALoB;AAAA,QAMpB,MAAMK,MAAA,GAAS5T,IAAA,CAAK6T,GAAL,CAAS3D,GAAA,GAAMkD,GAAf,CAAf,CANoB;AAAA,QAOpB,MAAMU,EAAA,GAAK,CAAA,IAASX,CAAAA,GAAAA,EAAA,IAAM,CAAA,GAAIS,MAAA,GAASA,MAAb,CAAV,CAAhB,CAPoB;AAAA,QAQpB,MAAMG,CAAA,GAAI/T,IAAA,CAAKgU,IAAL,CAAUF,EAAV,CAAV,CARoB;AAAA;AAWpB,QAAA,IAAA,CAAKG,EAAL,GAAUN,CAAA,GAAII,CAAJ,GAAQH,MAAlB,CAXoB;AAAA;AAYpB,QAAKM,IAAAA,CAAAA,EAAL,GAAUP,CAAA,GAAII,CAAJ,GAAQD,EAAR,IAAkBX,CAAAA,GAAAA,EAAJ,CAAxB,CAAA;AAZoB,KAtCI;AAAA;AA+D5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAgB,QAAA,CAASvS,CAAT,EAAYC,CAAZ,EAAe;AAAA,QACX,MAAMuS,EAAA,GAAKC,IAAA,CAAKzS,CAAA,CAAE,CAAF,CAAOC,GAAAA,CAAA,CAAE,CAAF,CAAZ,CAAoB,GAAA,IAAA,CAAKoS,EAApC,CADW;AAAA,QAEX,MAAMK,EAAA,GAAM,CAAA1S,CAAA,CAAE,CAAF,CAAA,GAAOC,CAAA,CAAE,CAAF,CAAP,IAAe,IAAA,CAAKqS,EAAhC,CAFW;AAAA,QAGX,OAAOlU,IAAA,CAAKgU,IAAL,CAAUI,EAAA,GAAKA,EAAL,GAAUE,EAAA,GAAKA,EAAzB,CAAP,CAHW;AAAA,KA/Da;AAAA;AA+E5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAjJ,OAAA,CAAQzJ,CAAR,EAAWC,CAAX,EAAc;AAAA,QACV,MAAMuS,EAAA,GAAKC,IAAA,CAAKxS,CAAA,CAAE,CAAF,CAAOD,GAAAA,CAAA,CAAE,CAAF,CAAZ,CAAoB,GAAA,IAAA,CAAKqS,EAApC,CADU;AAAA,QAEV,MAAMK,EAAA,GAAM,CAAAzS,CAAA,CAAE,CAAF,CAAA,GAAOD,CAAA,CAAE,CAAF,CAAP,IAAe,IAAA,CAAKsS,EAAhC,CAFU;AAAA,QAGV,OAAOlU,IAAA,CAAKuU,KAAL,CAAWH,EAAX,EAAeE,EAAf,CAAqBlB,GAAAA,GAA5B,CAHU;AAAA,KA/Ec;AAAA;AAgG5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAoB,WAAA,CAAYlG,CAAZ,EAAe/C,IAAf,EAAqBF,OAArB,EAA8B;AAAA,QAC1B,MAAMzJ,CAAA,GAAIyJ,OAAA,GAAU+H,GAApB,CAD0B;AAAA,QAE1B,OAAO,KAAKqB,MAAL,CAAYnG,CAAZ,EACHtO,IAAA,CAAK0U,GAAL,CAAS9S,CAAT,IAAc2J,IADX,EAEHvL,IAAA,CAAK6T,GAAL,CAASjS,CAAT,CAAA,GAAc2J,IAFX,CAAP,CAF0B;AAAA,KAhGF;AAAA;AAkH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAkJ,MAAA,CAAOnG,CAAP,EAAU8F,EAAV,EAAcE,EAAd,EAAkB;AAAA,QACd,OAAO;AAAA,YACHhG,CAAA,CAAE,CAAF,IAAO8F,EAAA,GAAK,KAAKH,EADd;AAAA,YAEH3F,CAAA,CAAE,CAAF,IAAOgG,EAAA,GAAK,KAAKJ,EAFd;AAAA,SAAP,CADc;AAAA,KAlHU;AAAA;AAqI5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAS,YAAA,CAAajD,MAAb,EAAqB;AAAA,QACjB,IAAIkD,KAAA,GAAQ,CAAZ,CADiB;AAAA,QAEjB,KAAK,IAAIhb,CAAA,GAAI,CAAR,EAAWA,CAAA,GAAI8X,MAAA,CAAO/Z,MAAP,GAAgB,CAApC,EAAuCiC,CAAA,EAAvC,EAA4C;AAAA,YACxCgb,KAAA,IAAS,IAAA,CAAKT,QAAL,CAAczC,MAAA,CAAO9X,CAAP,CAAd,EAAyB8X,MAAA,CAAO9X,CAAA,GAAI,CAAX,CAAzB,CAAT,CADwC;AAAA,SAF3B;AAAA,QAKjB,OAAOgb,KAAP,CALiB;AAAA,KArIO;AAAA;AAyJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAhH,IAAA,CAAKF,OAAL,EAAc;AAAA,QACV,IAAIT,GAAA,GAAM,CAAV,CADU;AAAA,QAGV,KAAK,IAAIrT,CAAA,GAAI,CAAR,EAAWA,CAAA,GAAI8T,OAAA,CAAQ/V,MAA5B,EAAoCiC,CAAA,EAApC,EAAyC;AAAA,YACrC,MAAMoT,IAAA,GAAOU,OAAA,CAAQ9T,CAAR,CAAb,CADqC;AAAA,YAGrC,KAAK,IAAIuT,CAAA,GAAI,CAAR,EAAWD,GAAA,GAAMF,IAAA,CAAKrV,MAAtB,EAA8BuC,CAAA,GAAIgT,GAAA,GAAM,CAAxC,EAA2CC,CAAA,GAAID,GAApD,EAAyDhT,CAAA,GAAIiT,CAAA,EAA7D,EAAkE;AAAA,gBAC9DF,GAAA,IAAOoH,IAAA,CAAKrH,IAAA,CAAKG,CAAL,CAAQ,CAAA,CAAR,CAAaH,GAAAA,IAAA,CAAK9S,CAAL,CAAA,CAAQ,CAAR,CAAlB,CAAA,IAAiC8S,IAAA,CAAKG,CAAL,CAAA,CAAQ,CAAR,CAAaH,GAAAA,IAAA,CAAK9S,CAAL,CAAA,CAAQ,CAAR,CAAb,CAAjC,IAA6DN,CAAA,GAAI,CAAC,CAAL,GAAS,CAAT,CAApE,CAD8D;AAAA,aAH7B;AAAA,SAH/B;AAAA,QAWV,OAAQoG,IAAA,CAAK6N,GAAL,CAASZ,GAAT,CAAA,GAAgB,CAAjB,GAAsB,IAAKgH,CAAAA,EAA3B,GAAgC,IAAA,CAAKC,EAA5C,CAXU;AAAA,KAzJc;AAAA;AAiL5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAW,KAAA,CAAMjE,IAAN,EAAYrF,IAAZ,EAAkB;AAAA,QACd,IAAI0B,GAAA,GAAM,CAAV,CADc;AAAA,QAGd,IAAI1B,IAAA,IAAQ,CAAZ;AAAA,YAAe,OAAOqF,IAAA,CAAK,CAAL,CAAP,CAHD;AAAA,QAKd,KAAK,IAAIhX,CAAA,GAAI,CAAR,EAAWA,CAAA,GAAIgX,IAAA,CAAKjZ,MAAL,GAAc,CAAlC,EAAqCiC,CAAA,EAArC,EAA0C;AAAA,YACtC,MAAMkb,EAAA,GAAKlE,IAAA,CAAKhX,CAAL,CAAX,CADsC;AAAA,YAEtC,MAAMwT,EAAA,GAAKwD,IAAA,CAAKhX,CAAA,GAAI,CAAT,CAAX,CAFsC;AAAA,YAGtC,MAAMsI,CAAA,GAAI,IAAKiS,CAAAA,QAAL,CAAcW,EAAd,EAAkB1H,EAAlB,CAAV,CAHsC;AAAA,YAItCH,GAAA,IAAO/K,CAAP,CAJsC;AAAA,YAKtC,IAAI+K,GAAA,GAAM1B,IAAV;AAAA,gBAAgB,OAAOwJ,WAAA,CAAYD,EAAZ,EAAgB1H,EAAhB,EAAqB,CAAA7B,IAAA,IAAQ0B,GAAA,GAAM/K,CAAN,CAAR,IAAoBA,CAAzC,CAAP,CALsB;AAAA,SAL5B;AAAA,QAad,OAAO0O,IAAA,CAAKA,IAAA,CAAKjZ,MAAL,GAAc,CAAnB,CAAP,CAbc;AAAA,KAjLU;AAAA;AA6M5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAqd,sBAAA,CAAuB1G,CAAvB,EAA0B1M,CAA1B,EAA6BC,CAA7B,EAAgC;AAAA,QAC5B,IAAI,CAAC/G,CAAD,EAAImQ,CAAJ,CAAA,GAASrJ,CAAb,CAD4B;AAAA,QAE5B,IAAIwS,EAAA,GAAKC,IAAA,CAAKxS,CAAA,CAAE,CAAF,CAAO/G,GAAAA,CAAZ,CAAiB,GAAA,IAAA,CAAKmZ,EAA/B,CAF4B;AAAA,QAG5B,IAAIK,EAAA,GAAM,CAAAzS,CAAA,CAAE,CAAF,CAAA,GAAOoJ,CAAP,IAAY,IAAA,CAAKiJ,EAA3B,CAH4B;AAAA,QAK5B,IAAIE,EAAA,KAAO,CAAP,IAAYE,EAAA,KAAO,CAAvB,EAA0B;AAAA,YACtB,MAAM/U,CAAA,GAAK,CAAA8U,IAAA,CAAK/F,CAAA,CAAE,CAAF,CAAOxT,GAAAA,CAAZ,IAAiB,IAAKmZ,CAAAA,EAAtB,GAA2BG,EAA3B,GAAiC,CAAA9F,CAAA,CAAE,CAAF,CAAA,GAAOrD,CAAP,IAAY,KAAKiJ,EAAlB,GAAuBI,EAAvD,KAA8DF,EAAA,GAAKA,EAAL,GAAUE,EAAA,GAAKA,EAAf,CAAzE,CADsB;AAAA,YAGtB,IAAI/U,CAAA,GAAI,CAAR,EAAW;AAAA,gBACPzE,CAAA,GAAI+G,CAAA,CAAE,CAAF,CAAJ,CADO;AAAA,gBAEPoJ,CAAA,GAAIpJ,CAAA,CAAE,CAAF,CAAJ,CAFO;AAAA,aAAX,MAIO,IAAItC,CAAA,GAAI,CAAR,EAAW;AAAA,gBACdzE,CAAA,IAAMsZ,EAAA,GAAK,KAAKH,EAAX,GAAiB1U,CAAtB,CADc;AAAA,gBAEd0L,CAAA,IAAMqJ,EAAA,GAAK,KAAKJ,EAAX,GAAiB3U,CAAtB,CAFc;AAAA,aAPI;AAAA,SALE;AAAA,QAkB5B6U,EAAA,GAAKC,IAAA,CAAK/F,CAAA,CAAE,CAAF,CAAA,GAAOxT,CAAZ,CAAA,GAAiB,IAAKmZ,CAAAA,EAA3B,CAlB4B;AAAA,QAmB5BK,EAAA,GAAM,CAAAhG,CAAA,CAAE,CAAF,CAAOrD,GAAAA,CAAP,IAAY,IAAKiJ,CAAAA,EAAvB,CAnB4B;AAAA,QAqB5B,OAAOlU,IAAA,CAAKgU,IAAL,CAAUI,EAAA,GAAKA,EAAL,GAAUE,EAAA,GAAKA,EAAzB,CAAP,CArB4B;AAAA,KA7MJ;AAAA;AAiP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAW,WAAA,CAAYrE,IAAZ,EAAkBtC,CAAlB,EAAqB;AAAA,QACjB,IAAI4G,OAAA,GAAU/d,QAAd,CADiB;AAAA,QAEjB,IAAIge,IAAA,GAAOvE,IAAA,CAAK,CAAL,CAAA,CAAQ,CAAR,CAAX,CAFiB;AAAA,QAGjB,IAAIwE,IAAA,GAAOxE,IAAA,CAAK,CAAL,CAAA,CAAQ,CAAR,CAAX,CAHiB;AAAA,QAIjB,IAAIyE,IAAA,GAAO,CAAX,CAJiB;AAAA,QAKjB,IAAIC,IAAA,GAAO,CAAX,CALiB;AAAA,QAOjB,KAAK,IAAI1b,CAAA,GAAI,CAAR,EAAWA,CAAA,GAAIgX,IAAA,CAAKjZ,MAAL,GAAc,CAAlC,EAAqCiC,CAAA,EAArC,EAA0C;AAAA,YAEtC,IAAIkB,CAAA,GAAI8V,IAAA,CAAKhX,CAAL,CAAA,CAAQ,CAAR,CAAR,CAFsC;AAAA,YAGtC,IAAIqR,CAAA,GAAI2F,IAAA,CAAKhX,CAAL,CAAA,CAAQ,CAAR,CAAR,CAHsC;AAAA,YAItC,IAAIwa,EAAA,GAAKC,IAAA,CAAKzD,IAAA,CAAKhX,CAAA,GAAI,CAAT,EAAY,CAAZ,CAAA,GAAiBkB,CAAtB,CAA2B,GAAA,IAAA,CAAKmZ,EAAzC,CAJsC;AAAA,YAKtC,IAAIK,EAAA,GAAM,CAAA1D,IAAA,CAAKhX,CAAA,GAAI,CAAT,CAAA,CAAY,CAAZ,CAAiBqR,GAAAA,CAAjB,IAAsB,IAAA,CAAKiJ,EAArC,CALsC;AAAA,YAMtC,IAAI3U,CAAA,GAAI,CAAR,CANsC;AAAA,YAQtC,IAAI6U,EAAA,KAAO,CAAP,IAAYE,EAAA,KAAO,CAAvB,EAA0B;AAAA,gBACtB/U,CAAA,GAAK,CAAA8U,IAAA,CAAK/F,CAAA,CAAE,CAAF,CAAOxT,GAAAA,CAAZ,IAAiB,IAAKmZ,CAAAA,EAAtB,GAA2BG,EAA3B,GAAiC,CAAA9F,CAAA,CAAE,CAAF,CAAA,GAAOrD,CAAP,IAAY,KAAKiJ,EAAlB,GAAuBI,EAAvD,KAA8DF,EAAA,GAAKA,EAAL,GAAUE,EAAA,GAAKA,EAAf,CAAnE,CADsB;AAAA,gBAGtB,IAAI/U,CAAA,GAAI,CAAR,EAAW;AAAA,oBACPzE,CAAA,GAAI8V,IAAA,CAAKhX,CAAA,GAAI,CAAT,CAAA,CAAY,CAAZ,CAAJ,CADO;AAAA,oBAEPqR,CAAA,GAAI2F,IAAA,CAAKhX,CAAA,GAAI,CAAT,CAAA,CAAY,CAAZ,CAAJ,CAFO;AAAA,iBAAX,MAIO,IAAI2F,CAAA,GAAI,CAAR,EAAW;AAAA,oBACdzE,CAAA,IAAMsZ,EAAA,GAAK,KAAKH,EAAX,GAAiB1U,CAAtB,CADc;AAAA,oBAEd0L,CAAA,IAAMqJ,EAAA,GAAK,KAAKJ,EAAX,GAAiB3U,CAAtB,CAFc;AAAA,iBAPI;AAAA,aARY;AAAA,YAqBtC6U,EAAA,GAAKC,IAAA,CAAK/F,CAAA,CAAE,CAAF,CAAA,GAAOxT,CAAZ,CAAA,GAAiB,IAAKmZ,CAAAA,EAA3B,CArBsC;AAAA,YAsBtCK,EAAA,GAAM,CAAAhG,CAAA,CAAE,CAAF,CAAOrD,GAAAA,CAAP,IAAY,IAAKiJ,CAAAA,EAAvB,CAtBsC;AAAA,YAwBtC,MAAMqB,MAAA,GAASnB,EAAA,GAAKA,EAAL,GAAUE,EAAA,GAAKA,EAA9B,CAxBsC;AAAA,YAyBtC,IAAIiB,MAAA,GAASL,OAAb,EAAsB;AAAA,gBAClBA,OAAA,GAAUK,MAAV,CADkB;AAAA,gBAElBJ,IAAA,GAAOra,CAAP,CAFkB;AAAA,gBAGlBsa,IAAA,GAAOnK,CAAP,CAHkB;AAAA,gBAIlBoK,IAAA,GAAOzb,CAAP,CAJkB;AAAA,gBAKlB0b,IAAA,GAAO/V,CAAP,CALkB;AAAA,aAzBgB;AAAA,SAPzB;AAAA,QAyCjB,OAAO;AAAA,YACHsP,KAAA,EAAO;AAAA,gBAACsG,IAAD;AAAA,gBAAOC,IAAP;AAAA,aADJ;AAAA,YAEHjd,KAAA,EAAOkd,IAFJ;AAAA,YAGH9V,CAAA,EAAGS,IAAA,CAAKiO,GAAL,CAAS,CAAT,EAAYjO,IAAA,CAAKgO,GAAL,CAAS,CAAT,EAAYsH,IAAZ,CAAZ,CAHA;AAAA,SAAP,CAzCiB;AAAA,KAjPO;AAAA;AA4S5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAE,SAAA,CAAUpd,KAAV,EAAiB4D,IAAjB,EAAuB4U,IAAvB,EAA6B;AAAA,QACzB,IAAIxD,EAAA,GAAK,IAAK6H,CAAAA,WAAL,CAAiBrE,IAAjB,EAAuBxY,KAAvB,CAAT,CADyB;AAAA,QAEzB,IAAIiV,EAAA,GAAK,IAAK4H,CAAAA,WAAL,CAAiBrE,IAAjB,EAAuB5U,IAAvB,CAAT,CAFyB;AAAA,QAIzB,IAAIoR,EAAA,CAAGjV,KAAH,GAAWkV,EAAA,CAAGlV,KAAd,IAAwBiV,EAAA,CAAGjV,KAAH,KAAakV,EAAA,CAAGlV,KAAhB,IAAyBiV,EAAA,CAAG7N,CAAH,GAAO8N,EAAA,CAAG9N,CAA/D,EAAmE;AAAA,YAC/D,MAAMkW,GAAA,GAAMrI,EAAZ,CAD+D;AAAA,YAE/DA,EAAA,GAAKC,EAAL,CAF+D;AAAA,YAG/DA,EAAA,GAAKoI,GAAL,CAH+D;AAAA,SAJ1C;AAAA,QAUzB,MAAMxe,KAAA,GAAQ,CAACmW,EAAA,CAAGyB,KAAJ,CAAd,CAVyB;AAAA,QAYzB,MAAMrN,CAAA,GAAI4L,EAAA,CAAGjV,KAAH,GAAW,CAArB,CAZyB;AAAA,QAazB,MAAM6J,CAAA,GAAIqL,EAAA,CAAGlV,KAAb,CAbyB;AAAA,QAezB,IAAI,CAACud,MAAA,CAAO9E,IAAA,CAAKpP,CAAL,CAAP,EAAgBvK,KAAA,CAAM,CAAN,CAAhB,CAAD,IAA8BuK,CAAA,IAAKQ,CAAvC;AAAA,YACI/K,KAAA,CAAMuB,IAAN,CAAWoY,IAAA,CAAKpP,CAAL,CAAX,CAhBqB,CAAA;AAAA,QAkBzB,KAAK,IAAI5H,CAAA,GAAI4H,CAAA,GAAI,CAAZ,EAAe5H,CAAA,IAAKoI,CAAzB,EAA4BpI,CAAA,EAA5B,EAAiC;AAAA,YAC7B3C,KAAA,CAAMuB,IAAN,CAAWoY,IAAA,CAAKhX,CAAL,CAAX,CAD6B,CAAA;AAAA,SAlBR;AAAA,QAsBzB,IAAI,CAAC8b,MAAA,CAAO9E,IAAA,CAAK5O,CAAL,CAAP,EAAgBqL,EAAA,CAAGwB,KAAnB,CAAL;AAAA,YACI5X,KAAA,CAAMuB,IAAN,CAAW6U,EAAA,CAAGwB,KAAd,CAvBqB,CAAA;AAAA,QAyBzB,OAAO5X,KAAP,CAzByB;AAAA,KA5SD;AAAA;AAmV5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA0e,cAAA,CAAevd,KAAf,EAAsB4D,IAAtB,EAA4B4U,IAA5B,EAAkC;AAAA,QAC9B,IAAI3D,GAAA,GAAM,CAAV,CAD8B;AAAA,QAE9B,MAAMhW,KAAA,GAAQ,EAAd,CAF8B;AAAA,QAI9B,KAAK,IAAI2C,CAAA,GAAI,CAAR,EAAWA,CAAA,GAAIgX,IAAA,CAAKjZ,MAAL,GAAc,CAAlC,EAAqCiC,CAAA,EAArC,EAA0C;AAAA,YACtC,MAAMkb,EAAA,GAAKlE,IAAA,CAAKhX,CAAL,CAAX,CADsC;AAAA,YAEtC,MAAMwT,EAAA,GAAKwD,IAAA,CAAKhX,CAAA,GAAI,CAAT,CAAX,CAFsC;AAAA,YAGtC,MAAMsI,CAAA,GAAI,IAAKiS,CAAAA,QAAL,CAAcW,EAAd,EAAkB1H,EAAlB,CAAV,CAHsC;AAAA,YAKtCH,GAAA,IAAO/K,CAAP,CALsC;AAAA,YAOtC,IAAI+K,GAAA,GAAM7U,KAAN,IAAenB,KAAA,CAAMU,MAAN,KAAiB,CAApC,EAAuC;AAAA,gBACnCV,KAAA,CAAMuB,IAAN,CAAWuc,WAAA,CAAYD,EAAZ,EAAgB1H,EAAhB,EAAqB,CAAAhV,KAAA,IAAS6U,GAAA,GAAM/K,CAAN,CAAT,IAAqBA,CAA1C,CAAX,CADmC,CAAA;AAAA,aAPD;AAAA,YAWtC,IAAI+K,GAAA,IAAOjR,IAAX,EAAiB;AAAA,gBACb/E,KAAA,CAAMuB,IAAN,CAAWuc,WAAA,CAAYD,EAAZ,EAAgB1H,EAAhB,EAAqB,CAAApR,IAAA,IAAQiR,GAAA,GAAM/K,CAAN,CAAR,IAAoBA,CAAzC,CAAX,CADa,CAAA;AAAA,gBAEb,OAAOjL,KAAP,CAFa;AAAA,aAXqB;AAAA,YAgBtC,IAAIgW,GAAA,GAAM7U,KAAV;AAAA,gBAAiBnB,KAAA,CAAMuB,IAAN,CAAW4U,EAAX,CAhBqB,CAAA;AAAA,SAJZ;AAAA,QAuB9B,OAAOnW,KAAP,CAvB8B;AAAA,KAnVN;AAAA;AAuX5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA2e,WAAA,CAAYtH,CAAZ,EAAeuH,MAAf,EAAuB;AAAA,QACnB,MAAMC,CAAA,GAAID,MAAA,GAAS,IAAA,CAAK3B,EAAxB,CADmB;AAAA,QAEnB,MAAMtT,CAAA,GAAIiV,MAAA,GAAS,IAAA,CAAK5B,EAAxB,CAFmB;AAAA,QAGnB,OAAO;AAAA,YACH3F,CAAA,CAAE,CAAF,CAAA,GAAO1N,CADJ;AAAA,YAEH0N,CAAA,CAAE,CAAF,CAAA,GAAOwH,CAFJ;AAAA,YAGHxH,CAAA,CAAE,CAAF,CAAA,GAAO1N,CAHJ;AAAA,YAIH0N,CAAA,CAAE,CAAF,CAAA,GAAOwH,CAJJ;AAAA,SAAP,CAHmB;AAAA,KAvXK;AAAA;AA4Y5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAC,UAAA,CAAWhI,IAAX,EAAiB8H,MAAjB,EAAyB;AAAA,QACrB,MAAMC,CAAA,GAAID,MAAA,GAAS,IAAA,CAAK3B,EAAxB,CADqB;AAAA,QAErB,MAAMtT,CAAA,GAAIiV,MAAA,GAAS,IAAA,CAAK5B,EAAxB,CAFqB;AAAA,QAGrB,OAAO;AAAA,YACHlG,IAAA,CAAK,CAAL,CAAA,GAAUnN,CADP;AAAA,YAEHmN,IAAA,CAAK,CAAL,CAAA,GAAU+H,CAFP;AAAA,YAGH/H,IAAA,CAAK,CAAL,CAAA,GAAUnN,CAHP;AAAA,YAIHmN,IAAA,CAAK,CAAL,CAAA,GAAU+H,CAJP;AAAA,SAAP,CAHqB;AAAA,KA5YG;AAAA;AAia5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAE,UAAA,CAAW1H,CAAX,EAAcP,IAAd,EAAoB;AAAA;AAChB,QAAA,OAAOsG,IAAA,CAAK/F,CAAA,CAAE,CAAF,CAAA,GAAOP,IAAA,CAAK,CAAL,CAAZ,CAAwB,IAAA,CAAxB,IACAsG,IAAA,CAAK/F,CAAA,CAAE,CAAF,IAAOP,IAAA,CAAK,CAAL,CAAZ,CAAA,IAAwB,CADxB,IAEAO,CAAA,CAAE,CAAF,CAAA,IAAQP,IAAA,CAAK,CAAL,CAFR,IAGAO,CAAA,CAAE,CAAF,CAAA,IAAQP,IAAA,CAAK,CAAL,CAHf,CADgB;AAAA,KAjaQ;AAAA,CAtBhC;AAmcA;AAAA;AAAA;AAAA;AAAA,SAAS2H,MAAT,CAAgB9T,CAAhB,EAAmBC,CAAnB,EAAsB;AAAA,IAClB,OAAOD,CAAA,CAAE,CAAF,CAASC,KAAAA,CAAA,CAAE,CAAF,CAAT,IAAiBD,CAAA,CAAE,CAAF,CAAA,KAASC,CAAA,CAAE,CAAF,CAAjC,CADkB;AAAA,CAnctB;AA6cA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAASkT,WAAT,CAAqBnT,CAArB,EAAwBC,CAAxB,EAA2BtC,CAA3B,EAA8B;AAAA,IAC1B,MAAM6U,EAAA,GAAKC,IAAA,CAAKxS,CAAA,CAAE,CAAF,CAAA,GAAOD,CAAA,CAAE,CAAF,CAAZ,CAAX,CAD0B;AAAA,IAE1B,MAAM0S,EAAA,GAAKzS,CAAA,CAAE,CAAF,CAAA,GAAOD,CAAA,CAAE,CAAF,CAAlB,CAF0B;AAAA,IAG1B,OAAO;AAAA,QACHA,CAAA,CAAE,CAAF,CAAOwS,GAAAA,EAAA,GAAK7U,CADT;AAAA,QAEHqC,CAAA,CAAE,CAAF,CAAO0S,GAAAA,EAAA,GAAK/U,CAFT;AAAA,KAAP,CAH0B;AAAA,CA7c9B;AA0dA;AAAA;AAAA;AAAA;AAAA,SAAS8U,IAAT,CAAc4B,GAAd,EAAmB;AAAA,IACf,OAAOA,GAAA,GAAM,CAAC,GAAd;AAAA,QAAmBA,GAAA,IAAO,GAAP,CADJ;AAAA,IAEf,OAAOA,GAAA,GAAM,GAAb;AAAA,QAAkBA,GAAA,IAAO,GAAP,CAFH;AAAA,IAGf,OAAOA,GAAP,CAHe;AAAA;;ACzdJ,MAAMC,SAAN,CAAgB;AAAA,IAC3BvY,WAAA,CAAY0F,IAAA,GAAO,EAAnB,EAAuB8B,OAAA,GAAU,CAACvD,CAAD,EAAIC,CAAJ,KAAWD,CAAA,GAAIC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAA,GAAIC,CAAJ,GAAQ,CAAR,GAAY,CAArE,EAAyE;AAAA,QACrE,IAAKwB,CAAAA,IAAL,GAAYA,IAAZ,CADqE;AAAA,QAErE,KAAK1L,MAAL,GAAc,KAAK0L,IAAL,CAAU1L,MAAxB,CAFqE;AAAA,QAGrE,IAAKwN,CAAAA,OAAL,GAAeA,OAAf,CAHqE;AAAA,QAKrE,IAAI,IAAA,CAAKxN,MAAL,GAAc,CAAlB,EAAqB;AAAA,YACjB,KAAK,IAAIiC,CAAA,GAAK,CAAKjC,IAAAA,CAAAA,MAAL,IAAe,CAAf,IAAoB,CAA7B,EAAgCiC,CAAA,IAAK,CAA1C,EAA6CA,CAAA,EAA7C;AAAA,gBAAkD,IAAKuc,CAAAA,KAAL,CAAWvc,CAAX,CADjC,CAAA;AAAA,SALgD;AAAA,KAD9C;AAAA,IAW3BpB,IAAA,CAAKsO,IAAL,EAAW;AAAA,QACP,KAAKzD,IAAL,CAAU7K,IAAV,CAAesO,IAAf,CADO,CAAA;AAAA,QAEP,KAAKsP,GAAL,CAAS,IAAKze,CAAAA,MAAL,EAAT,CAFO,CAAA;AAAA,KAXgB;AAAA,IAgB3B4J,GAAA,GAAM;AAAA,QACF,IAAI,IAAA,CAAK5J,MAAL,KAAgB,CAApB;AAAA,YAAuB,OAAOX,SAAP,CADrB;AAAA,QAGF,MAAMqf,GAAA,GAAM,IAAA,CAAKhT,IAAL,CAAU,CAAV,CAAZ,CAHE;AAAA,QAIF,MAAMiT,MAAA,GAAS,IAAA,CAAKjT,IAAL,CAAU9B,GAAV,EAAf,CAJE;AAAA,QAMF,IAAI,EAAE,IAAA,CAAK5J,MAAP,GAAgB,CAApB,EAAuB;AAAA,YACnB,KAAK0L,IAAL,CAAU,CAAV,CAAA,GAAeiT,MAAf,CADmB;AAAA,YAEnB,IAAKH,CAAAA,KAAL,CAAW,CAAX,CAFmB,CAAA;AAAA,SANrB;AAAA,QAWF,OAAOE,GAAP,CAXE;AAAA,KAhBqB;AAAA,IA8B3BE,IAAA,GAAO;AAAA,QACH,OAAO,IAAKlT,CAAAA,IAAL,CAAU,CAAV,CAAP,CADG;AAAA,KA9BoB;AAAA,IAkC3B+S,GAAA,CAAII,GAAJ,EAAS;AAAA,QACL,MAAM,CAACnT,IAAD,EAAO8B,OAAP,CAAA,GAAkB,IAAxB,CADK;AAAA,QAEL,MAAM2B,IAAA,GAAOzD,IAAA,CAAKmT,GAAL,CAAb,CAFK;AAAA,QAIL,OAAOA,GAAA,GAAM,CAAb,EAAgB;AAAA,YACZ,MAAM1Y,MAAA,GAAU0Y,GAAA,GAAM,CAAP,IAAa,CAA5B,CADY;AAAA,YAEZ,MAAMC,OAAA,GAAUpT,IAAA,CAAKvF,MAAL,CAAhB,CAFY;AAAA,YAGZ,IAAIqH,OAAA,CAAQ2B,IAAR,EAAc2P,OAAd,KAA0B,CAA9B;AAAA,gBAAiC,MAHrB;AAAA,YAIZpT,IAAA,CAAKmT,GAAL,CAAA,GAAYC,OAAZ,CAJY;AAAA,YAKZD,GAAA,GAAM1Y,MAAN,CALY;AAAA,SAJX;AAAA,QAYLuF,IAAA,CAAKmT,GAAL,CAAA,GAAY1P,IAAZ,CAZK;AAAA,KAlCkB;AAAA,IAiD3BqP,KAAA,CAAMK,GAAN,EAAW;AAAA,QACP,MAAM,CAACnT,IAAD,EAAO8B,OAAP,CAAA,GAAkB,IAAxB,CADO;AAAA,QAEP,MAAMuR,UAAA,GAAa,KAAK/e,MAAL,IAAe,CAAlC,CAFO;AAAA,QAGP,MAAMmP,IAAA,GAAOzD,IAAA,CAAKmT,GAAL,CAAb,CAHO;AAAA,QAKP,OAAOA,GAAA,GAAME,UAAb,EAAyB;AAAA,YACrB,IAAIC,SAAA,GAAa,CAAAH,GAAA,IAAO,CAAP,IAAY,CAA7B,CADqB;AAAA;AAErB,YAAA,MAAMI,KAAA,GAAQD,SAAA,GAAY,CAA1B,CAFqB;AAAA,YAIrB,IAAIC,KAAA,GAAQ,KAAKjf,MAAb,IAAuBwN,OAAA,CAAQ9B,IAAA,CAAKuT,KAAL,CAAR,EAAqBvT,IAAA,CAAKsT,SAAL,CAArB,CAAA,GAAwC,CAAnE,EAAsE;AAAA,gBAClEA,SAAA,GAAYC,KAAZ,CADkE;AAAA,aAJjD;AAAA,YAOrB,IAAIzR,OAAA,CAAQ9B,IAAA,CAAKsT,SAAL,CAAR,EAAyB7P,IAAzB,CAAA,IAAkC,CAAtC;AAAA,gBAAyC,MAPpB;AAAA,YASrBzD,IAAA,CAAKmT,GAAL,CAAA,GAAYnT,IAAA,CAAKsT,SAAL,CAAZ,CATqB;AAAA,YAUrBH,GAAA,GAAMG,SAAN,CAVqB;AAAA,SALlB;AAAA,QAkBPtT,IAAA,CAAKmT,GAAL,CAAA,GAAY1P,IAAZ,CAlBO;AAAA,KAjDgB;AAAA;;ACc/B,aAAA,IAAA;;ACSA,SAAS+P,UAAT,CAAoBjV,CAApB,EAAiCC,CAAjC,EAA8C;AAAA,IACnC,OAAAA,CAAA,CAAE0J,IAAF,GAAS3J,CAAA,CAAE2J,IAAX,CADmC;AAAA,CAxB9C;AA4BA,MAAMuL,cAAA,GAAiB,GAAvB,CA5BA;AA6BA,MAAMC,mBAAA,GAAsB,EAA5B,CA7BA;AA+BA,SAASC,aAAT,CAAuBjJ,IAAvB,EAAmC;AAAA,IAC/B,MAAMkJ,WAAA,GAAc;AAAA,QAAC9f,QAAD;AAAA,QAAWA,QAAX;AAAA,QAAqB,SAArB;AAAA,QAAgC,CAASA,QAAzC;AAAA,KAApB,CAD+B;AAAA,IAE3B,IAAA8f,WAAA,CAAYtf,MAAZ,KAAuBoW,IAAA,CAAKpW,MAA5B,EAAoC;AAAA,QAC7B,OAAA,KAAA,CAD6B;AAAA,KAFT;AAAA,IAK/B,KAAA,IAASiC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIqd,WAAA,CAAYtf,MAAhC,EAAwCiC,CAAA,EAAxC,EAA6C;AAAA,QACzC,IAAIqd,WAAA,CAAYrd,CAAZ,MAAmBmU,IAAA,CAAKnU,CAAL,CAAvB,EAAgC;AAAA,YACrB,OAAA,KAAA,CADqB;AAAA,SADS;AAAA,KALd;AAAA,IAUxB,OAAA,IAAA,CAVwB;AAAA,CA/BnC;AA4CA,SAASsd,YAAT,CAAsBC,KAAtB,EAAyC;AAAA,IACrC,OAAOA,KAAA,CAAM,CAAN,CAAA,GAAWA,KAAA,CAAM,CAAN,CAAX,GAAsB,CAA7B,CADqC;AAAA,CA5CzC;AAgDA,SAASC,WAAT,CAAqBD,KAArB,EAAwCE,SAAxC,EAA2D;AAAA,IACjD,MAAAC,GAAA,GAAMH,KAAA,CAAM,CAAN,CAAYA,IAAAA,KAAA,CAAM,CAAN,CAAZ,IAAwBA,KAAA,CAAM,CAAN,CAAA,GAAWE,SAAzC,CADiD;AAAA,IAEvD,IAAI,CAACC,GAAL,EAAU;AAAA,QACNC,OAAA,CAAQC,IAAR,CAAa,4CAAb,CADM,CAAA;AAAA,KAF6C;AAAA,IAKhD,OAAAF,GAAA,CALgD;AAAA,CAhD3D;AA2DA,SAASG,UAAT,CAAoBN,KAApB,EAAuCO,MAAvC,EAAwD;AAAA,IAChD,IAAAP,KAAA,CAAM,CAAN,IAAWA,KAAA,CAAM,CAAN,CAAX;AAAA,QAAqB,OAAO;AAAA,YAAC,IAAD;AAAA,YAAO,IAAP;AAAA,SAAP,CAD2B;AAAA,IAE9C,MAAAQ,IAAA,GAAOT,YAAA,CAAaC,KAAb,CAAP,CAF8C;AAAA,IAGpD,IAAIO,MAAJ,EAAY;AAAA,QACR,IAAIC,IAAA,KAAS,CAAb,EAAgB;AAAA,YACL,OAAA;AAAA,gBAACR,KAAD;AAAA,gBAAQ,IAAR;AAAA,aAAA,CADK;AAAA,SADR;AAAA,QAIR,MAAMS,KAAA,GAAQ5X,IAAA,CAAK2C,KAAL,CAAWgV,IAAA,GAAO,CAAlB,CAAd,CAJQ;AAAA,QAKF,MAAAE,MAAA,GAAqB;AAAA,YAACV,KAAA,CAAM,CAAN,CAAD;AAAA,YAAWA,KAAA,CAAM,CAAN,CAAA,GAAWS,KAAtB;AAAA,SAArB,CALE;AAAA,QAMF,MAAAE,MAAA,GAAqB;AAAA,YAACX,KAAA,CAAM,CAAN,CAAA,GAAWS,KAAZ;AAAA,YAAmBT,KAAA,CAAM,CAAN,CAAnB;AAAA,SAArB,CANE;AAAA,QAOD,OAAA;AAAA,YAACU,MAAD;AAAA,YAASC,MAAT;AAAA,SAAA,CAPC;AAAA,KAAZ,MAQO;AAAA,QACH,IAAIH,IAAA,KAAS,CAAb,EAAgB;AAAA,YACL,OAAA;AAAA,gBAACR,KAAD;AAAA,gBAAQ,IAAR;AAAA,aAAA,CADK;AAAA,SADb;AAAA,QAIH,MAAMS,KAAA,GAAQ5X,IAAA,CAAK2C,KAAL,CAAWgV,IAAA,GAAO,CAAlB,CAAuB,GAAA,CAArC,CAJG;AAAA,QAKG,MAAAE,MAAA,GAAqB;AAAA,YAACV,KAAA,CAAM,CAAN,CAAD;AAAA,YAAWA,KAAA,CAAM,CAAN,CAAA,GAAWS,KAAtB;AAAA,SAArB,CALH;AAAA,QAMG,MAAAE,MAAA,GAAqB;AAAA,YAACX,KAAA,CAAM,CAAN,CAAWS,GAAAA,KAAX,GAAmB,CAApB;AAAA,YAAuBT,KAAA,CAAM,CAAN,CAAvB;AAAA,SAArB,CANH;AAAA,QAOI,OAAA;AAAA,YAACU,MAAD;AAAA,YAASC,MAAT;AAAA,SAAA,CAPJ;AAAA,KAX6C;AAAA,CA3DxD;AAiFA,SAASC,OAAT,CAAiBC,SAAjB,EAAqDb,KAArD,EAAwE;AAAA,IACpE,MAAMpJ,IAAA,GAAa;AAAA,QAAC5W,QAAD;AAAA,QAAWA,QAAX;AAAA,QAAqB,SAArB;AAAA,QAAgC,CAASA,QAAzC;AAAA,KAAnB,CADoE;AAAA,IAEpE,IAAI,CAACigB,WAAA,CAAYD,KAAZ,EAAmBa,SAAA,CAAUrgB,MAA7B,CAAL;AAAA,QAAkD,OAAAoW,IAAA,CAFkB;AAAA,IAG3D,KAAA,IAAAnU,CAAA,GAAIud,KAAA,CAAM,CAAN,CAAJ,EAAcvd,CAAA,IAAKud,KAAA,CAAM,CAAN,CAAnB,EAA6B,EAAEvd,CAA/B,EAAkC;AAAA,QAC5BkU,UAAA,CAAAC,IAAA,EAAMiK,SAAA,CAAUpe,CAAV,CAAN,CAD4B,CAAA;AAAA,KAHyB;AAAA,IAM7D,OAAAmU,IAAA,CAN6D;AAAA,CAjFxE;AA0FA,SAASkK,cAAT,CAAwBvK,OAAxB,EAAiE;AAAA,IAC7D,MAAMK,IAAA,GAAa;AAAA,QAAC5W,QAAD;AAAA,QAAWA,QAAX;AAAA,QAAqB,SAArB;AAAA,QAAgC,CAASA,QAAzC;AAAA,KAAnB,CAD6D;AAAA,IAE7D,KAAA,IAASyC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI8T,OAAA,CAAQ/V,MAA5B,EAAoC,EAAEiC,CAAtC,EAAyC;AAAA,QAC5B,KAAA,IAAAuT,CAAA,GAAI,CAAJ,EAAOA,CAAA,GAAIO,OAAA,CAAQ9T,CAAR,CAAA,CAAWjC,MAAtB,EAA8B,EAAEwV,CAAhC,EAAmC;AAAA,YACxCW,UAAA,CAAWC,IAAX,EAAiBL,OAAA,CAAQ9T,CAAR,CAAA,CAAWuT,CAAX,CAAjB,CADwC,CAAA;AAAA,SADP;AAAA,KAFoB;AAAA,IAOtD,OAAAY,IAAA,CAPsD;AAAA,CA1FjE;AAuGA,SAASmK,kBAAT,CAA4B/J,KAA5B,EAAyCC,KAAzC,EAAsD+J,KAAtD,EAAyE;AAAA,IACrE,IAAInB,aAAA,CAAc7I,KAAd,KAAwB6I,aAAA,CAAc5I,KAAd,CAA5B,EAAkD;AAAA,QACvC,OAAAgK,GAAA,CADuC;AAAA,KADmB;AAAA,IAIrE,IAAIhE,EAAA,GAAK,CAAT,CAJqE;AAAA,IAKrE,IAAIE,EAAA,GAAK,CAAT,CALqE;AAAA,IAOrE,IAAInG,KAAA,CAAM,CAAN,IAAWC,KAAA,CAAM,CAAN,CAAf,EAAyB;AAAA,QACrBgG,EAAA,GAAKhG,KAAA,CAAM,CAAN,IAAWD,KAAA,CAAM,CAAN,CAAhB,CADqB;AAAA,KAP4C;AAAA,IAWrE,IAAIA,KAAA,CAAM,CAAN,IAAWC,KAAA,CAAM,CAAN,CAAf,EAAyB;AAAA,QACrBgG,EAAA,GAAKjG,KAAA,CAAM,CAAN,IAAWC,KAAA,CAAM,CAAN,CAAhB,CADqB;AAAA,KAX4C;AAAA,IAerE,IAAID,KAAA,CAAM,CAAN,IAAWC,KAAA,CAAM,CAAN,CAAf,EAAyB;AAAA,QACrBkG,EAAA,GAAKnG,KAAA,CAAM,CAAN,IAAWC,KAAA,CAAM,CAAN,CAAhB,CADqB;AAAA,KAf4C;AAAA,IAmBrE,IAAID,KAAA,CAAM,CAAN,IAAWC,KAAA,CAAM,CAAN,CAAf,EAAyB;AAAA,QACrBkG,EAAA,GAAKlG,KAAA,CAAM,CAAN,IAAWD,KAAA,CAAM,CAAN,CAAhB,CADqB;AAAA,KAnB4C;AAAA,IAsB9D,OAAAgK,KAAA,CAAMhE,QAAN,CAAe;AAAA,QAAC,CAAD;AAAA,QAAM,CAAN;AAAA,KAAf,EAA2B;AAAA,QAACC,EAAD;AAAA,QAAKE,EAAL;AAAA,KAA3B,CAAA,CAtB8D;AAAA,CAvGzE;AAgIA,SAAS+D,gBAAT,CAA0Bvd,CAA1B,EAA6C;AAAA,IACzC,OAAOA,CAAA,GAAI,GAAJ,GAAU,GAAjB,CADyC;AAAA,CAhI7C;AAoIA,SAASwd,gBAAT,CAA0BrN,CAA1B,EAA6C;AAAA,IACnC,MAAAyD,EAAA,GAAK,MAAMzD,CAAA,GAAI,GAAf,CADmC;AAAA,IAEzC,OAAO,GAAMjL,GAAAA,IAAA,CAAKmQ,EAAX,GAAgBnQ,IAAA,CAAKyT,IAAL,CAAUzT,IAAA,CAAK0T,GAAL,CAAShF,EAAA,GAAK1O,IAAA,CAAKmQ,EAAV,GAAe,GAAxB,CAAV,CAAhB,GAA0D,EAAjE,CAFyC;AAAA,CApI7C;AAyIA,SAASoI,cAAT,CAAwB1c,KAAxB,EAAsCyO,SAAtC,EAAkE;AAAA,IAC9D,MAAMiG,WAAA,GAAcvQ,IAAA,CAAKqE,GAAL,CAAS,CAAT,EAAYiG,SAAA,CAAUkG,CAAtB,CAApB,CAD8D;AAAA,IAE9D,MAAM1V,CAAA,GAAK,CAAAe,KAAA,CAAMf,CAAN,GAAUgV,MAAV,GAAmBxF,SAAA,CAAUxP,CAA7B,IAAkCyV,WAA7C,CAF8D;AAAA,IAG9D,MAAMtF,CAAA,GAAK,CAAApP,KAAA,CAAMoP,CAAN,GAAU6E,MAAV,GAAmBxF,SAAA,CAAUW,CAA7B,IAAkCsF,WAA7C,CAH8D;AAAA,IAI9D,OAAO;AAAA,QAAC8H,gBAAA,CAAiBvd,CAAjB,CAAD;AAAA,QAAsBwd,gBAAA,CAAiBrN,CAAjB,CAAtB;AAAA,KAAP,CAJ8D;AAAA,CAzIlE;AAgJA,SAASuN,eAAT,CAAyB5c,WAAzB,EAAoD0O,SAApD,EAAgF;AAAA,IAC5E,MAAMmO,MAAA,GAAS,EAAf,CAD4E;AAAA,IAE5E,KAAA,IAAS7e,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIgC,WAAA,CAAYjE,MAAhC,EAAwC,EAAEiC,CAA1C,EAA6C;AAAA,QACzC6e,MAAA,CAAOjgB,IAAP,CAAY+f,cAAA,CAAe3c,WAAA,CAAYhC,CAAZ,CAAf,EAA+B0Q,SAA/B,CAAZ,CADyC,CAAA;AAAA,KAF+B;AAAA,IAKrE,OAAAmO,MAAA,CALqE;AAAA,CAhJhF;AAwJA,SAASC,mBAAT,CAA6B7J,KAA7B,EAAsD+B,IAAtD,EAAqFuH,KAArF,EAAwG;AAAA,IAEpG,MAAMQ,YAAA,GAAeR,KAAA,CAAMlD,WAAN,CAAkBrE,IAAlB,EAAwB/B,KAAxB,CAA+BA,CAAAA,KAApD,CAFoG;AAAA,IAI7F,OAAAsJ,KAAA,CAAMhE,QAAN,CAAetF,KAAf,EAAsB8J,YAAtB,CAAA,CAJ6F;AAAA,CAxJxG;AA+JA,SAASC,oBAAT,CAA8BlH,MAA9B,EAA+DmH,MAA/D,EAAmFjI,IAAnF,EAAkHkI,MAAlH,EAAsIX,KAAtI,EAAyJ;AAAA,IAC/I,MAAAY,OAAA,GAAUnI,IAAA,CAAK3Z,KAAL,CAAW6hB,MAAA,CAAO,CAAP,CAAX,EAAsBA,MAAA,CAAO,CAAP,CAAY,GAAA,CAAlC,CAAV,CAD+I;AAAA,IAErJ,IAAIvN,IAAA,GAAOpU,QAAX,CAFqJ;AAAA,IAG5I,KAAA,IAAAyC,CAAA,GAAIif,MAAA,CAAO,CAAP,CAAJ,EAAejf,CAAA,IAAKif,MAAA,CAAO,CAAP,CAApB,EAA+B,EAAEjf,CAAjC,EAAoC;AAAA,QACzC,IAAK,CAAA2R,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAemN,mBAAA,CAAoBhH,MAAA,CAAO9X,CAAP,CAApB,EAA+Bmf,OAA/B,EAAwCZ,KAAxC,CAAf,CAAP,MAA2E,CAAhF;AAAA,YAA4F,OAAA,CAAA,CADnD;AAAA,KAHwG;AAAA,IAM9I,OAAA5M,IAAA,CAN8I;AAAA,CA/JzJ;AAyKA,SAASyN,wBAAT,CAAkC5L,EAAlC,EAAwDC,EAAxD,EAA8E4B,EAA9E,EAAoGC,EAApG,EAA0HiJ,KAA1H,EAA6I;AAAA,IACzI,MAAMc,KAAA,GAAQjZ,IAAA,CAAKgO,GAAL;AAEV,IAAAmK,KAAA,CAAMnD,sBAAN,CAA6B5H,EAA7B,EAAiC6B,EAAjC,EAAqCC,EAArC,CAFU;AAIV,IAAAiJ,KAAA,CAAMnD,sBAAN,CAA6B3H,EAA7B,EAAiC4B,EAAjC,EAAqCC,EAArC,CAJU,CAAd,CADyI;AAAA,IAOzI,MAAMgK,KAAA,GAAQlZ,IAAA,CAAKgO,GAAL;AAEV,IAAAmK,KAAA,CAAMnD,sBAAN,CAA6B/F,EAA7B,EAAiC7B,EAAjC,EAAqCC,EAArC,CAFU;AAIV,IAAA8K,KAAA,CAAMnD,sBAAN,CAA6B9F,EAA7B,EAAiC9B,EAAjC,EAAqCC,EAArC,CAJU,CAAd,CAPyI;AAAA,IAclI,OAAArN,IAAA,CAAKgO,GAAL,CAASiL,KAAT,EAAgBC,KAAhB,CAAA,CAdkI;AAAA,CAzK7I;AA0LA,SAASC,kBAAT,CAA4BC,KAA5B,EAA4DvB,MAA5D,EAAgFwB,KAAhF,EAAgHvB,MAAhH,EAAoIK,KAApI,EAAuJ;AAAA,IAC/I,IAAA,CAACf,WAAA,CAAYS,MAAZ,EAAoBuB,KAAA,CAAMzhB,MAA1B,CAAD,IAAsC,CAACyf,WAAA,CAAYU,MAAZ,EAAoBuB,KAAA,CAAM1hB,MAA1B,CAAvC,EAA0E;AAAA,QACnE,OAAAygB,GAAA,CADmE;AAAA,KADqE;AAAA,IAInJ,IAAI7M,IAAA,GAAOpU,QAAX,CAJmJ;AAAA,IAK1I,KAAA,IAAAyC,CAAA,GAAIie,MAAA,CAAO,CAAP,CAAJ,EAAeje,CAAA,GAAIie,MAAA,CAAO,CAAP,CAAnB,EAA8B,EAAEje,CAAhC,EAAmC;AAAA,QAC/B,KAAA,IAAAuT,CAAA,GAAI2K,MAAA,CAAO,CAAP,CAAJ,EAAe3K,CAAA,GAAI2K,MAAA,CAAO,CAAP,CAAnB,EAA8B,EAAE3K,CAAhC,EAAmC;AAAA,YACxC,IAAIwC,uBAAA,CAAwByJ,KAAA,CAAMxf,CAAN,CAAxB,EAAkCwf,KAAA,CAAMxf,CAAA,GAAI,CAAV,CAAlC,EAAgDyf,KAAA,CAAMlM,CAAN,CAAhD,EAA0DkM,KAAA,CAAMlM,CAAA,GAAI,CAAV,CAA1D,CAAJ;AAAA,gBAAoF,OAAA,CAAA,CAD5C;AAAA,YAExC5B,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeyN,wBAAA,CAAyBI,KAAA,CAAMxf,CAAN,CAAzB,EAAmCwf,KAAA,CAAMxf,CAAA,GAAI,CAAV,CAAnC,EAAiDyf,KAAA,CAAMlM,CAAN,CAAjD,EAA2DkM,KAAA,CAAMlM,CAAA,GAAI,CAAV,CAA3D,EAAyEgL,KAAzE,CAAf,CAAP,CAFwC;AAAA,SADJ;AAAA,KALuG;AAAA,IAW5I,OAAA5M,IAAA,CAX4I;AAAA,CA1LvJ;AAwMA,SAAS+N,sBAAT,CAAgCC,SAAhC,EAAoE1B,MAApE,EAAwF2B,SAAxF,EAA4H1B,MAA5H,EAAgJK,KAAhJ,EAAmK;AAAA,IAC3J,IAAA,CAACf,WAAA,CAAYS,MAAZ,EAAoB0B,SAAA,CAAU5hB,MAA9B,CAAD,IAA0C,CAACyf,WAAA,CAAYU,MAAZ,EAAoB0B,SAAA,CAAU7hB,MAA9B,CAA3C,EAAkF;AAAA,QAC3E,OAAAygB,GAAA,CAD2E;AAAA,KADyE;AAAA,IAI/J,IAAI7M,IAAA,GAAOpU,QAAX,CAJ+J;AAAA,IAKtJ,KAAA,IAAAyC,CAAA,GAAIie,MAAA,CAAO,CAAP,CAAJ,EAAeje,CAAA,IAAKie,MAAA,CAAO,CAAP,CAApB,EAA+B,EAAEje,CAAjC,EAAoC;AAAA,QAChC,KAAA,IAAAuT,CAAA,GAAI2K,MAAA,CAAO,CAAP,CAAJ,EAAe3K,CAAA,IAAK2K,MAAA,CAAO,CAAP,CAApB,EAA+B,EAAE3K,CAAjC,EAAoC;AAAA,YAEzC,IAAK,CAAA5B,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAe4M,KAAA,CAAMhE,QAAN,CAAeoF,SAAA,CAAU3f,CAAV,CAAf,EAA6B4f,SAAA,CAAUrM,CAAV,CAA7B,CAAf,CAAP,MAAuE,CAA5E;AAAA,gBAAwF,OAAA5B,IAAA,CAF/C;AAAA,SADJ;AAAA,KALkH;AAAA,IAWxJ,OAAAA,IAAA,CAXwJ;AAAA,CAxMnK;AAsNA,SAASkO,sBAAT,CAAgC5K,KAAhC,EAAyDnB,OAAzD,EAAkGyK,KAAlG,EAAqH;AAAA,IAC7G,IAAAvJ,kBAAA,CAAmBC,KAAnB,EAA0BnB,OAA1B,EAAmC,2BAAnC;AAAA,QAAoE,OAAA,CAAA,CADyC;AAAA,IAEjH,IAAInC,IAAA,GAAOpU,QAAX,CAFiH;AAAA,IAGjH,KAAW6V,MAAAA,IAAX,IAAmBU,OAAnB,EAA4B;AAAA,QACxB,MAAMgM,OAAA,GAAU1M,IAAA,CAAKrV,MAArB,CADwB;AAAA,QAExB,IAAI+hB,OAAA,GAAU,CAAd,EAAiB;AAAA,YACbnC,OAAA,CAAQC,IAAR,CAAa,uCAAb,CADa,CAAA;AAAA,YAEN,OAAAY,GAAA,CAFM;AAAA,SAFO;AAAA,QAMxB,IAAIpL,IAAA,CAAK,CAAL,CAAA,KAAYA,IAAA,CAAK0M,OAAA,GAAU,CAAf,CAAhB,EAAmC;AAAA,YAE/B,IAAK,CAAAnO,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAe4M,KAAA,CAAMnD,sBAAN,CAA6BnG,KAA7B,EAAoC7B,IAAA,CAAK0M,OAAA,GAAU,CAAf,CAApC,EAAuD1M,IAAA,CAAK,CAAL,CAAvD,CAAf,CAAP,MAA4F,CAAjG;AAAA,gBAA6G,OAAAzB,IAAA,CAF9E;AAAA,SANX;AAAA,QAUnB,IAAA,CAAAA,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAemN,mBAAA,CAAoB7J,KAApB,EAA2B7B,IAA3B,EAAiCmL,KAAjC,CAAf,CAAP,MAAoE,CAApE;AAAA,YAAgF,OAAA5M,IAAA,CAV7D;AAAA,KAHqF;AAAA,IAe1G,OAAAA,IAAA,CAf0G;AAAA,CAtNrH;AAwOA,SAASoO,qBAAT,CAA+B/I,IAA/B,EAA8DuG,KAA9D,EAAiFzJ,OAAjF,EAA0HyK,KAA1H,EAA6I;AAAA,IACzI,IAAI,CAACf,WAAA,CAAYD,KAAZ,EAAmBvG,IAAA,CAAKjZ,MAAxB,CAAL,EAAsC;AAAA,QAC3B,OAAAygB,GAAA,CAD2B;AAAA,KADmG;AAAA,IAIhI,KAAA,IAAAxe,CAAA,GAAIud,KAAA,CAAM,CAAN,CAAJ,EAAcvd,CAAA,IAAKud,KAAA,CAAM,CAAN,CAAnB,EAA6B,EAAEvd,CAA/B,EAAkC;AAAA,QACnC,IAAAgV,kBAAA,CAAmBgC,IAAA,CAAKhX,CAAL,CAAnB,EAA4B8T,OAA5B,EAAqC,IAAA,uBAArC;AAAA,YAAsE,OAAA,CAAA,CADnC;AAAA,KAJ8F;AAAA,IAOzI,IAAInC,IAAA,GAAOpU,QAAX,CAPyI;AAAA,IAQhI,KAAA,IAAAyC,CAAA,GAAIud,KAAA,CAAM,CAAN,CAAJ,EAAcvd,CAAA,GAAIud,KAAA,CAAM,CAAN,CAAlB,EAA4B,EAAEvd,CAA9B,EAAiC;AAAA,QACtC,KAAWoT,MAAAA,IAAX,IAAmBU,OAAnB,EAA4B;AAAA,YACf,KAAA,IAAAP,CAAA,GAAI,CAAJ,EAAOD,GAAA,GAAMF,IAAA,CAAKrV,MAAlB,EAA0BuC,CAAA,GAAIgT,GAAA,GAAM,CAApC,EAAuCC,CAAA,GAAID,GAA3C,EAAgDhT,CAAA,GAAIiT,CAAA,EAApD,EAAyD;AAAA,gBAC9D,IAAIwC,uBAAA,CAAwBiB,IAAA,CAAKhX,CAAL,CAAxB,EAAiCgX,IAAA,CAAKhX,CAAA,GAAI,CAAT,CAAjC,EAA8CoT,IAAA,CAAK9S,CAAL,CAA9C,EAAuD8S,IAAA,CAAKG,CAAL,CAAvD,CAAJ;AAAA,oBAA4E,OAAA,CAAA,CADd;AAAA,gBAE9D5B,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeyN,wBAAA,CAAyBpI,IAAA,CAAKhX,CAAL,CAAzB,EAAkCgX,IAAA,CAAKhX,CAAA,GAAI,CAAT,CAAlC,EAA+CoT,IAAA,CAAK9S,CAAL,CAA/C,EAAwD8S,IAAA,CAAKG,CAAL,CAAxD,EAAiEgL,KAAjE,CAAf,CAAP,CAF8D;AAAA,aAD1C;AAAA,SADU;AAAA,KAR+F;AAAA,IAgBlI,OAAA5M,IAAA,CAhBkI;AAAA,CAxO7I;AA2PA,SAASqO,gBAAT,CAA0BC,QAA1B,EAAoEC,QAApE,EAA8G;AAAA,IAC1G,KAAW9M,MAAAA,IAAX,IAAmB6M,QAAnB,EAA6B;AAAA,QACzB,KAAA,IAASjgB,CAAA,GAAI,CAAb,EAAgBA,CAAA,IAAKoT,IAAA,CAAKrV,MAAL,GAAc,CAAnC,EAAsC,EAAEiC,CAAxC,EAA2C;AAAA,YACnC,IAAAgV,kBAAA,CAAmB5B,IAAA,CAAKpT,CAAL,CAAnB,EAA4BkgB,QAA5B,EAAsC,IAAA,uBAAtC;AAAA,gBAAuE,OAAA,IAAA,CADpC;AAAA,SADlB;AAAA,KAD6E;AAAA,IAMnG,OAAA,KAAA,CANmG;AAAA,CA3P9G;AAoQA,SAASC,wBAAT,CAAkCF,QAAlC,EAA4EC,QAA5E,EAAsH3B,KAAtH,EAAyI6B,eAAA,GAA0B7iB,QAAnK,EAA6K;AAAA,IACnK,MAAAgX,KAAA,GAAQ8J,cAAA,CAAe4B,QAAf,CAAR,CADmK;AAAA,IAEnK,MAAAzL,KAAA,GAAQ6J,cAAA,CAAe6B,QAAf,CAAR,CAFmK;AAAA,IAGzK,IAAIE,eAAA,KAAoB7iB,QAApB,IAAgC+gB,kBAAA,CAAmB/J,KAAnB,EAA0BC,KAA1B,EAAiC+J,KAAjC,CAAA,IAA2C6B,eAA/E,EAAgG;AAAA,QACrF,OAAAA,eAAA,CADqF;AAAA,KAHyE;AAAA,IAMrK,IAAA9L,YAAA,CAAaC,KAAb,EAAoBC,KAApB,CAAA,EAA4B;AAAA,QAC5B,IAAIwL,gBAAA,CAAiBC,QAAjB,EAA2BC,QAA3B,CAAJ;AAAA,YAAiD,OAAA,CAAA,CADrB;AAAA,KAA5B,MAEO,IAAAF,gBAAA,CAAiBE,QAAjB,EAA2BD,QAA3B,CAAA,EAAsC;AAAA,QACtC,OAAA,CAAA,CADsC;AAAA,KARwH;AAAA,IAWzK,IAAItO,IAAA,GAAOyO,eAAX,CAXyK;AAAA,IAYzK,KAAWC,MAAAA,KAAX,IAAoBJ,QAApB,EAA8B;AAAA,QACjB,KAAA,IAAAjgB,CAAA,GAAI,CAAJ,EAAOsgB,IAAA,GAAOD,KAAA,CAAMtiB,MAApB,EAA4B6J,CAAA,GAAI0Y,IAAA,GAAO,CAAvC,EAA0CtgB,CAAA,GAAIsgB,IAA9C,EAAoD1Y,CAAA,GAAI5H,CAAA,EAAxD,EAA6D;AAAA,YAClE,KAAWugB,MAAAA,KAAX,IAAoBL,QAApB,EAA8B;AAAA,gBACjB,KAAA,IAAA3M,CAAA,GAAI,CAAJ,EAAO6B,IAAA,GAAOmL,KAAA,CAAMxiB,MAApB,EAA4BuC,CAAA,GAAI8U,IAAA,GAAO,CAAvC,EAA0C7B,CAAA,GAAI6B,IAA9C,EAAoD9U,CAAA,GAAIiT,CAAA,EAAxD,EAA6D;AAAA,oBAClE,IAAIwC,uBAAA,CAAwBsK,KAAA,CAAMzY,CAAN,CAAxB,EAAkCyY,KAAA,CAAMrgB,CAAN,CAAlC,EAA4CugB,KAAA,CAAMjgB,CAAN,CAA5C,EAAsDigB,KAAA,CAAMhN,CAAN,CAAtD,CAAJ;AAAA,wBAA4E,OAAA,CAAA,CADV;AAAA,oBAElE5B,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeyN,wBAAA,CAAyBiB,KAAA,CAAMzY,CAAN,CAAzB,EAAmCyY,KAAA,CAAMrgB,CAAN,CAAnC,EAA6CugB,KAAA,CAAMjgB,CAAN,CAA7C,EAAuDigB,KAAA,CAAMhN,CAAN,CAAvD,EAAiEgL,KAAjE,CAAf,CAAP,CAFkE;AAAA,iBAD5C;AAAA,aADoC;AAAA,SAD5C;AAAA,KAZ2I;AAAA,IAsBlK,OAAA5M,IAAA,CAtBkK;AAAA,CApQ7K;AA6RA,SAAS6O,WAAT,CAAqBC,SAArB,EAAqCC,QAArC,EAAuDnC,KAAvD,EAA0EoB,SAA1E,EAA8GC,SAA9G,EAAkJ1W,EAAlJ,EAAyKyX,EAAzK,EAAgM;AAAA,IACxL,IAAAzX,EAAA,KAAO,IAAP,IAAeyX,EAAA,KAAO,IAAtB;AAAA,QAA4B,OAD4J;AAAA,IAEtL,MAAAC,QAAA,GAAWtC,kBAAA,CAAmBH,OAAA,CAAQwB,SAAR,EAAmBzW,EAAnB,CAAnB,EAA2CiV,OAAA,CAAQyB,SAAR,EAAmBe,EAAnB,CAA3C,EAAmEpC,KAAnE,CAAX,CAFsL;AAAA,IAIxL,IAAAqC,QAAA,GAAWF,QAAX;AAAA,QAAqBD,SAAA,CAAU7hB,IAAV,CAAe;AAAA,YAAC+S,IAAA,EAAMiP,QAAP;AAAA,YAAiB3C,MAAA,EAAQ/U,EAAzB;AAAA,YAA6BgV,MAAA,EAAQyC,EAArC;AAAA,SAAf,CAJmK,CAAA;AAAA,CA7RhM;AAsSA,SAASE,yBAAT,CAAmCzC,SAAnC,EAAuEN,MAAvE,EAAwFhK,OAAxF,EAAiIyK,KAAjI,EAAoJ6B,eAAA,GAA0B7iB,QAA9K,EAAwL;AAAA,IAEpL,IAAImjB,QAAA,GAAWta,IAAA,CAAKgO,GAAL,CAASmK,KAAA,CAAMhE,QAAN,CAAe6D,SAAA,CAAU,CAAV,CAAf,EAA6BtK,OAAA,CAAQ,CAAR,CAAA,CAAW,CAAX,CAA7B,CAAT,EAAsDsM,eAAtD,CAAf,CAFoL;AAAA,IAGhL,IAAAM,QAAA,KAAa,CAAb;AAAA,QAAyB,OAAAA,QAAA,CAHuJ;AAAA,IAIpL,MAAMI,eAAA,GAA4B;AAAA,QAC9BnP,IAAA,EAAM,CADwB;AAAA,QAE9BsM,MAAA,EAAQ;AAAA,YAAC,CAAD;AAAA,YAAIG,SAAA,CAAUrgB,MAAV,GAAmB,CAAvB;AAAA,SAFsB;AAAA,QAG9BmgB,MAAA,EAAQ;AAAA,YAAC,CAAD;AAAA,YAAI,CAAJ;AAAA,SAHsB;AAAA,KAAlC,CAJoL;AAAA,IASpL,MAAMuC,SAAA,GAAY,IAAInE,SAAJ,CAAwB,CAACwE,eAAD,CAAxB,EAA2C7D,UAA3C,CAAlB,CAToL;AAAA,IAW9K,MAAA8D,YAAA,GAAejD,MAAA,GAASX,mBAAT,GAA+BD,cAA9C,CAX8K;AAAA,IAY9K,MAAA7F,QAAA,GAAWgH,cAAA,CAAevK,OAAf,CAAX,CAZ8K;AAAA,IAcpL,OAAO2M,SAAA,CAAU1iB,MAAjB,EAAyB;AAAA,QACf,MAAAijB,QAAA,GAAWP,SAAA,CAAU9Y,GAAV,EAAX,CADe;AAAA,QAEjB,IAAAqZ,QAAA,CAASrP,IAAT,IAAiB+O,QAAjB;AAAA,YAA2B,SAFV;AAAA,QAGrB,MAAMnD,KAAA,GAAQyD,QAAA,CAAS/C,MAAvB,CAHqB;AAAA,QAKjB,IAAAX,YAAA,CAAaC,KAAb,CAAA,IAAuBwD,YAAvB,EAAqC;AAAA,YACrC,IAAI,CAACvD,WAAA,CAAYD,KAAZ,EAAmBa,SAAA,CAAUrgB,MAA7B,CAAL;AAAA,gBAAkD,OAAAygB,GAAA,CADb;AAAA,YAErC,IAAIV,MAAJ,EAAY;AAAA,gBACR,MAAM8C,QAAA,GAAWb,qBAAA,CAAsB3B,SAAtB,EAAiCb,KAAjC,EAAwCzJ,OAAxC,EAAiDyK,KAAjD,CAAjB,CADQ;AAAA,gBAER,IAAK,CAAAmC,QAAA,GAAWta,IAAA,CAAKgO,GAAL,CAASsM,QAAT,EAAmBE,QAAnB,CAAX,MAA6C,CAAlD;AAAA,oBAA8D,OAAAF,QAAA,CAFtD;AAAA,aAAZ,MAGO;AAAA,gBACM,KAAA,IAAA1gB,CAAA,GAAIud,KAAA,CAAM,CAAN,CAAJ,EAAcvd,CAAA,IAAKud,KAAA,CAAM,CAAN,CAAnB,EAA6B,EAAEvd,CAA/B,EAAkC;AAAA,oBACvC,MAAM4gB,QAAA,GAAWf,sBAAA,CAAuBzB,SAAA,CAAUpe,CAAV,CAAvB,EAAqC8T,OAArC,EAA8CyK,KAA9C,CAAjB,CADuC;AAAA,oBAEvC,IAAK,CAAAmC,QAAA,GAAWta,IAAA,CAAKgO,GAAL,CAASsM,QAAT,EAAmBE,QAAnB,CAAX,MAA6C,CAAlD;AAAA,wBAA8D,OAAAF,QAAA,CAFvB;AAAA,iBADxC;AAAA,aAL8B;AAAA,SAArC,MAWG;AAAA,YACG,MAAAO,SAAA,GAAYpD,UAAA,CAAWN,KAAX,EAAkBO,MAAlB,CAAZ,CADH;AAAA,YAEC,IAAAmD,SAAA,CAAU,CAAV,CAAA,KAAiB,IAAjB,EAAuB;AAAA,gBACjB,MAAAL,QAAA,GAAWtC,kBAAA,CAAmBH,OAAA,CAAQC,SAAR,EAAmB6C,SAAA,CAAU,CAAV,CAAnB,CAAnB,EAAqD5J,QAArD,EAA+DkH,KAA/D,CAAX,CADiB;AAAA,gBAEvB,IAAIqC,QAAA,GAAWF,QAAf;AAAA,oBAAyBD,SAAA,CAAU7hB,IAAV,CAAe;AAAA,wBAAC+S,IAAA,EAAMiP,QAAP;AAAA,wBAAiB3C,MAAA,EAAQgD,SAAA,CAAU,CAAV,CAAzB;AAAA,wBAAuC/C,MAAA,EAAQ;AAAA,4BAAC,CAAD;AAAA,4BAAI,CAAJ;AAAA,yBAA/C;AAAA,qBAAf,CAFF,CAAA;AAAA,aAFxB;AAAA,YAMC,IAAA+C,SAAA,CAAU,CAAV,CAAA,KAAiB,IAAjB,EAAuB;AAAA,gBACjB,MAAAL,QAAA,GAAWtC,kBAAA,CAAmBH,OAAA,CAAQC,SAAR,EAAmB6C,SAAA,CAAU,CAAV,CAAnB,CAAnB,EAAqD5J,QAArD,EAA+DkH,KAA/D,CAAX,CADiB;AAAA,gBAEvB,IAAIqC,QAAA,GAAWF,QAAf;AAAA,oBAAyBD,SAAA,CAAU7hB,IAAV,CAAe;AAAA,wBAAC+S,IAAA,EAAMiP,QAAP;AAAA,wBAAiB3C,MAAA,EAAQgD,SAAA,CAAU,CAAV,CAAzB;AAAA,wBAAuC/C,MAAA,EAAQ;AAAA,4BAAC,CAAD;AAAA,4BAAI,CAAJ;AAAA,yBAA/C;AAAA,qBAAf,CAFF,CAAA;AAAA,aANxB;AAAA,SAhBc;AAAA,KAd2J;AAAA,IA0C7K,OAAAwC,QAAA,CA1C6K;AAAA,CAtSxL;AAmVA,SAASQ,iBAAT,CAA2BvB,SAA3B,EAA+DwB,OAA/D,EAAiFvB,SAAjF,EAAqHwB,OAArH,EAAuI7C,KAAvI,EAA0J6B,eAAA,GAA0B7iB,QAApL,EAA8L;AAAA,IAE1L,IAAImjB,QAAA,GAAWta,IAAA,CAAKgO,GAAL,CAASgM,eAAT,EAA0B7B,KAAA,CAAMhE,QAAN,CAAeoF,SAAA,CAAU,CAAV,CAAf,EAA6BC,SAAA,CAAU,CAAV,CAA7B,CAA1B,CAAf,CAF0L;AAAA,IAGtL,IAAAc,QAAA,KAAa,CAAb;AAAA,QAAyB,OAAAA,QAAA,CAH6J;AAAA,IAI1L,MAAMI,eAAA,GAA4B;AAAA,QAC9BnP,IAAA,EAAM,CADwB;AAAA,QAE9BsM,MAAA,EAAQ;AAAA,YAAC,CAAD;AAAA,YAAI0B,SAAA,CAAU5hB,MAAV,GAAmB,CAAvB;AAAA,SAFsB;AAAA,QAG9BmgB,MAAA,EAAQ;AAAA,YAAC,CAAD;AAAA,YAAI0B,SAAA,CAAU7hB,MAAV,GAAmB,CAAvB;AAAA,SAHsB;AAAA,KAAlC,CAJ0L;AAAA,IAS1L,MAAM0iB,SAAA,GAAY,IAAInE,SAAJ,CAAwB,CAACwE,eAAD,CAAxB,EAA2C7D,UAA3C,CAAlB,CAT0L;AAAA,IAWpL,MAAAoE,aAAA,GAAgBF,OAAA,GAAUhE,mBAAV,GAAgCD,cAAhD,CAXoL;AAAA,IAYpL,MAAAoE,aAAA,GAAgBF,OAAA,GAAUjE,mBAAV,GAAgCD,cAAhD,CAZoL;AAAA,IAc1L,OAAOuD,SAAA,CAAU1iB,MAAjB,EAAyB;AAAA,QACf,MAAAijB,QAAA,GAAWP,SAAA,CAAU9Y,GAAV,EAAX,CADe;AAAA,QAEjB,IAAAqZ,QAAA,CAASrP,IAAT,IAAiB+O,QAAjB;AAAA,YAA2B,SAFV;AAAA,QAGrB,MAAMzB,MAAA,GAAS+B,QAAA,CAAS/C,MAAxB,CAHqB;AAAA,QAIrB,MAAMiB,MAAA,GAAS8B,QAAA,CAAS9C,MAAxB,CAJqB;AAAA,QAMrB,IAAIZ,YAAA,CAAa2B,MAAb,CAAwBoC,IAAAA,aAAxB,IAAyC/D,YAAA,CAAa4B,MAAb,CAAwBoC,IAAAA,aAArE,EAAoF;AAAA,YAC5E,IAAA,CAAC9D,WAAA,CAAYyB,MAAZ,EAAoBU,SAAA,CAAU5hB,MAA9B,CAAD,IAA0C,CAACyf,WAAA,CAAY0B,MAAZ,EAAoBU,SAAA,CAAU7hB,MAA9B,CAA3C,EAAkF;AAAA,gBAC3E,OAAAygB,GAAA,CAD2E;AAAA,aADN;AAAA,YAIhF,IAAI2C,OAAA,IAAWC,OAAf,EAAwB;AAAA,gBACTV,QAAA,GAAAta,IAAA,CAAKgO,GAAL,CAASsM,QAAT,EAAmBnB,kBAAA,CAAmBI,SAAnB,EAA8BV,MAA9B,EAAsCW,SAAtC,EAAiDV,MAAjD,EAAyDX,KAAzD,CAAnB,CAAA,CADS;AAAA,aAAxB,MAEW,IAAA,CAAC4C,OAAD,IAAY,CAACC,OAAb,EAAsB;AAAA,gBAClBV,QAAA,GAAAta,IAAA,CAAKgO,GAAL,CAASsM,QAAT,EAAmBhB,sBAAA,CAAuBC,SAAvB,EAAkCV,MAAlC,EAA0CW,SAA1C,EAAqDV,MAArD,EAA6DX,KAA7D,CAAnB,CAAA,CADkB;AAAA,aAAtB,MAEX,IAAW4C,OAAA,IAAW,CAACC,OAAvB,EAAgC;AAAA,gBACjBV,QAAA,GAAAta,IAAA,CAAKgO,GAAL,CAASsM,QAAT,EAAmB1B,oBAAA,CAAqBY,SAArB,EAAgCV,MAAhC,EAAwCS,SAAxC,EAAmDV,MAAnD,EAA2DV,KAA3D,CAAnB,CAAA,CADiB;AAAA,aAAhC,MAEA,IAAW,CAAC4C,OAAD,IAAYC,OAAvB,EAAgC;AAAA,gBACjBV,QAAA,GAAAta,IAAA,CAAKgO,GAAL,CAASsM,QAAT,EAAmB1B,oBAAA,CAAqBW,SAArB,EAAgCV,MAAhC,EAAwCW,SAAxC,EAAmDV,MAAnD,EAA2DX,KAA3D,CAAnB,CAAA,CADiB;AAAA,aAVgD;AAAA,YAa5E,IAAAmC,QAAA,KAAa,CAAb;AAAA,gBAAyB,OAAAA,QAAA,CAbmD;AAAA,SAApF,MAcO;AAAA,YACG,MAAAa,UAAA,GAAa1D,UAAA,CAAWoB,MAAX,EAAmBkC,OAAnB,CAAb,CADH;AAAA,YAEG,MAAAK,UAAA,GAAa3D,UAAA,CAAWqB,MAAX,EAAmBkC,OAAnB,CAAb,CAFH;AAAA,YAGSZ,WAAA,CAAAC,SAAA,EAAWC,QAAX,EAAqBnC,KAArB,EAA4BoB,SAA5B,EAAuCC,SAAvC,EAAkD2B,UAAA,CAAW,CAAX,CAAlD,EAAiEC,UAAA,CAAW,CAAX,CAAjE,CAHT,CAAA;AAAA,YAIShB,WAAA,CAAAC,SAAA,EAAWC,QAAX,EAAqBnC,KAArB,EAA4BoB,SAA5B,EAAuCC,SAAvC,EAAkD2B,UAAA,CAAW,CAAX,CAAlD,EAAiEC,UAAA,CAAW,CAAX,CAAjE,CAJT,CAAA;AAAA,YAKShB,WAAA,CAAAC,SAAA,EAAWC,QAAX,EAAqBnC,KAArB,EAA4BoB,SAA5B,EAAuCC,SAAvC,EAAkD2B,UAAA,CAAW,CAAX,CAAlD,EAAiEC,UAAA,CAAW,CAAX,CAAjE,CALT,CAAA;AAAA,YAMShB,WAAA,CAAAC,SAAA,EAAWC,QAAX,EAAqBnC,KAArB,EAA4BoB,SAA5B,EAAuCC,SAAvC,EAAkD2B,UAAA,CAAW,CAAX,CAAlD,EAAiEC,UAAA,CAAW,CAAX,CAAjE,CANT,CAAA;AAAA,SApBc;AAAA,KAdiK;AAAA,IA2CnL,OAAAd,QAAA,CA3CmL;AAAA,CAnV9L;AAiYA,SAASe,uBAAT,CAAiCC,QAAjC,EAAoE5D,MAApE,EAAqF6D,KAArF,EAA4HpD,KAA5H,EAA+I6B,eAAA,GAA0B7iB,QAAzK,EAAmL;AAAA,IAC/K,IAAIoU,IAAA,GAAOyO,eAAX,CAD+K;AAAA,IAEzK,MAAA7L,KAAA,GAAQ4J,OAAA,CAAQuD,QAAR,EAAkB;AAAA,QAAC,CAAD;AAAA,QAAIA,QAAA,CAAS3jB,MAAT,GAAkB,CAAtB;AAAA,KAAlB,CAAR,CAFyK;AAAA,IAG/K,KAAWiZ,MAAAA,IAAX,IAAmB2K,KAAnB,EAA0B;AAAA,QACtB,IAAIhQ,IAAA,KAASpU,QAAT,IAAqB+gB,kBAAA,CAAmB/J,KAAnB,EAA0B4J,OAAA,CAAQnH,IAAR,EAAc;AAAA,gBAAC,CAAD;AAAA,gBAAIA,IAAA,CAAKjZ,MAAL,GAAc,CAAlB;AAAA,aAAd,CAA1B,EAA+DwgB,KAA/D,CAAA,IAAyE5M,IAAlG;AAAA,YAAwG,SADlF;AAAA,QAEfA,IAAA,GAAAvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeuP,iBAAA,CAAkBQ,QAAlB,EAA4B5D,MAA5B,EAAoC9G,IAApC,EAA0C,IAA1C,EAA2DuH,KAA3D,EAAkE5M,IAAlE,CAAf,CAAA,CAFe;AAAA,QAGlB,IAAAA,IAAA,KAAS,CAAT;AAAA,YAAqB,OAAAA,IAAA,CAHH;AAAA,KAHqJ;AAAA,IAQxK,OAAAA,IAAA,CARwK;AAAA,CAjYnL;AA4YA,SAASiQ,0BAAT,CAAoC9J,MAApC,EAAqEgG,MAArE,EAAsFjK,QAAtF,EAAuI0K,KAAvI,EAA0J6B,eAAA,GAA0B7iB,QAApL,EAA8L;AAAA,IAC1L,IAAIoU,IAAA,GAAOyO,eAAX,CAD0L;AAAA,IAEpL,MAAA7L,KAAA,GAAQ4J,OAAA,CAAQrG,MAAR,EAAgB;AAAA,QAAC,CAAD;AAAA,QAAIA,MAAA,CAAO/Z,MAAP,GAAgB,CAApB;AAAA,KAAhB,CAAR,CAFoL;AAAA,IAG1L,KAAW+V,MAAAA,OAAX,IAAsBD,QAAtB,EAAgC;AAAA,QACxB,IAAAlC,IAAA,KAASpU,QAAT,IAAqB+gB,kBAAA,CAAmB/J,KAAnB,EAA0B8J,cAAA,CAAevK,OAAf,CAA1B,EAAmDyK,KAAnD,KAA6D5M,IAAlF;AAAA,YAAwF,SADhE;AAAA,QAE5B,MAAMiP,QAAA,GAAWC,yBAAA,CAA0B/I,MAA1B,EAAkCgG,MAAlC,EAA0ChK,OAA1C,EAAmDyK,KAAnD,EAA0D5M,IAA1D,CAAjB,CAF4B;AAAA,QAGxB,IAAA5B,KAAA,CAAM6Q,QAAN,CAAA;AAAA,YAAwB,OAAAA,QAAA,CAHA;AAAA,QAI5B,IAAK,CAAAjP,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeiP,QAAf,CAAP,MAAqC,CAA1C;AAAA,YAAsD,OAAAjP,IAAA,CAJ1B;AAAA,KAH0J;AAAA,IASnL,OAAAA,IAAA,CATmL;AAAA,CA5Y9L;AAwZA,SAASkQ,0BAAT,CAAoCC,SAApC,EAAsFC,SAAtF,EAAwIxD,KAAxI,EAA2J;AAAA,IACvJ,IAAI5M,IAAA,GAAOpU,QAAX,CADuJ;AAAA,IAEvJ,KAAW0iB,MAAAA,QAAX,IAAuB6B,SAAvB,EAAkC;AAAA,QAC9B,KAAW5B,MAAAA,QAAX,IAAuB6B,SAAvB,EAAkC;AAAA,YAC9B,MAAMnB,QAAA,GAAWT,wBAAA,CAAyBF,QAAzB,EAAmCC,QAAnC,EAA6C3B,KAA7C,EAAoD5M,IAApD,CAAjB,CAD8B;AAAA,YAE1B,IAAA5B,KAAA,CAAM6Q,QAAN,CAAA;AAAA,gBAAwB,OAAAA,QAAA,CAFE;AAAA,YAG9B,IAAK,CAAAjP,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeiP,QAAf,CAAP,MAAqC,CAA1C;AAAA,gBAAsD,OAAAjP,IAAA,CAHxB;AAAA,SADJ;AAAA,KAFqH;AAAA,IAShJ,OAAAA,IAAA,CATgJ;AAAA,CAxZ3J;AAoaA,SAASqQ,wBAAT,CAAkCC,cAAlC,EAAuEvR,SAAvE,EAAmGI,QAAnG,EAA+H;AAAA,IAC3H,MAAMoR,YAAA,GAAe,EAArB,CAD2H;AAAA,IAE3H,KAAWpK,MAAAA,MAAX,IAAqBmK,cAArB,EAAqC;AAAA,QACjC,KAAWhN,MAAAA,KAAX,IAAoB6C,MAApB,EAA4B;AAAA,YACxBoK,YAAA,CAAatjB,IAAb,CAAkB+f,cAAA,CAAe1J,KAAf,EAAsBvE,SAAtB,CAAlB,CADwB,CAAA;AAAA,SADK;AAAA,KAFsF;AAAA,IAOrH,MAAA6N,KAAA,GAAQ,IAAI9E,UAAJ,CAAeyI,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAAf,EAAmC,QAAnC,CAAR,CAPqH;AAAA,IAQvH,IAAApR,QAAA,CAASlQ,IAAT,KAAkB,OAAlB,IAA6BkQ,QAAA,CAASlQ,IAAT,KAAkB,YAA/C,IAA+DkQ,QAAA,CAASlQ,IAAT,KAAkB,YAAjF,EAA+F;AAAA,QACxF,OAAAsgB,iBAAA,CAAkBgB,YAAlB,EAAgC,KAAhC,EACHpR,QAAA,CAASlQ,IAAT,KAAkB,OAAlB,GAA4B,CAACkQ,QAAA,CAAS9O,WAAV,CAA5B,GAAqD8O,QAAA,CAAS9O,WAD3D,EAEH8O,QAAA,CAASlQ,IAAT,KAAkB,YAFf,EAEwC2d,KAFxC,CAAA,CADwF;AAAA,KARwB;AAAA,IAavH,IAAAzN,QAAA,CAASlQ,IAAT,KAAkB,iBAAlB,EAAqC;AAAA,QACrC,OAAO6gB,uBAAA,CAAwBS,YAAxB,EAAsC,KAAtC,EAAyDpR,QAAA,CAAS9O,WAAlE,EAA+Euc,KAA/E,CAAP,CADqC;AAAA,KAbkF;AAAA,IAgB3H,IAAIzN,QAAA,CAASlQ,IAAT,KAAkB,SAAlB,IAA+BkQ,QAAA,CAASlQ,IAAT,KAAkB,cAArD,EAAqE;AAAA,QAC1D,OAAAghB,0BAAA,CAA2BM,YAA3B,EAAyC,KAAzC,EACHpR,QAAA,CAASlQ,IAAT,KAAkB,SAAlB,GAA8B,CAACkQ,QAAA,CAAS9O,WAAV,CAA9B,GAAuD8O,QAAA,CAAS9O,WAD7D,EAC0Euc,KAD1E,CAAA,CAD0D;AAAA,KAhBsD;AAAA,IAoBpH,OAAA,IAAA,CApBoH;AAAA,CApa/H;AA2bA,SAAS4D,uBAAT,CAAiCF,cAAjC,EAAsEvR,SAAtE,EAAkGI,QAAlG,EAA8H;AAAA,IAC1H,MAAMsR,WAAA,GAAc,EAApB,CAD0H;AAAA,IAE1H,KAAWpL,MAAAA,IAAX,IAAmBiL,cAAnB,EAAmC;AAAA,QAC/B,MAAMI,UAAA,GAAa,EAAnB,CAD+B;AAAA,QAE/B,KAAWpN,MAAAA,KAAX,IAAoB+B,IAApB,EAA0B;AAAA,YACtBqL,UAAA,CAAWzjB,IAAX,CAAgB+f,cAAA,CAAe1J,KAAf,EAAsBvE,SAAtB,CAAhB,CADsB,CAAA;AAAA,SAFK;AAAA,QAK/B0R,WAAA,CAAYxjB,IAAZ,CAAiByjB,UAAjB,CAL+B,CAAA;AAAA,KAFuF;AAAA,IASpH,MAAA9D,KAAA,GAAQ,IAAI9E,UAAJ,CAAe2I,WAAA,CAAY,CAAZ,CAAA,CAAe,CAAf,CAAkB,CAAA,CAAlB,CAAf,EAAqC,QAArC,CAAR,CAToH;AAAA,IAUtH,IAAAtR,QAAA,CAASlQ,IAAT,KAAkB,OAAlB,IAA6BkQ,QAAA,CAASlQ,IAAT,KAAkB,YAA/C,IAA+DkQ,QAAA,CAASlQ,IAAT,KAAkB,YAAjF,EAA+F;AAAA,QACxF,OAAA6gB,uBAAA,CACH3Q,QAAA,CAASlQ,IAAT,KAAkB,OAAlB,GAA4B,CAACkQ,QAAA,CAAS9O,WAAV,CAA5B,GAAqD8O,QAAA,CAAS9O,WAD3D,EAEH8O,QAAA,CAASlQ,IAAT,KAAkB,YAFf,EAEwCwhB,WAFxC,EAEqD7D,KAFrD,CAAA,CADwF;AAAA,KAVuB;AAAA,IAetH,IAAAzN,QAAA,CAASlQ,IAAT,KAAkB,iBAAlB,EAAqC;AAAA,QACrC,IAAI+Q,IAAA,GAAOpU,QAAX,CADqC;AAAA,QAErC,KAAA,IAASyC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI8Q,QAAA,CAAS9O,WAAT,CAAqBjE,MAAzC,EAAiDiC,CAAA,EAAjD,EAAsD;AAAA,YAC5C,MAAA4gB,QAAA,GAAWa,uBAAA,CAAwB3Q,QAAA,CAAS9O,WAAT,CAAqBhC,CAArB,CAAxB,EAAiD,IAAjD,EAAkEoiB,WAAlE,EAA+E7D,KAA/E,EAAsF5M,IAAtF,CAAX,CAD4C;AAAA,YAE9C,IAAA5B,KAAA,CAAM6Q,QAAN,CAAA;AAAA,gBAAwB,OAAAA,QAAA,CAFsB;AAAA,YAGlD,IAAK,CAAAjP,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeiP,QAAf,CAAP,MAAqC,CAA1C;AAAA,gBAAsD,OAAAjP,IAAA,CAHJ;AAAA,SAFjB;AAAA,QAO9B,OAAAA,IAAA,CAP8B;AAAA,KAfiF;AAAA,IAwB1H,IAAIb,QAAA,CAASlQ,IAAT,KAAkB,SAAlB,IAA+BkQ,QAAA,CAASlQ,IAAT,KAAkB,cAArD,EAAqE;AAAA,QACjE,IAAI+Q,IAAA,GAAOpU,QAAX,CADiE;AAAA,QAEjE,KAAA,IAASyC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIoiB,WAAA,CAAYrkB,MAAhC,EAAwCiC,CAAA,EAAxC,EAA6C;AAAA,YACzC,MAAM4gB,QAAA,GAAWgB,0BAAA,CAA2BQ,WAAA,CAAYpiB,CAAZ,CAA3B,EAA2C,IAA3C,EACb8Q,QAAA,CAASlQ,IAAT,KAAkB,SAAlB,GAA8B,CAACkQ,QAAA,CAAS9O,WAAV,CAA9B,GAAuD8O,QAAA,CAAS9O,WADnD,EAEbuc,KAFa,EAEN5M,IAFM,CAAjB,CADyC;AAAA,YAIrC,IAAA5B,KAAA,CAAM6Q,QAAN,CAAA;AAAA,gBAAwB,OAAAA,QAAA,CAJa;AAAA,YAKzC,IAAK,CAAAjP,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeiP,QAAf,CAAP,MAAqC,CAA1C;AAAA,gBAAsD,OAAAjP,IAAA,CALb;AAAA,SAFoB;AAAA,QAS1D,OAAAA,IAAA,CAT0D;AAAA,KAxBqD;AAAA,IAmCnH,OAAA,IAAA,CAnCmH;AAAA,CA3b9H;AAieA,SAAS2Q,0BAAT,CAAoCL,cAApC,EAAyEvR,SAAzE,EAAqGI,QAArG,EAAiI;AAAA,IAC7H,MAAMyR,cAAA,GAAiB,EAAvB,CAD6H;AAAA,IAE7H,KAAA,MAAWzO,OAAX,IAAsBJ,aAAA,CAAcuO,cAAd,CAAtB,EAAwD;AAAA,QACpD,MAAMO,aAAA,GAAgB,EAAtB,CADoD;AAAA,QAEpD,KAAA,IAASxiB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI8T,OAAA,CAAQ/V,MAA5B,EAAoC,EAAEiC,CAAtC,EAAyC;AAAA,YACrCwiB,aAAA,CAAc5jB,IAAd,CAAmBggB,eAAA,CAAgB9K,OAAA,CAAQ9T,CAAR,CAAhB,EAA4B0Q,SAA5B,CAAnB,CADqC,CAAA;AAAA,SAFW;AAAA,QAKpD6R,cAAA,CAAe3jB,IAAf,CAAoB4jB,aAApB,CALoD,CAAA;AAAA,KAFqE;AAAA,IAS7H,MAAMjE,KAAA,GAAQ,IAAI9E,UAAJ,CAAe8I,cAAA,CAAe,CAAf,EAAkB,CAAlB,CAAA,CAAqB,CAArB,CAAwB,CAAA,CAAxB,CAAf,EAA2C,QAA3C,CAAd,CAT6H;AAAA,IAUzH,IAAAzR,QAAA,CAASlQ,IAAT,KAAkB,OAAlB,IAA6BkQ,QAAA,CAASlQ,IAAT,KAAkB,YAA/C,IAA+DkQ,QAAA,CAASlQ,IAAT,KAAkB,YAAjF,EAA+F;AAAA,QACxF,OAAAghB,0BAAA,CACH9Q,QAAA,CAASlQ,IAAT,KAAkB,OAAlB,GAA4B,CAACkQ,QAAA,CAAS9O,WAAV,CAA5B,GAAqD8O,QAAA,CAAS9O,WAD3D,EAEH8O,QAAA,CAASlQ,IAAT,KAAkB,YAFf,EAEwC2hB,cAFxC,EAEwDhE,KAFxD,CAAA,CADwF;AAAA,KAV0B;AAAA,IAezH,IAAAzN,QAAA,CAASlQ,IAAT,KAAkB,iBAAlB,EAAqC;AAAA,QACrC,IAAI+Q,IAAA,GAAOpU,QAAX,CADqC;AAAA,QAErC,KAAA,IAASyC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI8Q,QAAA,CAAS9O,WAAT,CAAqBjE,MAAzC,EAAiDiC,CAAA,EAAjD,EAAsD;AAAA,YAC5C,MAAA4gB,QAAA,GAAWgB,0BAAA,CAA2B9Q,QAAA,CAAS9O,WAAT,CAAqBhC,CAArB,CAA3B,EAAoD,IAApD,EAAqEuiB,cAArE,EAAqFhE,KAArF,EAA4F5M,IAA5F,CAAX,CAD4C;AAAA,YAE9C,IAAA5B,KAAA,CAAM6Q,QAAN,CAAA;AAAA,gBAAwB,OAAAA,QAAA,CAFsB;AAAA,YAGlD,IAAK,CAAAjP,IAAA,GAAOvL,IAAA,CAAKgO,GAAL,CAASzC,IAAT,EAAeiP,QAAf,CAAP,MAAqC,CAA1C;AAAA,gBAAsD,OAAAjP,IAAA,CAHJ;AAAA,SAFjB;AAAA,QAO9B,OAAAA,IAAA,CAP8B;AAAA,KAfoF;AAAA,IAwB7H,IAAIb,QAAA,CAASlQ,IAAT,KAAkB,SAAlB,IAA+BkQ,QAAA,CAASlQ,IAAT,KAAkB,cAArD,EAAqE;AAAA,QAC1D,OAAAihB,0BAAA,CACH/Q,QAAA,CAASlQ,IAAT,KAAkB,SAAlB,GAA8B,CAACkQ,QAAA,CAAS9O,WAAV,CAA9B,GAAuD8O,QAAA,CAAS9O,WAD7D,EAEHugB,cAFG,EAEahE,KAFb,CAAA,CAD0D;AAAA,KAxBwD;AAAA,IA6BtH,OAAA,IAAA,CA7BsH;AAAA,CAjejI;AAigBA,SAASkE,WAAT,CAAqB7hB,IAArB,EAAmC;AAAA,IAE3B,OAAAA,IAAA,KAAS,OAAT,IACAA,IAAA,KAAS,YADT,IAEAA,IAAA,KAAS,YAFT,IAGAA,IAAA,KAAS,iBAHT,IAIAA,IAAA,KAAS,SAJT,IAKAA,IAAA,KAAS,cALT,CAF2B;AAAA,CAjgBnC;AA2gBA,MAAM8hB,QAAN,CAAqC;AAAA,IAKjC3e,WAAA,CAAY0U,OAAZ,EAAsCC,UAAtC,EAAoE;AAAA,QAChE,IAAK9X,CAAAA,IAAL,GAAY8D,UAAZ,CADgE;AAAA,QAEhE,IAAK+T,CAAAA,OAAL,GAAeA,OAAf,CAFgE;AAAA,QAGhE,IAAKC,CAAAA,UAAL,GAAkBA,UAAlB,CAHgE;AAAA,KALnC;AAAA,IAWjC,OAAOta,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAiG;AAAA,QACzF,IAAAD,IAAA,CAAKvP,MAAL,KAAgB,CAAhB,EAAmB;AAAA,YAEnB,OAAOwP,OAAA,CAAQC,KAAR,CACH,CAAA,gEAAA,GAAmEF,IAAA,CAAKvP,MAAL,GAC/D,CADJ,EACK,SADL,CADG,CAAP,CAFmB;AAAA,SADsE;AAAA,QAQ7F,IAAIiP,OAAA,CAAQM,IAAA,CAAK,CAAL,CAAR,CAAJ,EAAsB;AAAA,YACZ,MAAAmL,OAAA,GAAWnL,IAAA,CAAK,CAAL,CAAX,CADY;AAAA,YAEd,IAAAmL,OAAA,CAAQ7X,IAAR,KAAiB,mBAAjB,EAAsC;AAAA,gBACtC,KAAA,IAASZ,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIyY,OAAA,CAAQE,QAAR,CAAiB5a,MAArC,EAA6C,EAAEiC,CAA/C,EAAkD;AAAA,oBAC9C,IAAIyiB,WAAA,CAAYhK,OAAA,CAAQE,QAAR,CAAiB3Y,CAAjB,CAAoB8Q,CAAAA,QAApB,CAA6BlQ,IAAzC,CAAJ,EAAoD;AAAA,wBAChD,OAAO,IAAI8hB,QAAJ,CAAajK,OAAb,EAAsBA,OAAA,CAAQE,QAAR,CAAiB3Y,CAAjB,CAAoB8Q,CAAAA,QAA1C,CAAP,CADgD;AAAA,qBADN;AAAA,iBADZ;AAAA,aAAtC,MAMJ,IAAW2H,OAAA,CAAQ7X,IAAR,KAAiB,SAA5B,EAAuC;AAAA,gBACnC,IAAI6hB,WAAA,CAAYhK,OAAA,CAAQ3H,QAAR,CAAiBlQ,IAA7B,CAAJ,EAAwC;AAAA,oBACpC,OAAO,IAAI8hB,QAAJ,CAAajK,OAAb,EAAsBA,OAAA,CAAQ3H,QAA9B,CAAP,CADoC;AAAA,iBADL;AAAA,aAAvC,MAIW,IAAA2R,WAAA,CAAYhK,OAAA,CAAQ7X,IAApB,CAAA,EAA2B;AAAA,gBAC3B,OAAA,IAAI8hB,QAAJ,CAAajK,OAAb,EAAsBA,OAAtB,CAAA,CAD2B;AAAA,aAZpB;AAAA,SARuE;AAAA,QAyB7F,OAAOlL,OAAA,CAAQC,KAAR,CACH,sFADG,CAAP,CAzB6F;AAAA,KAXhE;AAAA,IAyCjCE,QAAA,CAASS,GAAT,EAAgD;AAAA,QACtC,MAAA2C,QAAA,GAAW3C,GAAA,CAAI2C,QAAJ,EAAX,CADsC;AAAA,QAEtC,MAAAJ,SAAA,GAAYvC,GAAA,CAAI4C,WAAJ,EAAZ,CAFsC;AAAA,QAGxC,IAAAD,QAAA,IAAY,IAAZ,IAAoBJ,SAAA,IAAa,IAAjC,EAAuC;AAAA,YACnC,IAAAvC,GAAA,CAAI0C,YAAJ,EAAA,KAAuB,OAAvB,EAAgC;AAAA,gBAChC,OAAOmR,wBAAA,CAAyBlR,QAAzB,EAAmCJ,SAAnC,EAA8C,IAAA,CAAKgI,UAAnD,CAAP,CADgC;AAAA,aADG;AAAA,YAInC,IAAAvK,GAAA,CAAI0C,YAAJ,EAAA,KAAuB,YAAvB,EAAqC;AAAA,gBACrC,OAAOsR,uBAAA,CAAwBrR,QAAxB,EAAkCJ,SAAlC,EAA6C,IAAA,CAAKgI,UAAlD,CAAP,CADqC;AAAA,aAJF;AAAA,YAOnC,IAAAvK,GAAA,CAAI0C,YAAJ,EAAA,KAAuB,SAAvB,EAAkC;AAAA,gBAClC,OAAOyR,0BAAA,CAA2BxR,QAA3B,EAAqCJ,SAArC,EAAgD,IAAA,CAAKgI,UAArD,CAAP,CADkC;AAAA,aAPC;AAAA,YAUvCiF,OAAA,CAAQC,IAAR,CAAa,0FAAb,CAVuC,CAAA;AAAA,SAAvC,MAWG;AAAA,YACHD,OAAA,CAAQC,IAAR,CAAa,uEAAb,CADG,CAAA;AAAA,SAdqC;AAAA,QAiBrC,OAAA,IAAA,CAjBqC;AAAA,KAzCf;AAAA,IA6DjCjQ,SAAA,GAAY;AAAA,KA7DqB;AAAA,IA+DjCC,aAAA,GAAyB;AAAA,QACd,OAAA,IAAA,CADc;AAAA,KA/DQ;AAAA,IAmEjCnB,SAAA,GAA4B;AAAA,QACjB,OAAA;AAAA,YAAC,UAAD;AAAA,YAAa,KAAKgM,OAAlB;AAAA,SAAA,CADiB;AAAA,KAnEK;AAAA;;AChgBrC,SAASkK,WAAT,CAAqB/hB,IAArB,EAAmC3B,KAAnC,EAAoD;AAAA,IAChD,QAAQ2B,IAAR;AAAA,IACA,KAAK,QAAL;AAAA,QAAe,OAAOoP,QAAA,CAAc/Q,KAAd,CAAP,CADf;AAAA,IAEA,KAAK,QAAL;AAAA,QAAe,OAAO,CAACA,KAAR,CAFf;AAAA,IAGA,KAAK,SAAL;AAAA,QAAgB,OAAO,CAAC,CAACA,KAAT,CAHhB;AAAA,IAIA,KAAK,OAAL;AAAA,QAAqB,OAAAkJ,KAAA,CAAM/J,KAAN,CAAYa,KAAZ,CAAA,CAJrB;AAAA,IAKA,KAAK,WAAL,EAAkB;AAAA,YACd,OAAOgN,SAAA,CAAUE,UAAV,CAAqB6D,QAAA,CAAc/Q,KAAd,CAArB,CAAP,CADc;AAAA,SALlB;AAAA,IAQA,KAAK,eAAL,EAAsB;AAAA,YAClB,OAAO0N,aAAA,CAAcR,UAAd,CAAyB6D,QAAA,CAAc/Q,KAAd,CAAzB,CAAP,CADkB;AAAA,SARtB;AAAA,KADgD;AAAA,IAazC,OAAAA,KAAA,CAbyC;AAAA,CAXpD;AA2BA,SAAS2jB,oBAAT,CAA8B3jB,KAA9B,EAA6CmV,GAA7C,EAA2DC,GAA3D,EAAyEwO,IAAzE,EAAgG;AAAA,IAC5F,IAAIA,IAAA,KAAS,KAAW,CAAxB,EAAwB;AAAA,QACpB5jB,KAAA,GAAQ4jB,IAAA,GAAOzc,IAAA,CAAKC,KAAL,CAAWpH,KAAA,GAAQ4jB,IAAnB,CAAf,CADoB;AAAA,KADoE;AAAA,IAIxF,IAAAzO,GAAA,KAAQ,KAAa,CAArB,IAAqBnV,KAAA,GAAQmV,GAA7B,EAAkC;AAAA,QAC1BnV,KAAA,GAAAmV,GAAA,CAD0B;AAAA,KAJsD;AAAA,IAOxF,IAAAC,GAAA,KAAQ,KAAa,CAArB,IAAqBpV,KAAA,GAAQoV,GAA7B,EAAkC;AAAA,QAC1BpV,KAAA,GAAAoV,GAAA,CAD0B;AAAA,KAPsD;AAAA,IAUrF,OAAApV,KAAA,CAVqF;AAAA,CA3BhG;AAwCA,MAAM6jB,MAAN,CAAmC;AAAA,IAK/B/e,WAAA,CAAYnD,IAAZ,EAAwB7B,GAAxB,EAAqCqR,KAArC,EAAqD;AAAA,QACjD,IAAKxP,CAAAA,IAAL,GAAYA,IAAZ,CADiD;AAAA,QAEjD,IAAK7B,CAAAA,GAAL,GAAWA,GAAX,CAFiD;AAAA,QAGjD,IAAKqR,CAAAA,KAAL,GAAaA,KAAb,CAHiD;AAAA,KALtB;AAAA,IAW/B,OAAOhS,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA+F;AAAA,QAC3F,IAAI3M,IAAA,GAAO2M,OAAA,CAAQE,YAAnB,CAD2F;AAAA,QAEvF,IAAA7M,IAAA,KAAS,IAAT,IAAiBA,IAAA,KAAS,KAAW,CAArC,EAAqC;AAAA,YAC9BA,IAAA,GAAAmE,SAAA,CAD8B;AAAA,SAFkD;AAAA,QAK3F,IAAIuI,IAAA,CAAKvP,MAAL,GAAc,CAAd,IAAmBuP,IAAA,CAAKvP,MAAL,GAAc,CAArC,EAAwC;AAAA,YAE7B,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAsD,oDAAtD,CAAd,CAAA,CAF6B;AAAA,SALmD;AAAA,QAU3F,MAAMuV,SAAA,GAAYxV,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,CAAlB,CAV2F;AAAA,QAWvF,IAAA,EAAEyV,SAAA,YAAqB1V,OAArB,CAAF,EAAiC;AAAA,YAE1B,OAAAE,OAAA,CAAQC,KAAR,CAAc,CAA2D,yDAA3D,CAAd,CAAA,CAF0B;AAAA,SAXsD;AAAA,QAgBvF,IAAAF,IAAA,CAAKvP,MAAL,IAAe,CAAf,EAAkB;AAAA,YAClB,MAAMilB,WAAA,GAAczV,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,CAApB,CADkB;AAAA,YAEd,IAAA,EAAE0V,WAAA,YAAuB3V,OAAvB,CAAF,EAAmC;AAAA,gBAE5B,OAAAE,OAAA,CAAQC,KAAR,CAAc,CAAwD,sDAAxD,CAAd,CAAA,CAF4B;AAAA,aAFrB;AAAA,YAMX,OAAA,IAAIsV,MAAJ,CAAWliB,IAAX,EAAiBoP,QAAA,CAAc+S,SAAA,CAAU9jB,KAAxB,CAAjB,EAAiD+Q,QAAA,CAAcgT,WAAA,CAAY/jB,KAA1B,CAAjD,CAAA,CANW;AAAA,SAhBqE;AAAA,QAyB3F,OAAO,IAAI6jB,MAAJ,CAAWliB,IAAX,EAAiBoP,QAAA,CAAc+S,SAAA,CAAU9jB,KAAxB,CAAjB,CAAP,CAzB2F;AAAA,KAXhE;AAAA,IAuC/ByO,QAAA,CAASS,GAAT,EAAsC;AAAA,QAClC,MAAM8U,aAAA,GAAgB,MAAtB,CADkC;AAAA,QAElC,MAAMF,SAAA,GAAY;AAAA,YAAC,KAAKhkB,GAAN;AAAA,YAAW,KAAKqR,KAAhB;AAAA,YAAuBjC,GAAA,CAAIiC,KAA3B;AAAA,SAAkC8S,CAAAA,MAAlC,CAAyC5T,OAAzC,CAAA,CAAkDpQ,IAAlD,CAAuD+jB,aAAvD,CAAlB,CAFkC;AAAA,QAI5B,MAAAE,MAAA,GAAShV,GAAA,CAAI0D,SAAJ,CAAckR,SAAd,CAAT,CAJ4B;AAAA,QAK9B,IAAA,CAACI,MAAD;AAAA,YAAgB,OAAA,IAAA,CALc;AAAA,QAOlC,MAAM,CAACviB,IAAD,EAAO3B,KAAP,EAAcmkB,MAAd,EAAsBC,QAAtB,EAAgCC,QAAhC,EAA0CC,SAA1C,CAAA,GAAuDJ,MAA7D,CAPkC;AAAA,QASlC,MAAMK,YAAA,GAAeL,MAAA,CAAOM,OAAP,CAAe/V,QAAf,CAAwBS,GAAxB,CAArB,CATkC;AAAA,QAWlC,IAAI9O,MAAA,GAASmkB,YAAb,CAXkC;AAAA,QAYlC,IAAIvkB,KAAJ,EAAW;AAAA,YAEP,MAAMykB,aAAA,GAAgBvV,GAAA,CAAIiC,KAA1B,CAFO;AAAA,YAGHjC,GAAA,CAAAiC,KAAA,GAAS,CAAAsT,aAAA,IAAiB,EAAjB,EAAqB/gB,KAA9B,CAAoCsgB,aAApC,CAAA,CAAmD5lB,KAAnD,CAAyD,CAAzD,EAA4D6B,IAA5D,CAAiE+jB,aAAjE,CAAA,CAHG;AAAA,YAIE5jB,MAAA,GAAAJ,KAAA,CAAMyO,QAAN,CAAeS,GAAf,CAAA,CAJF;AAAA,YAKPA,GAAA,CAAIiC,KAAJ,GAAYsT,aAAZ,CALO;AAAA,SAZuB;AAAA,QAmBlC,IAAI9iB,IAAJ,EAAU;AAAA,YACGvB,MAAA,GAAAsjB,WAAA,CAAY/hB,IAAZ,EAAkBvB,MAAlB,CAAA,CADH;AAAA,SAnBwB;AAAA,QAuBlC,IAAIA,MAAA,KAAW,KAAc,CAAzB,KAAyBgkB,QAAA,KAAa,MAAb,IAA0BC,QAAA,KAAa,KAAA,CAAvC,IAAoDC,SAAA,KAAc,KAAY,CAA9E,CAA7B,EAA2G;AAAA,YACnG,IAAA,OAAOlkB,MAAP,KAAkB,QAAlB,EAA4B;AAAA,gBAC5BA,MAAA,GAASujB,oBAAA,CAAqBvjB,MAArB,EAA6BgkB,QAA7B,EAAuCC,QAAvC,EAAiDC,SAAjD,CAAT,CAD4B;AAAA,aAA5B,MAEO,IAAA7kB,KAAA,CAAMC,OAAN,CAAcU,MAAd,CAAA,EAAuB;AAAA,gBAC9BA,MAAA,GAASA,MAAA,CAAOM,GAAP,CAAYuN,IAAD,IAAU,OAAOA,IAAP,KAAgB,QAAhB,GAA2B0V,oBAAA,CAAqB1V,IAArB,EAA2BmW,QAA3B,EAAqCC,QAArC,EAA+CC,SAA/C,CAA3B,GAAuFrW,IAA5G,CAAT,CAD8B;AAAA,aAHqE;AAAA,SAvBzE;AAAA,QA+B9B,IAAAjO,KAAA,KAAU,MAAV,IAAuBI,MAAA,KAAW,KAAA,CAAlC,IAA+C+jB,MAA/C,IAAyD,CAACA,MAAA,CAAOO,QAAP,CAAgBtkB,MAAhB,CAA1D,EAAmF;AAAA,YAE1EA,MAAA,GAAAmkB,YAAA,CAF0E;AAAA,YAGnF,IAAI5iB,IAAJ,EAAU;AAAA,gBACGvB,MAAA,GAAAsjB,WAAA,CAAY/hB,IAAZ,EAAkBvB,MAAlB,CAAA,CADH;AAAA,aAHyE;AAAA,SA/BrD;AAAA,QAwC7B,IAAAuB,IAAA,IAAQA,IAAA,KAAS,IAAA,CAAKA,IAAtB,IAAgCvB,MAAA,KAAW,MAAX,IAAwB8N,MAAA,CAAO9N,MAAP,CAAmB,KAAA,IAAA,CAAKuB,IAAhF,EAAuF;AAAA,YACxFvB,MAAA,GAASsjB,WAAA,CAAY,IAAA,CAAK/hB,IAAL,CAAU6D,IAAtB,EAA4BpF,MAA5B,CAAT,CADwF;AAAA,SAxC1D;AAAA,QA4C3B,OAAAA,MAAA,CA5C2B;AAAA,KAvCP;AAAA,IAsF/BsO,SAAA,GAAY;AAAA,KAtFmB;AAAA,IAwF/BC,aAAA,GAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KAxFM;AAAA,IA4F/BnB,SAAA,GAAkC;AAAA,QAC9B,MAAMmX,GAAA,GAAM;AAAA,YAAC,QAAD;AAAA,YAAW,KAAK7kB,GAAhB;AAAA,SAAZ,CAD8B;AAAA,QAE9B,IAAI,IAAKqR,CAAAA,KAAT,EAAgB;AAAA,YACRwT,GAAA,CAAAjgB,MAAA,CAAO,IAAA,CAAK5E,GAAZ,CADQ,CAAA;AAAA,SAFc;AAAA,QAKvB,OAAA6kB,GAAA,CALuB;AAAA,KA5FH;AAAA;;ACjCnC,SAASC,iBAAT,CAA2B/b,CAA3B,EAAmD;AAAA,IAC/C,IAAIA,CAAA,YAAagK,kBAAjB,EAAqC;AAAA,QACjC,IAAIhK,CAAA,CAAE1D,IAAF,KAAW,KAAX,IAAoB0D,CAAA,CAAEwF,IAAF,CAAOvP,MAAP,KAAkB,CAA1C,EAA6C;AAAA,YAClC,OAAA,KAAA,CADkC;AAAA,SAA7C,MAEA,IAAW+J,CAAA,CAAE1D,IAAF,KAAW,eAAtB,EAAuC;AAAA,YAC5B,OAAA,KAAA,CAD4B;AAAA,SAAvC,UAEW0D,CAAA,CAAE1D,IAAF,KAAW,KAAX,IAAoB0D,CAAA,CAAEwF,IAAF,CAAOvP,MAAP,KAAkB,GAAG;AAAA,YACzC,OAAA,KAAA,CADyC;AAAA,eAEpD,IACI+J,CAAA,CAAE1D,IAAF,KAAW,YAAX,IACA0D,CAAA,CAAE1D,IAAF,KAAW,eADX,IAEA0D,CAAA,CAAE1D,IAAF,KAAW,IAHf,EAIE;AAAA,YACS,OAAA,KAAA,CADT;AAAA,SAJF,MAMW,IAAA,UAAW0f,CAAAA,IAAX,CAAgBhc,CAAA,CAAE1D,IAAlB,CAAA,EAAyB;AAAA,YACzB,OAAA,KAAA,CADyB;AAAA,SAbH;AAAA,KADU;AAAA,IAmB/C,IAAI0D,CAAA,YAAa0Q,MAAjB,EAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KAnBsB;AAAA,IAuB/C,IAAI1Q,CAAA,YAAa4a,QAAjB,EAA2B;AAAA,QAChB,OAAA,KAAA,CADgB;AAAA,KAvBoB;AAAA,IA2B/C,IAAIrjB,MAAA,GAAS,IAAb,CA3B+C;AAAA,IA4B/CyI,CAAA,CAAE6F,SAAF,CAAmBW,GAAP,IAAO;AAAA,QACf,IAAIjP,MAAA,IAAU,CAACwkB,iBAAA,CAAkBvV,GAAlB,CAAf,EAAuC;AAAA,YAAWjP,MAAA,GAAA,KAAA,CAAX;AAAA,SADxB;AAAA,KAAnB,CA5B+C,CAAA;AAAA,IA+BxC,OAAAA,MAAA,CA/BwC;AAAA,CAPnD;AAyCA,SAAS0kB,eAAT,CAAyBjc,CAAzB,EAAiD;AAAA,IAC7C,IAAIA,CAAA,YAAagK,kBAAjB,EAAqC;AAAA,QAC7B,IAAAhK,CAAA,CAAE1D,IAAF,KAAW,eAAX,EAA4B;AAAA,YACrB,OAAA,KAAA,CADqB;AAAA,SADC;AAAA,KADQ;AAAA,IAM7C,IAAI/E,MAAA,GAAS,IAAb,CAN6C;AAAA,IAO7CyI,CAAA,CAAE6F,SAAF,CAAmBW,GAAP,IAAO;AAAA,QACf,IAAIjP,MAAA,IAAU,CAAC0kB,eAAA,CAAgBzV,GAAhB,CAAf,EAAqC;AAAA,YAAWjP,MAAA,GAAA,KAAA,CAAX;AAAA,SADtB;AAAA,KAAnB,CAP6C,CAAA;AAAA,IAUtC,OAAAA,MAAA,CAVsC;AAAA,CAzCjD;AAsDA,SAAS2kB,qBAAT,CAA+Blc,CAA/B,EAA2D;AAAA,IACvD,IAAIA,CAAA,YAAagb,MAAjB,EAAyB;AAAA,QACrB,MAAMmB,YAAA;AAAmB,QAAAC,IAAAA,GAAA,CAAI,CAACpc,CAAA,CAAE/I,GAAH,CAAJ,CAAzB,CADqB;AAAA,QAEd,OAAAklB,YAAA,CAFc;AAAA,KAD8B;AAAA,IAMnD,IAAA5kB,MAAA;IAAa6kB,IAAAA,KAAb,CANmD;AAAA,IAOvDpc,CAAA,CAAE6F,SAAF,CAAmBW,GAAP,IAAO;AAAA,QACNjP,MAAA;AAAA,QAAA,IAAI6kB,GAAJ,CAAQ;AAAA,YAAC,GAAG7kB,MAAJ;AAAA,YAAY,GAAG2kB,qBAAA,CAAsB1V,GAAtB,CAAf;AAAA,SAAR,CAAA,CADM;AAAA,KAAnB,CAPuD,CAAA;AAAA,IAUhD,OAAAjP,MAAA,CAVgD;AAAA,CAtD3D;AAmEA,SAAS8kB,wBAAT,CAAkCrc,CAAlC,EAAiDjH,UAAjD,EAAqF;AAAA,IACjF,IAAIiH,CAAA,YAAagK,kBAAb,IAAmCjR,UAAA,CAAWO,OAAX,CAAmB0G,CAAA,CAAE1D,IAArB,CAAA,IAA8B,CAArE,EAAwE;AAAA,QAAS,OAAA,KAAA,CAAT;AAAA,KADS;AAAA,IAEjF,IAAI/E,MAAA,GAAS,IAAb,CAFiF;AAAA,IAG/EyI,CAAA,CAAA6F,SAAA,CAAWW,GAAD,IAAS;AAAA,QACjB,IAAIjP,MAAA,IAAU,CAAC8kB,wBAAA,CAAyB7V,GAAzB,EAA8BzN,UAA9B,CAAf,EAA0D;AAAA,YAAWxB,MAAA,GAAA,KAAA,CAAX;AAAA,SADzC;AAAA,KAAnB,CAH+E,CAAA;AAAA,IAM1E,OAAAA,MAAA,CAN0E;AAAA;;AC9DrF,MAAM+kB,GAAN,CAAgC;AAAA,IAK5BrgB,WAAA,CAAYK,IAAZ,EAA0BigB,eAA1B,EAAuD;AAAA,QACnD,KAAKzjB,IAAL,GAAYyjB,eAAA,CAAgBzjB,IAA5B,CADmD;AAAA,QAEnD,IAAKwD,CAAAA,IAAL,GAAYA,IAAZ,CAFmD;AAAA,QAGnD,IAAKigB,CAAAA,eAAL,GAAuBA,eAAvB,CAHmD;AAAA,KAL3B;AAAA,IAW5B,OAAOjmB,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAgF;AAAA,QAC5E,IAAID,IAAA,CAAKvP,MAAL,KAAgB,CAAhB,IAAqB,OAAOuP,IAAA,CAAK,CAAL,CAAP,KAAmB,QAA5C;AAAA,YACW,OAAAC,OAAA,CAAQC,KAAR,CAAc,CAAgE,8DAAhE,CAAd,CAAA,CAFiE;AAAA,QAItE,MAAApJ,IAAA,GAAOkJ,IAAA,CAAK,CAAL,CAAP,CAJsE;AAAA,QAK5E,IAAI,CAACC,OAAA,CAAQ6C,KAAR,CAAc7L,GAAd,CAAkBH,IAAlB,CAAL,EAA8B;AAAA,YAC1B,OAAOmJ,OAAA,CAAQC,KAAR,CAAc,CAAA,kBAAA,GAAqBpJ,IAArB,EAA0C,cAA1C,GAA0CA,IAA1C,oEAAA,CAAd,EAAkI,CAAlI,CAAP,CAD0B;AAAA,SAL8C;AAAA,QAS5E,OAAO,IAAIggB,GAAJ,CAAQhgB,IAAR,EAAcmJ,OAAA,CAAQ6C,KAAR,CAAc9L,GAAd,CAAkBF,IAAlB,CAAd,CAAP,CAT4E;AAAA,KAXpD;AAAA,IAuB5BsJ,QAAA,CAASS,GAAT,EAAsC;AAAA,QAC3B,OAAA,KAAKkW,eAAL,CAAqB3W,QAArB,CAA8BS,GAA9B,CAAA,CAD2B;AAAA,KAvBV;AAAA,IA2B5BR,SAAA,GAAY;AAAA,KA3BgB;AAAA,IA6B5BC,aAAA,GAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KA7BG;AAAA,IAiC5BnB,SAAA,GAA2B;AAAA,QAChB,OAAA;AAAA,YAAC,KAAD;AAAA,YAAQ,KAAKrI,IAAb;AAAA,SAAA,CADgB;AAAA,KAjCC;AAAA;;ACkBhC,MAAMoO,cAAN,CAAqB;AAAA,IAejBzO,WAAA,CACI4L,QADJ,EAEI5O,IAAA,GAA+B,EAFnC,EAGI0M,YAHJ,EAII2C,KAAA,GAAe,IAAInM,KAAJ,EAJnB,EAKI2O,MAAA,GAA8B,EALlC,EAMIH,MANJ,EAOIxV,OAPJ,EAQE;AAAA,QACE,IAAK0S,CAAAA,QAAL,GAAgBA,QAAhB,CADF;AAAA,QAEE,IAAK5O,CAAAA,IAAL,GAAYA,IAAZ,CAFF;AAAA,QAGO,IAAA,CAAAhC,GAAA,GAAMgC,IAAA,CAAKpB,GAAL,CAAiB2kB,IAAR,IAAQ;AAAA,YAAM,IAAA,OAAOA,IAAP,KAAgB,QAAhB,EAA0B;AAAA,gBAAE,OAAO,GAAA,GAAKA,IAAL,EAAS,EAAT,CAAP,CAAF;AAAA,aAAhC;AAAA,YAA0D,OAAO,EAAA,GAAIA,IAAJ,EAAQ,CAAR,CAAP,CAA1D;AAAA,SAAjB,CAAkGplB,CAAAA,IAAlG,CAAuG,EAAvG,CAAN,CAHP;AAAA,QAIE,IAAKkR,CAAAA,KAAL,GAAaA,KAAb,CAJF;AAAA,QAKE,IAAKwC,CAAAA,MAAL,GAAcA,MAAd,CALF;AAAA,QAME,IAAKnF,CAAAA,YAAL,GAAoBA,YAApB,CANF;AAAA,QAOE,IAAKgF,CAAAA,MAAL,GAAcA,MAAd,CAPF;AAAA,QAQE,IAAKxV,CAAAA,OAAL,GAAeA,OAAf,CARF;AAAA,KAvBe;AAAA;AAyCjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAmB,KAAA,CACImmB,IADJ,EAEIhmB,KAFJ,EAGIkP,YAHJ,EAIItJ,QAJJ,EAKIlH,OAAA,GAEI,EAPR,EAQiC;AAAA,QAC7B,IAAIsB,KAAA,IAASkP,YAAb,EAA2B;AAAA,YAChB,OAAA,IAAK9J,CAAAA,MAAL,CAAYpF,KAAZ,EAAmB,IAAnB,EAAyBkP,YAAzB,EAAuCtJ,QAAvC,EAAiDqgB,MAAjD,CAAwDD,IAAxD,EAA8DtnB,OAA9D,CAAA,CADgB;AAAA,SADE;AAAA,QAItB,OAAA,KAAKunB,MAAL,CAAYD,IAAZ,EAAkBtnB,OAAlB,CAAA,CAJsB;AAAA,KAjDhB;AAAA;AAgEjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAyR,gBAAA,CACI6V,IADJ,EAEIhmB,KAFJ,EAGIQ,GAHJ,EAII0O,YAJJ,EAKItJ,QALJ,EAMIlH,OAAA,GAEI,EARR,EASiC;AAAA,QACtB,OAAA,IAAK0G,CAAAA,MAAL,CAAYpF,KAAZ,EAAmBQ,GAAnB,EAAwB0O,YAAxB,EAAsCtJ,QAAtC,EAAgDqgB,MAAhD,CAAuDD,IAAvD,EAA6DtnB,OAA7D,CAAA,CADsB;AAAA,KAzEhB;AAAA,IA6EjBunB,MAAA,CACID,IADJ,EAEItnB,OAFJ,EAKiC;AAAA,QACzB,IAAAsnB,IAAA,KAAS,IAAT,IAAiB,OAAOA,IAAP,KAAgB,QAAjC,IAA6C,OAAOA,IAAP,KAAgB,SAA7D,IAA0E,OAAOA,IAAP,KAAgB,QAA1F,EAAoG;AAAA,YAC7FA,IAAA,GAAA;AAAA,gBAAC,SAAD;AAAA,gBAAYA,IAAZ;AAAA,aAAA,CAD6F;AAAA,SAD3E;AAAA,QAKpB,SAAAE,QAAA,CAASvW,MAAT,EAA6BtN,IAA7B,EAAyC8jB,cAAzC,EAAuF;AAAA,YAC5F,IAAIA,cAAA,KAAmB,QAAvB,EAAiC;AAAA,gBAC7B,OAAO,IAAIzW,SAAJ,CAAcrN,IAAd,EAAoB,CAACsN,MAAD,CAApB,CAAP,CAD6B;AAAA,aAAjC,MAEA,IAAWwW,cAAA,KAAmB,QAA9B,EAAwC;AAAA,gBACpC,OAAO,IAAInV,QAAJ,CAAa3O,IAAb,EAAmB,CAACsN,MAAD,CAAnB,CAAP,CADoC;AAAA,aAAxC,MAEO;AAAA,gBACI,OAAAA,MAAA,CADJ;AAAA,aALqF;AAAA,SALnE;AAAA,QAezB,IAAAxP,KAAA,CAAMC,OAAN,CAAc4lB,IAAd,CAAA,EAAqB;AAAA,YACjB,IAAAA,IAAA,CAAKxmB,MAAL,KAAgB,CAAhB,EAAmB;AAAA,gBAEZ,OAAA,KAAKyP,KAAL,CAAW,CAAkG,gGAAlG,CAAX,CAAA,CAFY;AAAA,aADF;AAAA,YAMf,MAAAmX,IAAA,GAAO,OAAOJ,IAAA,CAAK,CAAL,CAAP,KAAmB,QAAnB,GAA8B,KAAK5U,QAAL,CAAc4U,IAAA,CAAK,CAAL,CAAd,CAA9B,GAAuD,KAAA,CAA9D,CANe;AAAA,YAOrB,IAAII,IAAJ,EAAU;AAAA,gBACN,IAAIzW,MAAA,GAASyW,IAAA,CAAKvmB,KAAL,CAAWmmB,IAAX,EAAiB,IAAjB,CAAb,CADM;AAAA,gBAEF,IAAA,CAACrW,MAAD;AAAA,oBAAgB,OAAA,IAAA,CAFd;AAAA,gBAIN,IAAI,IAAKT,CAAAA,YAAT,EAAuB;AAAA,oBACnB,MAAM/H,QAAA,GAAW,IAAA,CAAK+H,YAAtB,CADmB;AAAA,oBAEnB,MAAMmX,MAAA,GAAS1W,MAAA,CAAOtN,IAAtB,CAFmB;AAAA,oBAYnB,IAAK,CAAA8E,QAAA,CAASjB,IAAT,KAAkB,QAAlB,IAA8BiB,QAAA,CAASjB,IAAT,KAAkB,QAAhD,IAA4DiB,QAAA,CAASjB,IAAT,KAAkB,SAA9E,IAA2FiB,QAAA,CAASjB,IAAT,KAAkB,QAA7G,IAAyHiB,QAAA,CAASjB,IAAT,KAAkB,OAA3I,KAAuJmgB,MAAA,CAAOngB,IAAP,KAAgB,OAA5K,EAAqL;AAAA,wBACjLyJ,MAAA,GAASuW,QAAA,CAASvW,MAAT,EAAiBxI,QAAjB,EAA2BzI,OAAA,CAAQynB,cAAR,IAA0B,QAArD,CAAT,CADiL;AAAA,qBAArL,MAEY,IAAA,CAAAhf,QAAA,CAASjB,IAAT,KAAkB,OAAlB,IAA6BiB,QAAA,CAASjB,IAAT,KAAkB,WAA/C,IAA8DiB,QAAA,CAASjB,IAAT,KAAkB,eAAhF,MAAqGmgB,MAAA,CAAOngB,IAAP,KAAgB,OAAhB,IAA2BmgB,MAAA,CAAOngB,IAAP,KAAgB,QAA3C,CAArG,EAA2J;AAAA,wBACnKyJ,MAAA,GAASuW,QAAA,CAASvW,MAAT,EAAiBxI,QAAjB,EAA2BzI,OAAA,CAAQynB,cAAR,IAA0B,QAArD,CAAT,CADmK;AAAA,qBAA3J,MAED,IAAA,IAAKjf,CAAAA,YAAL,CAAkBC,QAAlB,EAA4Bkf,MAA5B,CAAA,EAAqC;AAAA,wBACrC,OAAA,IAAA,CADqC;AAAA,qBAhB7B;AAAA,iBAJjB;AAAA,gBA6BF,IAAA,EAAE1W,MAAA,YAAkBb,OAAlB,CAAF,IAAiCa,MAAA,CAAOtN,IAAP,CAAY6D,IAAZ,KAAqB,eAAtD,IAA0EogB,UAAA,CAAW3W,MAAX,CAA1E,EAA8F;AAAA,oBAC9F,MAAM4W,EAAA,GAAK,IAAI3U,iBAAJ,CAAsB,IAAKsC,CAAAA,MAA3B,EAAmC,IAAA,CAAKxV,OAAxC,CAAX,CAD8F;AAAA,oBAE1F,IAAA;AAAA,wBACAiR,MAAA,GAAS,IAAIb,OAAJ,CAAYa,MAAA,CAAOtN,IAAnB,EAAyBsN,MAAA,CAAOR,QAAP,CAAgBoX,EAAhB,CAAzB,CAAT,CADA;AAAA,qBAAA,QAEKhd,GAAQ;AAAA,wBACR,KAAA0F,KAAA,CAAM1F,CAAA,CAAE9D,OAAR,CADQ,CAAA;AAAA,wBAEN,OAAA,IAAA,CAFM;AAAA,qBAJ6E;AAAA,iBA7B5F;AAAA,gBAuCC,OAAAkK,MAAA,CAvCD;AAAA,aAPW;AAAA,YAkDrB,OAAOqB,QAAA,CAASnR,KAAT,CAAe;AAAA,gBAAC,UAAD;AAAA,gBAAammB,IAAb;AAAA,aAAf,EAAmC,IAAnC,CAAP,CAlDqB;AAAA,SAArB,MAmDJ,IAAW,OAAOA,IAAP,KAAgB,WAA3B,EAAwC;AAAA,YAE7B,OAAA,KAAK/W,KAAL,CAAW,CAA8C,4CAA9C,CAAX,CAAA,CAF6B;AAAA,SAAxC,MAGA,IAAW,OAAO+W,IAAP,KAAgB,QAA3B,EAAqC;AAAA,YAE1B,OAAA,KAAK/W,KAAL,CAAW,CAAuD,qDAAvD,CAAX,CAAA,CAF0B;AAAA,SAArC,MAGO;AAAA,YAEH,OAAO,IAAA,CAAKA,KAAL,CAAW,CAAgC,6BAAhC,GAAgC,OAAO+W,IAAvC,EAAsD,SAAtD,CAAX,CAAP,CAFG;AAAA,SAxEsB;AAAA,KAlFhB;AAAA;AAwKjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA5gB,MAAA,CACIpF,KADJ,EAEIQ,GAFJ,EAGI0O,YAHJ,EAIItJ,QAJJ,EAKkB;AAAA,QACV,IAAApD,IAAA,GAAO,OAAOxC,KAAP,KAAiB,QAAjB,GAA4B,IAAA,CAAKwC,IAAL,CAAU4C,MAAV,CAAiBpF,KAAjB,CAA5B,GAAsD,IAAA,CAAKwC,IAAlE,CADU;AAAA,QAEdA,IAAA,GAAO,OAAOhC,GAAP,KAAe,QAAf,GAA0BgC,IAAA,CAAK4C,MAAL,CAAY5E,GAAZ,CAA1B,GAA6CgC,IAApD,CAFc;AAAA,QAGd,MAAMqP,KAAA,GAAQjM,QAAA,GAAW,IAAKiM,CAAAA,KAAL,CAAWzM,MAAX,CAAkBQ,QAAlB,CAAX,GAAyC,IAAA,CAAKiM,KAA5D,CAHc;AAAA,QAId,OAAO,IAAIoC,cAAJ,CACH,IAAA,CAAK7C,QADF,EAEH5O,IAFG,EAGH0M,YAAA,IAAgB,IAHb,EAIH2C,KAJG,EAKH,IAAKwC,CAAAA,MALF,EAMH,IAAA,CAAKH,MANF,EAOH,IAAA,CAAKxV,OAPF,CAAP,CAJc;AAAA,KA7KD;AAAA;AAmMjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAuQ,KAAA,CAAMA,KAAN,SAAA,EAA6C;AAAA,QACzC,MAAMzO,GAAA,GAAM,CAAG,GAAA,IAAA,CAAKA,GAAR,EAAA,GAAcF,IAAA,CAAKc,GAAL,CAAcW,CAAL,IAAK,CAAA,CAAA,GAAIA,CAAJ,EAAK,CAAL,CAAd,CAAwBpB,CAAAA,IAAxB,CAA6B,EAA7B,CAAd,EAAA,CAAZ,CADyC;AAAA,QAEzC,IAAK0T,CAAAA,MAAL,CAAYhU,IAAZ,CAAiB,IAAIkF,cAAJ,CAAiB/E,GAAjB,EAAsByO,KAAtB,CAAjB,CAFyC,CAAA;AAAA,KAnM5B;AAAA;AA4MjB;AAAA;AAAA;AAAA,IAAA/H,YAAA,CAAaC,QAAb,EAA6BC,CAA7B,EAAiE;AAAA,QACvD,MAAA6H,KAAA,GAAQ/H,YAAA,CAAaC,QAAb,EAAuBC,CAAvB,CAAR,CADuD;AAAA,QAEzD,IAAA6H,KAAA;AAAA,YAAY,IAAAA,CAAAA,KAAA,CAAMA,KAAN,CAF6C,CAAA;AAAA,QAGtD,OAAAA,KAAA,CAHsD;AAAA,KA5MhD;AAAA,CAvBrB;AA0OA,uBA1OA,cAAA,CAAA;AA4OA,SAASqX,UAAT,CAAoBxgB,UAApB,EAA4C;AAAA,IACxC,IAAIA,UAAA,YAAsB+f,GAA1B,EAA+B;AAAA,QACpB,OAAAS,UAAA,CAAWxgB,UAAA,CAAWggB,eAAtB,CAAA,CADoB;AAAA,KAA/B,MAEW,IAAAhgB,UAAA,YAAsByN,kBAAtB,IAA4CzN,UAAA,CAAWD,IAAX,KAAoB,OAAhE,EAAyE;AAAA,QACzE,OAAA,KAAA,CADyE;AAAA,KAAzE,MAEX,IAAWC,UAAA,YAAsB6O,kBAAjC,EAAqD;AAAA,QAI1C,OAAA,KAAA,CAJ0C;AAAA,KAArD,MAKA,IAAW7O,UAAA,YAAsBmU,MAAjC,EAAyC;AAAA,QAC9B,OAAA,KAAA,CAD8B;AAAA,KAAzC,MAEA,IAAWnU,UAAA,YAAsBqe,QAAjC,EAA2C;AAAA,QAChC,OAAA,KAAA,CADgC;AAAA,KAA3C,MAEA,IAAWre,UAAA,YAAsBye,MAAjC,EAAyC;AAAA,QAC9B,OAAA,KAAA,CAD8B;AAAA,KAdD;AAAA,IAkBlC,MAAAiC,gBAAA,GAAmB1gB,UAAA,YAAsBkL,QAAtB,IACrBlL,UAAA,YAAsB4J,SADpB,CAlBkC;AAAA,IAqBxC,IAAI+W,gBAAA,GAAmB,IAAvB,CArBwC;AAAA,IAsBxC3gB,UAAA,CAAWsJ,SAAX,CAA8BsC,KAAT,IAAS;AAAA,QAQ1B,IAAI8U,gBAAJ,EAAsB;AAAA,YACCC,gBAAA,GAAAA,gBAAA,IAAoBH,UAAA,CAAW5U,KAAX,CAApB,CADD;AAAA,SAAtB,MAEO;AAAA,YACH+U,gBAAA,GAAmBA,gBAAA,IAAoB/U,KAAA,YAAiB5C,OAAxD,CADG;AAAA,SAVmB;AAAA,KAA9B,CAtBwC,CAAA;AAAA,IAoCxC,IAAI,CAAC2X,gBAAL,EAAuB;AAAA,QACZ,OAAA,KAAA,CADY;AAAA,KApCiB;AAAA,IAwCxC,OAAOnB,iBAAA,CAAkBxf,UAAlB,KACH8f,wBAAA,CAAyB9f,UAAzB,EAAqC;AAAA,QAAC,MAAD;AAAA,QAAS,iBAAT;AAAA,QAA4B,eAA5B;AAAA,QAA6C,cAA7C;AAAA,QAA6D,qBAA7D;AAAA,QAAoF,aAApF;AAAA,QAAmG,qBAAnG;AAAA,QAA0H,OAA1H;AAAA,QAAmI,sBAAnI;AAAA,QAA2J,eAA3J;AAAA,QAA4K,uBAA5K;AAAA,KAArC,CADJ,CAxCwC;AAAA;;AClO5B,SAAA4gB,yBAAA,CAA0BxjB,KAA1B,EAAgDa,KAAhD,EAAuE;AAAA,IAC7E,MAAA4iB,SAAA,GAAYzjB,KAAA,CAAM1D,MAAN,GAAe,CAA3B,CAD6E;AAAA,IAEnF,IAAIonB,UAAA,GAAa,CAAjB,CAFmF;AAAA,IAGnF,IAAIC,UAAA,GAAaF,SAAjB,CAHmF;AAAA,IAInF,IAAIG,YAAA,GAAe,CAAnB,CAJmF;AAAA,IAKnF,IAAIC,YAAJ,EAAkBC,SAAlB,CALmF;AAAA,IAOnF,OAAOJ,UAAA,IAAcC,UAArB,EAAiC;AAAA,QAC7BC,YAAA,GAAejf,IAAA,CAAK2C,KAAL,CAAY,CAAAoc,UAAA,GAAaC,UAAb,IAA2B,CAAvC,CAAf,CAD6B;AAAA,QAE7BE,YAAA,GAAe7jB,KAAA,CAAM4jB,YAAN,CAAf,CAF6B;AAAA,QAGjBE,SAAA,GAAA9jB,KAAA,CAAM4jB,YAAA,GAAe,CAArB,CAAA,CAHiB;AAAA,QAK7B,IAAIC,YAAA,IAAgBhjB,KAApB,EAA2B;AAAA,YACnB,IAAA+iB,YAAA,KAAiBH,SAAjB,IAA8B5iB,KAAA,GAAQijB,SAAtC,EAAiD;AAAA,gBAC1C,OAAAF,YAAA,CAD0C;AAAA,aAD9B;AAAA,YAKvBF,UAAA,GAAaE,YAAA,GAAe,CAA5B,CALuB;AAAA,SAA3B,MAMA,IAAWC,YAAA,GAAehjB,KAA1B,EAAiC;AAAA,YAC7B8iB,UAAA,GAAaC,YAAA,GAAe,CAA5B,CAD6B;AAAA,SAAjC,MAEO;AAAA,YACG,MAAA,IAAIxX,YAAJ,CAAiB,wBAAjB,CAAA,CADH;AAAA,SAbsB;AAAA,KAPkD;AAAA,IAyB5E,OAAA,CAAA,CAzB4E;AAAA;;ACDvF,MAAM2X,IAAN,CAAiC;AAAA,IAO7BzhB,WAAA,CAAYnD,IAAZ,EAAwB0B,KAAxB,EAA2Cb,KAA3C,EAAyD;AAAA,QACrD,IAAKb,CAAAA,IAAL,GAAYA,IAAZ,CADqD;AAAA,QAErD,IAAK0B,CAAAA,KAAL,GAAaA,KAAb,CAFqD;AAAA,QAIrD,IAAKmjB,CAAAA,MAAL,GAAc,EAAd,CAJqD;AAAA,QAKrD,IAAKC,CAAAA,OAAL,GAAe,EAAf,CALqD;AAAA,QAMrD,KAAA,MAAW,CAACC,KAAD,EAAQthB,UAAR,CAAX,IAAkC5C,KAAlC,EAAyC;AAAA,YAChC,KAAAgkB,MAAA,CAAO7mB,IAAP,CAAY+mB,KAAZ,CADgC,CAAA;AAAA,YAEhC,KAAAD,OAAA,CAAQ9mB,IAAR,CAAayF,UAAb,CAFgC,CAAA;AAAA,SANY;AAAA,KAP5B;AAAA,IAmB7B,OAAOjG,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA6F;AAAA,QACrF,IAAAD,IAAA,CAAKvP,MAAL,GAAc,CAAd,GAAkB,CAAlB,EAAqB;AAAA,YAErB,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,8CAAA,GAAiDF,IAAA,CAAKvP,MAAL,GAAc,CAA/D,EAAmE,CAAnE,CAAd,CAAP,CAFqB;AAAA,SADgE;AAAA,QAMzF,IAAK,CAAAuP,IAAA,CAAKvP,MAAL,GAAc,CAAd,IAAmB,CAAxB,KAA8B,CAA9B,EAAiC;AAAA,YAEtB,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAuC,qCAAvC,CAAd,CAAA,CAFsB;AAAA,SANwD;AAAA,QAWzF,MAAMlL,KAAA,GAAQiL,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0B5I,UAA1B,CAAd,CAXyF;AAAA,QAYrF,IAAA,CAACpC,KAAD;AAAA,YAAe,OAAA,IAAA,CAZsE;AAAA,QAczF,MAAMb,KAAA,GAAe,EAArB,CAdyF;AAAA,QAgBzF,IAAImkB,UAAA,GAAoB,IAAxB,CAhByF;AAAA,QAiBzF,IAAIrY,OAAA,CAAQE,YAAR,IAAwBF,OAAA,CAAQE,YAAR,CAAqBhJ,IAArB,KAA8B,OAA1D,EAAmE;AAAA,YAC/DmhB,UAAA,GAAarY,OAAA,CAAQE,YAArB,CAD+D;AAAA,SAjBsB;AAAA,QAqBzF,KAAA,IAASzN,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsN,IAAA,CAAKvP,MAAzB,EAAiCiC,CAAA,IAAK,CAAtC,EAAyC;AAAA,YACrC,MAAM2lB,KAAA,GAAQ3lB,CAAA,KAAM,CAAN,GAAU,CAAAzC,QAAV,GAAsB+P,IAAA,CAAKtN,CAAL,CAApC,CADqC;AAAA,YAE/B,MAAAf,KAAA,GAAQqO,IAAA,CAAKtN,CAAA,GAAI,CAAT,CAAR,CAF+B;AAAA,YAIrC,MAAM6lB,QAAA,GAAW7lB,CAAjB,CAJqC;AAAA,YAKrC,MAAM8lB,QAAA,GAAW9lB,CAAA,GAAI,CAArB,CALqC;AAAA,YAOjC,IAAA,OAAO2lB,KAAP,KAAiB,QAAjB,EAA2B;AAAA,gBAEpB,OAAApY,OAAA,CAAQC,KAAR,CAAc,yIAAd,EAAyJqY,QAAzJ,CAAA,CAFoB;AAAA,aAPM;AAAA,YAYjC,IAAApkB,KAAA,CAAM1D,MAAN,IAAgB0D,KAAA,CAAMA,KAAA,CAAM1D,MAAN,GAAe,CAArB,CAAA,CAAwB,CAAxB,CAAA,IAA8B4nB,KAA9C,EAAqD;AAAA,gBAE9C,OAAApY,OAAA,CAAQC,KAAR,CAAc,2GAAd,EAA2HqY,QAA3H,CAAA,CAF8C;AAAA,aAZpB;AAAA,YAiBrC,MAAM3X,MAAA,GAASX,OAAA,CAAQnP,KAAR,CAAca,KAAd,EAAqB6mB,QAArB,EAA+BF,UAA/B,CAAf,CAjBqC;AAAA,YAkBjC,IAAA,CAAC1X,MAAD;AAAA,gBAAgB,OAAA,IAAA,CAlBiB;AAAA,YAmBrC0X,UAAA,GAAaA,UAAA,IAAc1X,MAAA,CAAOtN,IAAlC,CAnBqC;AAAA,YAoBrCa,KAAA,CAAM7C,IAAN,CAAW;AAAA,gBAAC+mB,KAAD;AAAA,gBAAQzX,MAAR;AAAA,aAAX,CApBqC,CAAA;AAAA,SArBgD;AAAA,QA4CzF,OAAO,IAAIsX,IAAJ,CAASI,UAAT,EAAqBtjB,KAArB,EAA4Bb,KAA5B,CAAP,CA5CyF;AAAA,KAnBhE;AAAA,IAkE7BiM,QAAA,CAASS,GAAT,EAAsC;AAAA,QAClC,MAAMsX,MAAA,GAAS,IAAA,CAAKA,MAApB,CADkC;AAAA,QAElC,MAAMC,OAAA,GAAU,IAAA,CAAKA,OAArB,CAFkC;AAAA,QAI9B,IAAAD,MAAA,CAAO1nB,MAAP,KAAkB,CAAlB,EAAqB;AAAA,YACrB,OAAO2nB,OAAA,CAAQ,CAAR,EAAWhY,QAAX,CAAoBS,GAApB,CAAP,CADqB;AAAA,SAJS;AAAA,QAQlC,MAAMlP,KAAA,GAAS,IAAKqD,CAAAA,KAAL,CAAWoL,QAAX,CAAoBS,GAApB,CAAf,CARkC;AAAA,QAS9B,IAAAlP,KAAA,IAASwmB,MAAA,CAAO,CAAP,CAAT,EAAoB;AAAA,YACpB,OAAOC,OAAA,CAAQ,CAAR,EAAWhY,QAAX,CAAoBS,GAApB,CAAP,CADoB;AAAA,SATU;AAAA,QAalC,MAAM4X,SAAA,GAAYN,MAAA,CAAO1nB,MAAzB,CAbkC;AAAA,QAclC,IAAIkB,KAAA,IAASwmB,MAAA,CAAOM,SAAA,GAAY,CAAnB,CAAb,EAAoC;AAAA,YAChC,OAAOL,OAAA,CAAQK,SAAA,GAAY,CAApB,CAAA,CAAuBrY,QAAvB,CAAgCS,GAAhC,CAAP,CADgC;AAAA,SAdF;AAAA,QAkB5B,MAAA5P,KAAA,GAAQ0mB,yBAAA,CAA0BQ,MAA1B,EAAkCxmB,KAAlC,CAAR,CAlB4B;AAAA,QAmBlC,OAAOymB,OAAA,CAAQnnB,KAAR,EAAemP,QAAf,CAAwBS,GAAxB,CAAP,CAnBkC;AAAA,KAlET;AAAA,IAwF7BR,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAK9L,CAAAA,KAAR,CADmC,CAAA;AAAA,QAExB,KAAA+B,MAAAA,UAAA,IAAc,IAAA,CAAKqhB,OAAnB,EAA4B;AAAA,YACnCtX,EAAA,CAAG/J,UAAH,CADmC,CAAA;AAAA,SAFJ;AAAA,KAxFV;AAAA,IA+F7BuJ,aAAA,GAAyB;AAAA,QACrB,OAAO,IAAA,CAAK8X,OAAL,CAAarX,KAAb,CAA0B2X,GAAP,IAAOA,GAAA,CAAIpY,aAAJ,EAA1B,CAAP,CADqB;AAAA,KA/FI;AAAA,IAmG7BnB,SAAA,GAAkC;AAAA,QAC9B,MAAMC,UAAA,GAAa;AAAA,YAAC,MAAD;AAAA,YAAS,IAAKpK,CAAAA,KAAL,CAAWmK,SAAX,EAAT;AAAA,SAAnB,CAD8B;AAAA,QAE9B,KAAA,IAASzM,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI,IAAA,CAAKylB,MAAL,CAAY1nB,MAAhC,EAAwCiC,CAAA,EAAxC,EAA6C;AAAA,YACzC,IAAIA,CAAA,GAAI,CAAR,EAAW;AAAA,gBACP0M,UAAA,CAAW9N,IAAX,CAAgB,KAAK6mB,MAAL,CAAYzlB,CAAZ,CAAhB,CADO,CAAA;AAAA,aAD8B;AAAA,YAIzC0M,UAAA,CAAW9N,IAAX,CAAgB,IAAA,CAAK8mB,OAAL,CAAa1lB,CAAb,CAAA,CAAgByM,SAAhB,EAAhB,CAJyC,CAAA;AAAA,SAFf;AAAA,QAQvB,OAAAC,UAAA,CARuB;AAAA,KAnGL;AAAA;;;;;;;;ACPjCuZ,CAAAA,UAAA,GAAiBC,UAAjB,CAAA;CAEA,SAASA,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,GAAnC,EAAwC;AAAA;AAEpC,KAAA,IAAA,CAAKC,EAAL,GAAU,CAAMJ,GAAAA,GAAhB,CAAA;AAFoC,KAGpC,IAAKK,CAAAA,EAAL,GAAU,CAAA,IAAOH,GAAA,GAAMF,GAAN,CAAP,GAAoB,IAAKI,CAAAA,EAAnC,CAAA;AAHoC,KAIpC,IAAA,CAAKE,EAAL,GAAU,CAAA,GAAM,KAAKF,EAAX,GAAgB,IAAKC,CAAAA,EAA/B,CAAA;AAJoC,KAMpC,IAAKE,CAAAA,EAAL,GAAU,CAAA,GAAMN,GAAhB,CAAA;AANoC,KAOpC,IAAKO,CAAAA,EAAL,GAAU,CAAA,IAAOL,GAAA,GAAMF,GAAN,CAAP,GAAoB,IAAKM,CAAAA,EAAnC,CAAA;AAPoC,KAQpC,IAAA,CAAKE,EAAL,GAAU,CAAA,GAAM,KAAKF,EAAX,GAAgB,IAAKC,CAAAA,EAA/B,CAAA;AARoC,KAUpC,IAAKR,CAAAA,GAAL,GAAWA,GAAX,CAAA;AAVoC,KAWpC,IAAKC,CAAAA,GAAL,GAAWA,GAAX,CAAA;AAXoC,KAYpC,IAAKC,CAAAA,GAAL,GAAWA,GAAX,CAAA;AAZoC,KAapC,IAAKC,CAAAA,GAAL,GAAWA,GAAX,CAAA;AAboC,EAAA;CAgBxCJ,UAAA,CAAWW,SAAX,GAAuB;AAAA,KACnBC,YAAA,EAAc,UAAUnhB,CAAV,EAAa;AAAA;AAEvB,SAAA,OAAQ,CAAC,CAAK8gB,IAAAA,CAAAA,EAAL,GAAU9gB,CAAV,GAAc,IAAK6gB,CAAAA,EAAnB,IAAyB7gB,CAA1B,GAA8B,IAAA,CAAK4gB,EAAnC,IAAyC5gB,CAAjD,CAAA;MAHe;AAAA,KAMnBohB,YAAA,EAAc,UAAUphB,CAAV,EAAa;AAAA,SACvB,OAAQ,CAAC,CAAA,IAAA,CAAKihB,EAAL,GAAUjhB,CAAV,GAAc,IAAKghB,CAAAA,EAAnB,IAAyBhhB,CAA1B,GAA8B,IAAA,CAAK+gB,EAAnC,IAAyC/gB,CAAjD,CAAA;MAPe;AAAA,KAUnBqhB,sBAAA,EAAwB,UAAUrhB,CAAV,EAAa;SACjC,OAAQ,CAAM,CAAA,GAAA,IAAA,CAAK8gB,EAAX,GAAgB9gB,CAAhB,GAAoB,CAAA,GAAM,IAAK6gB,CAAAA,EAA/B,IAAqC7gB,CAAtC,GAA0C,IAAA,CAAK4gB,EAAtD,CAAA;MAXe;AAAA,KAcnBU,WAAA,EAAa,UAAU/lB,CAAV,EAAagmB,OAAb,EAAsB;SAC/B,IAAIA,OAAA,KAAY9pB,SAAhB;aAA2B8pB,OAAA,GAAU,QAAV,CAAA;SAE3B,IAAIhmB,CAAA,GAAI,CAAR;AAAA,aAAa,OAAO,CAAP,CAAA;SACb,IAAIA,CAAA,GAAI,CAAR;AAAA,aAAa,OAAO,CAAP,CAAA;SAEb,IAAIyE,CAAA,GAAIzE,CAAR,CAAA;AAN+B;AAS/B,SAAA,KAAK,IAAIlB,CAAA,GAAI,CAAR,EAAWA,CAAA,GAAI,CAApB,EAAuBA,CAAA,EAAvB,EAA4B;aACxB,IAAI6U,EAAA,GAAK,IAAA,CAAKiS,YAAL,CAAkBnhB,CAAlB,CAAuBzE,GAAAA,CAAhC,CAAA;aACA,IAAIkF,IAAA,CAAK6N,GAAL,CAASY,EAAT,IAAeqS,OAAnB;AAAA,iBAA4B,OAAOvhB,CAAP,CAAA;aAE5B,IAAIwhB,EAAA,GAAK,IAAA,CAAKH,sBAAL,CAA4BrhB,CAA5B,CAAT,CAAA;aACA,IAAIS,IAAA,CAAK6N,GAAL,CAASkT,EAAT,IAAe,QAAnB;iBAAyB,MAAA;AALD,aAOxBxhB,CAAA,GAAIA,CAAA,GAAIkP,EAAA,GAAKsS,EAAb,CAAA;AAPwB,UAAA;AATG;SAoB3BC,IAAAA,EAAA,GAAK,CAAT,CAAA;SACA,IAAIC,EAAA,GAAK,CAAT,CAAA;SACA1hB,CAAA,GAAIzE,CAAJ,CAAA;SAEA,KAAKlB,CAAA,GAAI,CAAT,EAAYA,CAAA,GAAI,EAAhB,EAAoBA,CAAA,EAApB,EAAyB;AAAA,aACrB6U,EAAA,GAAK,IAAA,CAAKiS,YAAL,CAAkBnhB,CAAlB,CAAL,CAAA;aACA,IAAIS,IAAA,CAAK6N,GAAL,CAASY,EAAA,GAAK3T,CAAd,CAAA,GAAmBgmB,OAAvB;iBAAgC,MAAA;AAFX,aAIrB,IAAIhmB,CAAA,GAAI2T,EAAR,EAAY;iBACRuS,EAAA,GAAKzhB,CAAL,CAAA;AADQ,cAAZ,MAEO;iBACH0hB,EAAA,GAAK1hB,CAAL,CAAA;AADG,cAAA;aAIPA,CAAA,GAAK,CAAA0hB,EAAA,GAAKD,EAAL,IAAW,GAAZ,GAAkBA,EAAtB,CAAA;AAVqB,UAAA;AAxBM,SAqC/B,OAAOzhB,CAAP,CAAA;MAnDe;AAAA,KAsDnB2hB,KAAA,EAAO,UAAUpmB,CAAV,EAAagmB,OAAb,EAAsB;AAAA,SACzB,OAAO,IAAA,CAAKH,YAAL,CAAkB,IAAKE,CAAAA,WAAL,CAAiB/lB,CAAjB,EAAoBgmB,OAApB,CAAlB,CAAP,CAAA;AADyB,MAAA;EAtDjC,CAAA;;;;;;;ACFA,MAAMK,EAAA,GAAK,OAAX,EACIC,EAAA,GAAK,CADT,EAEIC,EAAA,GAAK,OAFT,EAGIL,EAAA,GAAK,CAAI,GAAA,EAHb,EAIIC,EAAA,GAAK,CAAI,GAAA,EAJb,EAKIK,EAAA,GAAK,CAAA,GAAIL,EAAJ,GAASA,EALlB,EAMIM,EAAA,GAAKN,EAAA,GAAKA,EAAL,GAAUA,EANnB,EAOIO,OAAA,GAAUxhB,IAAA,CAAKmQ,EAAL,GAAU,GAPxB,EAQIsR,OAAA,GAAU,GAAMzhB,GAAAA,IAAA,CAAKmQ,EARzB,CAlBA;AA6BA,SAASuR,OAAT,CAAiBniB,CAAjB,EAA4B;AAAA,IACjB,OAAAA,CAAA,GAAIgiB,EAAJ,GAASvhB,IAAA,CAAKqE,GAAL,CAAS9E,CAAT,EAAY,CAAI,GAAA,CAAhB,CAAT,GAA8BA,CAAA,GAAI+hB,EAAJ,GAASN,EAAvC,CADiB;AAAA,CA7B5B;AAiCA,SAASW,OAAT,CAAiBpiB,CAAjB,EAA4B;AAAA,IACxB,OAAOA,CAAA,GAAI0hB,EAAJ,GAAS1hB,CAAA,GAAIA,CAAJ,GAAQA,CAAjB,GAAqB+hB,EAAA,IAAM/hB,CAAA,GAAIyhB,EAAJ,CAAlC,CADwB;AAAA,CAjC5B;AAqCA,SAASY,OAAT,CAAiB9mB,CAAjB,EAA4B;AAAA,IACjB,OAAA,OAAOA,CAAA,IAAK,SAAL,GAAiB,KAAQA,GAAAA,CAAzB,GAA6B,KAAA,GAAQkF,IAAA,CAAKqE,GAAL,CAASvJ,CAAT,EAAY,CAAA,GAAI,GAAhB,CAAR,GAA+B,KAA5D,CAAP,CADiB;AAAA,CArC5B;AAyCA,SAAS+mB,OAAT,CAAiB/mB,CAAjB,EAA4B;AAAA,IACnBA,CAAA,IAAA,GAAA,CADmB;AAAA,IAEjB,OAAAA,CAAA,IAAK,OAAL,GAAeA,CAAA,GAAI,KAAnB,GAA2BkF,IAAA,CAAKqE,GAAL,CAAU,CAAAvJ,CAAA,GAAI,KAAJ,IAAa,KAAvB,EAA8B,GAA9B,CAA3B,CAFiB;AAAA,CAzC5B;AA+CA,SAASgnB,QAAT,CAAkBC,QAAlB,EAA6C;AAAA,IACzC,MAAMlgB,CAAA,GAAIggB,OAAA,CAAQE,QAAA,CAAS/f,CAAjB,CAAV,EACIJ,CAAA,GAAIigB,OAAA,CAAQE,QAAA,CAAS9f,CAAjB,CADR,EAEIT,CAAA,GAAIqgB,OAAA,CAAQE,QAAA,CAASlgB,CAAjB,CAFR,EAGI/G,CAAA,GAAI4mB,OAAA,CAAS,CAAA,SAAA,GAAY7f,CAAZ,GAAgB,SAAA,GAAYD,CAA5B,GAAgC,SAAA,GAAYJ,CAA5C,IAAiD2f,EAA1D,CAHR,EAIIlW,CAAA,GAAIyW,OAAA,CAAS,CAAY7f,SAAAA,GAAAA,CAAZ,GAAgB,SAAYD,GAAAA,CAA5B,GAAgC,QAAA,GAAYJ,CAA5C,IAAiD4f,EAA1D,CAJR,EAKI5Q,CAAA,GAAIkR,OAAA,CAAS,aAAY7f,CAAZ,GAAgB,QAAYD,GAAAA,CAA5B,GAAgC,SAAYJ,GAAAA,CAA5C,IAAiD6f,EAA1D,CALR,CADyC;AAAA,IAQlC,OAAA;AAAA,QACH7f,CAAA,EAAG,GAAMyJ,GAAAA,CAAN,GAAU,EADV;AAAA,QAEHrJ,CAAA,EAAG,GAAA,IAAO9G,CAAA,GAAImQ,CAAJ,CAFP;AAAA,QAGHpJ,CAAA,EAAG,GAAA,IAAOoJ,CAAA,GAAIuF,CAAJ,CAHP;AAAA,QAIHlP,KAAA,EAAOygB,QAAA,CAASngB,CAJb;AAAA,KAAA,CARkC;AAAA,CA/C7C;AA+DA,SAASogB,QAAT,CAAkBC,QAAlB,EAA6C;AAAA,IACrC,IAAAhX,CAAA,GAAK,CAAAgX,QAAA,CAASzgB,CAAT,GAAa,EAAb,IAAmB,GAAxB,EACA1G,CAAA,GAAI6O,KAAA,CAAMsY,QAAA,CAASrgB,CAAf,CAAoBqJ,GAAAA,CAApB,GAAwBA,CAAA,GAAIgX,QAAA,CAASrgB,CAAT,GAAa,GAD7C,EAEA4O,CAAA,GAAI7G,KAAA,CAAMsY,QAAA,CAASpgB,CAAf,CAAoBoJ,GAAAA,CAApB,GAAwBA,CAAA,GAAIgX,QAAA,CAASpgB,CAAT,GAAa,GAF7C,CADqC;AAAA,IAIrCoJ,CAAA,GAAAmW,EAAA,GAAKO,OAAA,CAAQ1W,CAAR,CAAL,CAJqC;AAAA,IAKrCnQ,CAAA,GAAAqmB,EAAA,GAAKQ,OAAA,CAAQ7mB,CAAR,CAAL,CALqC;AAAA,IAMrC0V,CAAA,GAAA6Q,EAAA,GAAKM,OAAA,CAAQnR,CAAR,CAAL,CANqC;AAAA,IAOzC,OAAO,IAAIzO,KAAJ,CACH6f,OAAA,CAAQ,SAAA,GAAY9mB,CAAZ,GAAgB,YAAYmQ,CAA5B,GAAgC,SAAYuF,GAAAA,CAApD,CADG;AAEH,IAAAoR,OAAA,CAAQ,CAAa,QAAb,GAAa9mB,CAAb,GAAiB,SAAA,GAAYmQ,CAA7B,GAAiC,QAAYuF,GAAAA,CAArD,CAFG,EAGHoR,OAAA,CAAQ,SAAA,GAAY9mB,CAAZ,GAAgB,SAAYmQ,GAAAA,CAA5B,GAAgC,SAAA,GAAYuF,CAApD,CAHG,EAIHyR,QAAA,CAAS3gB,KAJN,CAAP,CAPyC;AAAA,CA/D7C;AA8EA,SAAS4gB,cAAT,CAAwB3mB,IAAxB,EAAwCC,EAAxC,EAAsD+D,CAAtD,EAA2E;AAAA,IAChE,OAAA;AAAA,QACHiC,CAAA,EAAG2gB,MAAA,CAAkB5mB,IAAA,CAAKiG,CAAvB,EAA0BhG,EAAA,CAAGgG,CAA7B,EAAgCjC,CAAhC,CADA;AAAA,QAEHqC,CAAA,EAAGugB,MAAA,CAAkB5mB,IAAA,CAAKqG,CAAvB,EAA0BpG,EAAA,CAAGoG,CAA7B,EAAgCrC,CAAhC,CAFA;AAAA,QAGHsC,CAAA,EAAGsgB,MAAA,CAAkB5mB,IAAA,CAAKsG,CAAvB,EAA0BrG,EAAA,CAAGqG,CAA7B,EAAgCtC,CAAhC,CAHA;AAAA,QAIH+B,KAAA,EAAO6gB,MAAA,CAAkB5mB,IAAA,CAAK+F,KAAvB,EAA8B9F,EAAA,CAAG8F,KAAjC,EAAwC/B,CAAxC,CAJJ;AAAA,KAAA,CADgE;AAAA,CA9E3E;AAwFA,SAAS6iB,QAAT,CAAkBL,QAAlB,EAA6C;AAAA,IACzC,MAAM,CAACvgB,CAAD,EAAII,CAAJ,EAAOC,CAAP,CAAA,GAAYigB,QAAA,CAASC,QAAT,CAAlB,CADyC;AAAA,IAEzC,MAAMnhB,CAAA,GAAIZ,IAAA,CAAKuU,KAAL,CAAW1S,CAAX,EAAcD,CAAd,CAAmB6f,GAAAA,OAA7B,CAFyC;AAAA,IAGlC,OAAA;AAAA,QACH7gB,CAAA,EAAGA,CAAA,GAAI,CAAJ,GAAQA,CAAA,GAAI,GAAZ,GAAkBA,CADlB;AAAA,QAEH4I,CAAA,EAAGxJ,IAAA,CAAKgU,IAAL,CAAUpS,CAAA,GAAIA,CAAJ,GAAQC,CAAA,GAAIA,CAAtB,CAFA;AAAA,QAGHL,CAHG;AAAA,QAIHF,KAAA,EAAOygB,QAAA,CAASngB,CAJb;AAAA,KAAA,CAHkC;AAAA,CAxF7C;AAmGA,SAASygB,QAAT,CAAkBC,QAAlB,EAA6C;AAAA,IACnC,MAAA1hB,CAAA,GAAI0hB,QAAA,CAAS1hB,CAAT,GAAa4gB,OAAjB,EACFhY,CAAA,GAAI8Y,QAAA,CAAS9Y,CADX,EAEFhI,CAAA,GAAI8gB,QAAA,CAAS9gB,CAFX,CADmC;AAAA,IAIzC,OAAOwgB,QAAA,CAAS;AAAA,QACZxgB,CADY;AAAA,QAEZI,CAAA,EAAG5B,IAAA,CAAK6T,GAAL,CAASjT,CAAT,IAAc4I,CAFL;AAAA,QAGZ3H,CAAA,EAAG7B,IAAA,CAAK0U,GAAL,CAAS9T,CAAT,IAAc4I,CAHL;AAAA,QAIZlI,KAAA,EAAOghB,QAAA,CAAShhB,KAJJ;AAAA,KAAT,CAAP,CAJyC;AAAA,CAnG7C;AA+GA,SAASihB,cAAT,CAAwB3gB,CAAxB,EAAmCC,CAAnC,EAA8CtC,CAA9C,EAAyD;AAAA,IACrD,MAAM2C,CAAA,GAAIL,CAAA,GAAID,CAAd,CADqD;AAAA,IAErD,OAAOA,CAAA,GAAIrC,CAAA,IAAK2C,CAAA,GAAI,GAAJ,IAAWA,CAAA,GAAI,CAAA,GAAf,GAAsBA,CAAA,GAAI,GAAA,GAAMlC,IAAA,CAAKC,KAAL,CAAWiC,CAAA,GAAI,GAAf,CAAhC,GAAsDA,CAAtD,CAAhB,CAFqD;AAAA,CA/GzD;AAoHA,SAASsgB,cAAT,CAAwBjnB,IAAxB,EAAwCC,EAAxC,EAAsD+D,CAAtD,EAA2E;AAAA,IAChE,OAAA;AAAA,QACHqB,CAAA,EAAG2hB,cAAA,CAAehnB,IAAA,CAAKqF,CAApB,EAAuBpF,EAAA,CAAGoF,CAA1B,EAA6BrB,CAA7B,CADA;AAAA,QAEHiK,CAAA,EAAG2Y,MAAA,CAAkB5mB,IAAA,CAAKiO,CAAvB,EAA0BhO,EAAA,CAAGgO,CAA7B,EAAgCjK,CAAhC,CAFA;AAAA,QAGHiC,CAAA,EAAG2gB,MAAA,CAAkB5mB,IAAA,CAAKiG,CAAvB,EAA0BhG,EAAA,CAAGgG,CAA7B,EAAgCjC,CAAhC,CAHA;AAAA,QAIH+B,KAAA,EAAO6gB,MAAA,CAAkB5mB,IAAA,CAAK+F,KAAvB,EAA8B9F,EAAA,CAAG8F,KAAjC,EAAwC/B,CAAxC,CAJJ;AAAA,KAAA,CADgE;AAAA,CApH3E;AA6HO,MAAMkjB,GAAA,GAAM;AAAA,IACfC,OAAA,EAASZ,QADM;AAAA,IAEfhmB,OAAA,EAASkmB,QAFM;AAAA,IAGfjN,WAAA,EAAamN,cAHE;AAAA,CAAZ,CA7HP;AAmIO,MAAMS,GAAA,GAAM;AAAA,IACfD,OAAA,EAASN,QADM;AAAA,IAEftmB,OAAA,EAASumB,QAFM;AAAA,IAGftN,WAAA,EAAayN,cAHE;AAAA,CAAZ;;;;;;;;AC5GP,MAAMI,WAAN,CAAwC;AAAA,IASpCjlB,WAAA,CAAYnD,IAAZ,EAAwBqoB,QAAxB,EAAyFC,aAAzF,EAA2H5mB,KAA3H,EAA8Ib,KAA9I,EAA4J;AAAA,QACxJ,IAAKb,CAAAA,IAAL,GAAYA,IAAZ,CADwJ;AAAA,QAExJ,IAAKqoB,CAAAA,QAAL,GAAgBA,QAAhB,CAFwJ;AAAA,QAGxJ,IAAKC,CAAAA,aAAL,GAAqBA,aAArB,CAHwJ;AAAA,QAIxJ,IAAK5mB,CAAAA,KAAL,GAAaA,KAAb,CAJwJ;AAAA,QAMxJ,IAAKmjB,CAAAA,MAAL,GAAc,EAAd,CANwJ;AAAA,QAOxJ,IAAKC,CAAAA,OAAL,GAAe,EAAf,CAPwJ;AAAA,QAQxJ,KAAA,MAAW,CAACC,KAAD,EAAQthB,UAAR,CAAX,IAAkC5C,KAAlC,EAAyC;AAAA,YAChC,KAAAgkB,MAAA,CAAO7mB,IAAP,CAAY+mB,KAAZ,CADgC,CAAA;AAAA,YAEhC,KAAAD,OAAA,CAAQ9mB,IAAR,CAAayF,UAAb,CAFgC,CAAA;AAAA,SAR+G;AAAA,KATxH;AAAA,IAuBpC,OAAO8kB,mBAAP,CACID,aADJ,EAEI5mB,KAFJ,EAGI8mB,KAHJ,EAIIC,KAJJ,EAKU;AAAA,QACN,IAAI1jB,CAAA,GAAI,CAAR,CADM;AAAA,QAEF,IAAAujB,aAAA,CAAc9kB,IAAd,KAAuB,aAAvB,EAAsC;AAAA,YACtCuB,CAAA,GAAI2jB,wBAAA,CAAyBhnB,KAAzB,EAAgC4mB,aAAA,CAAcK,IAA9C,EAAoDH,KAApD,EAA2DC,KAA3D,CAAJ,CADsC;AAAA,SAAtC,MAEJ,IAAWH,aAAA,CAAc9kB,IAAd,KAAuB,QAAlC,EAA4C;AAAA,YACxCuB,CAAA,GAAI2jB,wBAAA,CAAyBhnB,KAAzB,EAAgC,CAAhC,EAAmC8mB,KAAnC,EAA0CC,KAA1C,CAAJ,CADwC;AAAA,SAA5C,MAEA,IAAWH,aAAA,CAAc9kB,IAAd,KAAuB,cAAlC,EAAkD;AAAA,YAC9C,MAAMwL,CAAA,GAAIsZ,aAAA,CAAcM,aAAxB,CAD8C;AAAA,YAE9C,MAAMC,EAAA,GAAK,IAAIvD,UAAJ,CAAetW,CAAA,CAAE,CAAF,CAAf,EAAqBA,CAAA,CAAE,CAAF,CAArB,EAA2BA,CAAA,CAAE,CAAF,CAA3B,EAAiCA,CAAA,CAAE,CAAF,CAAjC,CAAX,CAF8C;AAAA,YAG9CjK,CAAA,GAAI8jB,EAAA,CAAGnC,KAAH,CAASgC,wBAAA,CAAyBhnB,KAAzB,EAAgC,CAAhC,EAAmC8mB,KAAnC,EAA0CC,KAA1C,CAAT,CAAJ,CAH8C;AAAA,SAN5C;AAAA,QAWC,OAAA1jB,CAAA,CAXD;AAAA,KA5B0B;AAAA,IA0CpC,OAAOvH,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAoG;AAAA,QAChG,IAAI,CAAC0b,QAAD,EAAWC,aAAX,EAA0B5mB,KAA1B,EAAiC,GAAA,IAAjC,CAA4CgL,GAAAA,IAAhD,CADgG;AAAA,QAGhG,IAAI,CAAC5O,KAAA,CAAMC,OAAN,CAAcuqB,aAAd,CAAD,IAAiCA,aAAA,CAAcnrB,MAAd,KAAyB,CAA9D,EAAiE;AAAA,YAEtD,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAA,0CAAA,CAAd,EAA4D,CAA5D,CAAA,CAFsD;AAAA,SAH+B;AAAA,QAQ5F,IAAA0b,aAAA,CAAc,CAAd,CAAA,KAAqB,QAArB,EAA+B;AAAA,YACfA,aAAA,GAAA,EAAC9kB,IAAA,EAAM,QAAP,EAAA,CADe;AAAA,SAA/B,MAEO,IAAA8kB,aAAA,CAAc,CAAd,CAAA,KAAqB,aAArB,EAAoC;AAAA,YACrC,MAAAK,IAAA,GAAOL,aAAA,CAAc,CAAd,CAAP,CADqC;AAAA,YAE3C,IAAI,OAAOK,IAAP,KAAgB,QAApB;AAAA,gBAEI,OAAOhc,OAAA,CAAQC,KAAR,CAAc,CAAsD,kDAAtD,CAAd,EAAoE,CAApE,EAAuE,CAAvE,CAAP,CAJuC;AAAA,YAK3B0b,aAAA,GAAA;AAAA,gBACZ9kB,IAAA,EAAM,aADM;AAAA,gBAEZmlB,IAFY;AAAA,aAAA,CAL2B;AAAA,SAApC,MASA,IAAAL,aAAA,CAAc,CAAd,CAAA,KAAqB,cAArB,EAAqC;AAAA,YACtC,MAAAM,aAAA,GAAgBN,aAAA,CAAc7rB,KAAd,CAAoB,CAApB,CAAhB,CADsC;AAAA,YAE5C,IACImsB,aAAA,CAAczrB,MAAd,KAAyB,CAAzB,IACAyrB,aAAA,CAAcxjB,IAAd,CAAmBL,CAAA,IAAK,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAA,GAAI,CAA7B,IAAkCA,CAAA,GAAI,CAA9D,CAFJ,EAGE;AAAA,gBAES,OAAA4H,OAAA,CAAQC,KAAR,CAAc,yFAAd,EAAyG,CAAzG,CAAA,CAFT;AAAA,aAL0C;AAAA,YAU5B0b,aAAA,GAAA;AAAA,gBACZ9kB,IAAA,EAAM,cADM;AAAA,gBAEZolB,aAFY;AAAA,aAAA,CAV4B;AAAA,SAArC,MAcJ;AAAA,YAEI,OAAAjc,OAAA,CAAQC,KAAR,CAAc,CAAA,2BAAA,GAA8BJ,MAAA,CAAO8b,aAAA,CAAc,CAAd,CAAP,CAA9B,EAAA,CAAd,EAAwE,CAAxE,EAA2E,CAA3E,CAAA,CAFJ;AAAA,SAjCyF;AAAA,QAsC5F,IAAA5b,IAAA,CAAKvP,MAAL,GAAc,CAAd,GAAkB,CAAlB,EAAqB;AAAA,YAErB,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,8CAAA,GAAiDF,IAAA,CAAKvP,MAAL,GAAc,CAA/D,EAAmE,CAAnE,CAAd,CAAP,CAFqB;AAAA,SAtCuE;AAAA,QA2ChG,IAAK,CAAAuP,IAAA,CAAKvP,MAAL,GAAc,CAAd,IAAmB,CAAxB,KAA8B,CAA9B,EAAiC;AAAA,YAEtB,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAuC,qCAAvC,CAAd,CAAA,CAFsB;AAAA,SA3C+D;AAAA,QAgDhGlL,KAAA,GAAQiL,OAAA,CAAQnP,KAAR,CAAckE,KAAd,EAAqB,CAArB,EAAwBoC,UAAxB,CAAR,CAhDgG;AAAA,QAiD5F,IAAA,CAACpC,KAAD;AAAA,YAAe,OAAA,IAAA,CAjD6E;AAAA,QAmDhG,MAAMb,KAAA,GAAe,EAArB,CAnDgG;AAAA,QAqDhG,IAAImkB,UAAA,GAAoB,IAAxB,CArDgG;AAAA,QAsD5F,IAAAqD,QAAA,KAAa,iBAAb,IAAkCA,QAAA,KAAa,iBAA/C,EAAkE;AAAA,YACrDrD,UAAA,GAAA/gB,SAAA,CADqD;AAAA,SAAlE,UAEO0I,OAAA,CAAQE,YAAR,IAAwBF,OAAA,CAAQE,YAAR,CAAqBhJ,IAArB,KAA8B,SAAS;AAAA,YACtEmhB,UAAA,GAAarY,OAAA,CAAQE,YAArB,CADsE;AAAA,SAxDsB;AAAA,QA4DhG,KAAA,IAASzN,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI0pB,IAAA,CAAK3rB,MAAzB,EAAiCiC,CAAA,IAAK,CAAtC,EAAyC;AAAA,YAC/B,MAAA2lB,KAAA,GAAQ+D,IAAA,CAAK1pB,CAAL,CAAR,CAD+B;AAAA,YAE/B,MAAAf,KAAA,GAAQyqB,IAAA,CAAK1pB,CAAA,GAAI,CAAT,CAAR,CAF+B;AAAA,YAIrC,MAAM6lB,QAAA,GAAW7lB,CAAA,GAAI,CAArB,CAJqC;AAAA,YAKrC,MAAM8lB,QAAA,GAAW9lB,CAAA,GAAI,CAArB,CALqC;AAAA,YAOjC,IAAA,OAAO2lB,KAAP,KAAiB,QAAjB,EAA2B;AAAA,gBAEpB,OAAApY,OAAA,CAAQC,KAAR,CAAc,gJAAd,EAAgKqY,QAAhK,CAAA,CAFoB;AAAA,aAPM;AAAA,YAYjC,IAAApkB,KAAA,CAAM1D,MAAN,IAAgB0D,KAAA,CAAMA,KAAA,CAAM1D,MAAN,GAAe,CAArB,CAAA,CAAwB,CAAxB,CAAA,IAA8B4nB,KAA9C,EAAqD;AAAA,gBAE9C,OAAApY,OAAA,CAAQC,KAAR,CAAc,kHAAd,EAAkIqY,QAAlI,CAAA,CAF8C;AAAA,aAZpB;AAAA,YAiBrC,MAAM3X,MAAA,GAASX,OAAA,CAAQnP,KAAR,CAAca,KAAd,EAAqB6mB,QAArB,EAA+BF,UAA/B,CAAf,CAjBqC;AAAA,YAkBjC,IAAA,CAAC1X,MAAD;AAAA,gBAAgB,OAAA,IAAA,CAlBiB;AAAA,YAmBrC0X,UAAA,GAAaA,UAAA,IAAc1X,MAAA,CAAOtN,IAAlC,CAnBqC;AAAA,YAoBrCa,KAAA,CAAM7C,IAAN,CAAW;AAAA,gBAAC+mB,KAAD;AAAA,gBAAQzX,MAAR;AAAA,aAAX,CApBqC,CAAA;AAAA,SA5DuD;AAAA,QAmFhG,IAAI0X,UAAA,CAAWnhB,IAAX,KAAoB,QAApB,IACAmhB,UAAA,CAAWnhB,IAAX,KAAoB,OADpB,IAEA,EACImhB,UAAA,CAAWnhB,IAAX,KAAoB,OAApB,IACAmhB,UAAA,CAAWvgB,QAAX,CAAoBZ,IAApB,KAA6B,QAD7B,IAEA,OAAOmhB,UAAA,CAAWtgB,CAAlB,KAAwB,QAFxB,CAHR,EAOE;AAAA,YAEE,OAAOiI,OAAA,CAAQC,KAAR,CAAc,CAAA,KAAA,GAAQjI,UAAA,CAASqgB,UAAT,CAAR,EAAqD,uBAArD,CAAd,CAAP,CAFF;AAAA,SA1F8F;AAAA,QAgGhG,OAAO,IAAIoD,WAAJ,CAAgBpD,UAAhB,EAA6BqD,QAA7B,EAA+CC,aAA/C,EAA8D5mB,KAA9D,EAAqEb,KAArE,CAAP,CAhGgG;AAAA,KA1ChE;AAAA,IA6IpCiM,QAAA,CAASS,GAAT,EAAwC;AAAA,QACpC,MAAMsX,MAAA,GAAS,IAAA,CAAKA,MAApB,CADoC;AAAA,QAEpC,MAAMC,OAAA,GAAU,IAAA,CAAKA,OAArB,CAFoC;AAAA,QAIhC,IAAAD,MAAA,CAAO1nB,MAAP,KAAkB,CAAlB,EAAqB;AAAA,YACrB,OAAO2nB,OAAA,CAAQ,CAAR,EAAWhY,QAAX,CAAoBS,GAApB,CAAP,CADqB;AAAA,SAJW;AAAA,QAQpC,MAAMlP,KAAA,GAAS,IAAKqD,CAAAA,KAAL,CAAWoL,QAAX,CAAoBS,GAApB,CAAf,CARoC;AAAA,QAShC,IAAAlP,KAAA,IAASwmB,MAAA,CAAO,CAAP,CAAT,EAAoB;AAAA,YACpB,OAAOC,OAAA,CAAQ,CAAR,EAAWhY,QAAX,CAAoBS,GAApB,CAAP,CADoB;AAAA,SATY;AAAA,QAapC,MAAM4X,SAAA,GAAYN,MAAA,CAAO1nB,MAAzB,CAboC;AAAA,QAcpC,IAAIkB,KAAA,IAASwmB,MAAA,CAAOM,SAAA,GAAY,CAAnB,CAAb,EAAoC;AAAA,YAChC,OAAOL,OAAA,CAAQK,SAAA,GAAY,CAApB,CAAA,CAAuBrY,QAAvB,CAAgCS,GAAhC,CAAP,CADgC;AAAA,SAdA;AAAA,QAkB9B,MAAA5P,KAAA,GAAQ0mB,yBAAA,CAA0BQ,MAA1B,EAAkCxmB,KAAlC,CAAR,CAlB8B;AAAA,QAmB9B,MAAAmqB,KAAA,GAAQ3D,MAAA,CAAOlnB,KAAP,CAAR,CAnB8B;AAAA,QAoB9B,MAAA8qB,KAAA,GAAQ5D,MAAA,CAAOlnB,KAAA,GAAQ,CAAf,CAAR,CApB8B;AAAA,QAqBpC,MAAMoH,CAAA,GAAIqjB,WAAA,CAAYG,mBAAZ,CAAgC,IAAA,CAAKD,aAArC,EAAoDjqB,KAApD,EAA2DmqB,KAA3D,EAAkEC,KAAlE,CAAV,CArBoC;AAAA,QAuBpC,MAAMM,WAAA,GAAcjE,OAAA,CAAQnnB,KAAR,CAAA,CAAemP,QAAf,CAAwBS,GAAxB,CAApB,CAvBoC;AAAA,QAwBpC,MAAMyb,WAAA,GAAclE,OAAA,CAAQnnB,KAAA,GAAQ,CAAhB,CAAmBmP,CAAAA,QAAnB,CAA4BS,GAA5B,CAApB,CAxBoC;AAAA,QA0BhC,IAAA,IAAA,CAAK8a,QAAL,KAAkB,aAAlB,EAAiC;AAAA,YACzB,OAAA9N,aAAA,CAAY,IAAKva,CAAAA,IAAL,CAAU6D,IAAV,CAAe0C,WAAf,EAAZ,EAAkDwiB,WAAlD,EAA+DC,WAA/D,EAA4EjkB,CAA5E,CAAA,CADyB;AAAA,SAAjC,MAEJ,IAAW,IAAA,CAAKsjB,QAAL,KAAkB,iBAA7B,EAAgD;AAAA,YAC5C,OAAOF,GAAA,CAAI7mB,OAAJ,CAAY6mB,GAAA,CAAI5N,WAAJ,CAAgB4N,GAAA,CAAID,OAAJ,CAAYa,WAAZ,CAAhB,EAA0CZ,GAAA,CAAID,OAAJ,CAAYc,WAAZ,CAA1C,EAAoEjkB,CAApE,CAAZ,CAAP,CAD4C;AAAA,SAAhD,MAEO;AAAA,YACH,OAAOkjB,GAAA,CAAI3mB,OAAJ,CAAY2mB,GAAA,CAAI1N,WAAJ,CAAgB0N,GAAA,CAAIC,OAAJ,CAAYa,WAAZ,CAAhB,EAA0Cd,GAAA,CAAIC,OAAJ,CAAYc,WAAZ,CAA1C,EAAoEjkB,CAApE,CAAZ,CAAP,CADG;AAAA,SA9B6B;AAAA,KA7IJ;AAAA,IAgLpCgI,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAK9L,CAAAA,KAAR,CADmC,CAAA;AAAA,QAExB,KAAA+B,MAAAA,UAAA,IAAc,IAAA,CAAKqhB,OAAnB,EAA4B;AAAA,YACnCtX,EAAA,CAAG/J,UAAH,CADmC,CAAA;AAAA,SAFJ;AAAA,KAhLH;AAAA,IAuLpCuJ,aAAA,GAAyB;AAAA,QACrB,OAAO,IAAA,CAAK8X,OAAL,CAAarX,KAAb,CAA0B2X,GAAP,IAAOA,GAAA,CAAIpY,aAAJ,EAA1B,CAAP,CADqB;AAAA,KAvLW;AAAA,IA2LpCnB,SAAA,GAAkC;AAAA,QAC1B,IAAAyc,aAAA,CAD0B;AAAA,QAE1B,IAAA,IAAKA,CAAAA,aAAL,CAAmB9kB,IAAnB,KAA4B,QAA5B,EAAsC;AAAA,YACtC8kB,aAAA,GAAgB,CAAC,QAAD,CAAhB,CADsC;AAAA,SAAtC,MAEO,IAAA,IAAKA,CAAAA,aAAL,CAAmB9kB,IAAnB,KAA4B,aAA5B,EAA2C;AAAA,YAC7C,IAAA,IAAK8kB,CAAAA,aAAL,CAAmBK,IAAnB,KAA4B,CAA5B,EAA+B;AAAA,gBAChCL,aAAA,GAAgB,CAAC,QAAD,CAAhB,CADgC;AAAA,aAA/B,MAEE;AAAA,gBACHA,aAAA,GAAgB;AAAA,oBAAC,aAAD;AAAA,oBAAgB,IAAA,CAAKA,aAAL,CAAmBK,IAAnC;AAAA,iBAAhB,CADG;AAAA,aAH2C;AAAA,SAA3C,MAMJ;AAAA,YAEHL,aAAA,GAAgB,CAAC,cAAD,CAAkBvlB,CAAAA,MAAlB,CAAyB,IAAA,CAAKulB,aAAL,CAAmBM,aAA5C,CAAhB,CAFG;AAAA,SAVuB;AAAA,QAexB,MAAA9c,UAAA,GAAa;AAAA,YAAC,KAAKuc,QAAN;AAAA,YAAgBC,aAAhB;AAAA,YAA+B,IAAK5mB,CAAAA,KAAL,CAAWmK,SAAX,EAA/B;AAAA,SAAb,CAfwB;AAAA,QAiB9B,KAAA,IAASzM,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI,IAAA,CAAKylB,MAAL,CAAY1nB,MAAhC,EAAwCiC,CAAA,EAAxC,EAA6C;AAAA,YAC9B0M,UAAA,CAAA9N,IAAA,CACP,IAAA,CAAK6mB,MAAL,CAAYzlB,CAAZ,CADO,EAEP,KAAK0lB,OAAL,CAAa1lB,CAAb,CAAgByM,CAAAA,SAAhB,EAFO,CAD8B,CAAA;AAAA,SAjBf;AAAA,QAuBvB,OAAAC,UAAA,CAvBuB;AAAA,KA3LE;AAAA,CAvBxC;AAgRA,SAAS4c,wBAAT,CAAkChnB,KAAlC,EAAiDinB,IAAjD,EAA+DM,UAA/D,EAAmFC,UAAnF,EAAuG;AAAA,IACnG,MAAMC,UAAA,GAAaD,UAAA,GAAaD,UAAhC,CADmG;AAAA,IAEnG,MAAMG,QAAA,GAAW1nB,KAAA,GAAQunB,UAAzB,CAFmG;AAAA,IAInG,IAAIE,UAAA,KAAe,CAAnB,EAAsB;AAAA,QACX,OAAA,CAAA,CADW;AAAA,KAAtB,MAEA,IAAWR,IAAA,KAAS,CAApB,EAAuB;AAAA,QACnB,OAAOS,QAAA,GAAWD,UAAlB,CADmB;AAAA,KAAvB,MAEO;AAAA,QACK,OAAA,CAAA3jB,IAAA,CAAKqE,GAAL,CAAS8e,IAAT,EAAeS,QAAf,CAAA,GAA2B,CAA3B,KAAiC5jB,IAAA,CAAKqE,GAAL,CAAS8e,IAAT,EAAeQ,UAAf,CAAA,GAA6B,CAA7B,CAAjC,CADL;AAAA,KAR4F;AAAA;;ACvQvG,MAAME,QAAN,CAAqC;AAAA,IAIjClmB,WAAA,CAAYnD,IAAZ,EAAwB0M,IAAxB,EAAiD;AAAA,QAC7C,IAAK1M,CAAAA,IAAL,GAAYA,IAAZ,CAD6C;AAAA,QAE7C,IAAK0M,CAAAA,IAAL,GAAYA,IAAZ,CAF6C;AAAA,KAJhB;AAAA,IASjC,OAAOlP,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAiG;AAAA,QACzF,IAAAD,IAAA,CAAKvP,MAAL,GAAc,CAAd,EAAiB;AAAA,YAEV,OAAAwP,OAAA,CAAQC,KAAR,CAAc,oCAAd,CAAA,CAFU;AAAA,SADwE;AAAA,QAK7F,IAAIoY,UAAA,GAAoB,IAAxB,CAL6F;AAAA,QAM7F,MAAMnY,YAAA,GAAeF,OAAA,CAAQE,YAA7B,CAN6F;AAAA,QAOzF,IAAAA,YAAA,IAAgBA,YAAA,CAAahJ,IAAb,KAAsB,OAAtC,EAA+C;AAAA,YAClCmhB,UAAA,GAAAnY,YAAA,CADkC;AAAA,SAP0C;AAAA,QAU7F,MAAMiF,UAAA,GAAa,EAAnB,CAV6F;AAAA,QAY7F,KAAA,MAAWpE,GAAX,IAAkBhB,IAAA,CAAKjQ,KAAL,CAAW,CAAX,CAAlB,EAAiC;AAAA,YAC7B,MAAM6Q,MAAA,GAASX,OAAA,CAAQnP,KAAR,CAAckQ,GAAd,EAAmB,CAAA,GAAIoE,UAAA,CAAW3U,MAAlC,EAA0C6nB,UAA1C,EAAsD,KAAW,CAAjE,EAAiE,EAAClB,cAAA,EAAgB,MAAjB,EAAjE,CAAf,CAD6B;AAAA,YAEzB,IAAA,CAACxW,MAAD;AAAA,gBAAgB,OAAA,IAAA,CAFS;AAAA,YAG7B0X,UAAA,GAAaA,UAAA,IAAc1X,MAAA,CAAOtN,IAAlC,CAH6B;AAAA,YAI7B8R,UAAA,CAAW9T,IAAX,CAAgBsP,MAAhB,CAJ6B,CAAA;AAAA,SAZ4D;AAAA,QAyBvF,MAAAgc,eAAA,GAAkBzc,YAAA,IACpBiF,UAAA,CAAW1M,IAAX,IAAgB,IAAOP,YAAA,CAAagI,YAAb,EAA2Ba,GAAA,CAAI1N,IAA/B,CAAvB,CADE,CAzBuF;AAAA,QA4BtF,OAAAspB,eAAA,GACH,IAAID,QAAJ,CAAallB,SAAb,EAAwB2N,UAAxB,CADG,GAEH,IAAIuX,QAAJ,CAAcrE,UAAd,EAAkClT,UAAlC,CAFG,CA5BsF;AAAA,KAThE;AAAA,IA0CjChF,QAAA,CAASS,GAAT,EAAsC;AAAA,QAClC,IAAI9O,MAAA,GAAS,IAAb,CADkC;AAAA,QAElC,IAAI8qB,QAAA,GAAW,CAAf,CAFkC;AAAA,QAG9B,IAAAC,UAAA,CAH8B;AAAA,QAIvB,KAAA9b,MAAAA,GAAA,IAAO,IAAA,CAAKhB,IAAZ,EAAkB;AAAA,YACzB6c,QAAA,EADyB,CAAA;AAAA,YAEhB9qB,MAAA,GAAAiP,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAA,CAFgB;AAAA,YAKzB,IAAI9O,MAAA,IAAUA,MAAA,YAAkBsN,aAA5B,IAA6C,CAACtN,MAAA,CAAOwN,SAAzD,EAAoE;AAAA,gBAEhE,IAAI,CAACud,UAAL,EAAiB;AAAA,oBACAA,UAAA,GAAA/qB,MAAA,CADA;AAAA,iBAF+C;AAAA,gBAKvDA,MAAA,GAAA,IAAA,CALuD;AAAA,gBAO5D,IAAA8qB,QAAA,KAAa,KAAK7c,IAAL,CAAUvP,MAAvB,EAA+B;AAAA,oBACxB,OAAAqsB,UAAA,CADwB;AAAA,iBAP6B;AAAA,aAL3C;AAAA,YAiBzB,IAAI/qB,MAAA,KAAW,IAAf;AAAA,gBAAqB,MAjBI;AAAA,SAJK;AAAA,QAuB3B,OAAAA,MAAA,CAvB2B;AAAA,KA1CL;AAAA,IAoEjCsO,SAAA,CAAUS,EAAV,EAAuC;AAAA,QAC9B,KAAAd,IAAA,CAAKxM,OAAL,CAAasN,EAAb,CAD8B,CAAA;AAAA,KApEN;AAAA,IAwEjCR,aAAA,GAAyB;AAAA,QACrB,OAAO,IAAA,CAAKN,IAAL,CAAUe,KAAV,CAAuBC,GAAP,IAAOA,GAAA,CAAIV,aAAJ,EAAvB,CAAP,CADqB;AAAA,KAxEQ;AAAA,IA4EjCnB,SAAA,GAAkC;AAAA,QACxB,MAAAC,UAAA,GAAa,CAAC,UAAD,CAAb,CADwB;AAAA,QAG9B,IAAKiB,CAAAA,SAAL,CAAwBsC,KAAT,IAAS;AAAA,YAAavD,UAAA,CAAA9N,IAAA,CAAKqR,KAAA,CAAMxD,SAAN,EAAL,CAAb,CAAA;AAAA,SAAxB,CAH8B,CAAA;AAAA,QAIvB,OAAAC,UAAA,CAJuB;AAAA,KA5ED;AAAA;;ACJrC,MAAM2d,GAAN,CAAgC;AAAA,IAK5BtmB,WAAA,CAAYI,QAAZ,EAAmD9E,MAAnD,EAAuE;AAAA,QACnE,KAAKuB,IAAL,GAAYvB,MAAA,CAAOuB,IAAnB,CADmE;AAAA,QAEnE,IAAA,CAAKuD,QAAL,GAAgB,EAAA,CAAGR,MAAH,CAAUQ,QAAV,CAAhB,CAFmE;AAAA,QAGnE,IAAK9E,CAAAA,MAAL,GAAcA,MAAd,CAHmE;AAAA,KAL3C;AAAA,IAW5BqO,QAAA,CAASS,GAAT,EAAsC;AAAA,QAC3B,OAAA,KAAK9O,MAAL,CAAYqO,QAAZ,CAAqBS,GAArB,CAAA,CAD2B;AAAA,KAXV;AAAA,IAe5BR,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACxB,KAAAkc,MAAAA,OAAA,IAAW,IAAA,CAAKnmB,QAAhB,EAA0B;AAAA,YAC9BiK,EAAA,CAAAkc,OAAA,CAAQ,CAAR,CAAA,CAD8B,CAAA;AAAA,SADF;AAAA,QAInClc,EAAA,CAAG,IAAK/O,CAAAA,MAAR,CAJmC,CAAA;AAAA,KAfX;AAAA,IAsB5B,OAAOjB,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA4F;AAAA,QACxF,IAAID,IAAA,CAAKvP,MAAL,GAAc,CAAlB;AAAA,YAEI,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,yCAAA,GAA4CF,IAAA,CAAKvP,MAAL,GAAc,CAA1D,EAAsE,SAAtE,CAAd,CAAP,CAHoF;AAAA,QAKxF,MAAMoG,QAAA,GAAwC,EAA9C,CALwF;AAAA,QAMxF,KAAA,IAASnE,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsN,IAAA,CAAKvP,MAAL,GAAc,CAAlC,EAAqCiC,CAAA,IAAK,CAA1C,EAA6C;AAAA,YACnC,MAAAoE,IAAA,GAAOkJ,IAAA,CAAKtN,CAAL,CAAP,CADmC;AAAA,YAGrC,IAAA,OAAOoE,IAAP,KAAgB,QAAhB,EAA0B;AAAA,gBAE1B,OAAOmJ,OAAA,CAAQC,KAAR,CAAc,CAAA,2BAAA,GAA8B,OAAOpJ,IAArC,WAAA,CAAd,EAAoEpE,CAApE,CAAP,CAF0B;AAAA,aAHW;AAAA,YAQrC,IAAA,eAAgB8jB,CAAAA,IAAhB,CAAqB1f,IAArB,CAAA,EAA4B;AAAA,gBAErB,OAAAmJ,OAAA,CAAQC,KAAR,CAAc,CAAA,gEAAA,CAAd,EAAkFxN,CAAlF,CAAA,CAFqB;AAAA,aARS;AAAA,YAanC,MAAAf,KAAA,GAAQsO,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKtN,CAAA,GAAI,CAAT,CAAd,EAA2BA,CAAA,GAAI,CAA/B,CAAR,CAbmC;AAAA,YAcrC,IAAA,CAACf,KAAD;AAAA,gBAAe,OAAA,IAAA,CAdsB;AAAA,YAgBzCkF,QAAA,CAASvF,IAAT,CAAc;AAAA,gBAACwF,IAAD;AAAA,gBAAOnF,KAAP;AAAA,aAAd,CAhByC,CAAA;AAAA,SAN2C;AAAA,QAyBxF,MAAMI,MAAA,GAASkO,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKA,IAAA,CAAKvP,MAAL,GAAc,CAAnB,CAAd,EAAqCuP,IAAA,CAAKvP,MAAL,GAAc,CAAnD,EAAsDwP,OAAA,CAAQE,YAA9D,EAA4EtJ,QAA5E,CAAf,CAzBwF;AAAA,QA0BpF,IAAA,CAAC9E,MAAD;AAAA,YAAgB,OAAA,IAAA,CA1BoE;AAAA,QA4BjF,OAAA,IAAIgrB,GAAJ,CAAQlmB,QAAR,EAAkB9E,MAAlB,CAAA,CA5BiF;AAAA,KAtBhE;AAAA,IAqD5BuO,aAAA,GAAyB;AAAA,QACd,OAAA,IAAKvO,CAAAA,MAAL,CAAYuO,aAAZ,EAAA,CADc;AAAA,KArDG;AAAA,IAyD5BnB,SAAA,GAAkC;AAAA,QACxB,MAAAC,UAAA,GAAa,CAAC,KAAD,CAAb,CADwB;AAAA,QAE9B,KAAA,MAAW,CAACtI,IAAD,EAAOmgB,IAAP,CAAX,IAA2B,IAAKpgB,CAAAA,QAAhC,EAA0C;AAAA,YAEtCuI,UAAA,CAAW9N,IAAX,CAAgBwF,IAAhB,EAAsBmgB,IAAA,CAAK9X,SAAL,EAAtB,CAFsC,CAAA;AAAA,SAFZ;AAAA,QAO9BC,UAAA,CAAW9N,IAAX,CAAgB,KAAKS,MAAL,CAAYoN,SAAZ,EAAhB,CAP8B,CAAA;AAAA,QAQvB,OAAAC,UAAA,CARuB;AAAA,KAzDN;AAAA;;ACIhC,MAAM6d,EAAN,CAA+B;AAAA,IAK3BxmB,WAAA,CAAYnD,IAAZ,EAAwBrC,KAAxB,EAA2C+D,KAA3C,EAA8D;AAAA,QAC1D,IAAK1B,CAAAA,IAAL,GAAYA,IAAZ,CAD0D;AAAA,QAE1D,IAAKrC,CAAAA,KAAL,GAAaA,KAAb,CAF0D;AAAA,QAG1D,IAAK+D,CAAAA,KAAL,GAAaA,KAAb,CAH0D;AAAA,KALnC;AAAA,IAW3B,OAAOlE,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA2F;AAAA,QACvF,IAAID,IAAA,CAAKvP,MAAL,KAAgB,CAApB;AAAA,YAEI,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,gCAAA,GAAmCF,IAAA,CAAKvP,MAAL,GAAc,CAAjD,EAA6D,SAA7D,CAAd,CAAP,CAHmF;AAAA,QAKvF,MAAMQ,KAAA,GAAQgP,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0B5I,UAA1B,CAAd,CALuF;AAAA,QAMjF,MAAApC,KAAA,GAAQiL,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BlI,OAAA,CAAMmI,OAAA,CAAQE,YAAR,IAAwB1I,SAA9B,CAA1B,CAAR,CANiF;AAAA,QAQvF,IAAI,CAACxG,KAAD,IAAU,CAAC+D,KAAf;AAAA,YAA6B,OAAA,IAAA,CAR0D;AAAA,QAUvF,MAAMqD,CAAA,GAAgBrD,KAAA,CAAM1B,IAA5B,CAVuF;AAAA,QAWvF,OAAO,IAAI2pB,EAAJ,CAAO5kB,CAAA,CAAEN,QAAT,EAAmB9G,KAAnB,EAA0B+D,KAA1B,CAAP,CAXuF;AAAA,KAXhE;AAAA,IAyB3BoL,QAAA,CAASS,GAAT,EAAwC;AAAA,QACpC,MAAM5P,KAAA,GAAS,IAAKA,CAAAA,KAAL,CAAWmP,QAAX,CAAoBS,GAApB,CAAf,CADoC;AAAA,QAEpC,MAAM/I,MAAAA,GAAS,IAAK9C,CAAAA,KAAL,CAAWoL,QAAX,CAAoBS,GAApB,CAAf,CAFoC;AAAA,QAIpC,IAAI5P,KAAA,GAAQ,CAAZ,EAAe;AAAA,YACX,MAAM,IAAIsP,YAAJ,CAAiB,CAA8B,2BAA9B,GAA8BtP,KAA9B,EAA0C,KAA1C,CAAjB,CAAN,CADW;AAAA,SAJqB;AAAA,QAQhC,IAAAA,KAAA,GAAQ6G,MAAAA,CAAMrH,MAANqH,GAAe,CAAvB,EAA0B;AAAA,YACpB,MAAA,IAAIyI,YAAJ,CAAiB,CAA8B,2BAA9B,GAA8BtP,KAA9B,KAAA,GAAyC6G,MAAAA,CAAMrH,MAANqH,GAAe,CAAxD,EAA4D,CAA5D,CAAjB,CAAA,CADoB;AAAA,SARM;AAAA,QAYpC,IAAI7G,KAAA,KAAU6H,IAAA,CAAK2C,KAAL,CAAWxK,KAAX,CAAd,EAAiC;AAAA,YAC7B,OAAO6G,MAAAA,CAAM7G,KAAN6G,CAAP,CAD6B;AAAA,SAZG;AAAA,QAiB9B,MAAA+f,UAAA,GAAa/e,IAAA,CAAK2C,KAAL,CAAWxK,KAAX,CAAb,CAjB8B;AAAA,QAkB9B,MAAA6mB,UAAA,GAAahf,IAAA,CAAK+C,IAAL,CAAU5K,KAAV,CAAb,CAlB8B;AAAA,QAoB9B,MAAAsrB,UAAA,GAAazkB,MAAAA,CAAM+f,UAAN/f,CAAb,CApB8B;AAAA,QAqB9B,MAAA0kB,UAAA,GAAa1kB,MAAAA,CAAMggB,UAANhgB,CAAb,CArB8B;AAAA,QAuBpC,IAAI,OAAOykB,UAAP,KAAsB,QAAtB,IAAkC,OAAOC,UAAP,KAAsB,QAA5D,EAAsE;AAAA,YAClE,MAAM,IAAIjc,YAAJ,CAAiB,CAAyD,sDAAzD,GAAyDtP,KAAzD,EAAiE,CAAjE,CAAjB,CAAN,CADkE;AAAA,SAvBlC;AAAA,QA4BpC,MAAMisB,QAAA,GAAWjsB,KAAA,GAAQ4mB,UAAzB,CA5BoC;AAAA,QA6B7B,OAAA0E,UAAA,IAAkBW,CAAAA,GAAAA,QAAJ,CAAd,GAA8BV,UAAA,GAAaU,QAA3C,CA7B6B;AAAA,KAzBb;AAAA,IAyD3B7c,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAK7P,CAAAA,KAAR,CADmC,CAAA;AAAA,QAEnC6P,EAAA,CAAG,IAAK9L,CAAAA,KAAR,CAFmC,CAAA;AAAA,KAzDZ;AAAA,IA8D3BsL,aAAA,GAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KA9DE;AAAA,IAkE3BnB,SAAA,GAAkC;AAAA,QACvB,OAAA;AAAA,YAAC,IAAD;AAAA,YAAO,IAAKlO,CAAAA,KAAL,CAAWkO,SAAX,EAAP;AAAA,YAA+B,IAAKnK,CAAAA,KAAL,CAAWmK,SAAX,EAA/B;AAAA,SAAA,CADuB;AAAA,KAlEP;AAAA;;ACS/B,MAAMge,EAAN,CAA+B;AAAA,IAK3B1mB,WAAA,CAAY2mB,MAAZ,EAAgCC,QAAhC,EAAsD;AAAA,QAClD,IAAK/pB,CAAAA,IAAL,GAAYgE,WAAZ,CADkD;AAAA,QAElD,IAAK8lB,CAAAA,MAAL,GAAcA,MAAd,CAFkD;AAAA,QAGlD,IAAKC,CAAAA,QAAL,GAAgBA,QAAhB,CAHkD;AAAA,KAL3B;AAAA,IAW3B,OAAOvsB,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA2F;AAAA,QACnF,IAAAD,IAAA,CAAKvP,MAAL,KAAgB,CAAhB,EAAmB;AAAA,YAEnB,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,gCAAA,GAAmCF,IAAA,CAAKvP,MAAL,GAAc,CAAjD,EAA6D,SAA7D,CAAd,CAAP,CAFmB;AAAA,SADgE;AAAA,QAMvF,MAAM2sB,MAAA,GAASnd,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BvI,SAA1B,CAAf,CANuF;AAAA,QAQvF,MAAM4lB,QAAA,GAAWpd,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BvI,SAA1B,CAAjB,CARuF;AAAA,QAUvF,IAAI,CAAC2lB,MAAD,IAAW,CAACC,QAAhB;AAAA,YAAiC,OAAA,IAAA,CAVsD;AAAA,QAYnF,IAAA,CAAC9kB,WAAA,CAAY6kB,MAAA,CAAO9pB,IAAnB,EAAyB;AAAA,gBAACgE,WAAD;AAAA,gBAAcD,UAAd;AAAA,gBAA0BD,UAA1B;AAAA,gBAAsCF,QAAtC;AAAA,gBAAgDO,SAAhD;AAAA,aAAzB,CAAD,EAAuF;AAAA,YAEvF,OAAOwI,OAAA,CAAQC,KAAR,CAAc,CAAA,iFAAA,GAAoFjI,UAAA,CAASmlB,MAAA,CAAO9pB,IAAhB,CAApF,EAAmH,QAAnH,CAAd,CAAP,CAFuF;AAAA,SAZJ;AAAA,QAiBhF,OAAA,IAAI6pB,EAAJ,CAAOC,MAAP,EAAeC,QAAf,CAAA,CAjBgF;AAAA,KAXhE;AAAA,IA+B3Bjd,QAAA,CAASS,GAAT,EAA0C;AAAA,QACtC,MAAMuc,MAAA,GAAU,IAAKA,CAAAA,MAAL,CAAYhd,QAAZ,CAAqBS,GAArB,CAAhB,CADsC;AAAA,QAEtC,MAAMwc,QAAA,GAAY,IAAKA,CAAAA,QAAL,CAAcjd,QAAd,CAAuBS,GAAvB,CAAlB,CAFsC;AAAA,QAIlC,IAAAwc,QAAA,IAAY,IAAZ;AAAA,YAAyB,OAAA,KAAA,CAJS;AAAA,QAMlC,IAAA,CAAC1kB,iBAAA,CAAkBykB,MAAlB,EAA0B;AAAA,gBAAC,SAAD;AAAA,gBAAY,QAAZ;AAAA,gBAAsB,QAAtB;AAAA,gBAAgC,MAAhC;AAAA,aAA1B,CAAD,EAAqE;AAAA,YAC/D,MAAA,IAAI7c,YAAJ,CAAiB,CAAoF,iFAApF,GAAoFtI,UAAA,CAAS4H,MAAA,CAAOud,MAAP,CAAT,CAApF,EAAuH,SAAvH,CAAjB,CAAA,CAD+D;AAAA,SANnC;AAAA,QAUtC,IAAI,CAACzkB,iBAAA,CAAkB0kB,QAAlB,EAA4B;AAAA,gBAAC,QAAD;AAAA,gBAAW,OAAX;AAAA,aAA5B,CAAL,EAAuD;AAAA,YAC7C,MAAA,IAAI9c,YAAJ,CAAiB,CAAqE,kEAArE,GAAqEtI,UAAA,CAAS4H,MAAA,CAAOwd,QAAP,CAAT,CAArE,EAA0G,SAA1G,CAAjB,CAAA,CAD6C;AAAA,SAVjB;AAAA,QAc/B,OAAAA,QAAA,CAASvpB,OAAT,CAAiBspB,MAAjB,CAAA,IAA4B,CAA5B,CAd+B;AAAA,KA/Bf;AAAA,IAgD3B/c,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAKsc,CAAAA,MAAR,CADmC,CAAA;AAAA,QAEnCtc,EAAA,CAAG,IAAKuc,CAAAA,QAAR,CAFmC,CAAA;AAAA,KAhDZ;AAAA,IAqD3B/c,aAAA,GAAyB;AAAA,QACd,OAAA,IAAA,CADc;AAAA,KArDE;AAAA,IAyD3BnB,SAAA,GAAkC;AAAA,QACvB,OAAA;AAAA,YAAC,IAAD;AAAA,YAAO,IAAKie,CAAAA,MAAL,CAAYje,SAAZ,EAAP;AAAA,YAAgC,IAAKke,CAAAA,QAAL,CAAcle,SAAd,EAAhC;AAAA,SAAA,CADuB;AAAA,KAzDP;AAAA;;ACA/B,MAAMme,OAAN,CAAoC;AAAA,IAMhC7mB,WAAA,CAAY2mB,MAAZ,EAAgCC,QAAhC,EAAsDE,SAAtD,EAA8E;AAAA,QAC1E,IAAKjqB,CAAAA,IAAL,GAAY8D,UAAZ,CAD0E;AAAA,QAE1E,IAAKgmB,CAAAA,MAAL,GAAcA,MAAd,CAF0E;AAAA,QAG1E,IAAKC,CAAAA,QAAL,GAAgBA,QAAhB,CAH0E;AAAA,QAI1E,IAAKE,CAAAA,SAAL,GAAiBA,SAAjB,CAJ0E;AAAA,KAN9C;AAAA,IAahC,OAAOzsB,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAgG;AAAA,QAC5F,IAAID,IAAA,CAAKvP,MAAL,IAAe,CAAf,IAAqBuP,IAAA,CAAKvP,MAAL,IAAe,CAAxC,EAA2C;AAAA,YAEvC,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,qCAAA,GAAwCF,IAAA,CAAKvP,MAAL,GAAc,CAAtD,EAAkE,SAAlE,CAAd,CAAP,CAFuC;AAAA,SADiD;AAAA,QAM5F,MAAM2sB,MAAA,GAASnd,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BvI,SAA1B,CAAf,CAN4F;AAAA,QAQ5F,MAAM4lB,QAAA,GAAWpd,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BvI,SAA1B,CAAjB,CAR4F;AAAA,QAU5F,IAAI,CAAC2lB,MAAD,IAAW,CAACC,QAAhB;AAAA,YAAiC,OAAA,IAAA,CAV2D;AAAA,QAWxF,IAAA,CAAC9kB,WAAA,CAAY6kB,MAAA,CAAO9pB,IAAnB,EAAyB;AAAA,gBAACgE,WAAD;AAAA,gBAAcD,UAAd;AAAA,gBAA0BD,UAA1B;AAAA,gBAAsCF,QAAtC;AAAA,gBAAgDO,SAAhD;AAAA,aAAzB,CAAD,EAAuF;AAAA,YAEvF,OAAOwI,OAAA,CAAQC,KAAR,CAAc,CAAA,iFAAA,GAAoFjI,UAAA,CAASmlB,MAAA,CAAO9pB,IAAhB,CAApF,EAAmH,QAAnH,CAAd,CAAP,CAFuF;AAAA,SAXC;AAAA,QAgBxF,IAAA0M,IAAA,CAAKvP,MAAL,KAAgB,CAAhB,EAAmB;AAAA,YACnB,MAAM8sB,SAAA,GAAYtd,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0B5I,UAA1B,CAAlB,CADmB;AAAA,YAEf,IAAA,CAACmmB,SAAD;AAAA,gBAAmB,OAAA,IAAA,CAFJ;AAAA,YAGnB,OAAO,IAAID,OAAJ,CAAYF,MAAZ,EAAoBC,QAApB,EAA8BE,SAA9B,CAAP,CAHmB;AAAA,SAAnB,MAIG;AAAA,YACI,OAAA,IAAID,OAAJ,CAAYF,MAAZ,EAAoBC,QAApB,CAAA,CADJ;AAAA,SApBqF;AAAA,KAbhE;AAAA,IAsChCjd,QAAA,CAASS,GAAT,EAAsC;AAAA,QAClC,MAAMuc,MAAA,GAAU,IAAKA,CAAAA,MAAL,CAAYhd,QAAZ,CAAqBS,GAArB,CAAhB,CADkC;AAAA,QAElC,MAAMwc,QAAA,GAAY,IAAKA,CAAAA,QAAL,CAAcjd,QAAd,CAAuBS,GAAvB,CAAlB,CAFkC;AAAA,QAI9B,IAAA,CAAClI,iBAAA,CAAkBykB,MAAlB,EAA0B;AAAA,gBAAC,SAAD;AAAA,gBAAY,QAAZ;AAAA,gBAAsB,QAAtB;AAAA,gBAAgC,MAAhC;AAAA,aAA1B,CAAD,EAAqE;AAAA,YAC/D,MAAA,IAAI7c,YAAJ,CAAiB,CAAoF,iFAApF,GAAoFtI,UAAA,CAAS4H,MAAA,CAAOud,MAAP,CAAT,CAApF,EAAuH,SAAvH,CAAjB,CAAA,CAD+D;AAAA,SAJvC;AAAA,QAQlC,IAAI,CAACzkB,iBAAA,CAAkB0kB,QAAlB,EAA4B;AAAA,gBAAC,QAAD;AAAA,gBAAW,OAAX;AAAA,aAA5B,CAAL,EAAuD;AAAA,YAC7C,MAAA,IAAI9c,YAAJ,CAAiB,CAAqE,kEAArE,GAAqEtI,UAAA,CAAS4H,MAAA,CAAOwd,QAAP,CAAT,CAArE,EAA0G,SAA1G,CAAjB,CAAA,CAD6C;AAAA,SARrB;AAAA,QAYlC,IAAI,IAAKE,CAAAA,SAAT,EAAoB;AAAA,YAChB,MAAMA,SAAA,GAAa,IAAKA,CAAAA,SAAL,CAAend,QAAf,CAAwBS,GAAxB,CAAnB,CADgB;AAAA,YAET,OAAAwc,QAAA,CAASvpB,OAAT,CAAiBspB,MAAjB,EAAyBG,SAAzB,CAAA,CAFS;AAAA,SAZc;AAAA,QAiB3B,OAAAF,QAAA,CAASvpB,OAAT,CAAiBspB,MAAjB,CAAA,CAjB2B;AAAA,KAtCN;AAAA,IA0DhC/c,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAKsc,CAAAA,MAAR,CADmC,CAAA;AAAA,QAEnCtc,EAAA,CAAG,IAAKuc,CAAAA,QAAR,CAFmC,CAAA;AAAA,QAGnC,IAAI,IAAKE,CAAAA,SAAT,EAAoB;AAAA,YAChBzc,EAAA,CAAG,IAAKyc,CAAAA,SAAR,CADgB,CAAA;AAAA,SAHe;AAAA,KA1DP;AAAA,IAkEhCjd,aAAA,GAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KAlEO;AAAA,IAsEhCnB,SAAA,GAAkC;AAAA,QAC9B,IAAI,IAAKoe,CAAAA,SAAL,IAAkB,IAAlB,IAA0B,IAAA,CAAKA,SAAL,KAAmB,KAAW,CAA5D,EAA4D;AAAA,YAClD,MAAAA,SAAA,GAAY,IAAA,CAAKA,SAAL,CAAepe,SAAf,EAAZ,CADkD;AAAA,YAEjD,OAAA;AAAA,gBAAC,UAAD;AAAA,gBAAa,IAAKie,CAAAA,MAAL,CAAYje,SAAZ,EAAb;AAAA,gBAAsC,IAAKke,CAAAA,QAAL,CAAcle,SAAd,EAAtC;AAAA,gBAAiEoe,SAAjE;AAAA,aAAA,CAFiD;AAAA,SAD9B;AAAA,QAKvB,OAAA;AAAA,YAAC,UAAD;AAAA,YAAa,IAAKH,CAAAA,MAAL,CAAYje,SAAZ,EAAb;AAAA,YAAsC,IAAKke,CAAAA,QAAL,CAAcle,SAAd,EAAtC;AAAA,SAAA,CALuB;AAAA,KAtEF;AAAA;;ACNpC,MAAMqe,KAAN,CAAkC;AAAA,IAS9B/mB,WAAA,CAAYgnB,SAAZ,EAA6BnF,UAA7B,EAA+CtjB,KAA/C,EAAkE0oB,KAAlE,EAAgFtF,OAAhF,EAA4GuF,SAA5G,EAAmI;AAAA,QAC/H,IAAKF,CAAAA,SAAL,GAAiBA,SAAjB,CAD+H;AAAA,QAE/H,IAAKnqB,CAAAA,IAAL,GAAYglB,UAAZ,CAF+H;AAAA,QAG/H,IAAKtjB,CAAAA,KAAL,GAAaA,KAAb,CAH+H;AAAA,QAI/H,IAAK0oB,CAAAA,KAAL,GAAaA,KAAb,CAJ+H;AAAA,QAK/H,IAAKtF,CAAAA,OAAL,GAAeA,OAAf,CAL+H;AAAA,QAM/H,IAAKuF,CAAAA,SAAL,GAAiBA,SAAjB,CAN+H;AAAA,KATrG;AAAA,IAkB9B,OAAO7sB,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA8F;AAAA,QAC1F,IAAID,IAAA,CAAKvP,MAAL,GAAc,CAAlB;AAAA,YAEI,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,8CAAA,GAAiDF,IAAA,CAAKvP,MAAL,GAAc,CAA/D,EAAmE,CAAnE,CAAd,CAAP,CAHsF;AAAA,QAItF,IAAAuP,IAAA,CAAKvP,MAAL,GAAc,CAAd,KAAoB,CAApB;AAAA,YAEO,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAuC,qCAAvC,CAAd,CAAA,CAN+E;AAAA,QAQtF,IAAAud,SAAA,CARsF;AAAA,QAStF,IAAAnF,UAAA,CATsF;AAAA,QAU1F,IAAIrY,OAAA,CAAQE,YAAR,IAAwBF,OAAA,CAAQE,YAAR,CAAqBhJ,IAArB,KAA8B,OAA1D,EAAmE;AAAA,YAC/DmhB,UAAA,GAAarY,OAAA,CAAQE,YAArB,CAD+D;AAAA,SAVuB;AAAA,QAa1F,MAAMud,KAAA,GAA6B,EAAnC,CAb0F;AAAA,QAc1F,MAAMtF,OAAA,GAAU,EAAhB,CAd0F;AAAA,QAe1F,KAAA,IAAS1lB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsN,IAAA,CAAKvP,MAAL,GAAc,CAAlC,EAAqCiC,CAAA,IAAK,CAA1C,EAA6C;AAAA,YACrC,IAAAylB,MAAA,GAASnY,IAAA,CAAKtN,CAAL,CAAT,CADqC;AAAA,YAEnC,MAAAf,KAAA,GAAQqO,IAAA,CAAKtN,CAAA,GAAI,CAAT,CAAR,CAFmC;AAAA,YAIzC,IAAI,CAACtB,KAAA,CAAMC,OAAN,CAAc8mB,MAAd,CAAL,EAA4B;AAAA,gBACxBA,MAAA,GAAS,CAACA,MAAD,CAAT,CADwB;AAAA,aAJa;AAAA,YAQnC,MAAAyF,YAAA,GAAe3d,OAAA,CAAQ5J,MAAR,CAAe3D,CAAf,CAAf,CARmC;AAAA,YAUrC,IAAAylB,MAAA,CAAO1nB,MAAP,KAAkB,CAAlB,EAAqB;AAAA,gBAEd,OAAAmtB,YAAA,CAAa1d,KAAb,CAAmB,qCAAnB,CAAA,CAFc;AAAA,aAVgB;AAAA,YAgBzC,KAAWmY,MAAAA,KAAX,IAAoBF,MAApB,EAA4B;AAAA,gBACxB,IAAI,OAAOE,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AAAA,oBAEjD,OAAAuF,YAAA,CAAa1d,KAAb,CAAmB,CAA2C,yCAA3C,CAAnB,CAAA,CAFiD;AAAA,iBAA5D,MAGA,IAAW,OAAOmY,KAAP,KAAiB,QAAjB,IAA6Bvf,IAAA,CAAK6N,GAAL,CAAS0R,KAAT,CAAA,GAAkBtW,MAAA,CAAO8b,gBAAjE,EAAmF;AAAA,oBAE/E,OAAOD,YAAA,CAAa1d,KAAb,CAAmB,CAAiD,8CAAjD,GAAiD6B,MAAA,CAAO8b,gBAAxD,EAA2E,CAA3E,CAAnB,CAAP,CAF+E;AAAA,iBAAnF,MAIA,IAAW,OAAOxF,KAAP,KAAiB,QAAjB,IAA6Bvf,IAAA,CAAK2C,KAAL,CAAW4c,KAAX,CAAA,KAAsBA,KAA9D,EAAqE;AAAA,oBAE1D,OAAAuF,YAAA,CAAa1d,KAAb,CAAmB,CAA+C,6CAA/C,CAAnB,CAAA,CAF0D;AAAA,iBAArE,MAIA,IAAW,CAACud,SAAZ,EAAuB;AAAA,oBACnBA,SAAA,GAAY5d,MAAA,CAAOwY,KAAP,CAAZ,CADmB;AAAA,iBAAvB,UAEWuF,YAAA,CAAazlB,YAAb,CAA0BslB,SAA1B,EAAqC5d,MAAA,CAAOwY,KAAP,CAArC,GAAqD;AAAA,oBACrD,OAAA,IAAA,CADqD;AAAA,iBAdxC;AAAA,gBAkBxB,IAAI,OAAOqF,KAAA,CAAM5d,MAAA,CAAOuY,KAAP,CAAN,CAAP,KAAgC,WAApC,EAAiD;AAAA,oBAEtC,OAAAuF,YAAA,CAAa1d,KAAb,CAAmB,+BAAnB,CAAA,CAFsC;AAAA,iBAlBzB;AAAA,gBAuBxBwd,KAAA,CAAM5d,MAAA,CAAOuY,KAAP,CAAN,CAAuBD,GAAAA,OAAA,CAAQ3nB,MAA/B,CAvBwB;AAAA,aAhBa;AAAA,YA0CzC,MAAMsB,MAAA,GAASkO,OAAA,CAAQnP,KAAR,CAAca,KAAd,EAAqBe,CAArB,EAAwB4lB,UAAxB,CAAf,CA1CyC;AAAA,YA2CrC,IAAA,CAACvmB,MAAD;AAAA,gBAAgB,OAAA,IAAA,CA3CqB;AAAA,YA4CzCumB,UAAA,GAAaA,UAAA,IAAcvmB,MAAA,CAAOuB,IAAlC,CA5CyC;AAAA,YA6CzC8kB,OAAA,CAAQ9mB,IAAR,CAAaS,MAAb,CA7CyC,CAAA;AAAA,SAf6C;AAAA,QA+D1F,MAAMiD,KAAA,GAAQiL,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BvI,SAA1B,CAAd,CA/D0F;AAAA,QAgEtF,IAAA,CAACzC,KAAD;AAAA,YAAe,OAAA,IAAA,CAhEuE;AAAA,QAkEpF,MAAA2oB,SAAA,GAAY1d,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKA,IAAA,CAAKvP,MAAL,GAAc,CAAnB,CAAd,EAAqCuP,IAAA,CAAKvP,MAAL,GAAc,CAAnD,EAAsD6nB,UAAtD,CAAZ,CAlEoF;AAAA,QAmEtF,IAAA,CAACqF,SAAD;AAAA,YAAmB,OAAA,IAAA,CAnEmE;AAAA,QAuE1F,IAAI3oB,KAAA,CAAM1B,IAAN,CAAW6D,IAAX,KAAoB,OAApB,IAA+B8I,OAAA,CAAQ5J,MAAR,CAAe,CAAf,CAAkB8B,CAAAA,YAAlB,CAAgCslB,SAAhC,EAA4CzoB,KAAA,CAAM1B,IAAlD,CAAnC,EAA4F;AAAA,YACjF,OAAA,IAAA,CADiF;AAAA,SAvEF;AAAA,QA2E1F,OAAO,IAAIkqB,KAAJ,CAAWC,SAAX,EAAwBnF,UAAxB,EAA4CtjB,KAA5C,EAAmD0oB,KAAnD,EAA0DtF,OAA1D,EAAmEuF,SAAnE,CAAP,CA3E0F;AAAA,KAlBhE;AAAA,IAgG9Bvd,QAAA,CAASS,GAAT,EAAsC;AAAA,QAClC,MAAM7L,KAAA,GAAS,IAAKA,CAAAA,KAAL,CAAWoL,QAAX,CAAoBS,GAApB,CAAf,CADkC;AAAA,QAElC,MAAMvK,MAAA,GAAUuJ,MAAA,CAAO7K,KAAP,CAAA,KAAkB,IAAKyoB,CAAAA,SAAvB,IAAoC,IAAA,CAAKrF,OAAL,CAAa,IAAA,CAAKsF,KAAL,CAAW1oB,KAAX,CAAb,CAApC,IAAwE,IAAK2oB,CAAAA,SAA7F,CAFkC;AAAA,QAG3B,OAAArnB,MAAA,CAAO8J,QAAP,CAAgBS,GAAhB,CAAA,CAH2B;AAAA,KAhGR;AAAA,IAsG9BR,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAK9L,CAAAA,KAAR,CADmC,CAAA;AAAA,QAE9B,KAAAojB,OAAA,CAAQ5kB,OAAR,CAAgBsN,EAAhB,CAF8B,CAAA;AAAA,QAGnCA,EAAA,CAAG,IAAK6c,CAAAA,SAAR,CAHmC,CAAA;AAAA,KAtGT;AAAA,IA4G9Brd,aAAA,GAAyB;AAAA,QACd,OAAA,IAAK8X,CAAAA,OAAL,CAAarX,KAAb,CAA0B2X,GAAP,IAAOA,GAAA,CAAIpY,aAAJ,EAA1B,CAAkD,IAAA,IAAA,CAAKqd,SAAL,CAAerd,aAAf,EAAlD,CADc;AAAA,KA5GK;AAAA,IAgH9BnB,SAAA,GAAkC;AAAA,QAC9B,MAAMC,UAAA,GAAa;AAAA,YAAC,OAAD;AAAA,YAAU,IAAKpK,CAAAA,KAAL,CAAWmK,SAAX,EAAV;AAAA,SAAnB,CAD8B;AAAA,QAK9B,MAAM2e,YAAA,GAAetsB,MAAA,CAAOD,IAAP,CAAY,IAAA,CAAKmsB,KAAjB,CAAA,CAAwBK,IAAxB,EAArB,CAL8B;AAAA,QAS9B,MAAMC,eAAA,GAA2D,EAAjE,CAT8B;AAAA,QAU9B,MAAMC,YAAA,GAEF,EAFJ,CAV8B;AAAA,QAa9B,KAAW5F,MAAAA,KAAX,IAAoByF,YAApB,EAAkC;AAAA,YAC9B,MAAMI,WAAA,GAAcD,YAAA,CAAa,IAAKP,CAAAA,KAAL,CAAWrF,KAAX,CAAb,CAApB,CAD8B;AAAA,YAE9B,IAAI6F,WAAA,KAAgB,KAAW,CAA/B,EAA+B;AAAA,gBAE3BD,YAAA,CAAa,IAAA,CAAKP,KAAL,CAAWrF,KAAX,CAAb,CAAkC2F,GAAAA,eAAA,CAAgBvtB,MAAlD,CAF2B;AAAA,gBAGXutB,eAAA,CAAA1sB,IAAA,CAAK;AAAA,oBAAC,IAAKosB,CAAAA,KAAL,CAAWrF,KAAX,CAAD;AAAA,oBAAoB,CAACA,KAAD,CAApB;AAAA,iBAAL,CAHW,CAAA;AAAA,aAA/B,MAIO;AAAA,gBAEH2F,eAAA,CAAgBE,WAAhB,CAAA,CAA6B,CAA7B,CAAgC5sB,CAAAA,IAAhC,CAAqC+mB,KAArC,CAFG,CAAA;AAAA,aANuB;AAAA,SAbJ;AAAA,QAyBxB,MAAA8F,WAAA,GAAe9F,KAAD,IAA4B,IAAA,CAAKoF,SAAL,CAAetmB,IAAf,KAAwB,QAAxB,GAAmC4K,MAAA,CAAOsW,KAAP,CAAnC,GAAmDA,KAA7F,CAzBwB;AAAA,QA2B9B,KAAA,MAAW,CAAC6F,WAAD,EAAc/F,MAAd,CAAX,IAAoC6F,eAApC,EAAqD;AAAA,YAC7C,IAAA7F,MAAA,CAAO1nB,MAAP,KAAkB,CAAlB,EAAqB;AAAA,gBAErB2O,UAAA,CAAW9N,IAAX,CAAgB6sB,WAAA,CAAYhG,MAAA,CAAO,CAAP,CAAZ,CAAhB,CAFqB,CAAA;AAAA,aAArB,MAGG;AAAA,gBAEH/Y,UAAA,CAAW9N,IAAX,CAAgB6mB,MAAA,CAAO9lB,GAAP,CAAW8rB,WAAX,CAAhB,CAFG,CAAA;AAAA,aAJ0C;AAAA,YAQjD/e,UAAA,CAAW9N,IAAX,CAAgB,IAAA,CAAK8mB,OAAL,CAAa8F,WAAb,CAAA,CAA0B/e,SAA1B,EAAhB,CARiD,CAAA;AAAA,SA3BvB;AAAA,QAqC9BC,UAAA,CAAW9N,IAAX,CAAgB,KAAKqsB,SAAL,CAAexe,SAAf,EAAhB,CArC8B,CAAA;AAAA,QAsCvB,OAAAC,UAAA,CAtCuB;AAAA,KAhHJ;AAAA;;ACFlC,MAAMgf,IAAN,CAAiC;AAAA,IAM7B3nB,WAAA,CAAYnD,IAAZ,EAAwB+qB,QAAxB,EAA4CV,SAA5C,EAAmE;AAAA,QAC/D,IAAKrqB,CAAAA,IAAL,GAAYA,IAAZ,CAD+D;AAAA,QAE/D,IAAK+qB,CAAAA,QAAL,GAAgBA,QAAhB,CAF+D;AAAA,QAG/D,IAAKV,CAAAA,SAAL,GAAiBA,SAAjB,CAH+D;AAAA,KANtC;AAAA,IAY7B,OAAO7sB,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA6F;AAAA,QACzF,IAAID,IAAA,CAAKvP,MAAL,GAAc,CAAlB;AAAA,YAEI,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,8CAAA,GAAiDF,IAAA,CAAKvP,MAAL,GAAc,CAA/D,EAAmE,CAAnE,CAAd,CAAP,CAHqF;AAAA,QAIrF,IAAAuP,IAAA,CAAKvP,MAAL,GAAc,CAAd,KAAoB,CAApB;AAAA,YAEO,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAsC,oCAAtC,CAAd,CAAA,CAN8E;AAAA,QAQrF,IAAAoY,UAAA,CARqF;AAAA,QASzF,IAAIrY,OAAA,CAAQE,YAAR,IAAwBF,OAAA,CAAQE,YAAR,CAAqBhJ,IAArB,KAA8B,OAA1D,EAAmE;AAAA,YAC/DmhB,UAAA,GAAarY,OAAA,CAAQE,YAArB,CAD+D;AAAA,SATsB;AAAA,QAazF,MAAMke,QAAA,GAAW,EAAjB,CAbyF;AAAA,QAczF,KAAA,IAAS3rB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsN,IAAA,CAAKvP,MAAL,GAAc,CAAlC,EAAqCiC,CAAA,IAAK,CAA1C,EAA6C;AAAA,YACzC,MAAM8jB,IAAA,GAAOvW,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKtN,CAAL,CAAd,EAAuBA,CAAvB,EAA0B4E,WAA1B,CAAb,CADyC;AAAA,YAErC,IAAA,CAACkf,IAAD;AAAA,gBAAc,OAAA,IAAA,CAFuB;AAAA,YAInC,MAAAzkB,MAAA,GAASkO,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKtN,CAAA,GAAI,CAAT,CAAd,EAA2BA,CAAA,GAAI,CAA/B,EAAkC4lB,UAAlC,CAAT,CAJmC;AAAA,YAKrC,IAAA,CAACvmB,MAAD;AAAA,gBAAgB,OAAA,IAAA,CALqB;AAAA,YAOzCssB,QAAA,CAAS/sB,IAAT,CAAc;AAAA,gBAACklB,IAAD;AAAA,gBAAOzkB,MAAP;AAAA,aAAd,CAPyC,CAAA;AAAA,YASzCumB,UAAA,GAAaA,UAAA,IAAcvmB,MAAA,CAAOuB,IAAlC,CATyC;AAAA,SAd4C;AAAA,QA0BnF,MAAAqqB,SAAA,GAAY1d,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAKA,IAAA,CAAKvP,MAAL,GAAc,CAAnB,CAAd,EAAqCuP,IAAA,CAAKvP,MAAL,GAAc,CAAnD,EAAsD6nB,UAAtD,CAAZ,CA1BmF;AAAA,QA2BrF,IAAA,CAACqF,SAAD;AAAA,YAAmB,OAAA,IAAA,CA3BkE;AAAA,QA8BzF,OAAO,IAAIS,IAAJ,CAAU9F,UAAV,EAA8B+F,QAA9B,EAAwCV,SAAxC,CAAP,CA9ByF;AAAA,KAZhE;AAAA,IA6C7Bvd,QAAA,CAASS,GAAT,EAAsC;AAAA,QAClC,KAAA,MAAW,CAAC2V,IAAD,EAAOzf,UAAP,CAAX,IAAiC,IAAKsnB,CAAAA,QAAtC,EAAgD;AAAA,YACxC,IAAA7H,IAAA,CAAKpW,QAAL,CAAcS,GAAd,CAAA,EAAoB;AAAA,gBACb,OAAA9J,UAAA,CAAWqJ,QAAX,CAAoBS,GAApB,CAAA,CADa;AAAA,aADoB;AAAA,SADd;AAAA,QAM3B,OAAA,KAAK8c,SAAL,CAAevd,QAAf,CAAwBS,GAAxB,CAAA,CAN2B;AAAA,KA7CT;AAAA,IAsD7BR,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnC,KAAA,MAAW,CAAC0V,IAAD,EAAOzf,UAAP,CAAX,IAAiC,IAAKsnB,CAAAA,QAAtC,EAAgD;AAAA,YAC5Cvd,EAAA,CAAG0V,IAAH,CAD4C,CAAA;AAAA,YAE5C1V,EAAA,CAAG/J,UAAH,CAF4C,CAAA;AAAA,SADb;AAAA,QAKnC+J,EAAA,CAAG,IAAK6c,CAAAA,SAAR,CALmC,CAAA;AAAA,KAtDV;AAAA,IA8D7Brd,aAAA,GAAyB;AAAA,QACrB,OAAO,KAAK+d,QAAL,CAActd,KAAd,CAAoB,CAAC,CAAC4C,CAAD,EAAI+U,GAAJ,CAAD,KAA0BA,GAAA,CAAIpY,aAAJ,EAA9C,CAAA,IAAsE,KAAKqd,SAAL,CAAerd,aAAf,EAA7E,CADqB;AAAA,KA9DI;AAAA,IAkE7BnB,SAAA,GAAkC;AAAA,QACxB,MAAAC,UAAA,GAAa,CAAC,MAAD,CAAb,CADwB;AAAA,QAG9B,IAAKiB,CAAAA,SAAL,CAAwBsC,KAAT,IAAS;AAAA,YAAavD,UAAA,CAAA9N,IAAA,CAAKqR,KAAA,CAAMxD,SAAN,EAAL,CAAb,CAAA;AAAA,SAAxB,CAH8B,CAAA;AAAA,QAIvB,OAAAC,UAAA,CAJuB;AAAA,KAlEL;AAAA;;ACOjC,MAAMkf,KAAN,CAAkC;AAAA,IAM9B7nB,WAAA,CAAYnD,IAAZ,EAAwB0B,KAAxB,EAA2CupB,UAA3C,EAAmEC,QAAnE,EAA0F;AAAA,QACtF,IAAKlrB,CAAAA,IAAL,GAAYA,IAAZ,CADsF;AAAA,QAEtF,IAAK0B,CAAAA,KAAL,GAAaA,KAAb,CAFsF;AAAA,QAGtF,IAAKupB,CAAAA,UAAL,GAAkBA,UAAlB,CAHsF;AAAA,QAItF,IAAKC,CAAAA,QAAL,GAAgBA,QAAhB,CAJsF;AAAA,KAN5D;AAAA,IAc9B,OAAO1tB,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA8F;AAAA,QAC1F,IAAID,IAAA,CAAKvP,MAAL,IAAe,CAAf,IAAqBuP,IAAA,CAAKvP,MAAL,IAAe,CAAxC,EAA2C;AAAA,YAEvC,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,qCAAA,GAAwCF,IAAA,CAAKvP,MAAL,GAAc,CAAtD,EAAkE,SAAlE,CAAd,CAAP,CAFuC;AAAA,SAD+C;AAAA,QAM1F,MAAMuE,KAAA,GAAQiL,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BvI,SAA1B,CAAd,CAN0F;AAAA,QAO1F,MAAM8mB,UAAA,GAAate,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0B5I,UAA1B,CAAnB,CAP0F;AAAA,QAS1F,IAAI,CAACpC,KAAD,IAAU,CAACupB,UAAf;AAAA,YAAkC,OAAA,IAAA,CATwD;AAAA,QAWtF,IAAA,CAAChmB,WAAA,CAAYvD,KAAA,CAAM1B,IAAlB,EAAwB;AAAA,gBAACwE,OAAA,CAAML,SAAN,CAAD;AAAA,gBAAmBJ,UAAnB;AAAA,gBAA+BI,SAA/B;AAAA,aAAxB,CAAD,EAAqE;AAAA,YAErE,OAAOwI,OAAA,CAAQC,KAAR,CAAc,CAAA,iEAAA,GAAoEjI,UAAA,CAASjD,KAAA,CAAM1B,IAAf,CAApE,EAAkG,QAAlG,CAAd,CAAP,CAFqE;AAAA,SAXiB;AAAA,QAgBtF,IAAA0M,IAAA,CAAKvP,MAAL,KAAgB,CAAhB,EAAmB;AAAA,YACnB,MAAM+tB,QAAA,GAAWve,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0B5I,UAA1B,CAAjB,CADmB;AAAA,YAEf,IAAA,CAAConB,QAAD;AAAA,gBAAkB,OAAA,IAAA,CAFH;AAAA,YAGnB,OAAO,IAAIF,KAAJ,CAAUtpB,KAAA,CAAM1B,IAAhB,EAAsB0B,KAAtB,EAA6BupB,UAA7B,EAAyCC,QAAzC,CAAP,CAHmB;AAAA,SAAnB,MAIG;AAAA,YACH,OAAO,IAAIF,KAAJ,CAAUtpB,KAAA,CAAM1B,IAAhB,EAAsB0B,KAAtB,EAA6BupB,UAA7B,CAAP,CADG;AAAA,SApBmF;AAAA,KAdhE;AAAA,IAuC9Bne,QAAA,CAASS,GAAT,EAAsC;AAAA,QAClC,MAAM7L,KAAA,GAAS,IAAKA,CAAAA,KAAL,CAAWoL,QAAX,CAAoBS,GAApB,CAAf,CADkC;AAAA,QAElC,MAAM0d,UAAA,GAAc,IAAKA,CAAAA,UAAL,CAAgBne,QAAhB,CAAyBS,GAAzB,CAApB,CAFkC;AAAA,QAIlC,IAAI,CAAClI,iBAAA,CAAkB3D,KAAlB,EAAyB;AAAA,gBAAC,QAAD;AAAA,gBAAW,OAAX;AAAA,aAAzB,CAAL,EAAoD;AAAA,YAC1C,MAAA,IAAIuL,YAAJ,CAAiB,CAAoE,iEAApE,GAAoEtI,UAAA,CAAS4H,MAAA,CAAO7K,KAAP,CAAT,CAApE,EAAsG,SAAtG,CAAjB,CAAA,CAD0C;AAAA,SAJlB;AAAA,QAQlC,IAAI,IAAKwpB,CAAAA,QAAT,EAAmB;AAAA,YACf,MAAMA,QAAA,GAAY,IAAKA,CAAAA,QAAL,CAAcpe,QAAd,CAAuBS,GAAvB,CAAlB,CADe;AAAA,YAER,OAAA7L,KAAA,CAAMjF,KAAN,CAAYwuB,UAAZ,EAAwBC,QAAxB,CAAA,CAFQ;AAAA,SARe;AAAA,QAa3B,OAAAxpB,KAAA,CAAMjF,KAAN,CAAYwuB,UAAZ,CAAA,CAb2B;AAAA,KAvCR;AAAA,IAuD9Ble,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAK9L,CAAAA,KAAR,CADmC,CAAA;AAAA,QAEnC8L,EAAA,CAAG,IAAKyd,CAAAA,UAAR,CAFmC,CAAA;AAAA,QAGnC,IAAI,IAAKC,CAAAA,QAAT,EAAmB;AAAA,YACf1d,EAAA,CAAG,IAAK0d,CAAAA,QAAR,CADe,CAAA;AAAA,SAHgB;AAAA,KAvDT;AAAA,IA+D9Ble,aAAA,GAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KA/DK;AAAA,IAmE9BnB,SAAA,GAAkC;AAAA,QAC9B,IAAI,IAAKqf,CAAAA,QAAL,IAAiB,IAAjB,IAAyB,IAAA,CAAKA,QAAL,KAAkB,KAAW,CAA1D,EAA0D;AAAA,YAChD,MAAAA,QAAA,GAAW,IAAA,CAAKA,QAAL,CAAcrf,SAAd,EAAX,CADgD;AAAA,YAE/C,OAAA;AAAA,gBAAC,OAAD;AAAA,gBAAU,IAAKnK,CAAAA,KAAL,CAAWmK,SAAX,EAAV;AAAA,gBAAkC,IAAKof,CAAAA,UAAL,CAAgBpf,SAAhB,EAAlC;AAAA,gBAA+Dqf,QAA/D;AAAA,aAAA,CAF+C;AAAA,SAD5B;AAAA,QAKvB,OAAA;AAAA,YAAC,OAAD;AAAA,YAAU,IAAKxpB,CAAAA,KAAL,CAAWmK,SAAX,EAAV;AAAA,YAAkC,IAAKof,CAAAA,UAAL,CAAgBpf,SAAhB,EAAlC;AAAA,SAAA,CALuB;AAAA,KAnEJ;AAAA;;ACLlC,SAASsf,gBAAT,CAA0BzkB,EAA1B,EAAkD1G,IAAlD,EAA8D;AAAA,IACtD,IAAA0G,EAAA,KAAO,IAAP,IAAeA,EAAA,KAAO,IAAtB,EAA4B;AAAA,QAE5B,OAAO1G,IAAA,CAAK6D,IAAL,KAAc,SAAd,IACH7D,IAAA,CAAK6D,IAAL,KAAc,QADX,IAEH7D,IAAA,CAAK6D,IAAL,KAAc,QAFX,IAGH7D,IAAA,CAAK6D,IAAL,KAAc,MAHX,IAIH7D,IAAA,CAAK6D,IAAL,KAAc,OAJlB,CAF4B;AAAA,KAA5B,MAOG;AAAA,QAEH,OAAO7D,IAAA,CAAK6D,IAAL,KAAc,QAAd,IACH7D,IAAA,CAAK6D,IAAL,KAAc,QADX,IAEH7D,IAAA,CAAK6D,IAAL,KAAc,OAFlB,CAFG;AAAA,KARmD;AAAA,CAZ9D;AA4BA,SAASunB,EAAT,CAAY7d,GAAZ,EAAoCnG,CAApC,EAA4CC,CAA5C,EAA6D;AAAA,IAAE,OAAOD,CAAA,KAAMC,CAAb,CAAF;AAAA,CA5B7D;AA6BA,SAASgkB,GAAT,CAAa9d,GAAb,EAAqCnG,CAArC,EAA6CC,CAA7C,EAA8D;AAAA,IAAE,OAAOD,CAAA,KAAMC,CAAb,CAAF;AAAA,CA7B9D;AA8BA,SAASikB,EAAT,CAAY/d,GAAZ,EAAoCnG,CAApC,EAA4CC,CAA5C,EAA6D;AAAA,IAAE,OAAOD,CAAA,GAAIC,CAAX,CAAF;AAAA,CA9B7D;AA+BA,SAASkkB,EAAT,CAAYhe,GAAZ,EAAoCnG,CAApC,EAA4CC,CAA5C,EAA6D;AAAA,IAAE,OAAOD,CAAA,GAAIC,CAAX,CAAF;AAAA,CA/B7D;AAgCA,SAASmkB,IAAT,CAAcje,GAAd,EAAsCnG,CAAtC,EAA8CC,CAA9C,EAA+D;AAAA,IAAE,OAAOD,CAAA,IAAKC,CAAZ,CAAF;AAAA,CAhC/D;AAiCA,SAASokB,IAAT,CAAcle,GAAd,EAAsCnG,CAAtC,EAA8CC,CAA9C,EAA+D;AAAA,IAAE,OAAOD,CAAA,IAAKC,CAAZ,CAAF;AAAA,CAjC/D;AAmCA,SAASqkB,SAAT,CAAmBne,GAAnB,EAA2CnG,CAA3C,EAAmDC,CAAnD,EAA2D2H,CAA3D,EAA4E;AAAA,IAAE,OAAOA,CAAA,CAAErE,OAAF,CAAUvD,CAAV,EAAaC,CAAb,CAAoB,KAAA,CAA3B,CAAF;AAAA,CAnC5E;AAoCA,SAASskB,UAAT,CAAoBpe,GAApB,EAA4CnG,CAA5C,EAAoDC,CAApD,EAA4D2H,CAA5D,EAA6E;AAAA,IAAE,OAAO,CAAC0c,SAAA,CAAUne,GAAV,EAAenG,CAAf,EAAkBC,CAAlB,EAAqB2H,CAArB,CAAR,CAAF;AAAA,CApC7E;AAqCA,SAAS4c,SAAT,CAAmBre,GAAnB,EAA2CnG,CAA3C,EAAmDC,CAAnD,EAA2D2H,CAA3D,EAA4E;AAAA,IAAE,OAAOA,CAAA,CAAErE,OAAF,CAAUvD,CAAV,EAAaC,CAAb,CAAkB,GAAA,CAAzB,CAAF;AAAA,CArC5E;AAsCA,SAASwkB,SAAT,CAAmBte,GAAnB,EAA2CnG,CAA3C,EAAmDC,CAAnD,EAA2D2H,CAA3D,EAA4E;AAAA,IAAE,OAAOA,CAAA,CAAErE,OAAF,CAAUvD,CAAV,EAAaC,CAAb,CAAkB,GAAA,CAAzB,CAAF;AAAA,CAtC5E;AAuCA,SAASykB,WAAT,CAAqBve,GAArB,EAA6CnG,CAA7C,EAAqDC,CAArD,EAA6D2H,CAA7D,EAA8E;AAAA,IAAE,OAAOA,CAAA,CAAErE,OAAF,CAAUvD,CAAV,EAAaC,CAAb,CAAmB,IAAA,CAA1B,CAAF;AAAA,CAvC9E;AAwCA,SAAS0kB,WAAT,CAAqBxe,GAArB,EAA6CnG,CAA7C,EAAqDC,CAArD,EAA6D2H,CAA7D,EAA8E;AAAA,IAAE,OAAOA,CAAA,CAAErE,OAAF,CAAUvD,CAAV,EAAaC,CAAb,CAAmB,IAAA,CAA1B,CAAF;AAAA,CAxC9E;AA2DA,SAAS2kB,cAAT,CACItlB,EADJ,EAEIulB,YAFJ,EAGIC,mBAHJ,EAI0B;AAAA,IAChB,MAAAC,iBAAA,GAAoBzlB,EAAA,KAAO,IAAP,IAAeA,EAAA,KAAO,IAA1C,CADgB;AAAA,IAGtB,OAAO,MAAM0lB,UAAN,CAAuC;AAAA,QAO1CjpB,WAAA,CAAYyH,GAAZ,EAA6BC,GAA7B,EAA8CL,QAA9C,EAA4E;AAAA,YACxE,IAAKxK,CAAAA,IAAL,GAAYgE,WAAZ,CADwE;AAAA,YAExE,IAAK4G,CAAAA,GAAL,GAAWA,GAAX,CAFwE;AAAA,YAGxE,IAAKC,CAAAA,GAAL,GAAWA,GAAX,CAHwE;AAAA,YAIxE,IAAKL,CAAAA,QAAL,GAAgBA,QAAhB,CAJwE;AAAA,YAKxE,KAAK6hB,kBAAL,GAA0BzhB,GAAA,CAAI5K,IAAJ,CAAS6D,IAAT,KAAkB,OAAlB,IAA6BgH,GAAA,CAAI7K,IAAJ,CAAS6D,IAAT,KAAkB,OAAzE,CALwE;AAAA,SAPlC;AAAA,QAe1C,OAAOrG,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAmG;AAAA,YAC/F,IAAID,IAAA,CAAKvP,MAAL,KAAgB,CAAhB,IAAqBuP,IAAA,CAAKvP,MAAL,KAAgB,CAAzC;AAAA,gBAEW,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAkC,gCAAlC,CAAd,CAAA,CAHoF;AAAA,YAKzFlG,MAAAA,GAAAA,GAA0BgG,IAAA,CAAK,CAAL,CAA1BhG,CALyF;AAAA,YAO/F,IAAIkE,GAAA,GAAM+B,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BvI,SAA1B,CAAV,CAP+F;AAAA,YAQ3F,IAAA,CAACyG,GAAD;AAAA,gBAAa,OAAA,IAAA,CAR8E;AAAA,YAS/F,IAAI,CAACugB,gBAAA,CAAiBzkB,GAAjB,EAAqBkE,GAAA,CAAI5K,IAAzB,CAAL,EAAqC;AAAA,gBAEjC,OAAO2M,OAAA,CAAQ5J,MAAR,CAAe,CAAf,CAAA,CAAkB6J,KAAlB,CAAwB,CAAA,CAAA,GAAIlG,GAAJ,EAAM,0CAAN,GAAmD/B,UAAA,CAASiG,GAAA,CAAI5K,IAAb,CAAnD,EAAyE,EAAzE,CAAxB,CAAP,CAFiC;AAAA,aAT0D;AAAA,YAa/F,IAAI6K,GAAA,GAAM8B,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BvI,SAA1B,CAAV,CAb+F;AAAA,YAc3F,IAAA,CAAC0G,GAAD;AAAA,gBAAa,OAAA,IAAA,CAd8E;AAAA,YAe/F,IAAI,CAACsgB,gBAAA,CAAiBzkB,GAAjB,EAAqBmE,GAAA,CAAI7K,IAAzB,CAAL,EAAqC;AAAA,gBAEjC,OAAO2M,OAAA,CAAQ5J,MAAR,CAAe,CAAf,CAAA,CAAkB6J,KAAlB,CAAwB,CAAA,CAAA,GAAIlG,GAAJ,EAAM,0CAAN,GAAmD/B,UAAA,CAASkG,GAAA,CAAI7K,IAAb,CAAnD,EAAyE,EAAzE,CAAxB,CAAP,CAFiC;AAAA,aAf0D;AAAA,YAoB/F,IACI4K,GAAA,CAAI5K,IAAJ,CAAS6D,IAAT,KAAkBgH,GAAA,CAAI7K,IAAJ,CAAS6D,IAA3B,IACA+G,GAAA,CAAI5K,IAAJ,CAAS6D,IAAT,KAAkB,OADlB,IAEAgH,GAAA,CAAI7K,IAAJ,CAAS6D,IAAT,KAAkB,OAHtB,EAIE;AAAA,gBAEE,OAAO8I,OAAA,CAAQC,KAAR,CAAc,CAAyB,sBAAzB,GAAyBjI,UAAA,CAASiG,GAAA,CAAI5K,IAAb,CAAzB,EAA2C,OAA3C,GAAqD2E,UAAA,CAASkG,GAAA,CAAI7K,IAAb,CAArD,EAA2E,EAA3E,CAAd,CAAP,CAFF;AAAA,aAxB6F;AAAA,YA6B/F,IAAImsB,iBAAJ,EAAuB;AAAA,gBAEnB,IAAIvhB,GAAA,CAAI5K,IAAJ,CAAS6D,IAAT,KAAkB,OAAlB,IAA6BgH,GAAA,CAAI7K,IAAJ,CAAS6D,IAAT,KAAkB,OAAnD,EAA4D;AAAA,oBAExD+G,GAAA,GAAM,IAAIyC,SAAJ,CAAcxC,GAAA,CAAI7K,IAAlB,EAAwB,CAAC4K,GAAD,CAAxB,CAAN,CAFwD;AAAA,iBAA5D,MAGA,IAAWA,GAAA,CAAI5K,IAAJ,CAAS6D,IAAT,KAAkB,OAAlB,IAA6BgH,GAAA,CAAI7K,IAAJ,CAAS6D,IAAT,KAAkB,OAA1D,EAAmE;AAAA,oBAE/DgH,GAAA,GAAM,IAAIwC,SAAJ,CAAczC,GAAA,CAAI5K,IAAlB,EAAwB,CAAC6K,GAAD,CAAxB,CAAN,CAF+D;AAAA,iBALhD;AAAA,aA7BwE;AAAA,YAwC/F,IAAIL,QAAA,GAAW,IAAf,CAxC+F;AAAA,YAyC3F,IAAAkC,IAAA,CAAKvP,MAAL,KAAgB,CAAhB,EAAmB;AAAA,gBACnB,IACIyN,GAAA,CAAI5K,IAAJ,CAAS6D,IAAT,KAAkB,QAAlB,IACAgH,GAAA,CAAI7K,IAAJ,CAAS6D,IAAT,KAAkB,QADlB,IAEA+G,GAAA,CAAI5K,IAAJ,CAAS6D,IAAT,KAAkB,OAFlB,IAGAgH,GAAA,CAAI7K,IAAJ,CAAS6D,IAAT,KAAkB,OAJtB,EAKE;AAAA,oBAES,OAAA8I,OAAA,CAAQC,KAAR,CAAc,CAAkD,gDAAlD,CAAd,CAAA,CAFT;AAAA,iBANiB;AAAA,gBAUnBpC,QAAA,GAAWmC,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0BrI,YAA1B,CAAX,CAVmB;AAAA,gBAWf,IAAA,CAACmG,QAAD;AAAA,oBAAkB,OAAA,IAAA,CAXH;AAAA,aAzCwE;AAAA,YAuD/F,OAAO,IAAI4hB,UAAJ,CAAexhB,GAAf,EAAoBC,GAApB,EAAyBL,QAAzB,CAAP,CAvD+F;AAAA,SAfzD;AAAA,QAyE1CsC,QAAA,CAASS,GAAT,EAA0C;AAAA,YACtC,MAAM3C,GAAA,GAAM,IAAKA,CAAAA,GAAL,CAASkC,QAAT,CAAkBS,GAAlB,CAAZ,CADsC;AAAA,YAEtC,MAAM1C,GAAA,GAAM,IAAKA,CAAAA,GAAL,CAASiC,QAAT,CAAkBS,GAAlB,CAAZ,CAFsC;AAAA,YAIlC,IAAA4e,iBAAA,IAAqB,IAAA,CAAKE,kBAA1B,EAA8C;AAAA,gBACxCf,MAAAA,GAAAA,GAAK/e,MAAA,CAAO3B,GAAP,CAAL0gB,CADwC;AAAA,gBAExC,MAAAgB,EAAA,GAAK/f,MAAA,CAAO1B,GAAP,CAAL,CAFwC;AAAA,gBAI1CygB,IAAAA,GAAAA,CAAGznB,IAAHynB,KAAYgB,EAAA,CAAGzoB,IAAfynB,IAAuB,EAAEA,GAAAA,CAAGznB,IAAHynB,KAAY,QAAZA,IAAwBA,GAAAA,CAAGznB,IAAHynB,KAAY,QAApCA,CAAzBA,EAAwE;AAAA,oBAClE,MAAA,IAAIre,YAAJ,CAAiB,CAAA,wBAAA,GAA2BvG,EAA3B,EAA6B,yDAA7B,GAAyF4kB,GAAAA,CAAGznB,IAA5F,EAAgG,EAAhG,GAAqGyoB,EAAA,CAAGzoB,IAAxG,EAAwH,UAAxH,CAAjB,CAAA,CADkE;AAAA,iBAJ9B;AAAA,aAJZ;AAAA,YAatC,IAAI,KAAK2G,QAAL,IAAiB,CAAC2hB,iBAAlB,IAAuC,IAAKE,CAAAA,kBAAhD,EAAoE;AAAA,gBAC1Df,MAAAA,GAAAA,GAAK/e,MAAA,CAAO3B,GAAP,CAAL0gB,CAD0D;AAAA,gBAE1D,MAAAgB,EAAA,GAAK/f,MAAA,CAAO1B,GAAP,CAAL,CAF0D;AAAA,gBAGhE,IAAIygB,GAAAA,CAAGznB,IAAHynB,KAAY,QAAZA,IAAwBgB,EAAA,CAAGzoB,IAAH,KAAY,QAAxC,EAAkD;AAAA,oBACvC,OAAAooB,YAAA,CAAa1e,GAAb,EAAkB3C,GAAlB,EAAuBC,GAAvB,CAAA,CADuC;AAAA,iBAHc;AAAA,aAb9B;AAAA,YAqBtC,OAAO,IAAA,CAAKL,QAAL,GACH0hB,mBAAA,CAAoB3e,GAApB,EAAyB3C,GAAzB,EAA8BC,GAA9B,EAAmC,IAAKL,CAAAA,QAAL,CAAcsC,QAAd,CAAuBS,GAAvB,CAAnC,CADG,GAEH0e,YAAA,CAAa1e,GAAb,EAAkB3C,GAAlB,EAAuBC,GAAvB,CAFJ,CArBsC;AAAA,SAzEA;AAAA,QAmG1CkC,SAAA,CAAUS,EAAV,EAAuC;AAAA,YACnCA,EAAA,CAAG,IAAK5C,CAAAA,GAAR,CADmC,CAAA;AAAA,YAEnC4C,EAAA,CAAG,IAAK3C,CAAAA,GAAR,CAFmC,CAAA;AAAA,YAGnC,IAAI,IAAKL,CAAAA,QAAT,EAAmB;AAAA,gBACfgD,EAAA,CAAG,IAAKhD,CAAAA,QAAR,CADe,CAAA;AAAA,aAHgB;AAAA,SAnGG;AAAA,QA2G1CwC,aAAA,GAAyB;AAAA,YACd,OAAA,IAAA,CADc;AAAA,SA3GiB;AAAA,QA+G1CnB,SAAA,GAAkC;AAAA,YACxB,MAAAC,UAAA,GAAa,CAACpF,EAAD,CAAb,CADwB;AAAA,YAG9B,IAAKqG,CAAAA,SAAL,CAAwBsC,KAAT,IAAS;AAAA,gBAAavD,UAAA,CAAA9N,IAAA,CAAKqR,KAAA,CAAMxD,SAAN,EAAL,CAAb,CAAA;AAAA,aAAxB,CAH8B,CAAA;AAAA,YAIvB,OAAAC,UAAA,CAJuB;AAAA,SA/GQ;AAAA,KAA9C,CAHsB;AAAA,CA/D1B;AA0LO,MAAMygB,MAAA,GAA4CP,cAAA,CAAe,IAAf,EAAqBZ,EAArB,EAAyBM,SAAzB,CAAlD,CA1LP;AA2LO,MAAMc,SAAA,GAA+CR,cAAA,CAAe,IAAf,EAAqBX,GAArB,EAA0BM,UAA1B,CAArD,CA3LP;AA4LO,MAAMc,QAAA,GAA8CT,cAAA,CAAe,GAAf,EAAoBV,EAApB,EAAwBM,SAAxB,CAApD,CA5LP;AA6LO,MAAMc,WAAA,GAAiDV,cAAA,CAAe,GAAf,EAAoBT,EAApB,EAAwBM,SAAxB,CAAvD,CA7LP;AA8LO,MAAMc,eAAA,GAAqDX,cAAA,CAAe,IAAf,EAAqBR,IAArB,EAA2BM,WAA3B,CAA3D,CA9LP;AA+LO,MAAMc,kBAAA,GAAwDZ,cAAA,CAAe,IAAf,EAAqBP,IAArB,EAA2BM,WAA3B,CAA9D;;ACxLP,MAAqBc,YAArB,CAAwD;AAAA;AASpD,IAAA1pB,WAAA,CAAYgE,MAAZ,EACYmD,MADZ,EAEYwiB,QAFZ,EAGYC,IAHZ,EAIYC,iBAJZ,EAKYC,iBALZ,EAKkD;AAAA,QAC9C,IAAKjtB,CAAAA,IAAL,GAAY+D,UAAZ,CAD8C;AAAA,QAE9C,IAAKoD,CAAAA,MAAL,GAAcA,MAAd,CAF8C;AAAA,QAG9C,IAAKmD,CAAAA,MAAL,GAAcA,MAAd,CAH8C;AAAA,QAI9C,IAAKwiB,CAAAA,QAAL,GAAgBA,QAAhB,CAJ8C;AAAA,QAK9C,IAAKC,CAAAA,IAAL,GAAYA,IAAZ,CAL8C;AAAA,QAM9C,IAAKC,CAAAA,iBAAL,GAAyBA,iBAAzB,CAN8C;AAAA,QAO9C,IAAKC,CAAAA,iBAAL,GAAyBA,iBAAzB,CAP8C;AAAA,KAdE;AAAA,IAwBpD,OAAOzvB,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAAmG;AAAA,QAC/F,IAAID,IAAA,CAAKvP,MAAL,KAAgB,CAApB;AAAA,YAEW,OAAAwP,OAAA,CAAQC,KAAR,CAAc,CAAyB,uBAAzB,CAAd,CAAA,CAHoF;AAAA,QAK/F,MAAMzF,MAAA,GAASwF,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,EAA0B5I,UAA1B,CAAf,CAL+F;AAAA,QAM3F,IAAA,CAACqD,MAAD;AAAA,YAAgB,OAAA,IAAA,CAN2E;AAAA,QAQzF,MAAA9K,OAAA,GAAWqQ,IAAA,CAAK,CAAL,CAAX,CARyF;AAAA,QAS/F,IAAI,OAAOrQ,OAAP,KAAmB,QAAnB,IAA+ByB,KAAA,CAAMC,OAAN,CAAc1B,OAAd,CAAnC;AAAA,YAEW,OAAAsQ,OAAA,CAAQC,KAAR,CAAc,CAAkD,gDAAlD,CAAd,CAAA,CAXoF;AAAA,QAa/F,IAAItC,MAAA,GAAS,IAAb,CAb+F;AAAA,QAc3F,IAAAjO,OAAA,CAAQ,QAAR,CAAA,EAAmB;AAAA,YACnBiO,MAAA,GAASqC,OAAA,CAAQmB,gBAAR,CAAyBzR,OAAA,CAAQ,QAAR,CAAzB,EAA4C,CAA5C,EAA+C,QAA/C,EAAyD0H,UAAzD,CAAT,CADmB;AAAA,YAEf,IAAA,CAACuG,MAAD;AAAA,gBAAgB,OAAA,IAAA,CAFD;AAAA,SAdwE;AAAA,QAmB/F,IAAIwiB,QAAA,GAAW,IAAf,CAnB+F;AAAA,QAoB3F,IAAAzwB,OAAA,CAAQ,UAAR,CAAA,EAAqB;AAAA,YACrBywB,QAAA,GAAWngB,OAAA,CAAQmB,gBAAR,CAAyBzR,OAAA,CAAQ,UAAR,CAAzB,EAA8C,CAA9C,EAAiD,UAAjD,EAA6D0H,UAA7D,CAAX,CADqB;AAAA,YAEjB,IAAA,CAAC+oB,QAAD;AAAA,gBAAkB,OAAA,IAAA,CAFD;AAAA,SApBsE;AAAA,QAyB/F,IAAIC,IAAA,GAAO,IAAX,CAzB+F;AAAA,QA0B3F,IAAA1wB,OAAA,CAAQ,MAAR,CAAA,EAAiB;AAAA,YACjB0wB,IAAA,GAAOpgB,OAAA,CAAQmB,gBAAR,CAAyBzR,OAAA,CAAQ,MAAR,CAAzB,EAA0C,CAA1C,EAA6C,MAA7C,EAAqD0H,UAArD,CAAP,CADiB;AAAA,YAEb,IAAA,CAACgpB,IAAD;AAAA,gBAAc,OAAA,IAAA,CAFD;AAAA,SA1B0E;AAAA,QA+B/F,IAAIC,iBAAA,GAAoB,IAAxB,CA/B+F;AAAA,QAgC3F,IAAA3wB,OAAA,CAAQ,qBAAR,CAAA,EAAgC;AAAA,YAChC2wB,iBAAA,GAAoBrgB,OAAA,CAAQmB,gBAAR,CAAyBzR,OAAA,CAAQ,qBAAR,CAAzB,EAAyD,CAAzD,EAA4D,qBAA5D,EAAmFyH,UAAnF,CAApB,CADgC;AAAA,YAE5B,IAAA,CAACkpB,iBAAD;AAAA,gBAA2B,OAAA,IAAA,CAFC;AAAA,SAhC2D;AAAA,QAqC/F,IAAIC,iBAAA,GAAoB,IAAxB,CArC+F;AAAA,QAsC3F,IAAA5wB,OAAA,CAAQ,qBAAR,CAAA,EAAgC;AAAA,YAChC4wB,iBAAA,GAAoBtgB,OAAA,CAAQmB,gBAAR,CAAyBzR,OAAA,CAAQ,qBAAR,CAAzB,EAAyD,CAAzD,EAA4D,qBAA5D,EAAmFyH,UAAnF,CAApB,CADgC;AAAA,YAE5B,IAAA,CAACmpB,iBAAD;AAAA,gBAA2B,OAAA,IAAA,CAFC;AAAA,SAtC2D;AAAA,QA2C/F,OAAO,IAAIJ,YAAJ,CAAiB1lB,MAAjB,EAAyBmD,MAAzB,EAAiCwiB,QAAjC,EAA2CC,IAA3C,EAAiDC,iBAAjD,EAAoEC,iBAApE,CAAP,CA3C+F;AAAA,KAxB/C;AAAA,IAsEpDngB,QAAA,CAASS,GAAT,EAAyC;AAAA,QACrC,OAAO,IAAI9C,IAAA,CAAKoiB,YAAT,CAAsB,KAAKviB,MAAL,GAAc,IAAKA,CAAAA,MAAL,CAAYwC,QAAZ,CAAqBS,GAArB,CAAd,GAA0C,EAAhE,EACH;AAAA,YACI5O,KAAA,EACK,IAAKmuB,CAAAA,QAAL,IAAiB,UAAjB,IACA,IAAA,CAAKC,IAAL,IAAa,MADb,IAED,SAJR;AAAA,YAKID,QAAA,EAAU,IAAKA,CAAAA,QAAL,GAAgB,IAAKA,CAAAA,QAAL,CAAchgB,QAAd,CAAuBS,GAAvB,CAAhB,GAA8C,KAAA,CAL5D;AAAA,YAMIwf,IAAA,EAAM,IAAKA,CAAAA,IAAL,GAAY,IAAKA,CAAAA,IAAL,CAAUjgB,QAAV,CAAmBS,GAAnB,CAAZ,GAAsC,KAAA,CANhD;AAAA,YAOI2f,qBAAA,EAAuB,IAAKF,CAAAA,iBAAL,GAAyB,IAAKA,CAAAA,iBAAL,CAAuBlgB,QAAvB,CAAgCS,GAAhC,CAAzB,GAAgE,KAAA,CAP3F;AAAA,YAQI4f,qBAAA,EAAuB,IAAKF,CAAAA,iBAAL,GAAyB,IAAKA,CAAAA,iBAAL,CAAuBngB,QAAvB,CAAgCS,GAAhC,CAAzB,GAAgE,KAAA,CAR3F;AAAA,SADG,CAAA,CAUA7O,MAVA,CAUO,IAAKyI,CAAAA,MAAL,CAAY2F,QAAZ,CAAqBS,GAArB,CAVP,CAAP,CADqC;AAAA,KAtEW;AAAA,IAoFpDR,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAKrG,CAAAA,MAAR,CADmC,CAAA;AAAA,QAEnC,IAAI,IAAKmD,CAAAA,MAAT,EAAiB;AAAA,YACbkD,EAAA,CAAG,IAAKlD,CAAAA,MAAR,CADa,CAAA;AAAA,SAFkB;AAAA,QAKnC,IAAI,IAAKwiB,CAAAA,QAAT,EAAmB;AAAA,YACftf,EAAA,CAAG,IAAKsf,CAAAA,QAAR,CADe,CAAA;AAAA,SALgB;AAAA,QAQnC,IAAI,IAAKC,CAAAA,IAAT,EAAe;AAAA,YACXvf,EAAA,CAAG,IAAKuf,CAAAA,IAAR,CADW,CAAA;AAAA,SARoB;AAAA,QAWnC,IAAI,IAAKC,CAAAA,iBAAT,EAA4B;AAAA,YACxBxf,EAAA,CAAG,IAAKwf,CAAAA,iBAAR,CADwB,CAAA;AAAA,SAXO;AAAA,QAcnC,IAAI,IAAKC,CAAAA,iBAAT,EAA4B;AAAA,YACxBzf,EAAA,CAAG,IAAKyf,CAAAA,iBAAR,CADwB,CAAA;AAAA,SAdO;AAAA,KApFa;AAAA,IAuGpDjgB,aAAA,GAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KAvG2B;AAAA,IA2GpDnB,SAAA,GAAkC;AAAA,QAC9B,MAAMxP,OAAA,GAA+B,EAArC,CAD8B;AAAA,QAE9B,IAAI,IAAKiO,CAAAA,MAAT,EAAiB;AAAA,YACbjO,OAAA,CAAQ,QAAR,CAAA,GAAoB,KAAKiO,MAAL,CAAYuB,SAAZ,EAApB,CADa;AAAA,SAFa;AAAA,QAK9B,IAAI,IAAKihB,CAAAA,QAAT,EAAmB;AAAA,YACfzwB,OAAA,CAAQ,UAAR,CAAA,GAAsB,KAAKywB,QAAL,CAAcjhB,SAAd,EAAtB,CADe;AAAA,SALW;AAAA,QAQ9B,IAAI,IAAKkhB,CAAAA,IAAT,EAAe;AAAA,YACX1wB,OAAA,CAAQ,MAAR,CAAA,GAAkB,KAAK0wB,IAAL,CAAUlhB,SAAV,EAAlB,CADW;AAAA,SARe;AAAA,QAW9B,IAAI,IAAKmhB,CAAAA,iBAAT,EAA4B;AAAA,YACxB3wB,OAAA,CAAQ,qBAAR,CAAA,GAAiC,KAAK2wB,iBAAL,CAAuBnhB,SAAvB,EAAjC,CADwB;AAAA,SAXE;AAAA,QAc9B,IAAI,IAAKohB,CAAAA,iBAAT,EAA4B;AAAA,YACxB5wB,OAAA,CAAQ,qBAAR,CAAA,GAAiC,KAAK4wB,iBAAL,CAAuBphB,SAAvB,EAAjC,CADwB;AAAA,SAdE;AAAA,QAiB9B,OAAO;AAAA,YAAC,eAAD;AAAA,YAAkB,IAAK1E,CAAAA,MAAL,CAAY0E,SAAZ,EAAlB;AAAA,YAA2CxP,OAA3C;AAAA,SAAP,CAjB8B;AAAA,KA3GkB;AAAA;;ACExD,MAAM+wB,MAAN,CAAmC;AAAA,IAI/BjqB,WAAA,CAAYzB,KAAZ,EAA+B;AAAA,QAC3B,IAAK1B,CAAAA,IAAL,GAAY8D,UAAZ,CAD2B;AAAA,QAE3B,IAAKpC,CAAAA,KAAL,GAAaA,KAAb,CAF2B;AAAA,KAJA;AAAA,IAS/B,OAAOlE,KAAP,CAAakP,IAAb,EAA2CC,OAA3C,EAA+F;AAAA,QAC3F,IAAID,IAAA,CAAKvP,MAAL,KAAgB,CAApB;AAAA,YAEI,OAAOwP,OAAA,CAAQC,KAAR,CAAc,CAAA,+BAAA,GAAkCF,IAAA,CAAKvP,MAAL,GAAc,CAAhD,EAA4D,SAA5D,CAAd,CAAP,CAHuF;AAAA,QAK3F,MAAMuE,KAAA,GAAQiL,OAAA,CAAQnP,KAAR,CAAckP,IAAA,CAAK,CAAL,CAAd,EAAuB,CAAvB,CAAd,CAL2F;AAAA,QAMvF,IAAA,CAAChL,KAAD;AAAA,YAAe,OAAA,IAAA,CANwE;AAAA,QAQvF,IAAAA,KAAA,CAAM1B,IAAN,CAAW6D,IAAX,KAAoB,OAApB,IAA+BnC,KAAA,CAAM1B,IAAN,CAAW6D,IAAX,KAAoB,QAAnD,IAA+DnC,KAAA,CAAM1B,IAAN,CAAW6D,IAAX,KAAoB,OAAnF;AAAA,YAEA,OAAO8I,OAAA,CAAQC,KAAR,CAAc,CAAA,qDAAA,GAAwDjI,UAAA,CAASjD,KAAA,CAAM1B,IAAf,CAAxD,EAAuF,SAAvF,CAAd,CAAP,CAVuF;AAAA,QAYpF,OAAA,IAAIotB,MAAJ,CAAW1rB,KAAX,CAAA,CAZoF;AAAA,KAThE;AAAA,IAwB/BoL,QAAA,CAASS,GAAT,EAAyC;AAAA,QACrC,MAAM7L,KAAA,GAAQ,IAAKA,CAAAA,KAAL,CAAWoL,QAAX,CAAoBS,GAApB,CAAd,CADqC;AAAA,QAEjC,IAAA,OAAO7L,KAAP,KAAiB,QAAjB,EAA2B;AAAA,YAC3B,OAAOA,KAAA,CAAMvE,MAAb,CAD2B;AAAA,SAA3B,MAEO,IAAAW,KAAA,CAAMC,OAAN,CAAc2D,KAAd,CAAA,EAAsB;AAAA,YAC7B,OAAOA,KAAA,CAAMvE,MAAb,CAD6B;AAAA,SAAtB,MAEJ;AAAA,YACG,MAAA,IAAI8P,YAAJ,CAAiB,CAA2D,wDAA3D,GAA2DtI,UAAA,CAAS4H,MAAA,CAAO7K,KAAP,CAAT,CAA3D,EAA6F,SAA7F,CAAjB,CAAA,CADH;AAAA,SAN8B;AAAA,KAxBV;AAAA,IAmC/BqL,SAAA,CAAUS,EAAV,EAAuC;AAAA,QACnCA,EAAA,CAAG,IAAK9L,CAAAA,KAAR,CADmC,CAAA;AAAA,KAnCR;AAAA,IAuC/BsL,aAAA,GAAyB;AAAA,QACd,OAAA,KAAA,CADc;AAAA,KAvCM;AAAA,IA2C/BnB,SAAA,GAAkC;AAAA,QACxB,MAAAC,UAAA,GAAa,CAAC,QAAD,CAAb,CADwB;AAAA,QAG9B,IAAKiB,CAAAA,SAAL,CAAwBsC,KAAT,IAAS;AAAA,YAAavD,UAAA,CAAA9N,IAAA,CAAKqR,KAAA,CAAMxD,SAAN,EAAL,CAAb,CAAA;AAAA,SAAxB,CAH8B,CAAA;AAAA,QAIvB,OAAAC,UAAA,CAJuB;AAAA,KA3CH;AAAA;;ACR5B,SAASuhB,UAAT,CAAoBjmB,CAApB,EAA6C;AAAA,IAChD,OAAO,YAAY;AAAA,QACVA,CAAA,IAAA,CAAA,CADU;AAAA,QAEfA,CAAA,GAAKA,CAAA,GAAI,UAAJ,GAAkB,CAAvB,CAFe;AAAA,QAGf,IAAIrC,CAAA,GAAIS,IAAA,CAAK8nB,IAAL,CAAUlmB,CAAA,GAAKA,CAAA,KAAM,EAArB,EAA0B,CAAIA,GAAAA,CAA9B,CAAR,CAHe;AAAA,QAIVrC,CAAA,GAAAA,CAAA,GAAIS,IAAA,CAAK8nB,IAAL,CAAUvoB,CAAA,GAAKA,CAAA,KAAM,CAArB,EAAyB,EAAA,GAAKA,CAA9B,CAAJ,GAAwCA,CAAxC,CAJU;AAAA,QAKN,OAAA,CAAA,CAAAA,CAAA,GAAKA,CAAA,KAAM,EAAX,MAAoB,CAApB,IAAyB,UAAzB,CALM;AAAA,KAAnB,CADgD;AAAA;;ACmDpD,MAAMwoB,WAAA,GAAkC;AAAA;AAEpC,IAAA,IAAA,EAAMhB,MAF8B;AAAA,IAGpC,MAAMC,SAH8B;AAAA,IAIpC,KAAKE,WAJ+B;AAAA,IAKpC,KAAKD,QAL+B;AAAA,IAMpC,MAAMG,kBAN8B;AAAA,IAOpC,MAAMD,eAP8B;AAAA,IAQpC,SAAStf,SAR2B;AAAA,IASpC,MAAMsc,EAT8B;AAAA,IAUpC,WAAWtc,SAVyB;AAAA,IAWpC,QAAQyd,IAX4B;AAAA,IAYpC,YAAYzB,QAZwB;AAAA,IAapC,YAAY/W,kBAbwB;AAAA,IAcpC,UAAU3E,gBAd0B;AAAA,IAepC,SAASQ,eAf2B;AAAA,IAgBpC,MAAM0b,EAhB8B;AAAA,IAiBpC,YAAYG,OAjBwB;AAAA,IAkBpC,eAAe5B,WAlBqB;AAAA,IAmBpC,mBAAmBA,WAnBiB;AAAA,IAoBpC,mBAAmBA,WApBiB;AAAA,IAqBpC,UAAUgF,MArB0B;AAAA,IAsBpC,OAAO3D,GAtB6B;AAAA,IAuBpC,WAAWhd,OAvByB;AAAA,IAwBpC,SAASyd,KAxB2B;AAAA,IAyBpC,UAAU7c,SAzB0B;AAAA,IA0BpC,iBAAiBwf,YA1BmB;AAAA,IA2BpC,UAAUxf,SA3B0B;AAAA,IA4BpC,SAAS2d,KA5B2B;AAAA,IA6BpC,QAAQpG,IA7B4B;AAAA,IA8BpC,UAAUvX,SA9B0B;AAAA,IA+BpC,cAAcsB,QA/BsB;AAAA,IAgCpC,YAAYA,QAhCwB;AAAA,IAiCpC,aAAaA,QAjCuB;AAAA,IAkCpC,aAAaA,QAlCuB;AAAA,IAmCpC,OAAO6U,GAnC6B;AAAA,IAoCpC,UAAU5L,MApC0B;AAAA,IAqCpC,YAAYkK,QArCwB;AAAA,IAsCpC,UAAUI,MAtC0B;AAAA,CAAxC,CApDA;AA6FA,SAASva,IAAT,CAAc4F,GAAd,EAAsC,CAAC/F,CAAD,EAAIC,CAAJ,EAAOJ,CAAP,EAAUD,CAAV,CAAtC,EAAkE;AAAA,IAC1DI,CAAA,GAAAA,CAAA,CAAEsF,QAAF,CAAWS,GAAX,CAAA,CAD0D;AAAA,IAE1D9F,CAAA,GAAAA,CAAA,CAAEqF,QAAF,CAAWS,GAAX,CAAA,CAF0D;AAAA,IAG1DlG,CAAA,GAAAA,CAAA,CAAEyF,QAAF,CAAWS,GAAX,CAAA,CAH0D;AAAA,IAI9D,MAAMzG,KAAA,GAAQM,CAAA,GAAIA,CAAA,CAAE0F,QAAF,CAAWS,GAAX,CAAJ,GAAsB,CAApC,CAJ8D;AAAA,IAK9D,MAAMX,KAAA,GAAQV,YAAA,CAAa1E,CAAb,EAAgBC,CAAhB,EAAmBJ,CAAnB,EAAsBP,KAAtB,CAAd,CAL8D;AAAA,IAM9D,IAAI8F,KAAJ;AAAA,QAAW,MAAM,IAAIK,YAAJ,CAAiBL,KAAjB,CAAN,CANmD;AAAA,IAQvD,OAAA,IAAIrF,KAAJ,CAAUC,CAAA,GAAI,GAAJ,GAAUV,KAApB,EAA2BW,CAAA,GAAI,GAAJ,GAAUX,KAArC,EAA4CO,CAAA,GAAI,GAAJ,GAAUP,KAAtD,EAA6DA,KAA7D,CAAA,CARuD;AAAA,CA7FlE;AAwGA,SAAS0mB,IAAT,CAAcjgB,GAAd,EAAsC,CAACnH,CAAD,EAAI1D,CAAJ,EAAOsE,CAAP,EAAUI,CAAV,CAAtC,EAAkE;AAAA,IAC1DhB,CAAA,GAAAA,CAAA,CAAE0G,QAAF,CAAWS,GAAX,CAAA,CAD0D;AAAA,IAE1D7K,CAAA,GAAAA,CAAA,CAAEoK,QAAF,CAAWS,GAAX,CAAA,CAF0D;AAAA,IAG1DvG,CAAA,GAAAA,CAAA,CAAE8F,QAAF,CAAWS,GAAX,CAAA,CAH0D;AAAA,IAI9D,MAAMzG,KAAA,GAAQM,CAAA,GAAIA,CAAA,CAAE0F,QAAF,CAAWS,GAAX,CAAJ,GAAsB,CAApC,CAJ8D;AAAA,IAK9D,MAAMX,KAAA,GAAQT,YAAA,CAAa/F,CAAb,EAAgB1D,CAAhB,EAAmBsE,CAAnB,EAAsBF,KAAtB,CAAd,CAL8D;AAAA,IAM9D,IAAI8F,KAAJ;AAAA,QAAW,MAAM,IAAIK,YAAJ,CAAiBL,KAAjB,CAAN,CANmD;AAAA,IAQxD,MAAA6gB,aAAA,GAAgB,MAAA,GAAQrnB,CAAR,EAAS,EAAT,GAAc1D,CAAd,EAAqB,GAArB,GAAqBsE,CAArB,KAAA,GAA4BF,KAA5B,EAAiC,CAAjC,CAAhB,CARwD;AAAA,IASxD,MAAAQ,KAAA,GAAQC,KAAA,CAAM/J,KAAN,CAAYiwB,aAAZ,CAAR,CATwD;AAAA,IAU9D,IAAI,CAACnmB,KAAL;AAAA,QAAY,MAAM,IAAI2F,YAAJ,CAAiB,CAAA,4BAAA,GAA+BwgB,aAA/B,EAAjB,CAAA,CAAN,CAVkD;AAAA,IAWvD,OAAAnmB,KAAA,CAXuD;AAAA,CAxGlE;AAsHA,SAAS3D,GAAT,CACIxF,GADJ,EAEIrB,GAFJ,EAKW;AAAA,IACP,OAAOqB,GAAA,IAAOrB,GAAd,CADO;AAAA,CA3HX;AA+HA,SAAS4G,GAAT,CAAavF,GAAb,EAA0BrB,GAA1B,EAEG;AAAA,IACO,MAAAwe,CAAA,GAAIxe,GAAA,CAAIqB,GAAJ,CAAJ,CADP;AAAA,IAEQ,OAAA,OAAOmd,CAAP,KAAa,WAAb,GAA2B,IAA3B,GAAkCA,CAAlC,CAFR;AAAA,CAjIH;AAsIA,SAASoS,YAAT,CAAsBpS,CAAtB,EAA8BlU,CAA9B,EAEGhI,CAFH,EAEcuT,CAFd,EAEyB;AAAA,IACrB,OAAOvT,CAAA,IAAKuT,CAAZ,EAAe;AAAA,QACL,MAAAwG,CAAA,GAAK/Z,CAAA,GAAIuT,CAAJ,IAAU,CAAf,CADK;AAAA,QAEP,IAAAvL,CAAA,CAAE+R,CAAF,MAASmC,CAAT;AAAA,YACO,OAAA,IAAA,CAHA;AAAA,QAIP,IAAAlU,CAAA,CAAE+R,CAAF,IAAOmC,CAAP;AAAA,YACA3I,CAAA,GAAIwG,CAAA,GAAI,CAAR,CADA;AAAA;AAAA,YAGA/Z,CAAA,GAAI+Z,CAAA,GAAI,CAAR,CAPO;AAAA,KADM;AAAA,IAUd,OAAA,KAAA,CAVc;AAAA,CAxIzB;AAqJA,SAASwU,OAAT,CAAiB3tB,IAAjB,EAAsC;AAAA,IAClC,OAAO,EAACA,IAAD,EAAP,CADkC;AAAA,CArJtC;AAyJA,SAAS4tB,UAAT,CAAoB/nB,GAApB,EAAiC;AAAA,IAC7B,IAAIgoB,IAAA,GAAO,CAAX,CAD6B;AAAA,IAEzB,IAAAhoB,GAAA,CAAI1I,MAAJ,KAAe,CAAf,EAAkB;AAAA,QACX,OAAA0wB,IAAA,CADW;AAAA,KAFO;AAAA,IAK7B,KAAA,IAASzuB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIyG,GAAA,CAAI1I,MAAxB,EAAgCiC,CAAA,EAAhC,EAAqC;AAAA,QAC3B,MAAA0uB,IAAA,GAAOjoB,GAAA,CAAIkoB,UAAJ,CAAe3uB,CAAf,CAAP,CAD2B;AAAA,QAExByuB,IAAA,GAAA,CAAAA,IAAA,IAAQ,CAAR,IAAaA,IAAb,GAAqBC,IAArB,CAFwB;AAAA,QAGjCD,IAAA,GAAOA,IAAA,GAAOA,IAAd,CAHiC;AAAA,KALR;AAAA,IAUtB,OAAAA,IAAA,CAVsB;AAAA,CAzJjC;AAsKA3c,kBAAA,CAAmBkB,QAAnB,CAA4Bmb,WAA5B,EAAyC;AAAA,IACrC,OAAS,EAAA;AAAA,QACLnpB,SADK;AAAA,QAEL,CAACL,UAAD,CAFK;AAAA,QAGL,CAACwJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc;AAAA,YAAE,MAAM,IAAIrO,YAAJ,CAAiBqO,CAAA,CAAExO,QAAF,CAAWS,GAAX,CAAjB,CAAN,CAAF;AAAA,SAHT;AAAA,KAD4B;AAAA,IAMrC,QAAU,EAAA;AAAA,QACNxJ,UADM;AAAA,QAEN,CAACI,SAAD,CAFM;AAAA,QAGN,CAACoJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc0S,UAAA,CAAazhB,MAAA,CAAO+O,CAAA,CAAExO,QAAF,CAAWS,GAAX,CAAP,CAAb,CAHR;AAAA,KAN2B;AAAA,IAWrC,SAAW,EAAA;AAAA,QACP/I,OAAA,CAAMV,UAAN,EAAkB,CAAlB,CADO;AAAA,QAEP,CAACG,SAAD,CAFO;AAAA,QAGP,CAACsJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc;AAAA,YACV,OAAOA,CAAA,CAAExO,QAAF,CAAWS,GAAX,CAAgB3F,CAAAA,aAAhB,CAA8B,IAA9B,CAAoC2B,CAAAA,OAApC,EAAP,CADU;AAAA,SAHP;AAAA,KAX0B;AAAA,IAkBrC,KAAO,EAAA;AAAA,QACHtF,SADG;AAAA,QAEH;AAAA,YAACH,UAAD;AAAA,YAAaA,UAAb;AAAA,YAAyBA,UAAzB;AAAA,SAFG;AAAA,QAGH6D,IAHG;AAAA,KAlB8B;AAAA,IAuBrC,MAAQ,EAAA;AAAA,QACJ1D,SADI;AAAA,QAEJ;AAAA,YAACH,UAAD;AAAA,YAAaA,UAAb;AAAA,YAAyBA,UAAzB;AAAA,YAAqCA,UAArC;AAAA,SAFI;AAAA,QAGJ6D,IAHI;AAAA,KAvB6B;AAAA,IA4BrC,KAAO,EAAA;AAAA,QACH1D,SADG;AAAA,QAEH;AAAA,YAACH,UAAD;AAAA,YAAaA,UAAb;AAAA,YAAyBA,UAAzB;AAAA,SAFG;AAAA,QAGH0pB,IAHG;AAAA,KA5B8B;AAAA,IAiCrC,MAAQ,EAAA;AAAA,QACJvpB,SADI;AAAA,QAEJ;AAAA,YAACH,UAAD;AAAA,YAAaA,UAAb;AAAA,YAAyBA,UAAzB;AAAA,YAAqCA,UAArC;AAAA,SAFI;AAAA,QAGJ0pB,IAHI;AAAA,KAjC6B;AAAA,IAsCrC,KAAO,EAAA;AAAA,QACHxtB,IAAA,EAAMgE,WADH;AAAA,QAEHwN,SAAA,EAAW;AAAA,YACP;AAAA,gBACI,CAACzN,UAAD,CADJ;AAAA,gBAEI,CAACwJ,GAAD,EAAM,CAACpP,GAAD,CAAN,KAAgBwF,GAAA,CAAIxF,GAAA,CAAI2O,QAAJ,CAAaS,GAAb,CAAJ,EAAuBA,GAAA,CAAItN,UAAJ,EAAvB,CAFpB;AAAA,aADO;AAAA,YAIJ;AAAA,gBACC;AAAA,oBAAC8D,UAAD;AAAA,oBAAaG,UAAb;AAAA,iBADD;AAAA,gBAEC,CAACqJ,GAAD,EAAM,CAACpP,GAAD,EAAMrB,GAAN,CAAN,KAAqB6G,GAAA,CAAIxF,GAAA,CAAI2O,QAAJ,CAAaS,GAAb,CAAJ,EAAuBzQ,GAAA,CAAIgQ,QAAJ,CAAaS,GAAb,CAAvB,CAFtB;AAAA,aAJI;AAAA,SAFR;AAAA,KAtC8B;AAAA,IAkDrC,KAAO,EAAA;AAAA,QACHvN,IAAA,EAAMmE,SADH;AAAA,QAEHqN,SAAA,EAAW;AAAA,YACP;AAAA,gBACI,CAACzN,UAAD,CADJ;AAAA,gBAEI,CAACwJ,GAAD,EAAM,CAACpP,GAAD,CAAN,KAAgBuF,GAAA,CAAIvF,GAAA,CAAI2O,QAAJ,CAAaS,GAAb,CAAJ,EAAuBA,GAAA,CAAItN,UAAJ,EAAvB,CAFpB;AAAA,aADO;AAAA,YAIJ;AAAA,gBACC;AAAA,oBAAC8D,UAAD;AAAA,oBAAaG,UAAb;AAAA,iBADD;AAAA,gBAEC,CAACqJ,GAAD,EAAM,CAACpP,GAAD,EAAMrB,GAAN,CAAN,KAAqB4G,GAAA,CAAIvF,GAAA,CAAI2O,QAAJ,CAAaS,GAAb,CAAJ,EAAuBzQ,GAAA,CAAIgQ,QAAJ,CAAaS,GAAb,CAAvB,CAFtB;AAAA,aAJI;AAAA,SAFR;AAAA,KAlD8B;AAAA,IA8DrC,eAAiB,EAAA;AAAA,QACbpJ,SADa;AAAA,QAEb,CAACJ,UAAD,CAFa;AAAA,QAGb,CAACwJ,GAAD,EAAM,CAACpP,GAAD,CAAN,KAAgBuF,GAAA,CAAIvF,GAAA,CAAI2O,QAAJ,CAAaS,GAAb,CAAJ,EAAuBA,GAAA,CAAIoC,YAAJ,IAAoB,EAA3C,CAHH;AAAA,KA9DoB;AAAA,IAmErC,YAAc,EAAA;AAAA,QACVzL,UADU;AAAA,QAEV,EAFU;AAAA,QAGTqJ,GAAD,IAASA,GAAA,CAAItN,UAAJ,EAHC;AAAA,KAnEuB;AAAA,IAwErC,eAAiB,EAAA;AAAA,QACb8D,UADa;AAAA,QAEb,EAFa;AAAA,QAGZwJ,GAAD,IAASA,GAAA,CAAI0C,YAAJ,EAHI;AAAA,KAxEoB;AAAA,IA6ErC,IAAM,EAAA;AAAA,QACF9L,SADE;AAAA,QAEF,EAFE;AAAA,QAGDoJ,GAAD,IAASA,GAAA,CAAInN,EAAJ,EAHP;AAAA,KA7E+B;AAAA,IAkFrC,MAAQ,EAAA;AAAA,QACJ0D,UADI;AAAA,QAEJ,EAFI;AAAA,QAGHyJ,GAAD,IAASA,GAAA,CAAIkC,OAAJ,CAAYwe,IAHjB;AAAA,KAlF6B;AAAA,IAuFrC,OAAS,EAAA;AAAA,QACLnqB,UADK;AAAA,QAEL,EAFK;AAAA,QAGJyJ,GAAD,IAASA,GAAA,CAAIkC,OAAJ,CAAYye,KAAZ,IAAqB,CAHzB;AAAA,KAvF4B;AAAA,IA4FrC,sBAAwB,EAAA;AAAA,QACpBpqB,UADoB;AAAA,QAEpB,EAFoB;AAAA,QAGnByJ,GAAD,IAASA,GAAA,CAAIgD,kBAAJ,EAHW;AAAA,KA5Fa;AAAA,IAiGrC,eAAiB,EAAA;AAAA,QACbzM,UADa;AAAA,QAEb,CAACC,UAAD,CAFa;AAAA,QAGb,CAACwJ,GAAD,EAAM,CAAC7K,CAAD,CAAN,KAAc6K,GAAA,CAAI6C,YAAJ,CAAiB1N,CAAA,CAAEoK,QAAF,CAAWS,GAAX,CAAjB,CAHD;AAAA,KAjGoB;AAAA,IAsGrC,iBAAmB,EAAA;AAAA,QACfzJ,UADe;AAAA,QAEf,EAFe;AAAA,QAGdyJ,GAAD,IAASA,GAAA,CAAIkC,OAAJ,CAAY0e,cAAZ,IAA8B,CAHxB;AAAA,KAtGkB;AAAA,IA2GrC,eAAiB,EAAA;AAAA,QACbrqB,UADa;AAAA,QAEb,EAFa;AAAA,QAGZyJ,GAAD,IAASA,GAAA,CAAIkC,OAAJ,CAAY2e,YAAZ,IAA4B,CAHxB;AAAA,KA3GoB;AAAA,IAgHrC,cAAgB,EAAA;AAAA,QACZtqB,UADY;AAAA,QAEZ,EAFY;AAAA,QAGXyJ,GAAD,IAASA,GAAA,CAAIkC,OAAJ,CAAY4e,WAAZ,IAA2B,CAHxB;AAAA,KAhHqB;AAAA,IAqHrC,uBAAyB,EAAA;AAAA,QACrBvqB,UADqB;AAAA,QAErB,EAFqB;AAAA,QAGpByJ,GAAD,IAASA,GAAA,CAAIkC,OAAJ,CAAY6e,mBAAZ,IAAmC,CAHvB;AAAA,KArHY;AAAA,IA0HrC,qBAAuB,EAAA;AAAA,QACnBxqB,UADmB;AAAA,QAEnB,EAFmB;AAAA,QAGlByJ,GAAD,IAASA,GAAA,CAAIkC,OAAJ,CAAY8e,iBAAZ,IAAiC,CAHvB;AAAA,KA1Hc;AAAA,IA+HrC,aAAe,EAAA;AAAA,QACXpqB,SADW;AAAA,QAEX,EAFW;AAAA,QAGVoJ,GAAD,IAASA,GAAA,CAAIkC,OAAJ,CAAY+e,WAAZ,KAA4B,KAAY,CAAxC,GAAwC,IAAxC,GAA+CjhB,GAAA,CAAIkC,OAAJ,CAAY+e,WAHzD;AAAA,KA/HsB;AAAA,IAoIrC,GAAK,EAAA;AAAA,QACD1qB,UADC;AAAA,QAED6pB,OAAA,CAAQ7pB,UAAR,CAFC;AAAA,QAGD,CAACyJ,GAAD,EAAMb,IAAN,KAAe;AAAA,YACX,IAAIjO,MAAA,GAAS,CAAb,CADW;AAAA,YAEX,KAAWiP,MAAAA,GAAX,IAAkBhB,IAAlB,EAAwB;AAAA,gBACVjO,MAAA,IAAAiP,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAA,CADU;AAAA,aAFb;AAAA,YAKJ,OAAA9O,MAAA,CALI;AAAA,SAHd;AAAA,KApIgC;AAAA,IA+IrC,GAAK,EAAA;AAAA,QACDqF,UADC;AAAA,QAED6pB,OAAA,CAAQ7pB,UAAR,CAFC;AAAA,QAGD,CAACyJ,GAAD,EAAMb,IAAN,KAAe;AAAA,YACX,IAAIjO,MAAA,GAAS,CAAb,CADW;AAAA,YAEX,KAAWiP,MAAAA,GAAX,IAAkBhB,IAAlB,EAAwB;AAAA,gBACVjO,MAAA,IAAAiP,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAA,CADU;AAAA,aAFb;AAAA,YAKJ,OAAA9O,MAAA,CALI;AAAA,SAHd;AAAA,KA/IgC;AAAA,IA0JrC,GAAK,EAAA;AAAA,QACDuB,IAAA,EAAM8D,UADL;AAAA,QAED0N,SAAA,EAAW;AAAA,YACP;AAAA,gBACI;AAAA,oBAAC1N,UAAD;AAAA,oBAAaA,UAAb;AAAA,iBADJ;AAAA,gBAEI,CAACyJ,GAAD,EAAM,CAACnG,CAAD,EAAIC,CAAJ,CAAN,KAAiBD,CAAA,CAAE0F,QAAF,CAAWS,GAAX,CAAkBlG,GAAAA,CAAA,CAAEyF,QAAF,CAAWS,GAAX,CAFvC;AAAA,aADO;AAAA,YAIJ;AAAA,gBACC,CAACzJ,UAAD,CADD;AAAA,gBAEC,CAACyJ,GAAD,EAAM,CAACnG,CAAD,CAAN,KAAc,CAACA,CAAA,CAAE0F,QAAF,CAAWS,GAAX,CAFhB;AAAA,aAJI;AAAA,SAFV;AAAA,KA1JgC;AAAA,IAsKrC,GAAK,EAAA;AAAA,QACDzJ,UADC;AAAA,QAED;AAAA,YAACA,UAAD;AAAA,YAAaA,UAAb;AAAA,SAFC;AAAA,QAGD,CAACyJ,GAAD,EAAM,CAACnG,CAAD,EAAIC,CAAJ,CAAN,KAAiBD,CAAA,CAAE0F,QAAF,CAAWS,GAAX,CAAkBlG,GAAAA,CAAA,CAAEyF,QAAF,CAAWS,GAAX,CAHlC;AAAA,KAtKgC;AAAA,IA2KrC,GAAK,EAAA;AAAA,QACDzJ,UADC;AAAA,QAED;AAAA,YAACA,UAAD;AAAA,YAAaA,UAAb;AAAA,SAFC;AAAA,QAGD,CAACyJ,GAAD,EAAM,CAACnG,CAAD,EAAIC,CAAJ,CAAN,KAAiBD,CAAA,CAAE0F,QAAF,CAAWS,GAAX,CAAkBlG,GAAAA,CAAA,CAAEyF,QAAF,CAAWS,GAAX,CAHlC;AAAA,KA3KgC;AAAA,IAgLrC,KAAO,EAAA;AAAA,QACHzJ,UADG;AAAA,QAEH,EAFG;AAAA,QAGH,MAAM0B,IAAA,CAAKipB,GAHR;AAAA,KAhL8B;AAAA,IAqLrC,IAAM,EAAA;AAAA,QACF3qB,UADE;AAAA,QAEF,EAFE;AAAA,QAGF,MAAM0B,IAAA,CAAKmQ,EAHT;AAAA,KArL+B;AAAA,IA0LrC,GAAK,EAAA;AAAA,QACD7R,UADC;AAAA,QAED,EAFC;AAAA,QAGD,MAAM0B,IAAA,CAAKkpB,CAHV;AAAA,KA1LgC;AAAA,IA+LrC,GAAK,EAAA;AAAA,QACD5qB,UADC;AAAA,QAED;AAAA,YAACA,UAAD;AAAA,YAAaA,UAAb;AAAA,SAFC;AAAA,QAGD,CAACyJ,GAAD,EAAM,CAAClG,CAAD,EAAIH,CAAJ,CAAN,KAAiB1B,IAAA,CAAKqE,GAAL,CAASxC,CAAA,CAAEyF,QAAF,CAAWS,GAAX,CAAT,EAA0BrG,CAAA,CAAE4F,QAAF,CAAWS,GAAX,CAA1B,CAHhB;AAAA,KA/LgC;AAAA,IAoMrC,MAAQ,EAAA;AAAA,QACJzJ,UADI;AAAA,QAEJ,CAACA,UAAD,CAFI;AAAA,QAGJ,CAACyJ,GAAD,EAAM,CAACjN,CAAD,CAAN,KAAckF,IAAA,CAAKgU,IAAL,CAAUlZ,CAAA,CAAEwM,QAAF,CAAWS,GAAX,CAAV,CAHV;AAAA,KApM6B;AAAA,IAyMrC,OAAS,EAAA;AAAA,QACLzJ,UADK;AAAA,QAEL,CAACA,UAAD,CAFK;AAAA,QAGL,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAKoQ,GAAL,CAASoD,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAT,CAA4B/H,GAAAA,IAAA,CAAKmpB,IAH1C;AAAA,KAzM4B;AAAA,IA8MrC,IAAM,EAAA;AAAA,QACF7qB,UADE;AAAA,QAEF,CAACA,UAAD,CAFE;AAAA,QAGF,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAKoQ,GAAL,CAASoD,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAT,CAHZ;AAAA,KA9M+B;AAAA,IAmNrC,MAAQ,EAAA;AAAA,QACJzJ,UADI;AAAA,QAEJ,CAACA,UAAD,CAFI;AAAA,QAGJ,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAKoQ,GAAL,CAASoD,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAT,CAA4B/H,GAAAA,IAAA,CAAKipB,GAH3C;AAAA,KAnN6B;AAAA,IAwNrC,KAAO,EAAA;AAAA,QACH3qB,UADG;AAAA,QAEH,CAACA,UAAD,CAFG;AAAA,QAGH,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAK0U,GAAL,CAASlB,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAT,CAHX;AAAA,KAxN8B;AAAA,IA6NrC,KAAO,EAAA;AAAA,QACHzJ,UADG;AAAA,QAEH,CAACA,UAAD,CAFG;AAAA,QAGH,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAK6T,GAAL,CAASL,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAT,CAHX;AAAA,KA7N8B;AAAA,IAkOrC,KAAO,EAAA;AAAA,QACHzJ,UADG;AAAA,QAEH,CAACA,UAAD,CAFG;AAAA,QAGH,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAKqQ,GAAL,CAASmD,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAT,CAHX;AAAA,KAlO8B;AAAA,IAuOrC,MAAQ,EAAA;AAAA,QACJzJ,UADI;AAAA,QAEJ,CAACA,UAAD,CAFI;AAAA,QAGJ,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAKopB,IAAL,CAAU5V,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAV,CAHV;AAAA,KAvO6B;AAAA,IA4OrC,MAAQ,EAAA;AAAA,QACJzJ,UADI;AAAA,QAEJ,CAACA,UAAD,CAFI;AAAA,QAGJ,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAKqpB,IAAL,CAAU7V,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAV,CAHV;AAAA,KA5O6B;AAAA,IAiPrC,MAAQ,EAAA;AAAA,QACJzJ,UADI;AAAA,QAEJ,CAACA,UAAD,CAFI;AAAA,QAGJ,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAKyT,IAAL,CAAUD,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAV,CAHV;AAAA,KAjP6B;AAAA,IAsPrC,KAAO,EAAA;AAAA,QACHzJ,UADG;AAAA,QAEH6pB,OAAA,CAAQ7pB,UAAR,CAFG;AAAA,QAGH,CAACyJ,GAAD,EAAMb,IAAN,KAAelH,IAAA,CAAKgO,GAAL,CAAS,GAAG9G,IAAA,CAAK3N,GAAL,CAAgB2O,GAAP,IAAOA,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAhB,CAAZ,CAHZ;AAAA,KAtP8B;AAAA,IA2PrC,KAAO,EAAA;AAAA,QACHzJ,UADG;AAAA,QAEH6pB,OAAA,CAAQ7pB,UAAR,CAFG;AAAA,QAGH,CAACyJ,GAAD,EAAMb,IAAN,KAAelH,IAAA,CAAKiO,GAAL,CAAS,GAAG/G,IAAA,CAAK3N,GAAL,CAAgB2O,GAAP,IAAOA,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAhB,CAAZ,CAHZ;AAAA,KA3P8B;AAAA,IAgQrC,KAAO,EAAA;AAAA,QACHzJ,UADG;AAAA,QAEH,CAACA,UAAD,CAFG;AAAA,QAGH,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAK6N,GAAL,CAAS2F,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAT,CAHX;AAAA,KAhQ8B;AAAA,IAqQrC,OAAS,EAAA;AAAA,QACLzJ,UADK;AAAA,QAEL,CAACA,UAAD,CAFK;AAAA,QAGL,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAc;AAAA,YACJ,MAAAsC,CAAA,GAAItC,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAJ,CADI;AAAA,YAKH,OAAA+N,CAAA,GAAI,CAAJ,GAAQ,CAAC9V,IAAA,CAAKC,KAAL,CAAW,CAAC6V,CAAZ,CAAT,GAA0B9V,IAAA,CAAKC,KAAL,CAAW6V,CAAX,CAA1B,CALG;AAAA,SAHT;AAAA,KArQ4B;AAAA,IAgRrC,OAAS,EAAA;AAAA,QACLxX,UADK;AAAA,QAEL,CAACA,UAAD,CAFK;AAAA,QAGL,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAK2C,KAAL,CAAW6Q,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAX,CAHT;AAAA,KAhR4B;AAAA,IAqRrC,MAAQ,EAAA;AAAA,QACJzJ,UADI;AAAA,QAEJ,CAACA,UAAD,CAFI;AAAA,QAGJ,CAACyJ,GAAD,EAAM,CAACyL,CAAD,CAAN,KAAcxT,IAAA,CAAK+C,IAAL,CAAUyQ,CAAA,CAAElM,QAAF,CAAWS,GAAX,CAAV,CAHV;AAAA,KArR6B;AAAA,IA0RrC,WAAa,EAAA;AAAA,QACTvJ,WADS;AAAA,QAET;AAAA,YAACD,UAAD;AAAA,YAAaI,SAAb;AAAA,SAFS;AAAA,QAGT,CAACoJ,GAAD,EAAM,CAAC7N,CAAD,EAAI4b,CAAJ,CAAN,KAAiB/N,GAAA,CAAItN,UAAJ,GAAkBP,CAAA,CAAGrB,KAArB,CAAiCid,KAAAA,CAAA,CAAGjd,KAH5C;AAAA,KA1RwB;AAAA,IA+RrC,cAAgB,EAAA;AAAA,QACZ2F,WADY;AAAA,QAEZ,CAACG,SAAD,CAFY;AAAA,QAGZ,CAACoJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc/N,GAAA,CAAInN,EAAJ,EAAckb,KAAAA,CAAA,CAAGjd,KAHnB;AAAA,KA/RqB;AAAA,IAoSrC,gBAAkB,EAAA;AAAA,QACd2F,WADc;AAAA,QAEd,CAACD,UAAD,CAFc;AAAA,QAGd,CAACwJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc/N,GAAA,CAAI0C,YAAJ,EAAwBqL,KAAAA,CAAA,CAAGjd,KAH3B;AAAA,KApSmB;AAAA,IAySrC,UAAY,EAAA;AAAA,QACR2F,WADQ;AAAA,QAER;AAAA,YAACD,UAAD;AAAA,YAAaI,SAAb;AAAA,SAFQ;AAAA,QAGR,CAACoJ,GAAD,EAAM,CAAC7N,CAAD,EAAI4b,CAAJ,CAAN,KAAiB;AAAA,YACb,MAAMlU,CAAA,GAAImG,GAAA,CAAItN,UAAJ,EAAA,CAAkBP,CAAA,CAAGrB,KAArB,CAAV,CADa;AAAA,YAEb,MAAMgJ,CAAA,GAAKiU,CAAA,CAAGjd,KAAd,CAFa;AAAA,YAGb,OAAO,OAAO+I,CAAP,KAAa,OAAOC,CAApB,IAAyBD,CAAA,GAAIC,CAApC,CAHa;AAAA,SAHT;AAAA,KAzSyB;AAAA,IAkTrC,aAAe,EAAA;AAAA,QACXrD,WADW;AAAA,QAEX,CAACG,SAAD,CAFW;AAAA,QAGX,CAACoJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc;AAAA,YACJ,MAAAlU,CAAA,GAAImG,GAAA,CAAInN,EAAJ,EAAJ,CADI;AAAA,YAEV,MAAMiH,CAAA,GAAKiU,CAAA,CAAGjd,KAAd,CAFU;AAAA,YAGV,OAAO,OAAO+I,CAAP,KAAa,OAAOC,CAApB,IAAyBD,CAAA,GAAIC,CAApC,CAHU;AAAA,SAHH;AAAA,KAlTsB;AAAA,IA2TrC,UAAY,EAAA;AAAA,QACRrD,WADQ;AAAA,QAER;AAAA,YAACD,UAAD;AAAA,YAAaI,SAAb;AAAA,SAFQ;AAAA,QAGR,CAACoJ,GAAD,EAAM,CAAC7N,CAAD,EAAI4b,CAAJ,CAAN,KAAiB;AAAA,YACb,MAAMlU,CAAA,GAAImG,GAAA,CAAItN,UAAJ,EAAA,CAAkBP,CAAA,CAAGrB,KAArB,CAAV,CADa;AAAA,YAEb,MAAMgJ,CAAA,GAAKiU,CAAA,CAAGjd,KAAd,CAFa;AAAA,YAGb,OAAO,OAAO+I,CAAP,KAAa,OAAOC,CAApB,IAAyBD,CAAA,GAAIC,CAApC,CAHa;AAAA,SAHT;AAAA,KA3TyB;AAAA,IAoUrC,aAAe,EAAA;AAAA,QACXrD,WADW;AAAA,QAEX,CAACG,SAAD,CAFW;AAAA,QAGX,CAACoJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc;AAAA,YACJ,MAAAlU,CAAA,GAAImG,GAAA,CAAInN,EAAJ,EAAJ,CADI;AAAA,YAEV,MAAMiH,CAAA,GAAKiU,CAAA,CAAGjd,KAAd,CAFU;AAAA,YAGV,OAAO,OAAO+I,CAAP,KAAa,OAAOC,CAApB,IAAyBD,CAAA,GAAIC,CAApC,CAHU;AAAA,SAHH;AAAA,KApUsB;AAAA,IA6UrC,WAAa,EAAA;AAAA,QACTrD,WADS;AAAA,QAET;AAAA,YAACD,UAAD;AAAA,YAAaI,SAAb;AAAA,SAFS;AAAA,QAGT,CAACoJ,GAAD,EAAM,CAAC7N,CAAD,EAAI4b,CAAJ,CAAN,KAAiB;AAAA,YACb,MAAMlU,CAAA,GAAImG,GAAA,CAAItN,UAAJ,EAAA,CAAkBP,CAAA,CAAGrB,KAArB,CAAV,CADa;AAAA,YAEb,MAAMgJ,CAAA,GAAKiU,CAAA,CAAGjd,KAAd,CAFa;AAAA,YAGb,OAAO,OAAO+I,CAAP,KAAa,OAAOC,CAApB,IAAyBD,CAAA,IAAKC,CAArC,CAHa;AAAA,SAHR;AAAA,KA7UwB;AAAA,IAsVrC,cAAgB,EAAA;AAAA,QACZrD,WADY;AAAA,QAEZ,CAACG,SAAD,CAFY;AAAA,QAGZ,CAACoJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc;AAAA,YACJ,MAAAlU,CAAA,GAAImG,GAAA,CAAInN,EAAJ,EAAJ,CADI;AAAA,YAEV,MAAMiH,CAAA,GAAKiU,CAAA,CAAGjd,KAAd,CAFU;AAAA,YAGV,OAAO,OAAO+I,CAAP,KAAa,OAAOC,CAApB,IAAyBD,CAAA,IAAKC,CAArC,CAHU;AAAA,SAHF;AAAA,KAtVqB;AAAA,IA+VrC,WAAa,EAAA;AAAA,QACTrD,WADS;AAAA,QAET;AAAA,YAACD,UAAD;AAAA,YAAaI,SAAb;AAAA,SAFS;AAAA,QAGT,CAACoJ,GAAD,EAAM,CAAC7N,CAAD,EAAI4b,CAAJ,CAAN,KAAiB;AAAA,YACb,MAAMlU,CAAA,GAAImG,GAAA,CAAItN,UAAJ,EAAA,CAAkBP,CAAA,CAAGrB,KAArB,CAAV,CADa;AAAA,YAEb,MAAMgJ,CAAA,GAAKiU,CAAA,CAAGjd,KAAd,CAFa;AAAA,YAGb,OAAO,OAAO+I,CAAP,KAAa,OAAOC,CAApB,IAAyBD,CAAA,IAAKC,CAArC,CAHa;AAAA,SAHR;AAAA,KA/VwB;AAAA,IAwWrC,cAAgB,EAAA;AAAA,QACZrD,WADY;AAAA,QAEZ,CAACG,SAAD,CAFY;AAAA,QAGZ,CAACoJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAc;AAAA,YACJ,MAAAlU,CAAA,GAAImG,GAAA,CAAInN,EAAJ,EAAJ,CADI;AAAA,YAEV,MAAMiH,CAAA,GAAKiU,CAAA,CAAGjd,KAAd,CAFU;AAAA,YAGV,OAAO,OAAO+I,CAAP,KAAa,OAAOC,CAApB,IAAyBD,CAAA,IAAKC,CAArC,CAHU;AAAA,SAHF;AAAA,KAxWqB;AAAA,IAiXrC,YAAc,EAAA;AAAA,QACVrD,WADU;AAAA,QAEV,CAACG,SAAD,CAFU;AAAA,QAGV,CAACoJ,GAAD,EAAM,CAAC7N,CAAD,CAAN,KAAeA,CAAA,CAAGrB,KAAH,IAAYkP,GAAA,CAAItN,UAAJ,EAHjB;AAAA,KAjXuB;AAAA,IAsXrC,eAAiB,EAAA;AAAA,QACb+D,WADa;AAAA,QAEb,EAFa;AAAA,QAGZuJ,GAAD,IAAUA,GAAA,CAAInN,EAAJ,EAAA,KAAa,IAAb,IAAqBmN,GAAA,CAAInN,EAAJ,EAAA,KAAa,KAAA,CAH/B;AAAA,KAtXoB;AAAA,IA2XrC,gBAAkB,EAAA;AAAA,QACd4D,WADc;AAAA,QAEd,CAACQ,OAAA,CAAMT,UAAN,CAAD,CAFc;AAAA,QAGd,CAACwJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAeA,CAAA,CAAGjd,KAAH,CAASmC,OAAT,CAAiB+M,GAAA,CAAI0C,YAAJ,EAAjB,KAAwC,CAHzC;AAAA,KA3XmB;AAAA,IAgYrC,cAAgB,EAAA;AAAA,QACZjM,WADY;AAAA,QAEZ,CAACQ,OAAA,CAAML,SAAN,CAAD,CAFY;AAAA,QAGZ,CAACoJ,GAAD,EAAM,CAAC+N,CAAD,CAAN,KAAeA,CAAA,CAAGjd,KAAH,CAASmC,OAAT,CAAiB+M,GAAA,CAAInN,EAAJ,EAAjB,KAA8B,CAHjC;AAAA,KAhYqB;AAAA,IAqYrC,iBAAmB,EAAA;AAAA,QACf4D,WADe;AAAA,QAEf;AAAA,YAACD,UAAD;AAAA,YAAaS,OAAA,CAAML,SAAN,CAAb;AAAA,SAFe;AAAA;AAIf,QAACoJ,CAAAA,GAAD,EAAM,CAAC7N,CAAD,EAAI4b,CAAJ,CAAN,KAAkBA,CAAA,CAAGjd,KAAH,CAASmC,OAAT,CAAiB+M,GAAA,CAAItN,UAAJ,EAAA,CAAkBP,CAAA,CAAGrB,KAArB,CAAjB,CAAA,IAAiD,CAJpD;AAAA,KArYkB;AAAA,IA2YrC,iBAAmB,EAAA;AAAA,QACf2F,WADe;AAAA,QAEf;AAAA,YAACD,UAAD;AAAA,YAAaS,OAAA,CAAML,SAAN,CAAb;AAAA,SAFe;AAAA;AAIf,QAAA,CAACoJ,GAAD,EAAM,CAAC7N,CAAD,EAAI4b,CAAJ,CAAN,KAAiBoS,YAAA,CAAangB,GAAA,CAAItN,UAAJ,GAAkBP,CAAA,CAAGrB,KAArB,CAAb,EAA2Cid,CAAA,CAAGjd,KAA9C,EAAqD,CAArD,EAAyDid,CAAA,CAAGjd,KAAH,CAASlB,MAAT,GAAkB,CAA3E,CAJF;AAAA,KA3YkB;AAAA,IAiZrC,KAAO,EAAA;AAAA,QACH6C,IAAA,EAAMgE,WADH;AAAA,QAEHwN,SAAA,EAAW;AAAA,YACP;AAAA,gBACI;AAAA,oBAACxN,WAAD;AAAA,oBAAcA,WAAd;AAAA,iBADJ;AAAA,gBAEI,CAACuJ,GAAD,EAAM,CAACnG,CAAD,EAAIC,CAAJ,CAAN,KAAiBD,CAAA,CAAE0F,QAAF,CAAWS,GAAX,CAAmBlG,IAAAA,CAAA,CAAEyF,QAAF,CAAWS,GAAX,CAFxC;AAAA,aADO;AAAA,YAKP;AAAA,gBACIogB,OAAA,CAAQ3pB,WAAR,CADJ;AAAA,gBAEI,CAACuJ,GAAD,EAAMb,IAAN,KAAe;AAAA,oBACX,KAAWgB,MAAAA,GAAX,IAAkBhB,IAAlB,EAAwB;AAAA,wBAChB,IAAA,CAACgB,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAD;AAAA,4BACO,OAAA,KAAA,CAFS;AAAA,qBADb;AAAA,oBAKJ,OAAA,IAAA,CALI;AAAA,iBAFnB;AAAA,aALO;AAAA,SAFR;AAAA,KAjZ8B;AAAA,IAoarC,KAAO,EAAA;AAAA,QACHvN,IAAA,EAAMgE,WADH;AAAA,QAEHwN,SAAA,EAAW;AAAA,YACP;AAAA,gBACI;AAAA,oBAACxN,WAAD;AAAA,oBAAcA,WAAd;AAAA,iBADJ;AAAA,gBAEI,CAACuJ,GAAD,EAAM,CAACnG,CAAD,EAAIC,CAAJ,CAAN,KAAiBD,CAAA,CAAE0F,QAAF,CAAWS,GAAX,CAAmBlG,IAAAA,CAAA,CAAEyF,QAAF,CAAWS,GAAX,CAFxC;AAAA,aADO;AAAA,YAKP;AAAA,gBACIogB,OAAA,CAAQ3pB,WAAR,CADJ;AAAA,gBAEI,CAACuJ,GAAD,EAAMb,IAAN,KAAe;AAAA,oBACX,KAAWgB,MAAAA,GAAX,IAAkBhB,IAAlB,EAAwB;AAAA,wBAChB,IAAAgB,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAA;AAAA,4BACO,OAAA,IAAA,CAFS;AAAA,qBADb;AAAA,oBAKJ,OAAA,KAAA,CALI;AAAA,iBAFnB;AAAA,aALO;AAAA,SAFR;AAAA,KApa8B;AAAA,IAubrC,GAAK,EAAA;AAAA,QACDvJ,WADC;AAAA,QAED,CAACA,WAAD,CAFC;AAAA,QAGD,CAACuJ,GAAD,EAAM,CAAClG,CAAD,CAAN,KAAc,CAACA,CAAA,CAAEyF,QAAF,CAAWS,GAAX,CAHd;AAAA,KAvbgC;AAAA,IA4brC,qBAAuB,EAAA;AAAA,QACnBvJ,WADmB;AAAA,QAEnB,CAACD,UAAD,CAFmB;AAAA;AAInB,QAAA,CAACwJ,GAAD,EAAM,CAAC7K,CAAD,CAAN,KAAc;AAAA,YACV,MAAMosB,iBAAA,GAAoBvhB,GAAA,CAAIkC,OAAJ,IAAelC,GAAA,CAAIkC,OAAJ,CAAYqf,iBAArD,CADU;AAAA,YAEV,IAAIA,iBAAJ,EAAuB;AAAA,gBACnB,OAAOA,iBAAA,CAAkBpsB,CAAA,CAAEoK,QAAF,CAAWS,GAAX,CAAlB,CAAP,CADmB;AAAA,aAFb;AAAA,YAKH,OAAA,IAAA,CALG;AAAA,SAJK;AAAA,KA5bc;AAAA,IAwcrC,QAAU,EAAA;AAAA,QACNxJ,UADM;AAAA,QAEN,CAACA,UAAD,CAFM;AAAA,QAGN,CAACwJ,GAAD,EAAM,CAAC7K,CAAD,CAAN,KAAcA,CAAA,CAAEoK,QAAF,CAAWS,GAAX,CAAA,CAAgBwhB,WAAhB,EAHR;AAAA,KAxc2B;AAAA,IA6crC,UAAY,EAAA;AAAA,QACRhrB,UADQ;AAAA,QAER,CAACA,UAAD,CAFQ;AAAA,QAGR,CAACwJ,GAAD,EAAM,CAAC7K,CAAD,CAAN,KAAcA,CAAA,CAAEoK,QAAF,CAAWS,GAAX,CAAA,CAAgBhH,WAAhB,EAHN;AAAA,KA7cyB;AAAA,IAkdrC,QAAU,EAAA;AAAA,QACNxC,UADM;AAAA,QAEN4pB,OAAA,CAAQxpB,SAAR,CAFM;AAAA,QAGN,CAACoJ,GAAD,EAAMb,IAAN,KAAeA,IAAA,CAAK3N,GAAL,CAAgB2O,GAAP,IAAO0B,QAAA,CAAc1B,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAd,CAAhB,CAAkDjP,CAAAA,IAAlD,CAAuD,EAAvD,CAHT;AAAA,KAld2B;AAAA,IAudrC,iBAAmB,EAAA;AAAA,QACfyF,UADe;AAAA,QAEf,CAACM,YAAD,CAFe;AAAA,QAGf,CAACkJ,GAAD,EAAM,CAAC/C,QAAD,CAAN,KAAqBA,QAAA,CAASsC,QAAT,CAAkBS,GAAlB,CAAA,CAAuBzC,cAAvB,EAHN;AAAA,KAvdkB;AAAA,IA4drC,QAAU,EAAA;AAAA,QACNhH,UADM;AAAA,QAEN;AAAA,YAACA,UAAD;AAAA,YAAaA,UAAb;AAAA,YAAyBK,SAAzB;AAAA,SAFM;AAAA,QAGN,CAACoJ,GAAD,EAAMb,IAAN,KAAe;AAAA,YACL,MAAA,CAAC8G,GAAD,EAAMC,GAAN,EAAWub,IAAX,IAAmBtiB,IAAA,CAAK3N,GAAL,CAAgB2O,GAAP,IAAOA,GAAA,CAAIZ,QAAJ,CAAaS,GAAb,CAAhB,CAAnB,CADK;AAAA,YAEX,IAAIiG,GAAA,GAAMC,GAAV,EAAe;AAAA,gBACJ,OAAAD,GAAA,CADI;AAAA,aAFJ;AAAA,YAKX,IAAIA,GAAA,KAAQC,GAAZ,EAAiB;AAAA,gBACN,OAAAD,GAAA,CADM;AAAA,aALN;AAAA,YAQP,IAAAyb,OAAA,CARO;AAAA,YASP,IAAA,OAAOD,IAAP,KAAgB,QAAhB,EAA0B;AAAA,gBAC1BC,OAAA,GAAUrB,UAAA,CAAWoB,IAAX,CAAV,CAD0B;AAAA,aAA1B,MAEJ,IAAW,OAAOA,IAAP,KAAgB,QAA3B,EAAqC;AAAA,gBACvBC,OAAA,GAAAD,IAAA,CADuB;AAAA,aAArC,MAEO;AAAA,gBACH,MAAM,IAAI/hB,YAAJ,CAAiB,CAAuB,oBAAvB,GAAuB+hB,IAAvB,EAAjB,CAAA,CAAN,CADG;AAAA,aAbI;AAAA,YAgBL,MAAAE,MAAA,GAAS7B,UAAA,CAAW4B,OAAX,GAAT,CAhBK;AAAA,YAiBJ,OAAAzb,GAAA,GAAM0b,MAAA,IAAUzb,GAAA,GAAMD,GAAN,CAAhB,CAjBI;AAAA,SAHT;AAAA,KA5d2B;AAAA,CAAzC,CAtKA;;ACcO,SAAS2b,OAAT,CAAuB9wB,KAAvB,EAA+C;AAAA,IAC3C,OAAA;AAAA,QAACI,MAAA,EAAQ,SAAT;AAAA,QAAoBJ,KAApB;AAAA,KAAA,CAD2C;AAAA,CAA/C;AAIA,SAASuO,KAAT,CAAqBvO,KAArB,EAA6C;AAAA,IACzC,OAAA;AAAA,QAACI,MAAA,EAAQ,OAAT;AAAA,QAAkBJ,KAAlB;AAAA,KAAA,CADyC;AAAA;;ACdpD,SAAS+wB,sBAAT,CACI3rB,UADJ,EAEI4rB,SAFJ,EAGW;AAAA,IACA,OAAA,CAAC,CAAC5rB,UAAF,IAAgB,CAAC,CAACA,UAAA,CAAW6rB,UAA7B,IAA2C7rB,UAAA,CAAW6rB,UAAX,CAAsB9uB,OAAtB,CAA8B6uB,SAA9B,CAAA,GAA2C,CAAA,CAAtF,CADA;AAAA,CAHX;AAOO,SAASE,0BAAT,CAAoCC,IAApC,EAA+E;AAAA,IAC3E,OAAAA,IAAA,CAAK,eAAL,CAAA,KAA0B,aAA1B,CAD2E;AAAA,CAPtF;AAWO,SAASC,uBAAT,CAAiCD,IAAjC,EAA4E;AAAA,IACxE,OAAAJ,sBAAA,CAAuBI,IAAA,CAAK/rB,UAA5B,EAAwC,eAAxC,CAAA,CADwE;AAAA,CAXnF;AAeO,SAASisB,sBAAT,CAAgCF,IAAhC,EAA2E;AAAA,IACvE,OAAAJ,sBAAA,CAAuBI,IAAA,CAAK/rB,UAA5B,EAAwC,MAAxC,CAAA,CADuE;AAAA,CAflF;AAmBO,SAASksB,8BAAT,CAAwCH,IAAxC,EAAmF;AAAA,IAC/E,OAAAJ,sBAAA,CAAuBI,IAAA,CAAK/rB,UAA5B,EAAwC,eAAxC,CAAA,CAD+E;AAAA,CAnB1F;AAuBO,SAASmsB,qBAAT,CAA+BJ,IAA/B,EAA0E;AAAA,IAC7E,OAAO,CAAC,CAACA,IAAA,CAAK/rB,UAAP,IAAqB+rB,IAAA,CAAK/rB,UAAL,CAAgBosB,YAA5C,CAD6E;AAAA;;ACd1E,SAASjvB,UAAT,CAAoBvC,KAApB,EAA2B;AAAA,IACvB,OAAA,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAA,KAAU,IAAvC,IAA+C,CAACP,KAAA,CAAMC,OAAN,CAAcM,KAAd,CAAhD,CADuB;AAAA,CAXlC;AAeA,SAASyxB,gBAAT,CAA0BxvB,CAA1B,EAA6B;AAAA,IAClB,OAAAA,CAAA,CADkB;AAAA,CAf7B;AAmBgB,SAAAyvB,cAAA,CAAeT,UAAf,EAA2BU,YAA3B,EAAyC;AAAA,IAC/C,MAAAC,OAAA,GAAUD,YAAA,CAAahwB,IAAb,KAAsB,OAAhC,CAD+C;AAAA,IAE/C,MAAAkwB,uBAAA,GAA0BZ,UAAA,CAAWzuB,KAAX,IAAoB,OAAOyuB,UAAA,CAAWzuB,KAAX,CAAiB,CAAjB,CAAA,CAAoB,CAApB,CAAP,KAAkC,QAAhF,CAF+C;AAAA,IAG/C,MAAAsvB,gBAAA,GAAmBD,uBAAA,IAA2BZ,UAAA,CAAW/tB,QAAX,KAAwB,KAAA,CAAtE,CAH+C;AAAA,IAI/C,MAAA6uB,aAAA,GAAgBF,uBAAA,IAA2B,CAACC,gBAA5C,CAJ+C;AAAA,IAKrD,MAAMnwB,IAAA,GAAOsvB,UAAA,CAAWtvB,IAAX,KAAoB4vB,qBAAA,CAAsBI,YAAtB,CAAsC,GAAA,aAAtC,GAAsD,UAAtD,CAAjC,CALqD;AAAA,IAOrD,IAAIC,OAAJ,EAAa;AAAA,QACIX,UAAA,GAAAe,MAAA,CAAO,EAAP,EAAWf,UAAX,CAAA,CADJ;AAAA,QAGT,IAAIA,UAAA,CAAWzuB,KAAf,EAAsB;AAAA,YAClByuB,UAAA,CAAWzuB,KAAX,GAAmByuB,UAAA,CAAWzuB,KAAX,CAAiB9B,GAAjB,CAAsByC,IAAD,IAAU;AAAA,gBACvC,OAAA;AAAA,oBAACA,IAAA,CAAK,CAAL,CAAD;AAAA,oBAAU+F,KAAA,CAAM/J,KAAN,CAAYgE,IAAA,CAAK,CAAL,CAAZ,CAAV;AAAA,iBAAA,CADuC;AAAA,aAA/B,CAAnB,CADkB;AAAA,SAHb;AAAA,QAST,IAAI8tB,UAAA,CAAWzM,OAAf,EAAwB;AAAA,YACpByM,UAAA,CAAWzM,OAAX,GAAqBtb,KAAA,CAAM/J,KAAN,CAAY8xB,UAAA,CAAWzM,OAAvB,CAArB,CADoB;AAAA,SAAxB,MAEO;AAAA,YACHyM,UAAA,CAAWzM,OAAX,GAAqBtb,KAAA,CAAM/J,KAAN,CAAYwyB,YAAA,CAAanN,OAAzB,CAArB,CADG;AAAA,SAXE;AAAA,KAPwC;AAAA,IAuBjD,IAAAyM,UAAA,CAAWgB,UAAX,IAAyBhB,UAAA,CAAWgB,UAAX,KAA0B,KAAnD,IAA4D,CAACC,WAAA,CAAYjB,UAAA,CAAWgB,UAAvB,CAA7D,EAAiG;AAAA,QACjG,MAAM,IAAIjuB,KAAJ,CAAU,CAAwB,qBAAxB,GAAwBitB,UAAA,CAAWgB,UAAnC,EAAV,CAAA,CAAN,CADiG;AAAA,KAvBhD;AAAA,IA2BjD,IAAAE,QAAA,CA3BiD;AAAA,IA4BjD,IAAAC,WAAA,CA5BiD;AAAA,IA6BjD,IAAAC,kBAAA,CA7BiD;AAAA,IA8BrD,IAAI1wB,IAAA,KAAS,aAAb,EAA4B;AAAA,QACbwwB,QAAA,GAAAG,2BAAA,CADa;AAAA,KAA5B,MAEA,IAAW3wB,IAAA,KAAS,UAApB,EAAgC;AAAA,QACjBwwB,QAAA,GAAAI,wBAAA,CADiB;AAAA,KAAhC,MAEA,IAAW5wB,IAAA,KAAS,aAApB,EAAmC;AAAA,QACpBwwB,QAAA,GAAAK,2BAAA,CADoB;AAAA,QAIjBJ,WAAA;AAAA,QAAAvyB,MAAA,CAAO4yB,MAAP,CAAc,IAAd,CAAA,CAJiB;AAAA,QAKpB,WAAAtvB,IAAA,IAAQ8tB,UAAA,CAAWzuB,KAAnB,EAA0B;AAAA,YACjC4vB,WAAA,CAAYjvB,IAAA,CAAK,CAAL,CAAZ,CAAA,GAAuBA,IAAA,CAAK,CAAL,CAAvB,CADiC;AAAA,SALN;AAAA,QAU/BkvB,kBAAA,GAAqB,OAAOpB,UAAA,CAAWzuB,KAAX,CAAiB,CAAjB,CAAA,CAAoB,CAApB,CAA5B,CAV+B;AAAA,KAAnC,MAYA,IAAWb,IAAA,KAAS,UAApB,EAAgC;AAAA,QACjBwwB,QAAA,GAAAO,wBAAA,CADiB;AAAA,KAAhC,MAEO;AAAA,QACH,MAAM,IAAI1uB,KAAJ,CAAU,CAA0B,uBAA1B,GAA0BrC,IAA1B,EAAiC,CAAjC,CAAV,CAAN,CADG;AAAA,KAhD8C;AAAA,IAoDrD,IAAIkwB,uBAAJ,EAA6B;AAAA,QACzB,MAAMc,gBAAA,GAAwC,EAA9C,CADyB;AAAA,QAEzB,MAAMC,SAAA,GAAY,EAAlB,CAFyB;AAAA,QAGzB,KAAA,IAASvuB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI4sB,UAAA,CAAWzuB,KAAX,CAAiB1D,MAArC,EAA6CuF,CAAA,EAA7C,EAAkD;AAAA,YACxC,MAAAlB,IAAA,GAAO8tB,UAAA,CAAWzuB,KAAX,CAAiB6B,CAAjB,CAAP,CADwC;AAAA,YAExC,MAAAurB,IAAA,GAAOzsB,IAAA,CAAK,CAAL,CAAA,CAAQysB,IAAf,CAFwC;AAAA,YAG1C,IAAA+C,gBAAA,CAAiB/C,IAAjB,CAA2B,KAAA,KAAW,CAAtC,EAAsC;AAAA,gBACtC+C,gBAAA,CAAiB/C,IAAjB,CAAyB,GAAA;AAAA,oBACrBA,IADqB;AAAA,oBAErBjuB,IAAA,EAAMsvB,UAAA,CAAWtvB,IAFI;AAAA,oBAGrBuB,QAAA,EAAU+tB,UAAA,CAAW/tB,QAHA;AAAA,oBAIrBshB,OAAA,EAASyM,UAAA,CAAWzM,OAJC;AAAA,oBAKrBhiB,KAAA,EAAO,EALc;AAAA,iBAAzB,CADsC;AAAA,gBAQtCowB,SAAA,CAAUjzB,IAAV,CAAeiwB,IAAf,CARsC,CAAA;AAAA,aAHI;AAAA,YAa9C+C,gBAAA,CAAiB/C,IAAjB,EAAuBptB,KAAvB,CAA6B7C,IAA7B,CAAkC;AAAA,gBAACwD,IAAA,CAAK,CAAL,CAAA,CAAQnD,KAAT;AAAA,gBAAgBmD,IAAA,CAAK,CAAL,CAAhB;AAAA,aAAlC,CAb8C,CAAA;AAAA,SAHzB;AAAA,QAmBzB,MAAM0vB,oBAAA,GAAuB,EAA7B,CAnByB;AAAA,QAoBzB,KAAWlb,MAAAA,CAAX,IAAgBib,SAAhB,EAA2B;AAAA,YACvBC,oBAAA,CAAqBlzB,IAArB,CAA0B;AAAA,gBAACgzB,gBAAA,CAAiBhb,CAAjB,CAAA,CAAoBiY,IAArB;AAAA,gBAA2B8B,cAAA,CAAeiB,gBAAA,CAAiBhb,CAAjB,CAAf,EAAoCga,YAApC,CAA3B;AAAA,aAA1B,CADuB,CAAA;AAAA,SApBF;AAAA,QAwBnB,MAAAmB,iBAAA,GAAoB,EAAC3tB,IAAA,EAAM,QAAP,EAApB,CAxBmB;AAAA,QAyBlB,OAAA;AAAA,YACHK,IAAA,EAAM,WADH;AAAA,YAEHstB,iBAFG;AAAA,YAGH5I,mBAAA,EAAqBH,WAAA,CAAYG,mBAAZ,CAAgC6I,IAAhC,CAAqC,MAArC,EAAgDD,iBAAhD,CAHlB;AAAA,YAIHF,SAAA,EAAWC,oBAAA,CAAqBnyB,GAArB,CAA8B2D,CAAL,IAAKA,CAAA,CAAE,CAAF,CAA9B,CAJR;AAAA,YAKHoK,QAAA,CAAS,CAACmhB,IAAD,CAAT,EAAiBhuB,UAAjB,EAA6B;AAAA,gBACzB,OAAO0wB,2BAAA,CAA4B;AAAA,oBAC/B9vB,KAAA,EAAOqwB,oBADwB;AAAA,oBAE/BvI,IAAA,EAAM2G,UAAA,CAAW3G,IAFc;AAAA,iBAA5B,EAGJqH,YAHI,EAGU/B,IAHV,CAAA,CAGgBnhB,QAHhB,CAGyBmhB,IAHzB,EAG+BhuB,UAH/B,CAAP,CADyB;AAAA,aAL1B;AAAA,SAAA,CAzBkB;AAAA,KAA7B,UAqCWmwB,eAAe;AAAA,QACtB,MAAMe,iBAAA,GAAoBnxB,IAAA,KAAS,aAAT,GACtB;AAAA,YAACwD,IAAA,EAAM,aAAP;AAAA,YAAsBmlB,IAAA,EAAM2G,UAAA,CAAW3G,IAAX,KAAoB,KAAA,CAApB,GAAgC2G,UAAA,CAAW3G,IAA3C,GAAkD,CAA9E;AAAA,SADsB,GAC6D,IADvF,CADsB;AAAA,QAGf,OAAA;AAAA,YACH9kB,IAAA,EAAM,QADH;AAAA,YAEHstB,iBAFG;AAAA,YAGH5I,mBAAA,EAAqBH,WAAA,CAAYG,mBAAZ,CAAgC6I,IAAhC,CAAqC,MAArC,EAAgDD,iBAAhD,CAHlB;AAAA,YAIHF,SAAA,EAAW3B,UAAA,CAAWzuB,KAAX,CAAiB9B,GAAjB,CAA0B2D,CAAL,IAAKA,CAAA,CAAE,CAAF,CAA1B,CAJR;AAAA,YAKHoK,QAAA,EAAU,CAAC,CAACmhB,IAAD,CAAD,KAAYuC,QAAA,CAASlB,UAAT,EAAqBU,YAArB,EAAmC/B,IAAnC,EAAyCwC,WAAzC,EAAsDC,kBAAtD,CALnB;AAAA,SAAA,CAHe;AAAA,WAUnB;AAAA,QACI,OAAA;AAAA,YACH7sB,IAAA,EAAM,QADH;AAAA,YAEHiJ,QAAA,CAASuD,CAAT,EAAYX,OAAZ,EAAqB;AAAA,gBACX,MAAArR,KAAA,GAAQqR,OAAA,IAAWA,OAAA,CAAQzP,UAAnB,GAAgCyP,OAAA,CAAQzP,UAAR,CAAmBqvB,UAAA,CAAW/tB,QAA9B,CAAhC,GAA0E,KAAA,CAAlF,CADW;AAAA,gBAEjB,IAAIlD,KAAA,KAAU,KAAW,CAAzB,EAAyB;AAAA,oBACrB,OAAOgzB,UAAA,CAAS/B,UAAA,CAAWzM,OAApB,EAA6BmN,YAAA,CAAanN,OAA1C,CAAP,CADqB;AAAA,iBAFR;AAAA,gBAKjB,OAAO2N,QAAA,CAASlB,UAAT,EAAqBU,YAArB,EAAmC3xB,KAAnC,EAA0CoyB,WAA1C,EAAuDC,kBAAvD,CAAP,CALiB;AAAA,aAFlB;AAAA,SAAA,CADJ;AAAA,KAnG8C;AAAA,CAnBzD;AAoIA,SAASW,UAAT,CAAkBjqB,CAAlB,EAAqBC,CAArB,EAAwB2H,CAAxB,EAA2B;AAAA,IACnB,IAAA5H,CAAA,KAAM,MAAN;AAAA,QAAwB,OAAAA,CAAA,CADL;AAAA,IAEnB,IAAAC,CAAA,KAAM,MAAN;AAAA,QAAwB,OAAAA,CAAA,CAFL;AAAA,IAGnB,IAAA2H,CAAA,KAAM,MAAN;AAAA,QAAwB,OAAAA,CAAA,CAHL;AAAA,CApI3B;AA0IA,SAAS6hB,2BAAT,CAAqCvB,UAArC,EAAiDU,YAAjD,EAA+DtuB,KAA/D,EAAsE+uB,WAAtE,EAAmFa,OAAnF,EAA4F;AAAA,IACxF,MAAMC,SAAA,GAAY,OAAO7vB,KAAP,KAAiB4vB,OAAjB,GAA2Bb,WAAA,CAAY/uB,KAAZ,CAA3B,GAAgD,KAAA,CAAlE,CADwF;AAAA,IAExF,OAAO2vB,UAAA,CAASE,SAAT,EAAoBjC,UAAA,CAAWzM,OAA/B,EAAwCmN,YAAA,CAAanN,OAArD,CAAP,CAFwF;AAAA,CA1I5F;AA+IA,SAAS+N,wBAAT,CAAkCtB,UAAlC,EAA8CU,YAA9C,EAA4DtuB,KAA5D,EAAmE;AAAA,IAE3D,IAAA6M,OAAA,CAAQ7M,KAAR,MAAmB,QAAnB;AAAA,eAAoC2vB,UAAA,CAAS/B,UAAA,CAAWzM,OAApB,EAA6BmN,YAAA,CAAanN,OAA1C,EAFuB;AAAA,IAGzD,MAAA7J,CAAA,GAAIsW,UAAA,CAAWzuB,KAAX,CAAiB1D,MAArB,CAHyD;AAAA,IAI/D,IAAI6b,CAAA,KAAM,CAAV;AAAA,QAAa,OAAOsW,UAAA,CAAWzuB,KAAX,CAAiB,CAAjB,CAAA,CAAoB,CAApB,CAAP,CAJkD;AAAA,IAK/D,IAAIa,KAAA,IAAS4tB,UAAA,CAAWzuB,KAAX,CAAiB,CAAjB,CAAoB,CAAA,CAApB,CAAb;AAAA,QAAqC,OAAOyuB,UAAA,CAAWzuB,KAAX,CAAiB,CAAjB,CAAA,CAAoB,CAApB,CAAP,CAL0B;AAAA,IAM/D,IAAIa,KAAA,IAAS4tB,UAAA,CAAWzuB,KAAX,CAAiBmY,CAAA,GAAI,CAArB,CAAwB,CAAA,CAAxB,CAAb;AAAA,QAAyC,OAAOsW,UAAA,CAAWzuB,KAAX,CAAiBmY,CAAA,GAAI,CAArB,CAAA,CAAwB,CAAxB,CAAP,CANsB;AAAA,IAQzD,MAAArb,KAAA,GAAQ0mB,yBAAA,CAA0BiL,UAAA,CAAWzuB,KAAX,CAAiB9B,GAAjB,CAAsByC,IAAD,IAAUA,IAAA,CAAK,CAAL,CAA/B,CAA1B,EAAmEE,KAAnE,CAAR,CARyD;AAAA,IAU/D,OAAO4tB,UAAA,CAAWzuB,KAAX,CAAiBlD,KAAjB,CAAA,CAAwB,CAAxB,CAAP,CAV+D;AAAA,CA/InE;AA4JA,SAASgzB,2BAAT,CAAqCrB,UAArC,EAAiDU,YAAjD,EAA+DtuB,KAA/D,EAAsE;AAAA,IAClE,MAAMinB,IAAA,GAAO2G,UAAA,CAAW3G,IAAX,KAAoB,KAAA,CAApB,GAAgC2G,UAAA,CAAW3G,IAA3C,GAAkD,CAA/D,CADkE;AAAA,IAI9D,IAAApa,OAAA,CAAQ7M,KAAR,MAAmB,QAAnB;AAAA,eAAoC2vB,UAAA,CAAS/B,UAAA,CAAWzM,OAApB,EAA6BmN,YAAA,CAAanN,OAA1C,EAJ0B;AAAA,IAK5D,MAAA7J,CAAA,GAAIsW,UAAA,CAAWzuB,KAAX,CAAiB1D,MAArB,CAL4D;AAAA,IAMlE,IAAI6b,CAAA,KAAM,CAAV;AAAA,QAAa,OAAOsW,UAAA,CAAWzuB,KAAX,CAAiB,CAAjB,CAAA,CAAoB,CAApB,CAAP,CANqD;AAAA,IAOlE,IAAIa,KAAA,IAAS4tB,UAAA,CAAWzuB,KAAX,CAAiB,CAAjB,CAAoB,CAAA,CAApB,CAAb;AAAA,QAAqC,OAAOyuB,UAAA,CAAWzuB,KAAX,CAAiB,CAAjB,CAAA,CAAoB,CAApB,CAAP,CAP6B;AAAA,IAQlE,IAAIa,KAAA,IAAS4tB,UAAA,CAAWzuB,KAAX,CAAiBmY,CAAA,GAAI,CAArB,CAAwB,CAAA,CAAxB,CAAb;AAAA,QAAyC,OAAOsW,UAAA,CAAWzuB,KAAX,CAAiBmY,CAAA,GAAI,CAArB,CAAA,CAAwB,CAAxB,CAAP,CARyB;AAAA,IAU5D,MAAArb,KAAA,GAAQ0mB,yBAAA,CAA0BiL,UAAA,CAAWzuB,KAAX,CAAiB9B,GAAjB,CAAsByC,IAAD,IAAUA,IAAA,CAAK,CAAL,CAA/B,CAA1B,EAAmEE,KAAnE,CAAR,CAV4D;AAAA,IAWlE,MAAMqD,CAAA,GAAIwjB,mBAAA,CACN7mB,KADM,EACCinB,IADD,EAEN2G,UAAA,CAAWzuB,KAAX,CAAiBlD,KAAjB,CAAwB,CAAA,CAAxB,CAFM,EAGN2xB,UAAA,CAAWzuB,KAAX,CAAiBlD,KAAA,GAAQ,CAAzB,CAAA,CAA4B,CAA5B,CAHM,CAAV,CAXkE;AAAA,IAgBlE,MAAMorB,WAAA,GAAcuG,UAAA,CAAWzuB,KAAX,CAAiBlD,KAAjB,CAAA,CAAwB,CAAxB,CAApB,CAhBkE;AAAA,IAiBlE,MAAMqrB,WAAA,GAAcsG,UAAA,CAAWzuB,KAAX,CAAiBlD,KAAA,GAAQ,CAAzB,CAA4B,CAAA,CAA5B,CAApB,CAjBkE;AAAA,IAkBlE,IAAI6zB,MAAA,GAASjX,aAAA,CAAYyV,YAAA,CAAahwB,IAAzB,CAAkC8vB,IAAAA,gBAA/C,CAlBkE;AAAA,IAoBlE,IAAIR,UAAA,CAAWgB,UAAX,IAAyBhB,UAAA,CAAWgB,UAAX,KAA0B,KAAvD,EAA8D;AAAA,QACpD,MAAAmB,UAAA,GAAalB,WAAA,CAAYjB,UAAA,CAAWgB,UAAvB,CAAb,CADoD;AAAA,QAE1DkB,MAAA,GAAS,CAACpqB,CAAD,EAAIC,CAAJ,KAAUoqB,UAAA,CAAWnwB,OAAX,CAAmBmwB,UAAA,CAAWlX,WAAX,CAAuBkX,UAAA,CAAWvJ,OAAX,CAAmB9gB,CAAnB,CAAvB,EAA8CqqB,UAAA,CAAWvJ,OAAX,CAAmB7gB,CAAnB,CAA9C,EAAqEtC,CAArE,CAAnB,CAAnB,CAF0D;AAAA,KApBI;AAAA,IAyB9D,IAAA,OAAOgkB,WAAA,CAAYjc,QAAnB,KAAgC,UAAhC,EAA4C;AAAA,QACrC,OAAA;AAAA,YACHA,QAAA,QAAA,EAAkB;AAAA,gBACd,MAAM4kB,cAAA,GAAiB3I,WAAA,CAAYjc,QAAZ,CAAqB6kB,KAArB,CAA2B,MAA3B,EAAsCjlB,IAAtC,CAAvB,CADc;AAAA,gBAEd,MAAMklB,cAAA,GAAiB5I,WAAA,CAAYlc,QAAZ,CAAqB6kB,KAArB,CAA2B,MAA3B,EAAsCjlB,IAAtC,CAAvB,CAFc;AAAA,gBAIV,IAAAglB,cAAA,KAAmB,KAAa,CAAhC,IAAgCE,cAAA,KAAmB,KAAW,CAA9D,EAA8D;AAAA,oBACvD,OAAA,KAAA,CAAA,CADuD;AAAA,iBAJpD;AAAA,gBAOP,OAAAJ,MAAA,CAAOE,cAAP,EAAuBE,cAAvB,EAAuC7sB,CAAvC,CAAA,CAPO;AAAA,aADf;AAAA,SAAA,CADqC;AAAA,KAzBkB;AAAA,IAuC3D,OAAAysB,MAAA,CAAOzI,WAAP,EAAoBC,WAApB,EAAiCjkB,CAAjC,CAAA,CAvC2D;AAAA,CA5JtE;AAsMA,SAASgsB,wBAAT,CAAkCzB,UAAlC,EAA8CU,YAA9C,EAA4DtuB,KAA5D,EAAmE;AAAA,IAC3D,IAAAsuB,YAAA,CAAahwB,IAAb,KAAsB,OAAtB,EAA+B;AAAA,QACvB0B,KAAA,GAAA6F,KAAA,CAAM/J,KAAN,CAAYkE,KAAZ,CAAA,CADuB;AAAA,KAA/B,MAEJ,IAAWsuB,YAAA,CAAahwB,IAAb,KAAsB,WAAjC,EAA8C;AAAA,QAC1C0B,KAAA,GAAQ2J,SAAA,CAAUE,UAAV,CAAqB7J,KAAA,CAAMiD,QAAN,EAArB,CAAR,CAD0C;AAAA,KAA9C,MAEA,IAAWqrB,YAAA,CAAahwB,IAAb,KAAsB,eAAjC,EAAkD;AAAA,QAC9C0B,KAAA,GAAQqK,aAAA,CAAcR,UAAd,CAAyB7J,KAAA,CAAMiD,QAAN,EAAzB,CAAR,CAD8C;AAAA,KAAlD,MAEW,IAAA4J,OAAA,CAAQ7M,KAAR,MAAmBsuB,YAAA,CAAahwB,IAAhC,KAAyCgwB,YAAA,CAAahwB,IAAb,KAAsB,MAAtB,IAAgC,CAACgwB,YAAA,CAAaxN,MAAb,CAAoB9gB,KAApB,CAAjC,CAAzC,EAAuG;AAAA,QACtGA,KAAA,GAAA,KAAA,CAAA,CADsG;AAAA,KAPnD;AAAA,IAU/D,OAAO2vB,UAAA,CAAS3vB,KAAT,EAAgB4tB,UAAA,CAAWzM,OAA3B,EAAoCmN,YAAA,CAAanN,OAAjD,CAAP,CAV+D;AAAA,CAtMnE;AAyPA,SAAS0F,mBAAT,CAA6B7mB,KAA7B,EAAoCinB,IAApC,EAA0CM,UAA1C,EAAsDC,UAAtD,EAAkE;AAAA,IAC9D,MAAMC,UAAA,GAAaD,UAAA,GAAaD,UAAhC,CAD8D;AAAA,IAE9D,MAAMG,QAAA,GAAW1nB,KAAA,GAAQunB,UAAzB,CAF8D;AAAA,IAI9D,IAAIE,UAAA,KAAe,CAAnB,EAAsB;AAAA,QACX,OAAA,CAAA,CADW;AAAA,KAAtB,MAEA,IAAWR,IAAA,KAAS,CAApB,EAAuB;AAAA,QACnB,OAAOS,QAAA,GAAWD,UAAlB,CADmB;AAAA,KAAvB,MAEO;AAAA,QACK,OAAA,CAAA3jB,IAAA,CAAKqE,GAAL,CAAS8e,IAAT,EAAeS,QAAf,CAAA,GAA2B,CAA3B,KAAiC5jB,IAAA,CAAKqE,GAAL,CAAS8e,IAAT,EAAeQ,UAAf,CAAA,GAA6B,CAA7B,CAAjC,CADL;AAAA,KARuD;AAAA;;ACxL3D,MAAM0I,eAAN,CAAsB;AAAA,IASzB1uB,WAAA,CAAYM,UAAZ,EAAoCusB,YAApC,EAA+ExgB,KAA/E,EAA+FnT,OAA/F,EAAwH;AAAA,QACpH,IAAKoH,CAAAA,UAAL,GAAkBA,UAAlB,CADoH;AAAA,QAEpH,IAAKquB,CAAAA,eAAL,GAAuB,EAAvB,CAFoH;AAAA,QAGpH,IAAA,CAAKC,UAAL,GAAkB,IAAIxiB,iBAAJ,CAAsBC,KAAtB,EAA6BnT,OAA7B,CAAlB,CAHoH;AAAA,QAIpH,IAAA,CAAK21B,aAAL,GAAqBhC,YAAA,GAAeiC,eAAA,CAAgBjC,YAAhB,CAAf,GAA+C,IAApE,CAJoH;AAAA,QAKpH,KAAKkC,WAAL,GAAmBlC,YAAA,IAAgBA,YAAA,CAAahwB,IAAb,KAAsB,MAAtC,GAA+CgwB,YAAA,CAAaxN,MAA5D,GAAqE,IAAxF,CALoH;AAAA,QAM/G,IAAA,CAAA2P,kBAAA,GAAqBlO,qBAAA,CAAiCxgB,UAAjC,CAArB,CAN+G;AAAA,KAT/F;AAAA,IAkBzB2uB,4BAAA,CACI3iB,OADJ,EAEIC,OAFJ,EAGIC,YAHJ,EAIIG,SAJJ,EAKIxB,eALJ,EAMIsB,gBANJ,EAOIG,gBAPJ,EAQIC,mBARJ,EASO;AAAA,QACH,KAAK+hB,UAAL,CAAgBtiB,OAAhB,GAA0BA,OAA1B,CADG;AAAA,QAEH,KAAKsiB,UAAL,CAAgBriB,OAAhB,GAA0BA,OAA1B,CAFG;AAAA,QAGH,KAAKqiB,UAAL,CAAgBpiB,YAAhB,GAA+BA,YAA/B,CAHG;AAAA,QAIE,IAAA,CAAAoiB,UAAA,CAAWjiB,SAAX,GAAuBA,SAAA,IAAa,IAApC,CAJF;AAAA,QAKE,IAAA,CAAAiiB,UAAA,CAAWzjB,eAAX,GAA6BA,eAAA,IAAmB,IAAhD,CALF;AAAA,QAMH,KAAKyjB,UAAL,CAAgBniB,gBAAhB,GAAmCA,gBAAnC,CANG;AAAA,QAOE,IAAA,CAAAmiB,UAAA,CAAWhiB,gBAAX,GAA8BA,gBAAA,IAAoB,IAAlD,CAPF;AAAA,QAQE,IAAA,CAAAgiB,UAAA,CAAW/hB,mBAAX,GAAiCA,mBAAA,IAAuB,IAAxD,CARF;AAAA,QAUH,OAAO,KAAKvM,UAAL,CAAgBqJ,QAAhB,CAAyB,IAAA,CAAKilB,UAA9B,CAAP,CAVG;AAAA,KA3BkB;AAAA,IAwCzBjlB,QAAA,CACI2C,OADJ,EAEIC,OAFJ,EAGIC,YAHJ,EAIIG,SAJJ,EAKIxB,eALJ,EAMIsB,gBANJ,EAOIG,gBAPJ,EAQIC,mBARJ,EASO;AAAA,QACH,KAAK+hB,UAAL,CAAgBtiB,OAAhB,GAA0BA,OAA1B,CADG;AAAA,QAEE,IAAA,CAAAsiB,UAAA,CAAWriB,OAAX,GAAqBA,OAAA,IAAW,IAAhC,CAFF;AAAA,QAGE,IAAA,CAAAqiB,UAAA,CAAWpiB,YAAX,GAA0BA,YAAA,IAAgB,IAA1C,CAHF;AAAA,QAIE,IAAA,CAAAoiB,UAAA,CAAWjiB,SAAX,GAAuBA,SAAA,IAAa,IAApC,CAJF;AAAA,QAKE,IAAA,CAAAiiB,UAAA,CAAWzjB,eAAX,GAA6BA,eAAA,IAAmB,IAAhD,CALF;AAAA,QAME,IAAA,CAAAyjB,UAAA,CAAWniB,gBAAX,GAA8BA,gBAAA,IAAoB,IAAlD,CANF;AAAA,QAOE,IAAA,CAAAmiB,UAAA,CAAWhiB,gBAAX,GAA8BA,gBAAA,IAAoB,IAAlD,CAPF;AAAA,QAQE,IAAA,CAAAgiB,UAAA,CAAW/hB,mBAAX,GAAiCA,mBAAA,IAAuB,IAAxD,CARF;AAAA,QAUC,IAAA;AAAA,YACA,MAAMxB,GAAA,GAAM,IAAK/K,CAAAA,UAAL,CAAgBqJ,QAAhB,CAAyB,IAAA,CAAKilB,UAA9B,CAAZ,CADA;AAAA,YAGI,IAAAvjB,GAAA,KAAQ,IAAR,IAAgBA,GAAA,KAAQ,KAAA,CAAxB,IAAsC,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAA,KAAQA,GAAzE,EAA+E;AAAA,gBAC/E,OAAO,IAAKwjB,CAAAA,aAAZ,CAD+E;AAAA,aAHnF;AAAA,YAMA,IAAI,IAAKE,CAAAA,WAAL,IAAoB,EAAE1jB,GAAA,IAAO,IAAA,CAAK0jB,WAAZ,CAA1B,EAAoD;AAAA,gBAC1C,MAAA,IAAIjlB,YAAJ,CAAiB,CAA+B,4BAA/B,GAA+B/O,MAAA,CAAOD,IAAP,CAAY,IAAA,CAAKi0B,WAAjB,CAA8BnzB,CAAAA,GAA9B,CAAuCuc,CAAL,IAAK/e,IAAA,CAAKJ,SAAL,CAAemf,CAAf,CAAvC,CAA0Dhd,CAAAA,IAA1D,CAA+D,IAA/D,CAA/B,cAAA,GAAkH/B,IAAA,CAAKJ,SAAL,CAAeqS,GAAf,CAAlH,EAAgJ,SAAhJ,CAAjB,CAAA,CAD0C;AAAA,aANpD;AAAA,YASO,OAAAA,GAAA,CATP;AAAA,SAAA,QAUKtH,GAAQ;AAAA,YACb,IAAI,CAAC,IAAK4qB,CAAAA,eAAL,CAAqB5qB,CAAA,CAAE9D,OAAvB,CAAL,EAAsC;AAAA,gBAC7B,IAAA,CAAA0uB,eAAA,CAAgB5qB,CAAA,CAAE9D,OAAlB,CAAA,GAA6B,IAA7B,CAD6B;AAAA,gBAE9B,IAAA,OAAO2Z,OAAP,KAAmB,WAAnB,EAAgC;AAAA,oBAChCA,OAAA,CAAQC,IAAR,CAAa,CAAA,+BAAA,GAAkCzgB,IAAA,CAAKJ,SAAL,CAAe,IAAA,CAAKsH,UAAL,CAAgBoI,SAAhB,EAAf,CAAlC,EAA6E,GAA7E,GAAmF3E,CAAA,CAAE9D,OAArF,EAAA,CAAb,CADgC,CAAA;AAAA,iBAFF;AAAA,aADzB;AAAA,YAOb,OAAO,IAAK4uB,CAAAA,aAAZ,CAPa;AAAA,SApBd;AAAA,KAjDkB;AAAA,CAnE7B;AAoJO,SAASK,YAAT,CAAsB5uB,UAAtB,EAAoD;AAAA,IACvD,OAAO3F,KAAA,CAAMC,OAAN,CAAc0F,UAAd,CAAA,IAA6BA,UAAA,CAAWtG,MAAX,GAAoB,CAAjD,IACH,OAAOsG,UAAA,CAAW,CAAX,CAAP,KAAyB,QADtB,IACkCA,UAAA,CAAW,CAAX,CAAiB8N,IAAAA,WAD1D,CADuD;AAAA,CApJ3D;AAkKO,SAAS+gB,gBAAT,CACH7uB,UADG,EAEHusB,YAFG,EAGHxgB,KAHG,EAIHnT,OAJG,EAKyC;AAAA,IAC5C,MAAMk2B,MAAA,GAAS,IAAI3gB,gBAAJ,CAAmBL,WAAnB,EAAgC,EAAhC,EAAoCye,YAAA,GAAewC,eAAA,CAAgBxC,YAAhB,CAAf,GAA+C,KAAA,CAAnF,EAA8F,KAAW,CAAzG,EAAyG,KAAA,CAAzG,EAAoHxgB,KAApH,EAA2HnT,OAA3H,CAAf,CAD4C;AAAA,IAI5C,MAAMiR,MAAA,GAASilB,MAAA,CAAO/0B,KAAP,CAAaiG,UAAb,EAAyB,KAAA,CAAzB,EAAoC,KAAA,CAApC,EAA+C,KAAA,CAA/C,EACXusB,YAAA,IAAgBA,YAAA,CAAahwB,IAAb,KAAsB,QAAtC,GAAiD,EAAC8jB,cAAA,EAAgB,QAAjB,EAAjD,GAA8E,KAAA,CADnE,CAAf,CAJ4C;AAAA,IAO5C,IAAI,CAACxW,MAAL,EAAa;AAAA,QAEF,OAAAV,KAAA,CAAM2lB,MAAA,CAAOvgB,MAAb,CAAA,CAFE;AAAA,KAP+B;AAAA,IAY5C,OAAOmd,OAAA,CAAQ,IAAI0C,eAAJ,CAAoBvkB,MAApB,EAA4B0iB,YAA5B,EAA0CxgB,KAA1C,EAAiDnT,OAAjD,CAAR,CAAP,CAZ4C;AAAA,CAvKhD;AAsLO,MAAMo2B,sBAAN,CAA0D;AAAA,IAO7DtvB,WAAA,CAAYU,IAAZ,EAAwBJ,UAAxB,EAAqDivB,eAArD,EAAuF;AAAA,QACnF,IAAK7uB,CAAAA,IAAL,GAAYA,IAAZ,CADmF;AAAA,QAEnF,IAAK8uB,CAAAA,gBAAL,GAAwBlvB,UAAxB,CAFmF;AAAA,QAGnF,IAAKivB,CAAAA,eAAL,GAAuBA,eAAvB,CAHmF;AAAA,QAInF,KAAKE,gBAAL,GAAwB/uB,IAAA,KAAU,UAAV,IAA2C,CAACogB,eAAA,CAA2BxgB,UAAA,CAAWA,UAAtC,CAApE,CAJmF;AAAA,QAKnF,IAAA,CAAK0uB,kBAAL,GAA0BlO,qBAAA,CAAiCxgB,UAAA,CAAWA,UAA5C,CAA1B,CALmF;AAAA,KAP1B;AAAA,IAe7D2uB,4BAAA,CACI3iB,OADJ,EAEIC,OAFJ,EAGIC,YAHJ,EAIIG,SAJJ,EAKIxB,eALJ,EAMIsB,gBANJ,EAOO;AAAA,QACI,OAAA,IAAK+iB,CAAAA,gBAAL,CAAsBP,4BAAtB,CAAmD3iB,OAAnD,EAA4DC,OAA5D,EAAqEC,YAArE,EAAmFG,SAAnF,EAA8FxB,eAA9F,EAA+GsB,gBAA/G,CAAA,CADJ;AAAA,KAtBsD;AAAA,IA0B7D9C,QAAA,CACI2C,OADJ,EAEIC,OAFJ,EAGIC,YAHJ,EAIIG,SAJJ,EAKIxB,eALJ,EAMIsB,gBANJ,EAOO;AAAA,QACI,OAAA,IAAK+iB,CAAAA,gBAAL,CAAsB7lB,QAAtB,CAA+B2C,OAA/B,EAAwCC,OAAxC,EAAiDC,YAAjD,EAA+DG,SAA/D,EAA0ExB,eAA1E,EAA2FsB,gBAA3F,CAAA,CADJ;AAAA,KAjCsD;AAAA,CAtLjE;AA4NO,MAAMijB,uBAAN,CAA2D;AAAA,IAU9D1vB,WAAA,CAAYU,IAAZ,EAAwBJ,UAAxB,EAAqDwtB,SAArD,EAA+EE,iBAA/E,EAAsHuB,eAAtH,EAAwJ;AAAA,QACpJ,IAAK7uB,CAAAA,IAAL,GAAYA,IAAZ,CADoJ;AAAA,QAEpJ,IAAKotB,CAAAA,SAAL,GAAiBA,SAAjB,CAFoJ;AAAA,QAGpJ,IAAK0B,CAAAA,gBAAL,GAAwBlvB,UAAxB,CAHoJ;AAAA,QAIpJ,KAAKmvB,gBAAL,GAAwB/uB,IAAA,KAAU,QAAV,IAAyC,CAACogB,eAAA,CAA2BxgB,UAAA,CAAWA,UAAtC,CAAlE,CAJoJ;AAAA,QAKpJ,IAAKivB,CAAAA,eAAL,GAAuBA,eAAvB,CALoJ;AAAA,QAMpJ,IAAA,CAAKP,kBAAL,GAA0BlO,qBAAA,CAAiCxgB,UAAA,CAAWA,UAA5C,CAA1B,CANoJ;AAAA,QAOpJ,IAAK0tB,CAAAA,iBAAL,GAAyBA,iBAAzB,CAPoJ;AAAA,KAV1F;AAAA,IAoB9DiB,4BAAA,CACI3iB,OADJ,EAEIC,OAFJ,EAGIC,YAHJ,EAIIG,SAJJ,EAKIxB,eALJ,EAMIsB,gBANJ,EAOO;AAAA,QACI,OAAA,IAAK+iB,CAAAA,gBAAL,CAAsBP,4BAAtB,CAAmD3iB,OAAnD,EAA4DC,OAA5D,EAAqEC,YAArE,EAAmFG,SAAnF,EAA8FxB,eAA9F,EAA+GsB,gBAA/G,CAAA,CADJ;AAAA,KA3BuD;AAAA,IA+B9D9C,QAAA,CACI2C,OADJ,EAEIC,OAFJ,EAGIC,YAHJ,EAIIG,SAJJ,EAKIxB,eALJ,EAMIsB,gBANJ,EAOO;AAAA,QACI,OAAA,IAAK+iB,CAAAA,gBAAL,CAAsB7lB,QAAtB,CAA+B2C,OAA/B,EAAwCC,OAAxC,EAAiDC,YAAjD,EAA+DG,SAA/D,EAA0ExB,eAA1E,EAA2FsB,gBAA3F,CAAA,CADJ;AAAA,KAtCuD;AAAA,IA0C9D2Y,mBAAA,CAAoB7mB,KAApB,EAAmC8mB,KAAnC,EAAkDC,KAAlD,EAAyE;AAAA,QACrE,IAAI,IAAK0I,CAAAA,iBAAT,EAA4B;AAAA,YACxB,OAAO/I,WAAA,CAAYG,mBAAZ,CAAgC,IAAK4I,CAAAA,iBAArC,EAAwDzvB,KAAxD,EAA+D8mB,KAA/D,EAAsEC,KAAtE,CAAP,CADwB;AAAA,SAA5B,MAEO;AAAA,YACI,OAAA,CAAA,CADJ;AAAA,SAH8D;AAAA,KA1CX;AAAA,CA5NlE;AA8UO,SAASqK,wBAAT,CACHrvB,UADG,EAEHusB,YAFG,EAGHxgB,KAHG,EAIHnT,OAJG,EAKiD;AAAA,IACpDoH,UAAA,GAAa6uB,gBAAA,CAAiB7uB,UAAjB,EAA6BusB,YAA7B,EAA2CxgB,KAA3C,EAAkDnT,OAAlD,CAAb,CADoD;AAAA,IAGhD,IAAAoH,UAAA,CAAWhF,MAAX,KAAsB,OAAtB,EAA+B;AAAA,QAExB,OAAAgF,UAAA,CAFwB;AAAA,KAHiB;AAAA,IAS9C,MAAA6J,MAAA,GAAS7J,UAAA,CAAWpF,KAAX,CAAiBoF,UAA1B,CAT8C;AAAA,IAW9C,MAAAwf,mBAAA,GAAoBgB,iBAAA,CAA6B3W,MAA7B,CAApB,CAX8C;AAAA,IAYpD,IAAI,CAAC2V,mBAAD,IAAsB,CAACsM,0BAAA,CAA2BS,YAA3B,CAA3B,EAAqE;AAAA,QACjE,OAAOpjB,KAAA,CAAM,CAAC,IAAI1J,cAAJ,CAAiB,EAAjB,EAAqB,gCAArB,CAAD,CAAN,CAAP,CADiE;AAAA,KAZjB;AAAA,IAgB9C,MAAA6vB,cAAA,GAAiB9O,wBAAA,CAAoC3W,MAApC,EAA4C;AAAA,QAAC,MAAD;AAAA,QAAS,OAAT;AAAA,QAAkB,sBAAlB;AAAA,KAA5C,CAAjB,CAhB8C;AAAA,IAiBpD,IAAI,CAACylB,cAAD,IAAmB,CAACrD,sBAAA,CAAuBM,YAAvB,CAAxB,EAA8D;AAAA,QAC1D,OAAOpjB,KAAA,CAAM,CAAC,IAAI1J,cAAJ,CAAiB,EAAjB,EAAqB,gCAArB,CAAD,CAAN,CAAP,CAD0D;AAAA,KAjBV;AAAA,IAqBpD,MAAMwvB,eAAA,GAAkBzO,wBAAA,CAAoC3W,MAApC,EAA4C,CAAC,eAAD,CAA5C,CAAxB,CArBoD;AAAA,IAsBpD,IAAI,CAAColB,eAAD,IAAoB,CAACjD,uBAAA,CAAwBO,YAAxB,CAAzB,EAAgE;AAAA,QAC5D,OAAOpjB,KAAA,CAAM,CAAC,IAAI1J,cAAJ,CAAiB,EAAjB,EAAqB,wCAArB,CAAD,CAAN,CAAP,CAD4D;AAAA,KAtBZ;AAAA,IA0BpD,MAAM8vB,sBAAA,GAAyB/O,wBAAA,CAAoC3W,MAApC,EAA4C,CAAC,eAAD,CAA5C,CAA/B,CA1BoD;AAAA,IA2BpD,IAAI,CAAC0lB,sBAAD,IAA2B,CAACrD,8BAAA,CAA+BK,YAA/B,CAAhC,EAA8E;AAAA,QAC1E,OAAOpjB,KAAA,CAAM,CAAC,IAAI1J,cAAJ,CAAiB,EAAjB,EAAqB,wCAArB,CAAD,CAAN,CAAP,CAD0E;AAAA,KA3B1B;AAAA,IA+BpD,MAAM+vB,uBAAA,GAA0BjD,YAAA,CAAavsB,UAAb,IAA2BusB,YAAA,CAAavsB,UAAb,CAAwByvB,oBAAnF,CA/BoD;AAAA,IAgC9C,MAAAC,SAAA,GAAYC,aAAA,CAAc9lB,MAAd,CAAZ,CAhC8C;AAAA,IAiCpD,IAAI,CAAC6lB,SAAD,IAAc,CAACJ,cAAf,IAAiC,CAACE,uBAAtC,EAA+D;AAAA,QAC3D,OAAOrmB,KAAA,CAAM,CAAC,IAAI1J,cAAJ,CAAiB,EAAjB,EAAqB,oIAArB,CAAD,CAAN,CAAP,CAD2D;AAAA,KAA/D,MAEA,IAAWiwB,SAAA,YAAqBjwB,cAAhC,EAA8C;AAAA,QACnC,OAAA0J,KAAA,CAAM,CAACumB,SAAD,CAAN,CAAA,CADmC;AAAA,KAA9C,UAEWA,SAAA,YAAqB/K,WAArB,IAAoC,CAACwH,qBAAA,CAAsBI,YAAtB,GAAqC;AAAA,QACjF,OAAOpjB,KAAA,CAAM,CAAC,IAAI1J,cAAJ,CAAiB,EAAjB,EAAqB,6DAArB,CAAD,CAAN,CAAP,CADiF;AAAA,KArCjC;AAAA,IAyCpD,IAAI,CAACiwB,SAAL,EAAgB;AAAA,QACZ,OAAOhE,OAAA,CAASlM,mBAAA,IAAqB+P,sBAArB;AAEX,QAAIP,IAAAA,sBAAJ,CAA2B,UAA3B,EAAuChvB,UAAA,CAAWpF,KAAlD,EAAyDq0B,eAAzD,CAFW;AAIX,QAAID,IAAAA,sBAAJ,CAA2B,QAA3B,EAAqChvB,UAAA,CAAWpF,KAAhD,EAAuDq0B,eAAvD,CAJE,CAAP,CADY;AAAA,KAzCoC;AAAA,IAiDpD,MAAMvB,iBAAA,GAAoBgC,SAAA,YAAqB/K,WAArB,GAAmC+K,SAAA,CAAU7K,aAA7C,GAA6D,KAAA,CAAvF,CAjDoD;AAAA,IAmDpD,OAAO6G,OAAA,CAASlM,mBAAA,IAAqB+P,sBAArB;AAEX,IAAA,IAAIH,uBAAJ,CAA4B,QAA5B,EAAsCpvB,UAAA,CAAWpF,KAAjD,EAAwD80B,SAAA,CAAUtO,MAAlE,EAA0EsM,iBAA1E,EAA6FuB,eAA7F,CAFW;AAIX,IAAA,IAAIG,uBAAJ,CAA4B,WAA5B,EAAyCpvB,UAAA,CAAWpF,KAApD,EAA2D80B,SAAA,CAAUtO,MAArE,EAA6EsM,iBAA7E,EAAgGuB,eAAhG,CAJE,CAAP,CAnDoD;AAAA,CAnVxD;AA+YO,MAAMW,qBAAN,CAA+B;AAAA,IASlClwB,WAAA,CAAYmsB,UAAZ,EAAuDgE,aAAvD,EAAkG;AAAA,QAC9F,IAAKC,CAAAA,WAAL,GAAmBjE,UAAnB,CAD8F;AAAA,QAE9F,IAAKkE,CAAAA,cAAL,GAAsBF,aAAtB,CAF8F;AAAA,QAG9FjD,MAAA,CAAO,IAAP,EAAaN,cAAA,CAAe,IAAKwD,CAAAA,WAApB,EAAiC,IAAA,CAAKC,cAAtC,CAAb,CAH8F,CAAA;AAAA,KAThE;AAAA,IAelC,OAAOC,WAAP,CACI3nB,UADJ,EAK4B;AAAA,QACxB,OAAO,IAAIunB,qBAAJ,CAA0BvnB,UAAA,CAAWynB,WAArC,EAAkDznB,UAAA,CAAW0nB,cAA7D,CAAP,CADwB;AAAA,KApBM;AAAA,IAwBlC,OAAO3nB,SAAP,CAAoBnK,KAApB,EAGE;AAAA,QACS,OAAA;AAAA,YACH6xB,WAAA,EAAa7xB,KAAA,CAAM6xB,WADhB;AAAA,YAEHC,cAAA,EAAgB9xB,KAAA,CAAM8xB,cAFnB;AAAA,SAAA,CADT;AAAA,KA3BgC;AAAA,CA/YtC;AAkbO,SAASE,2BAAT,CACHr1B,KADG,EAEHi1B,aAFG,EAGH9jB,KAHG,EAIHnT,OAJG,EAKoB;AAAA,IACnB,IAAAuE,UAAA,CAAWvC,KAAX,CAAA,EAAmB;AAAA,QACZ,OAAA,IAAIg1B,qBAAJ,CAA0Bh1B,KAA1B,EAAiCi1B,aAAjC,CAAA,CADY;AAAA,KAAnB,MAGJ,IAAWjB,YAAA,CAAah0B,KAAb,KAAwBP,KAAA,CAAMC,OAAN,CAAcM,KAAd,CAAwBA,IAAAA,KAAA,CAAMlB,MAAN,GAAe,CAA1E,EAA8E;AAAA,QAC1E,MAAMsG,UAAA,GAAaqvB,wBAAA,CAAyBz0B,KAAzB,EAAgCi1B,aAAhC,EAA+C9jB,KAA/C,EAAsDnT,OAAtD,CAAnB,CAD0E;AAAA,QAEtE,IAAAoH,UAAA,CAAWhF,MAAX,KAAsB,OAAtB,EAA+B;AAAA,YAE/B,MAAM,IAAI4D,KAAJ,CAAUoB,UAAA,CAAWpF,KAAX,CAAiBU,GAAjB,IAAqB,IAAO,CAAG40B,GAAAA,GAAA,CAAIx1B,GAAP,EAAU,EAAV,GAAew1B,GAAA,CAAIvwB,OAAnB,EAA5B,CAAA,CAAA,CAA0D9E,IAA1D,CAA+D,IAA/D,CAAV,CAAN,CAF+B;AAAA,SAFuC;AAAA,QAM1E,OAAOmF,UAAA,CAAWpF,KAAlB,CAN0E;AAAA,KAA9E,MAQO;AAAA,QACH,IAAIu1B,QAAA,GAAgBv1B,KAApB,CADG;AAAA,QAEH,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6Bi1B,aAAA,CAActzB,IAAd,KAAuB,OAAxD,EAAiE;AAAA,YAClD4zB,QAAA,GAAArsB,KAAA,CAAM/J,KAAN,CAAYa,KAAZ,CAAA,CADkD;AAAA,SAF9D;AAAA,QAKI,OAAA;AAAA,YACHwF,IAAA,EAAM,UADH;AAAA,YAEHsuB,kBAAA;gBAAwB7O,KAFrB;AAAA,YAGHxW,QAAA,EAAU,MAAM8mB,QAHb;AAAA,SAAA,CALJ;AAAA,KAZgB;AAAA,CAvb3B;AAmdA,SAASR,aAAT,CAAuB3vB,UAAvB,EAAyF;AAAA,IACrF,IAAIhF,MAAA,GAAS,IAAb,CADqF;AAAA,IAErF,IAAIgF,UAAA,YAAsBgmB,GAA1B,EAA+B;AAAA,QAClBhrB,MAAA,GAAA20B,aAAA,CAAc3vB,UAAA,CAAWhF,MAAzB,CAAA,CADkB;AAAA,KAA/B,MAGA,IAAWgF,UAAA,YAAsB4lB,QAAjC,EAA2C;AAAA,QAC5B,WAAA3b,GAAA,IAAOjK,UAAA,CAAWiJ,IAAlB,EAAwB;AAAA,YAC/BjO,MAAA,GAAS20B,aAAA,CAAc1lB,GAAd,CAAT,CAD+B;AAAA,YAE/B,IAAIjP,MAAJ,EAAY;AAAA,gBACR,MADQ;AAAA,aAFmB;AAAA,SADI;AAAA,KAA3C,MAQA,IAAY,CAAAgF,UAAA,YAAsBmhB,IAAtB,IAA8BnhB,UAAA,YAAsB2kB,WAApD,KACR3kB,UAAA,CAAW/B,KAAX,YAA4BwP,kBADhC,IAEIzN,UAAA,CAAW/B,KAAX,CAAiB8B,IAAjB,KAA0B,MAF9B,EAEsC;AAAA,QAEzB/E,MAAA,GAAAgF,UAAA,CAFyB;AAAA,KAf+C;AAAA,IAoBrF,IAAIhF,MAAA,YAAkByE,cAAtB,EAAoC;AAAA,QACzB,OAAAzE,MAAA,CADyB;AAAA,KApBiD;AAAA,IAwB1EgF,UAAA,CAAAsJ,SAAA,CAAWsC,KAAD,IAAW;AAAA,QACtB,MAAAwkB,WAAA,GAAcT,aAAA,CAAc/jB,KAAd,CAAd,CADsB;AAAA,QAE5B,IAAIwkB,WAAA,YAAuB3wB,cAA3B,EAAyC;AAAA,YAC5BzE,MAAA,GAAAo1B,WAAA,CAD4B;AAAA,SAAzC,MAEW,IAAAp1B,MAAA,IAAUo1B,WAAV,IAAyBp1B,MAAA,KAAWo1B,WAApC,EAAiD;AAAA,YAC/Cp1B,MAAA,GAAA,IAAIyE,cAAJ,CAAiB,EAAjB,EAAqB,yFAArB,CAAA,CAD+C;AAAA,SAJhC;AAAA,KAArB,CAxB0E,CAAA;AAAA,IAiC9E,OAAAzE,MAAA,CAjC8E;AAAA,CAndzF;AAufA,SAAS+zB,eAAT,CAAyBhD,IAAzB,EAAiE;AAAA,IAC7D,MAAMtiB,KAAA,GAAQ;AAAA,QACV5F,KAAA,EAAOrD,SADG;AAAA,QAEV/G,MAAA,EAAQ6G,UAFE;AAAA,QAGVoD,MAAA,EAAQrD,UAHE;AAAA,QAIVgwB,IAAA,EAAM/vB,UAJI;AAAA,QAKVoJ,OAAA,EAASnJ,WALC;AAAA,QAMV+vB,SAAA,EAAWzvB,aAND;AAAA,QAOV0vB,aAAA,EAAezvB,iBAPL;AAAA,KAAd,CAD6D;AAAA,IAWzD,IAAAirB,IAAA,CAAKxvB,IAAL,KAAc,OAAd,EAAuB;AAAA,QACvB,OAAOwE,OAAA,CAAM0I,KAAA,CAAMsiB,IAAA,CAAKnxB,KAAX,CAAA,IAAqB8F,SAA3B,EAAsCqrB,IAAA,CAAKryB,MAA3C,CAAP,CADuB;AAAA,KAXkC;AAAA,IAetD,OAAA+P,KAAA,CAAMsiB,IAAA,CAAKxvB,IAAX,CAAA,CAfsD;AAAA,CAvfjE;AAygBA,SAASiyB,eAAT,CAAyBzC,IAAzB,EAAkE;AAAA,IAC1D,IAAAA,IAAA,CAAKxvB,IAAL,KAAc,OAAd,KAA0BY,UAAA,CAAW4uB,IAAA,CAAK3M,OAAhB,CAAA,IAA4B/kB,KAAA,CAAMC,OAAN,CAAcyxB,IAAA,CAAK3M,OAAnB,CAA5B,CAA1B,EAAoF;AAAA,QAIpF,OAAO,IAAItb,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAP,CAJoF;AAAA,KAApF,MAKJ,IAAWioB,IAAA,CAAKxvB,IAAL,KAAc,OAAzB,EAAkC;AAAA,QAC9B,OAAOuH,KAAA,CAAM/J,KAAN,CAAYgyB,IAAA,CAAK3M,OAAjB,CAA6B,IAAA,IAApC,CAD8B;AAAA,KAAlC,MAEA,IAAW2M,IAAA,CAAK3M,OAAL,KAAiB,KAAW,CAAvC,EAAuC;AAAA,QAC5B,OAAA,IAAA,CAD4B;AAAA,KAAvC,MAEO;AAAA,QACH,OAAO2M,IAAA,CAAK3M,OAAZ,CADG;AAAA,KAVuD;AAAA;;AC/flE,SAASoR,cAAT,CAAwB51B,KAAxB,EAAwC;AAAA,IACpC,OAAO,OAAOA,KAAP,KAAiB,QAAjB,GAA4B;AAAA,QAAC,SAAD;AAAA,QAAYA,KAAZ;AAAA,KAA5B,GAAiDA,KAAxD,CADoC;AAAA,CAVxC;AAcwB,SAAA61B,eAAA,CAAmB5E,UAAnB,EAAyDU,YAAzD,EAA4H;AAAA,IAChJ,IAAInvB,KAAA,GAAQyuB,UAAA,CAAWzuB,KAAvB,CADgJ;AAAA,IAEhJ,IAAI,CAACA,KAAL,EAAY;AAAA,QAED,OAAAszB,uBAAA,CAAwB7E,UAAxB,EAAoCU,YAApC,CAAA,CAFC;AAAA,KAFoI;AAAA,IAOhJ,MAAME,uBAAA,GAA0BrvB,KAAA,IAAS,OAAOA,KAAA,CAAM,CAAN,CAAS,CAAA,CAAT,CAAP,KAAuB,QAAhE,CAPgJ;AAAA,IAQ1I,MAAAsvB,gBAAA,GAAmBD,uBAAA,IAA2BZ,UAAA,CAAW/tB,QAAX,KAAwB,KAAA,CAAtE,CAR0I;AAAA,IAS1I,MAAA6uB,aAAA,GAAgBF,uBAAA,IAA2B,CAACC,gBAA5C,CAT0I;AAAA,IAWxItvB,KAAA,GAAAA,KAAA,CAAM9B,GAAN,CAAWyC,IAAD,IAAU;AAAA,QACpB,IAAA,CAAC2uB,gBAAD,IAAqBH,YAAA,CAAaoE,MAAlC,IAA4C,OAAO5yB,IAAA,CAAK,CAAL,CAAP,KAAmB,QAA/D,EAAyE;AAAA,YAClE,OAAA;AAAA,gBAACA,IAAA,CAAK,CAAL,CAAD;AAAA,gBAAU6yB,kBAAA,CAAmB7yB,IAAA,CAAK,CAAL,CAAnB,CAAV;AAAA,aAAA,CADkE;AAAA,SADrD;AAAA,QAIjB,OAAA;AAAA,YAACA,IAAA,CAAK,CAAL,CAAD;AAAA,YAAUyyB,cAAA,CAAezyB,IAAA,CAAK,CAAL,CAAf,CAAV;AAAA,SAAA,CAJiB;AAAA,KAApB,CAAA,CAXwI;AAAA,IAkBhJ,IAAI0uB,uBAAJ,EAA6B;AAAA,QAClB,OAAAoE,8BAAA,CAA+BhF,UAA/B,EAA2CU,YAA3C,EAAyDnvB,KAAzD,CAAA,CADkB;AAAA,KAA7B,UAEWuvB,eAAe;AAAA,QACf,OAAAmE,mBAAA,CAAoBjF,UAApB,EAAgCU,YAAhC,EAA8CnvB,KAA9C,CAAA,CADe;AAAA,WAEnB;AAAA,QACI,OAAA2zB,uBAAA,CAAwBlF,UAAxB,EAAoCU,YAApC,EAAkDnvB,KAAlD,CAAA,CADJ;AAAA,KAtByI;AAAA,CAdpJ;AAyCA,SAASszB,uBAAT,CAAoC7E,UAApC,EAA0EU,YAA1E,EAA6I;AAAA,IACzI,MAAMtsB,GAAA,GAA+B;AAAA,QAAC,KAAD;AAAA,QAAQ4rB,UAAA,CAAW/tB,QAAnB;AAAA,KAArC,CADyI;AAAA,IAGrI,IAAA+tB,UAAA,CAAWzM,OAAX,KAAuB,KAAW,CAAlC,EAAkC;AAAA,QAGlC,OAAOmN,YAAA,CAAahwB,IAAb,KAAsB,QAAtB,GAAiC;AAAA,YAAC,QAAD;AAAA,YAAW0D,GAAX;AAAA,SAAjC,GAAmDA,GAA1D,CAHkC;AAAA,KAAlC,MAIJ,IAAWssB,YAAA,CAAahwB,IAAb,KAAsB,MAAjC,EAAyC;AAAA,QAC9B,OAAA;AAAA,YACH,OADG;AAAA,YAEH0D,GAFG;AAAA,YAGHxF,MAAA,CAAOD,IAAP,CAAY+xB,YAAA,CAAaxN,MAAzB,CAHG;AAAA,YAIH9e,GAJG;AAAA,YAKH4rB,UAAA,CAAWzM,OALR;AAAA,SAAA,CAD8B;AAAA,KAAzC,MAQO;AAAA,QACH,MAAMpf,UAAA,GAAsC;AAAA,YAACusB,YAAA,CAAahwB,IAAb,KAAsB,OAAtB,GAAgC,UAAhC,GAA6CgwB,YAAA,CAAahwB,IAA3D;AAAA,YAAiE0D,GAAjE;AAAA,YAAsEuwB,cAAA,CAAe3E,UAAA,CAAWzM,OAA1B,CAAtE;AAAA,SAA5C,CADG;AAAA,QAEC,IAAAmN,YAAA,CAAahwB,IAAb,KAAsB,OAAtB,EAA+B;AAAA,YAC/ByD,UAAA,CAAWX,MAAX,CAAkB,CAAlB,EAAqB,CAArB,EAAwBktB,YAAA,CAAa3xB,KAArC,EAA4C2xB,YAAA,CAAa7yB,MAAb,IAAuB,IAAnE,CAD+B,CAAA;AAAA,SAFhC;AAAA,QAKI,OAAAsG,UAAA,CALJ;AAAA,KAfkI;AAAA,CAzC7I;AAiEA,SAASgxB,sBAAT,CAAmCnF,UAAnC,EAAyE;AAAA,IACrE,QAAQA,UAAA,CAAWgB,UAAnB;AAAA,IACA,KAAK,KAAL;AAAA,QAAmB,OAAA,iBAAA,CADnB;AAAA,IAEA,KAAK,KAAL;AAAA,QAAmB,OAAA,iBAAA,CAFnB;AAAA,IAGA;AAAA,QAAgB,OAAA,aAAA,CAHhB;AAAA,KADqE;AAAA,CAjEzE;AAyEA,SAASgE,8BAAT,CACIhF,UADJ,EAEIU,YAFJ,EAGInvB,KAHJ,EAI2B;AAAA,IACvB,MAAM6zB,yBAAA,GAAiD,EAAvD,CADuB;AAAA,IAEvB,MAAMxD,oBAAA,GAA4C,EAAlD,CAFuB;AAAA,IAGvB,MAAMD,SAAA,GAAY,EAAlB,CAHuB;AAAA,IAIvB,KAAA,IAASvuB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI7B,KAAA,CAAM1D,MAA1B,EAAkCuF,CAAA,EAAlC,EAAuC;AAAA,QAC7B,MAAAlB,IAAA,GAAOX,KAAA,CAAM6B,CAAN,CAAP,CAD6B;AAAA,QAE7B,MAAAurB,IAAA,GAAOzsB,IAAA,CAAK,CAAL,CAAA,CAAQysB,IAAf,CAF6B;AAAA,QAG/B,IAAAyG,yBAAA,CAA0BzG,IAA1B,CAAoC,KAAA,KAAW,CAA/C,EAA+C;AAAA,YAC/CyG,yBAAA,CAA0BzG,IAA1B,CAAkC,GAAA;AAAA,gBAC9BA,IAD8B;AAAA,gBAE9BjuB,IAAA,EAAMsvB,UAAA,CAAWtvB,IAFa;AAAA,gBAG9BuB,QAAA,EAAU+tB,UAAA,CAAW/tB,QAHS;AAAA,gBAI9BshB,OAAA,EAASyM,UAAA,CAAWzM,OAJU;AAAA,aAAlC,CAD+C;AAAA,YAO1BqO,oBAAA,CAAAjD,IAAA,CAAA,GAAQ,EAAR,CAP0B;AAAA,YAQ/CgD,SAAA,CAAUjzB,IAAV,CAAeiwB,IAAf,CAR+C,CAAA;AAAA,SAHhB;AAAA,QAadiD,oBAAA,CAAAjD,IAAA,CAAA,CAAMjwB,IAAN,CAAW;AAAA,YAACwD,IAAA,CAAK,CAAL,CAAA,CAAQnD,KAAT;AAAA,YAAgBmD,IAAA,CAAK,CAAL,CAAhB;AAAA,SAAX,CAbc,CAAA;AAAA,KAJhB;AAAA,IAwBvB,MAAMmzB,YAAA,GAAeC,eAAA,CAAgB,EAAhB,EAAsD5E,YAAtD,CAArB,CAxBuB;AAAA,IAyBvB,IAAI2E,YAAA,KAAiB,aAArB,EAAoC;AAAA,QAC1B,MAAAlxB,UAAA,GAAsC;AAAA,YAACgxB,sBAAA,CAAuBnF,UAAvB,CAAD;AAAA,YAAqC,CAAC,QAAD,CAArC;AAAA,YAAiD,CAAC,MAAD,CAAjD;AAAA,SAAtC,CAD0B;AAAA,QAGhC,KAAWtZ,MAAAA,CAAX,IAAgBib,SAAhB,EAA2B;AAAA,YACjB,MAAAjuB,MAAA,GAASwxB,uBAAA,CAAwBE,yBAAA,CAA0B1e,CAA1B,CAAxB,EAAsDga,YAAtD,EAAoEkB,oBAAA,CAAqBlb,CAArB,CAApE,CAAT,CADiB;AAAA,YAER6e,cAAA,CAAApxB,UAAA,EAAYuS,CAAZ,EAAehT,MAAf,EAAuB,KAAvB,CAFQ,CAAA;AAAA,SAHK;AAAA,QAQzB,OAAAS,UAAA,CARyB;AAAA,KAApC,MASO;AAAA,QACH,MAAMA,UAAA,GAAsC;AAAA,YAAC,MAAD;AAAA,YAAS,CAAC,MAAD,CAAT;AAAA,SAA5C,CADG;AAAA,QAGH,KAAWuS,MAAAA,CAAX,IAAgBib,SAAhB,EAA2B;AAAA,YACjB,MAAAjuB,MAAA,GAASwxB,uBAAA,CAAwBE,yBAAA,CAA0B1e,CAA1B,CAAxB,EAAsDga,YAAtD,EAAoEkB,oBAAA,CAAqBlb,CAArB,CAApE,CAAT,CADiB;AAAA,YAER6e,cAAA,CAAApxB,UAAA,EAAYuS,CAAZ,EAAehT,MAAf,EAAuB,IAAvB,CAFQ,CAAA;AAAA,SAHxB;AAAA,QAQH8xB,wBAAA,CAAyBrxB,UAAzB,CARG,CAAA;AAAA,QAUI,OAAAA,UAAA,CAVJ;AAAA,KAlCgB;AAAA,CA7E3B;AA6HA,SAAS4tB,QAAT,CAAkBjqB,CAAlB,EAA8BC,CAA9B,EAA0C;AAAA,IAClC,IAAAD,CAAA,KAAM,MAAN;AAAA,QAAwB,OAAAA,CAAA,CADU;AAAA,IAElC,IAAAC,CAAA,KAAM,MAAN;AAAA,QAAwB,OAAAA,CAAA,CAFU;AAAA,CA7H1C;AAkIA,SAAS0tB,WAAT,CAAwBzF,UAAxB,EAA8DU,YAA9D,EAAwG;AAAA,IACpG,MAAMpN,YAAA,GAAeqR,cAAA,CAAe5C,QAAA,CAAS/B,UAAA,CAAWzM,OAApB,EAA6BmN,YAAA,CAAanN,OAA1C,CAAf,CAArB,CADoG;AAAA,IASpG,IAAID,YAAA,KAAiB,KAAA,CAAjB,IAA8BoN,YAAA,CAAahwB,IAAb,KAAsB,eAAxD,EAAyE;AAAA,QAC9D,OAAA,EAAA,CAD8D;AAAA,KAT2B;AAAA,IAY7F,OAAA4iB,YAAA,CAZ6F;AAAA,CAlIxG;AAiJA,SAAS4R,uBAAT,CACIlF,UADJ,EAEIU,YAFJ,EAGInvB,KAHJ,EAI2B;AAAA,IACjB,MAAAb,IAAA,GAAO40B,eAAA,CAAgBtF,UAAhB,EAA4BU,YAA5B,CAAP,CADiB;AAAA,IAEvB,MAAMtsB,GAAA,GAA+B;AAAA,QAAC,KAAD;AAAA,QAAQ4rB,UAAA,CAAW/tB,QAAnB;AAAA,KAArC,CAFuB;AAAA,IAGnB,IAAAvB,IAAA,KAAS,aAAT,IAA0B,OAAOa,KAAA,CAAM,CAAN,CAAS,CAAA,CAAT,CAAP,KAAuB,SAAjD,EAA4D;AAAA,QAEtD,MAAA4C,UAAA,GAAsC,CAAC,MAAD,CAAtC,CAFsD;AAAA,QAG5D,KAAWjC,MAAAA,IAAX,IAAmBX,KAAnB,EAA0B;AAAA,YACX4C,UAAA,CAAAzF,IAAA,CAAK;AAAA,gBAAC,IAAD;AAAA,gBAAO0F,GAAP;AAAA,gBAAYlC,IAAA,CAAK,CAAL,CAAZ;AAAA,aAAL,EAA2BA,IAAA,CAAK,CAAL,CAA3B,CADW,CAAA;AAAA,SAHkC;AAAA,QAO5DiC,UAAA,CAAWzF,IAAX,CAAgB+2B,WAAA,CAAYzF,UAAZ,EAAwBU,YAAxB,CAAhB,CAP4D,CAAA;AAAA,QAQrD,OAAAvsB,UAAA,CARqD;AAAA,KAA5D,MASJ,IAAWzD,IAAA,KAAS,aAApB,EAAmC;AAAA,QACzB,MAAAyD,UAAA,GAAsC;AAAA,YAAC,OAAD;AAAA,YAAUC,GAAV;AAAA,SAAtC,CADyB;AAAA,QAE/B,KAAWlC,MAAAA,IAAX,IAAmBX,KAAnB,EAA0B;AAAA,YACtBg0B,cAAA,CAAepxB,UAAf,EAA2BjC,IAAA,CAAK,CAAL,CAA3B,EAAoCA,IAAA,CAAK,CAAL,CAApC,EAA6C,KAA7C,CADsB,CAAA;AAAA,SAFK;AAAA,QAK/BiC,UAAA,CAAWzF,IAAX,CAAgB+2B,WAAA,CAAYzF,UAAZ,EAAwBU,YAAxB,CAAhB,CAL+B,CAAA;AAAA,QAMxB,OAAAvsB,UAAA,CANwB;AAAA,KAAnC,MAOA,IAAWzD,IAAA,KAAS,UAApB,EAAgC;AAAA,QAC5B,MAAMyD,UAAA,GAAsC;AAAA,YAAC,MAAD;AAAA,YAAS;AAAA,gBAAC,QAAD;AAAA,gBAAWC,GAAX;AAAA,aAAT;AAAA,SAA5C,CAD4B;AAAA,QAE5B,KAAWlC,MAAAA,IAAX,IAAmBX,KAAnB,EAA0B;AAAA,YACtBg0B,cAAA,CAAepxB,UAAf,EAA2BjC,IAAA,CAAK,CAAL,CAA3B,EAAoCA,IAAA,CAAK,CAAL,CAApC,EAA6C,IAA7C,CADsB,CAAA;AAAA,SAFE;AAAA,QAK5BszB,wBAAA,CAAyBrxB,UAAzB,CAL4B,CAAA;AAAA,QAMrB,OAAA6rB,UAAA,CAAWzM,OAAX,KAAuB,KAAA,CAAvB,GAAmCpf,UAAnC,GAAgD;AAAA,YACnD,MADmD;AAAA,YAEnD;AAAA,gBAAC,IAAD;AAAA,gBAAO;AAAA,oBAAC,QAAD;AAAA,oBAAWC,GAAX;AAAA,iBAAP;AAAA,gBAAwB,QAAxB;AAAA,aAFmD;AAAA,YAGnDD,UAHmD;AAAA,YAInDwwB,cAAA,CAAe3E,UAAA,CAAWzM,OAA1B,CAJmD;AAAA,SAAhD,CANqB;AAAA,KAAhC,MAYA,IAAW7iB,IAAA,KAAS,aAApB,EAAmC;AAAA,QAC/B,MAAM2oB,IAAA,GAAO2G,UAAA,CAAW3G,IAAX,KAAoB,KAAA,CAApB,GAAgC2G,UAAA,CAAW3G,IAA3C,GAAkD,CAA/D,CAD+B;AAAA,QAE/B,MAAMllB,UAAA,GAAsC;AAAA,YACxCgxB,sBAAA,CAAuBnF,UAAvB,CADwC;AAAA,YAExC3G,IAAA,KAAS,CAAT,GAAa,CAAC,QAAD,CAAb,GAA0B;AAAA,gBAAC,aAAD;AAAA,gBAAgBA,IAAhB;AAAA,aAFc;AAAA,YAGxC;AAAA,gBAAC,QAAD;AAAA,gBAAWjlB,GAAX;AAAA,aAHwC;AAAA,SAA5C,CAF+B;AAAA,QAQ/B,KAAWlC,MAAAA,IAAX,IAAmBX,KAAnB,EAA0B;AAAA,YACtBg0B,cAAA,CAAepxB,UAAf,EAA2BjC,IAAA,CAAK,CAAL,CAA3B,EAAoCA,IAAA,CAAK,CAAL,CAApC,EAA6C,KAA7C,CADsB,CAAA;AAAA,SARK;AAAA,QAWxB,OAAA8tB,UAAA,CAAWzM,OAAX,KAAuB,KAAA,CAAvB,GAAmCpf,UAAnC,GAAgD;AAAA,YACnD,MADmD;AAAA,YAEnD;AAAA,gBAAC,IAAD;AAAA,gBAAO;AAAA,oBAAC,QAAD;AAAA,oBAAWC,GAAX;AAAA,iBAAP;AAAA,gBAAwB,QAAxB;AAAA,aAFmD;AAAA,YAGnDD,UAHmD;AAAA,YAInDwwB,cAAA,CAAe3E,UAAA,CAAWzM,OAA1B,CAJmD;AAAA,SAAhD,CAXwB;AAAA,KAAnC,MAiBO;AAAA,QACH,MAAM,IAAIxgB,KAAJ,CAAU,CAAkC,+BAAlC,GAAkCrC,IAAlC,EAAV,CAAA,CAAN,CADG;AAAA,KAhDgB;AAAA,CArJ3B;AA0MA,SAASu0B,mBAAT,CAAgCjF,UAAhC,EAAsEU,YAAtE,EAAgHnvB,KAAhH,EAAuJa,KAAA,GAAuB,CAAC,MAAD,CAA9K,EAAwL;AAAA,IAC9K,MAAA1B,IAAA,GAAO40B,eAAA,CAAgBtF,UAAhB,EAA4BU,YAA5B,CAAP,CAD8K;AAAA,IAEhL,IAAAvsB,UAAA,CAFgL;AAAA,IAGpL,IAAIuxB,MAAA,GAAS,KAAb,CAHoL;AAAA,IAIpL,IAAIh1B,IAAA,KAAS,UAAb,EAAyB;AAAA,QACRyD,UAAA,GAAA;AAAA,YAAC,MAAD;AAAA,YAAS/B,KAAT;AAAA,SAAA,CADQ;AAAA,QAEZszB,MAAA,GAAA,IAAA,CAFY;AAAA,KAAzB,MAGA,IAAWh1B,IAAA,KAAS,aAApB,EAAmC;AAAA,QAC/B,MAAM2oB,IAAA,GAAO2G,UAAA,CAAW3G,IAAX,KAAoB,KAAA,CAApB,GAAgC2G,UAAA,CAAW3G,IAA3C,GAAkD,CAA/D,CAD+B;AAAA,QAE/BllB,UAAA,GAAa;AAAA,YAACgxB,sBAAA,CAAuBnF,UAAvB,CAAD;AAAA,YAAqC3G,IAAA,KAAS,CAAT,GAAa,CAAC,QAAD,CAAb,GAA0B;AAAA,gBAAC,aAAD;AAAA,gBAAgBA,IAAhB;AAAA,aAA/D;AAAA,YAAsFjnB,KAAtF;AAAA,SAAb,CAF+B;AAAA,KAAnC,MAIO;AAAA,QACH,MAAM,IAAIW,KAAJ,CAAU,CAA+B,4BAA/B,GAA+BrC,IAA/B,EAAsC,CAAtC,CAAV,CAAN,CADG;AAAA,KAX6K;AAAA,IAepL,KAAWwB,MAAAA,IAAX,IAAmBX,KAAnB,EAA0B;AAAA,QACtBg0B,cAAA,CAAepxB,UAAf,EAA2BjC,IAAA,CAAK,CAAL,CAA3B,EAAoCA,IAAA,CAAK,CAAL,CAApC,EAA6CwzB,MAA7C,CADsB,CAAA;AAAA,KAf0J;AAAA,IAmBpLF,wBAAA,CAAyBrxB,UAAzB,CAnBoL,CAAA;AAAA,IAqB7K,OAAAA,UAAA,CArB6K;AAAA,CA1MxL;AAkOA,SAASqxB,wBAAT,CAAkCrxB,UAAlC,EAAuE;AAAA,IAEnE,IAAIA,UAAA,CAAW,CAAX,CAAkB,KAAA,MAAlB,IAA4BA,UAAA,CAAWtG,MAAX,KAAsB,CAAtD,EAAyD;AAAA,QACrDsG,UAAA,CAAWzF,IAAX,CAAgB,CAAhB,CADqD,CAAA;AAAA,QAE1CyF,UAAA,CAAAzF,IAAA,CAAKyF,UAAA,CAAW,CAAX,CAAL,CAF0C,CAAA;AAAA,KAFU;AAAA,CAlOvE;AA0OA,SAASoxB,cAAT,CAAwBI,KAAxB,EAAwDvzB,KAAxD,EAAwEsB,MAAxE,EAAyFgyB,MAAzF,EAA0G;AAAA,IAGlG,IAAAC,KAAA,CAAM93B,MAAN,GAAe,CAAf,IAAoBuE,KAAA,KAAUuzB,KAAA,CAAMA,KAAA,CAAM93B,MAAN,GAAe,CAArB,CAA9B,EAAuD;AAAA,QACvD,OADuD;AAAA,KAH2C;AAAA,IAOtG,IAAI,EAAE63B,MAAA,IAAUC,KAAA,CAAM93B,MAAN,KAAiB,CAA3B,CAAN,EAAqC;AAAA,QACjC83B,KAAA,CAAMj3B,IAAN,CAAW0D,KAAX,CADiC,CAAA;AAAA,KAPiE;AAAA,IAUtGuzB,KAAA,CAAMj3B,IAAN,CAAWgF,MAAX,CAVsG,CAAA;AAAA,CA1O1G;AAuPA,SAAS4xB,eAAT,CAA4BtF,UAA5B,EAAkEU,YAAlE,EAAoH;AAAA,IAChH,IAAIV,UAAA,CAAWtvB,IAAf,EAAqB;AAAA,QACjB,OAAOsvB,UAAA,CAAWtvB,IAAlB,CADiB;AAAA,KAArB,MAEO;AAAA,QAEK,OAAAgwB,YAAA,CAAavsB,UAAb,CAAgCosB,YAAhC,GAA+C,aAA/C,GAA+D,UAA/D,CAFL;AAAA,KAHyG;AAAA,CAvPpH;AAiQO,SAASwE,kBAAT,CAA4B3xB,CAA5B,EAAyE;AAAA,IACtE,MAAAjE,MAAA,GAAkC,CAAC,QAAD,CAAlC,CADsE;AAAA,IAE5E,MAAMy2B,EAAA,GAAK,aAAX,CAF4E;AAAA,IAG5E,IAAIlZ,GAAA,GAAM,CAAV,CAH4E;AAAA,IAInE,KAAA,IAAA1e,KAAA,GAAQ43B,EAAA,CAAGC,IAAH,CAAQzyB,CAAR,CAAR,EAAoBpF,KAAA,KAAU,IAA9B,EAAoCA,KAAA,GAAQ43B,EAAA,CAAGC,IAAH,CAAQzyB,CAAR,CAA5C,EAAwD;AAAA,QACvD,MAAA0yB,OAAA,GAAU1yB,CAAA,CAAEjG,KAAF,CAAQuf,GAAR,EAAakZ,EAAA,CAAG5Q,SAAH,GAAehnB,KAAA,CAAM,CAAN,CAASH,CAAAA,MAArC,CAAV,CADuD;AAAA,QAE7D6e,GAAA,GAAMkZ,EAAA,CAAG5Q,SAAT,CAF6D;AAAA,QAG7D,IAAI8Q,OAAA,CAAQj4B,MAAR,GAAiB,CAArB;AAAA,YAAwBsB,MAAA,CAAOT,IAAP,CAAYo3B,OAAZ,CAHqC,CAAA;AAAA,QAI7D32B,MAAA,CAAOT,IAAP,CAAY;AAAA,YAAC,KAAD;AAAA,YAAQV,KAAA,CAAM,CAAN,CAAR;AAAA,SAAZ,CAJ6D,CAAA;AAAA,KAJW;AAAA,IAWxE,IAAAmB,MAAA,CAAOtB,MAAP,KAAkB,CAAlB,EAAqB;AAAA,QACd,OAAAuF,CAAA,CADc;AAAA,KAXmD;AAAA,IAexE,IAAAsZ,GAAA,GAAMtZ,CAAA,CAAEvF,MAAR,EAAgB;AAAA,QAChBsB,MAAA,CAAOT,IAAP,CAAY0E,CAAA,CAAEjG,KAAF,CAAQuf,GAAR,CAAZ,CADgB,CAAA;AAAA,KAAhB,MAEJ,IAAWvd,MAAA,CAAOtB,MAAP,KAAkB,CAA7B,EAAgC;AAAA,QAC5B,OAAO;AAAA,YAAC,WAAD;AAAA,YAAcsB,MAAA,CAAO,CAAP,CAAd;AAAA,SAAP,CAD4B;AAAA,KAjB4C;AAAA,IAqBrE,OAAAA,MAAA,CArBqE;AAAA;;AChQzE,SAAS42B,QAAT,CAAkBh3B,KAAlB,EAA2C;AAAA,IAC9C,IAAIA,KAAA,YAAiBoQ,MAAjB,IAA2BpQ,KAAA,YAAiBmO,MAA5C,IAAsDnO,KAAA,YAAiBqQ,OAA3E,EAAoF;AAAA,QAChF,OAAOrQ,KAAA,CAAMi3B,OAAN,EAAP,CADgF;AAAA,KAApF,MAEO;AAAA,QACI,OAAAj3B,KAAA,CADJ;AAAA,KAHuC;AAAA,CAA3C;AAQA,SAASk3B,YAAT,CAAsBl3B,KAAtB,EAA+C;AAAA,IAC9C,IAAAP,KAAA,CAAMC,OAAN,CAAcM,KAAd,CAAA,EAAsB;AAAA,QACf,OAAAA,KAAA,CAAMU,GAAN,CAAUw2B,YAAV,CAAA,CADe;AAAA,KAAtB,MAEJ,IAAWl3B,KAAA,YAAiBH,MAAjB,IAA2B,EAAEG,KAAA,YAAiBoQ,MAAjB,IAA2BpQ,KAAA,YAAiBmO,MAA5C,IAAsDnO,KAAA,YAAiBqQ,OAAvE,CAAxC,EAAyH;AAAA,QACrH,MAAM8mB,cAAA,GAEF,EAFJ,CADqH;AAAA,QAIrH,KAAWr3B,MAAAA,GAAX,IAAkBE,KAAlB,EAAyB;AAAA,YACrBm3B,cAAA,CAAer3B,GAAf,CAAsBo3B,GAAAA,YAAA,CAAal3B,KAAA,CAAMF,GAAN,CAAb,CAAtB,CADqB;AAAA,SAJ4F;AAAA,QAO9G,OAAAq3B,cAAA,CAP8G;AAAA,KAHvE;AAAA,IAalD,OAAOH,QAAA,CAASh3B,KAAT,CAAP,CAbkD;AAAA;;ACyBtD,SAASo3B,kBAAT,CAA4BnT,MAA5B,EAAsD;AAAA,IAC9C,IAAAA,MAAA,KAAW,IAAX,IAAmBA,MAAA,KAAW,KAA9B,EAAqC;AAAA,QAC9B,OAAA,IAAA,CAD8B;AAAA,KADS;AAAA,IAKlD,IAAI,CAACxkB,KAAA,CAAMC,OAAN,CAAcukB,MAAd,CAAD,IAA0BA,MAAA,CAAOnlB,MAAP,KAAkB,CAAhD,EAAmD;AAAA,QACxC,OAAA,KAAA,CADwC;AAAA,KALD;AAAA,IAQ1C,QAAAmlB,MAAA,CAAO,CAAP,CAAA;AAAA,IACR,KAAK,KAAL;AAAA,QACW,OAAAA,MAAA,CAAOnlB,MAAP,IAAiB,CAAjB,IAAsBmlB,MAAA,CAAO,CAAP,CAAA,KAAc,KAApC,IAA6CA,MAAA,CAAO,CAAP,CAAA,KAAc,OAA3D,CAFH;AAAA,IAIR,KAAK,IAAL;AAAA,QACI,OAAOA,MAAA,CAAOnlB,MAAP,IAAiB,CAAjB,KAAuB,OAAOmlB,MAAA,CAAO,CAAP,CAAP,KAAqB,QAArB,IAAiCxkB,KAAA,CAAMC,OAAN,CAAcukB,MAAA,CAAO,CAAP,CAAd,CAAjC,CAA9B,CALI;AAAA,IAOR,KAAK,KAAL,CAPQ;AAAA,IAQR,KAAK,MAAL,CARQ;AAAA,IASR,KAAK,MAAL;AAAA,QACW,OAAA,KAAA,CAVH;AAAA,IAYR,KAAK,IAAL,CAZQ;AAAA,IAaR,KAAK,IAAL,CAbQ;AAAA,IAcR,KAAK,GAAL,CAdQ;AAAA,IAeR,KAAK,IAAL,CAfQ;AAAA,IAgBR,KAAK,GAAL,CAhBQ;AAAA,IAiBR,KAAK,IAAL;AAAA,QACI,OAAOA,MAAA,CAAOnlB,MAAP,KAAkB,CAAlB,KAAwBW,KAAA,CAAMC,OAAN,CAAcukB,MAAA,CAAO,CAAP,CAAd,CAAA,IAA4BxkB,KAAA,CAAMC,OAAN,CAAcukB,MAAA,CAAO,CAAP,CAAd,CAA5B,CAA/B,CAlBI;AAAA,IAoBR,KAAK,KAAL,CApBQ;AAAA,IAqBR,KAAK,KAAL;AAAA,QACI,KAAA,MAAW3c,CAAX,IAAgB2c,MAAA,CAAO7lB,KAAP,CAAa,CAAb,CAAhB,EAAiC;AAAA,YAC7B,IAAI,CAACg5B,kBAAA,CAAmB9vB,CAAnB,CAAD,IAA0B,OAAOA,CAAP,KAAa,SAA3C,EAAsD;AAAA,gBAC3C,OAAA,KAAA,CAD2C;AAAA,aADzB;AAAA,SADrC;AAAA,QAMW,OAAA,IAAA,CA3BH;AAAA,IA6BR;AAAA,QACW,OAAA,IAAA,CA9BH;AAAA,KAR0C;AAAA,CAlCtD;AAsFA,SAAS+vB,YAAT,CAAsBpT,MAAtB,EAAoD9S,KAAA,GAAgB,EAApE,EAAwEnT,OAAA,GAAgC,IAAxG,EAA8Gs5B,SAAA,GAAoB,MAAlI,EAAyJ;AAAA,IACjJ,IAAArT,MAAA,KAAW,IAAX,IAAmBA,MAAA,KAAW,KAAW,CAAzC,EAAyC;AAAA,QACzC,OAAO;AAAA,YAACA,MAAA,EAAQ,MAAM,IAAf;AAAA,YAAqBsT,YAAA,EAAc,KAAnC;AAAA,YAA0CC,WAAA,EAAa,KAAvD;AAAA,SAAP,CADyC;AAAA,KADwG;AAAA,IAKjJ,IAAA,CAACJ,kBAAA,CAAmBnT,MAAnB,CAAD,EAA6B;AAAA,QAC7BA,MAAA,GAASwT,eAAA,CAAcxT,MAAd,CAAT,CAD6B;AAAA,KALoH;AAAA,IASrJ,MAAMyT,SAAA,GAAazT,MAAnB,CATqJ;AAAA,IAWrJ,IAAI0T,YAAA,GAAe,IAAnB,CAXqJ;AAAA,IAYjJ,IAAA;AAAA,QACAA,YAAA,GAAeC,mBAAA,CAAoBF,SAApB,CAAf,CADA;AAAA,KAAA,QAEK7uB,GAAQ;AAAA,QACL6V,OAAA,CAAAC,IAAA,CAChB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAKEzgB,IAAA,CAAKJ,SAAL,CAAe45B,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CALF,EAKoC;AAAA,QALpC,CADgB,CADK,CAAA;AAAA,KAdoI;AAAA,IA0BrJ,IAAIG,UAAA,GAAa,IAAjB,CA1BqJ;AAAA,IA2BrJ,IAAIC,UAAA,GAAa,IAAjB,CA3BqJ;AAAA,IA4BrJ,IAAIR,SAAA,KAAc,YAAd,IAA8BA,SAAA,KAAc,KAA5C,IAAqDA,SAAA,KAAc,MAAvE,EAA+E;AAAA,QAC9DQ,UAAA,GAAAC,EAAA,CAAO,CAAU,OAAV,GAAUT,SAAV,EAAP,CAAA,CAAA,CAD8D;AAAA,QAG3E,MAAMU,oBAAA,GAAuB/D,gBAAA,CAAiB0D,YAAjB,EAA+BG,UAA/B,EAA2C3mB,KAA3C,EAAkDnT,OAAlD,CAA7B,CAH2E;AAAA,QAKvE,IAAAg6B,oBAAA,CAAqB53B,MAArB,KAAgC,OAAhC,EAAyC;AAAA,YACzC,MAAM,IAAI4D,KAAJ,CAAUg0B,oBAAA,CAAqBh4B,KAArB,CAA2BU,GAA3B,IAA+B,IAAO,CAAG40B,GAAAA,GAAA,CAAIx1B,GAAP,EAAU,EAAV,GAAew1B,GAAA,CAAIvwB,OAAnB,EAAtC,CAAA,CAAA,CAAoE9E,IAApE,CAAyE,IAAzE,CAAV,CAAN,CADyC;AAAA,SAAzC,MAEG;AAAA,YACU43B,UAAA,GAAA,CAACI,gBAAD,EAAqC5mB,OAArC,EAAuDI,SAAvD,KAAuFumB,oBAAA,CAAqBh4B,KAArB,CAA2ByO,QAA3B,CAAoCwpB,gBAApC,EAAsD5mB,OAAtD,EAA+D,EAA/D,EAAmEI,SAAnE,CAAvF,CADV;AAAA,SAPoE;AAAA,KA5BsE;AAAA,IA0CrJ,IAAIymB,iBAAA,GAAoB,IAAxB,CA1CqJ;AAAA,IA2CrJ,IAAIV,WAAA,GAAc,IAAlB,CA3CqJ;AAAA,IA4CrJ,IAAIG,YAAA,KAAiBD,SAArB,EAAgC;AAAA,QAC5B,MAAMS,qBAAA,GAAwBlE,gBAAA,CAAiByD,SAAjB,EAA4BI,UAA5B,EAAwC3mB,KAAxC,EAA+CnT,OAA/C,CAA9B,CAD4B;AAAA,QAGxB,IAAAm6B,qBAAA,CAAsB/3B,MAAtB,KAAiC,OAAjC,EAA0C;AAAA,YAC1C,MAAM,IAAI4D,KAAJ,CAAUm0B,qBAAA,CAAsBn4B,KAAtB,CAA4BU,GAA5B,IAAgC,IAAO,CAAG40B,GAAAA,GAAA,CAAIx1B,GAAP,EAAU,EAAV,GAAew1B,GAAA,CAAIvwB,OAAnB,EAAvC,CAAA,CAAA,CAAqE9E,IAArE,CAA0E,IAA1E,CAAV,CAAN,CAD0C;AAAA,SAA1C,MAEG;AAAA,YACHi4B,iBAAA,GAAoB,CAACD,gBAAD,EAAqC5mB,OAArC,EAAuDI,SAAvD,EAAoFC,gBAApF,EAA8GC,mBAA9G,KAA4JwmB,qBAAA,CAAsBn4B,KAAtB,CAA4ByO,QAA5B,CAAqCwpB,gBAArC,EAAuD5mB,OAAvD,EAAgE,EAAhE,EAAoEI,SAApE,EAA+E,KAAW,CAA1F,EAA0F,KAAA,CAA1F,EAAqGC,gBAArG,EAAuHC,mBAAvH,CAAhL,CADG;AAAA,YAEH6lB,WAAA,GAAc,CAAC5S,iBAAA,CAAkBuT,qBAAA,CAAsBn4B,KAAtB,CAA4BoF,UAA9C,CAAf,CAFG;AAAA,SALqB;AAAA,KA5CqH;AAAA,IAuDvIyyB,UAAA,GAAAA,UAAA,CAvDuI;AAAA,IAwD/I,MAAAN,YAAA,GAAea,cAAA,CAAeT,YAAf,CAAf,CAxD+I;AAAA,IA0D9I,OAAA;AAAA,QACH1T,MAAA,EAAQ4T,UADL;AAAA,QAEHQ,aAAA,EAAeH,iBAAA,GAAoBA,iBAApB,GAAwC,KAAA,CAFpD;AAAA,QAGHX,YAHG;AAAA,QAIHC,WAAA,EAAa,CAAC,CAACA,WAJZ;AAAA,KAAA,CA1D8I;AAAA,CAtFzJ;AAwJA,SAASI,mBAAT,CAA6B3T,MAA7B,EAA+C;AAAA,IACvC,IAAA,CAACqU,eAAA,CAAgBrU,MAAhB,CAAD,EAA0B;AAAA,QACnB,OAAAA,MAAA,CADmB;AAAA,KADa;AAAA,IAMvC,IAAA7jB,MAAA,GAAS82B,YAAA,CAAajT,MAAb,CAAT,CANuC;AAAA,IAS3CsU,oBAAA,CAAqBn4B,MAArB,CAT2C,CAAA;AAAA,IAY3CA,MAAA,GAASo4B,iCAAA,CAAkCp4B,MAAlC,CAAT,CAZ2C;AAAA,IAcpC,OAAAA,MAAA,CAdoC;AAAA,CAxJ/C;AAyKA,SAASo4B,iCAAT,CAA2CpzB,UAA3C,EAAiE;AAAA,IAC7D,IAAI,CAAC3F,KAAA,CAAMC,OAAN,CAAc0F,UAAd,CAAL,EAAgC;AAAA,QACrB,OAAAA,UAAA,CADqB;AAAA,KAD6B;AAAA,IAKvD,MAAAqzB,SAAA,GAAYC,mBAAA,CAAoBtzB,UAApB,CAAZ,CALuD;AAAA,IAM7D,IAAIqzB,SAAA,KAAc,IAAlB,EAAwB;AAAA,QACb,OAAAA,SAAA,CADa;AAAA,KAAxB,MAEO;AAAA,QACH,OAAOA,SAAA,CAAU/3B,GAAV,CAAei4B,aAAD,IAAmBH,iCAAA,CAAkCG,aAAlC,CAAjC,CAAP,CADG;AAAA,KARsD;AAAA,CAzKjE;AA+LA,SAASJ,oBAAT,CAA8BtU,MAA9B,EAA2C;AAAA,IACvC,IAAI2U,sBAAA,GAAyB,KAA7B,CADuC;AAAA,IAEvC,MAAMlM,QAAA,GAAW,EAAjB,CAFuC;AAAA,IAInC,IAAAzI,MAAA,CAAO,CAAP,CAAA,KAAc,MAAd,EAAsB;AAAA,QACtB,KAAA,IAASljB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIkjB,MAAA,CAAOnlB,MAAP,GAAgB,CAApC,EAAuCiC,CAAA,IAAK,CAA5C,EAA+C;AAAA,YAC3C63B,sBAAA,GAAyBA,sBAAA,IAA0BN,eAAA,CAAgBrU,MAAA,CAAOljB,CAAP,CAAhB,CAAnD,CAD2C;AAAA,YAE3C2rB,QAAA,CAAS/sB,IAAT,CAAcskB,MAAA,CAAOljB,CAAA,GAAI,CAAX,CAAd,CAF2C,CAAA;AAAA,SADzB;AAAA,QAMtB2rB,QAAA,CAAS/sB,IAAT,CAAcskB,MAAA,CAAOA,MAAA,CAAOnlB,MAAP,GAAgB,CAAvB,CAAd,CANsB,CAAA;AAAA,KAAtB,MAOO,IAAAmlB,MAAA,CAAO,CAAP,CAAA,KAAc,OAAd,EAAuB;AAAA,QAC9B2U,sBAAA,GAAyBA,sBAAA,IAA0BN,eAAA,CAAgBrU,MAAA,CAAO,CAAP,CAAhB,CAAnD,CAD8B;AAAA,QAG9B,KAAA,IAASljB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIkjB,MAAA,CAAOnlB,MAAP,GAAgB,CAApC,EAAuCiC,CAAA,IAAK,CAA5C,EAA+C;AAAA,YAC3C2rB,QAAA,CAAS/sB,IAAT,CAAcskB,MAAA,CAAOljB,CAAA,GAAI,CAAX,CAAd,CAD2C,CAAA;AAAA,SAHjB;AAAA,QAM9B2rB,QAAA,CAAS/sB,IAAT,CAAcskB,MAAA,CAAOA,MAAA,CAAOnlB,MAAP,GAAgB,CAAvB,CAAd,CAN8B,CAAA;AAAA,KAAvB,MAOA,IAAAmlB,MAAA,CAAO,CAAP,CAAA,KAAc,MAAd,EAAsB;AAAA,QAC7B2U,sBAAA,GAAyBA,sBAAA,IAA0BN,eAAA,CAAgBrU,MAAA,CAAO,CAAP,CAAhB,CAAnD,CAD6B;AAAA,QAG7B,KAAA,IAASljB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIkjB,MAAA,CAAOnlB,MAAP,GAAgB,CAApC,EAAuCiC,CAAA,IAAK,CAA5C,EAA+C;AAAA,YAC3C2rB,QAAA,CAAS/sB,IAAT,CAAcskB,MAAA,CAAOljB,CAAA,GAAI,CAAX,CAAd,CAD2C,CAAA;AAAA,SAHlB;AAAA,KAlBM;AAAA,IA0BvC,IAAI63B,sBAAJ,EAA4B;AAAA,QACxB3U,MAAA,CAAOnlB,MAAP,GAAgB,CAAhB,CADwB;AAAA,QAEjBmlB,MAAA,CAAAtkB,IAAA,CAAK,KAAL,EAAY,GAAG+sB,QAAf,CAFiB,CAAA;AAAA,KA1BW;AAAA,IAgCvC,KAAA,IAAS3rB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIkjB,MAAA,CAAOnlB,MAA3B,EAAmCiC,CAAA,EAAnC,EAAwC;AAAA,QACfw3B,oBAAA,CAAAtU,MAAA,CAAOljB,CAAP,CAAA,CADe,CAAA;AAAA,KAhCD;AAAA,CA/L3C;AAoOA,SAASu3B,eAAT,CAAyBrU,MAAzB,EAA+C;AAAA,IAE3C,IAAI,CAACxkB,KAAA,CAAMC,OAAN,CAAcukB,MAAd,CAAL,EAA4B;AAAA,QACjB,OAAA,KAAA,CADiB;AAAA,KAFe;AAAA,IAK3C,IAAI4U,uBAAA,CAAwB5U,MAAA,CAAO,CAAP,CAAxB,CAAJ,EAAwC;AAAA,QAC7B,OAAA,IAAA,CAD6B;AAAA,KALG;AAAA,IAS3C,KAAA,IAASljB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIkjB,MAAA,CAAOnlB,MAA3B,EAAmCiC,CAAA,EAAnC,EAAwC;AAAA,QAC9B,MAAAiQ,KAAA,GAAQiT,MAAA,CAAOljB,CAAP,CAAR,CAD8B;AAAA,QAEhC,IAAAu3B,eAAA,CAAgBtnB,KAAhB,CAAA,EAAwB;AAAA,YACjB,OAAA,IAAA,CADiB;AAAA,SAFQ;AAAA,KATG;AAAA,IAgBpC,OAAA,KAAA,CAhBoC;AAAA,CApO/C;AAuPA,SAAS6nB,uBAAT,CAAiCzzB,UAAjC,EAA8D;AAAA,IACnD,OAAAA,UAAA,KAAe,OAAf,IACHA,UAAA,KAAe,sBADZ,CADmD;AAAA,CAvP9D;AA4PA,MAAM0zB,2BAAA;IAAkC7T,IAAI;AAAA,IACxC,IADwC;AAAA,IAExC,IAFwC;AAAA,IAGxC,IAHwC;AAAA,IAIxC,GAJwC;AAAA,IAKxC,IALwC;AAAA,IAMxC,GANwC;AAAA,IAOxC,IAPwC;AAAA,IAQxC,YARwC;AAAA,EAA5C,CA5PA;AAuQA,SAASyT,mBAAT,CAA6BtzB,UAA7B,EAAmD;AAAA,IAC/C,IAAI0zB,2BAAA,CAA4BxzB,GAA5B,CAAgCF,UAAA,CAAW,CAAX,CAAhC,CAAJ,EAAoD;AAAA,QAEhD,KAAA,IAASrE,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIqE,UAAA,CAAWtG,MAA/B,EAAuCiC,CAAA,EAAvC,EAA4C;AAAA,YAClC,MAAAg4B,KAAA,GAAQ3zB,UAAA,CAAWrE,CAAX,CAAR,CADkC;AAAA,YAEpC,IAAAu3B,eAAA,CAAgBS,KAAhB,CAAA,EAAwB;AAAA,gBACjB,OAAA,IAAA,CADiB;AAAA,aAFY;AAAA,SAFI;AAAA,KADL;AAAA,IAUxC,OAAA3zB,UAAA,CAVwC;AAAA,CAvQnD;AAqRA,SAASkH,OAAT,CAAiBvD,CAAjB,EAA4BC,CAA5B,EAAuC;AAAA,IACnC,OAAOD,CAAA,GAAIC,CAAJ,GAAQ,CAAK,CAAb,GAAaD,CAAA,GAAIC,CAAJ,GAAQ,CAAR,GAAY,CAAhC,CADmC;AAAA,CArRvC;AAyRA,SAASovB,cAAT,CAAwBnU,MAAxB,EAAsD;AAAA,IAClD,IAAI,CAACxkB,KAAA,CAAMC,OAAN,CAAcukB,MAAd,CAAL;AAAA,QAAmC,OAAA,KAAA,CADe;AAAA,IAE9C,IAAAA,MAAA,CAAO,CAAP,CAAA,KAAc,QAAd,IAA0BA,MAAA,CAAO,CAAP,CAAA,KAAc,UAAxC;AAAA,QAA2D,OAAA,IAAA,CAFb;AAAA,IAGlD,KAAA,IAAS3kB,KAAA,GAAQ,CAAjB,EAAoBA,KAAA,GAAQ2kB,MAAA,CAAOnlB,MAAnC,EAA2CQ,KAAA,EAA3C,EAAoD;AAAA,QAChD,IAAI84B,cAAA,CAAenU,MAAA,CAAO3kB,KAAP,CAAf,CAAJ;AAAA,YAA0C,OAAA,IAAA,CADM;AAAA,KAHF;AAAA,IAM3C,OAAA,KAAA,CAN2C;AAAA,CAzRtD;AAkSA,SAASm4B,eAAT,CAAuBxT,MAAvB,EAA4D;AAAA,IACpD,IAAA,CAACA,MAAD;AAAA,QAAgB,OAAA,IAAA,CADoC;AAAA,IAElD,MAAA5b,EAAA,GAAK4b,MAAA,CAAO,CAAP,CAAL,CAFkD;AAAA,IAGxD,IAAIA,MAAA,CAAOnlB,MAAP,IAAiB,CAArB;AAAA,QAAwB,OAAQuJ,EAAA,KAAO,KAAf,CAHgC;AAAA,IAIlD,MAAA2wB,SAAA,GACF3wB,EAAA,KAAO,IAAP,GAAc4wB,qBAAA,CAAoBhV,MAAA,CAAO,CAAP,CAApB,EAA+BA,MAAA,CAAO,CAAP,CAA/B,EAA0C,IAA1C,CAAd,GACA5b,EAAA,KAAO,IAAP,GAAc6wB,eAAA,CAAgBD,qBAAA,CAAoBhV,MAAA,CAAO,CAAP,CAApB,EAA+BA,MAAA,CAAO,CAAP,CAA/B,EAA0C,IAA1C,CAAhB,CAAd,GACA5b,EAAA,KAAO,GAAP,IACAA,EAAA,KAAO,GADP,IAEAA,EAAA,KAAO,IAFP,IAGAA,EAAA,KAAO,IAHP,GAGc4wB,qBAAA,CAAoBhV,MAAA,CAAO,CAAP,CAApB,EAA+BA,MAAA,CAAO,CAAP,CAA/B,EAA0C5b,EAA1C,CAHd,GAIAA,EAAA,KAAO,KAAP,GAAe8wB,oBAAA,CAAqBlV,MAAA,CAAO7lB,KAAP,CAAa,CAAb,CAArB,CAAf;AAEA,IAAAiK,EAAA,KAAO,KAAP,GAAe,CAAC,KAAD,CAAA,CAAQ3D,MAAR,CAAeuf,MAAA,CAAO7lB,KAAP,CAAa,CAAb,CAAgBsC,CAAAA,GAAhB,CAAoB+2B,eAApB,CAAf,CAAf;AAEA,IAAApvB,EAAA,KAAO,MAAP,GAAgB,CAAC,KAAD,CAAA,CAAQ3D,MAAR,CAAeuf,MAAA,CAAO7lB,KAAP,CAAa,CAAb,CAAgBsC,CAAAA,GAAhB,CAAoB+2B,eAApB,CAAA,CAAmC/2B,GAAnC,CAAuCw4B,eAAvC,CAAf,CAAhB,GACA7wB,EAAA,KAAO,IAAP,GAAc+wB,aAAA,CAAYnV,MAAA,CAAO,CAAP,CAAZ,EAAuBA,MAAA,CAAO7lB,KAAP,CAAa,CAAb,CAAvB,CAAd,GACAiK,EAAA,KAAO,KAAP,GAAe6wB,eAAA,CAAgBE,aAAA,CAAYnV,MAAA,CAAO,CAAP,CAAZ,EAAuBA,MAAA,CAAO7lB,KAAP,CAAa,CAAb,CAAvB,CAAhB,CAAf,GACAiK,EAAA,KAAO,KAAP,GAAegxB,cAAA,CAAapV,MAAA,CAAO,CAAP,CAAb,CAAf,GACA5b,EAAA,KAAO,MAAP,GAAgB6wB,eAAA,CAAgBG,cAAA,CAAapV,MAAA,CAAO,CAAP,CAAb,CAAhB,CAAhB,GACA,IAhBE,CAJkD;AAAA,IAqBjD,OAAA+U,SAAA,CArBiD;AAAA,CAlS5D;AA0TA,SAASC,qBAAT,CAA6B/1B,QAA7B,EAA+ClD,KAA/C,EAA2DqI,EAA3D,EAAuE;AAAA,IACnE,QAAQnF,QAAR;AAAA,IACA,KAAK,OAAL;AAAA,QACI,OAAO;AAAA,YAAC,CAAA,YAAA,GAAemF,EAAf,EAAD,CAAA;AAAA,YAAsBrI,KAAtB;AAAA,SAAP,CAFJ;AAAA,IAGA,KAAK,KAAL;AAAA,QACI,OAAO;AAAA,YAAC,CAAA,UAAA,GAAaqI,EAAb,EAAD,CAAA;AAAA,YAAoBrI,KAApB;AAAA,SAAP,CAJJ;AAAA,IAKA;AAAA,QACI,OAAO;AAAA,YAAC,CAAA,OAAA,GAAUqI,EAAV,EAAD,CAAA;AAAA,YAAiBnF,QAAjB;AAAA,YAA2BlD,KAA3B;AAAA,SAAP,CANJ;AAAA,KADmE;AAAA,CA1TvE;AAqUA,SAASm5B,oBAAT,CAA8BG,OAA9B,EAA0D;AAAA,IAEtD,OAAO,CAAC,KAAD,CAAA,CAAQ50B,MAAR,CAAe40B,OAAA,CAAQ54B,GAAR,CAAY+2B,eAAZ,CAAf,CAAP,CAFsD;AAAA,CArU1D;AA0UA,SAAS2B,aAAT,CAAqBl2B,QAArB,EAAuCihB,MAAvC,EAA2D;AAAA,IACnD,IAAAA,MAAA,CAAOrlB,MAAP,KAAkB,CAAlB,EAAqB;AAAA,QAAS,OAAA,KAAA,CAAT;AAAA,KAD8B;AAAA,IAEvD,QAAQoE,QAAR;AAAA,IACA,KAAK,OAAL;AAAA,QACI,OAAO;AAAA,YAAC,CAAA,cAAA,CAAD;AAAA,YAAmB;AAAA,gBAAC,SAAD;AAAA,gBAAYihB,MAAZ;AAAA,aAAnB;AAAA,SAAP,CAFJ;AAAA,IAGA,KAAK,KAAL;AAAA,QACI,OAAO;AAAA,YAAC,CAAA,YAAA,CAAD;AAAA,YAAiB;AAAA,gBAAC,SAAD;AAAA,gBAAYA,MAAZ;AAAA,aAAjB;AAAA,SAAP,CAJJ;AAAA,IAKA;AAAA,QACI,IAAIA,MAAA,CAAOrlB,MAAP,GAAgB,GAAhB,IAAuB,CAACqlB,MAAA,CAAOpd,IAAP,CAAiBkW,CAAL,IAAK,OAAOA,CAAP,KAAa,OAAOkH,MAAA,CAAO,CAAP,CAArC,CAA5B,EAA6E;AAAA,YAClE,OAAA;AAAA,gBAAC,iBAAD;AAAA,gBAAoBjhB,QAApB;AAAA,gBAA8B;AAAA,oBAAC,SAAD;AAAA,oBAAYihB,MAAA,CAAOiI,IAAP,CAAY9f,OAAZ,CAAZ;AAAA,iBAA9B;AAAA,aAAA,CADkE;AAAA,SAA7E,MAEO;AAAA,YACH,OAAO;AAAA,gBAAC,iBAAD;AAAA,gBAAoBpJ,QAApB;AAAA,gBAA8B;AAAA,oBAAC,SAAD;AAAA,oBAAYihB,MAAZ;AAAA,iBAA9B;AAAA,aAAP,CADG;AAAA,SARX;AAAA,KAFuD;AAAA,CA1U3D;AA0VA,SAASkV,cAAT,CAAsBn2B,QAAtB,EAAwC;AAAA,IACpC,QAAQA,QAAR;AAAA,IACA,KAAK,OAAL;AAAA,QACW,OAAA,IAAA,CAFX;AAAA,IAGA,KAAK,KAAL;AAAA,QACI,OAAO,CAAC,CAAe,aAAf,CAAD,CAAP,CAJJ;AAAA,IAKA;AAAA,QACW,OAAA;AAAA,YAAC,WAAA,CAAD;AAAA,YAAeA,QAAf;AAAA,SAAA,CANX;AAAA,KADoC;AAAA,CA1VxC;AAqWA,SAASg2B,eAAT,CAAyBjV,MAAzB,EAA0C;AAAA,IAC/B,OAAA;AAAA,QAAC,GAAD;AAAA,QAAMA,MAAN;AAAA,KAAA,CAD+B;AAAA;;ACxV1C,SAAwBwT,aAAxB,CAAsCxT,MAAtC,EAA4E;AAAA,IACjE,OAAAsV,cAAA,CAAetV,MAAf,EAAuB,EAAvB,CAAA,CADiE;AAAA,CAb5E;AAiEA,SAASsV,cAAT,CAAwBtV,MAAxB,EAAqDuV,aAArD,EAA4F;AAAA,IACpF,IAAApC,kBAAA,CAAmBnT,MAAnB,CAAA,EAA4B;AAAA,QAAS,OAAAA,MAAA,CAAT;AAAA,KADwD;AAAA,IAGpF,IAAA,CAACA,MAAD;AAAA,QAAgB,OAAA,IAAA,CAHoE;AAAA,IAIlF,MAAA5b,EAAA,GAAK4b,MAAA,CAAO,CAAP,CAAL,CAJkF;AAAA,IAKxF,IAAIA,MAAA,CAAOnlB,MAAP,IAAiB,CAArB;AAAA,QAAwB,OAAQuJ,EAAA,KAAO,KAAf,CALgE;AAAA,IAOpF,IAAA2wB,SAAA,CAPoF;AAAA,IAUpF,IAAA3wB,EAAA,KAAO,IAAP,IACAA,EAAA,KAAO,IADP,IAEAA,EAAA,KAAO,GAFP,IAGAA,EAAA,KAAO,GAHP,IAIAA,EAAA,KAAO,IAJP,IAKAA,EAAA,KAAO,IALP,EAMF;AAAA,QACE,MAAM,GAAGnF,QAAH,EAAalD,KAAb,CAAA,GAAuBikB,MAA7B,CADF;AAAA,QAEE+U,SAAA,GAAYC,mBAAA,CAAoB/1B,QAApB,EAA8BlD,KAA9B,EAAqCqI,EAArC,EAAyCmxB,aAAzC,CAAZ,CAFF;AAAA,KANE,MASJ,IAAWnxB,EAAA,KAAO,KAAlB,EAAyB;AAAA,QACrB,MAAMoxB,QAAA,GAAYxV,MAAA,CAAe7lB,KAAf,CAAqB,CAArB,CAAwBsC,CAAAA,GAAxB,CAAiC4G,CAAL,IAAK;AAAA,YAC/C,MAAMuH,KAAA,GAA6B,EAAnC,CAD+C;AAAA,YAEzC,MAAAmC,KAAA,GAAQuoB,cAAA,CAAejyB,CAAf,EAAkBuH,KAAlB,CAAR,CAFyC;AAAA,YAGzC,MAAA6qB,UAAA,GAAaC,iBAAA,CAAkB9qB,KAAlB,CAAb,CAHyC;AAAA,YAI/C,OAAO6qB,UAAA,KAAe,IAAf,GAAsB1oB,KAAtB,GAA8B;AAAA,gBAAC,MAAD;AAAA,gBAAS0oB,UAAT;AAAA,gBAAqB1oB,KAArB;AAAA,gBAA4B,KAA5B;AAAA,aAArC,CAJ+C;AAAA,SAAjC,CAAlB,CADqB;AAAA,QAOrB,OAAO,CAAC,KAAD,CAAA,CAAQtM,MAAR,CAAe+0B,QAAf,CAAP,CAPqB;AAAA,KAAzB,MAQA,IAAWpxB,EAAA,KAAO,KAAlB,EAAyB;AAAA,QACf,MAAAoxB,QAAA,GAAmBxV,MAAA,CAAQ7lB,KAAR,CAAc,CAAd,CAAiBsC,CAAAA,GAAjB,CAA0B4G,CAAL,IAAKiyB,cAAA,CAAejyB,CAAf,EAAkBkyB,aAAlB,CAA1B,CAAnB,CADe;AAAA,QAErB,OAAOC,QAAA,CAAS36B,MAAT,GAAkB,CAAlB,GAAsB,CAAC,KAAD,CAAA,CAAQ4F,MAAR,CAAe+0B,QAAf,CAAtB,GAAiD,EAAA,CAAG/0B,MAAH,CAAU,GAAG+0B,QAAb,CAAxD,CAFqB;AAAA,KAAzB,MAGA,IAAWpxB,EAAA,KAAO,MAAlB,EAA0B;AAAA,QACtB,OAAO;AAAA,YAAC,GAAD;AAAA,YAAMkxB,cAAA,CAAe,CAAC,KAAD,CAAA,CAAQ70B,MAAR,CAAgBuf,MAAA,CAAQ7lB,KAAR,CAAc,CAAd,CAAhB,CAAf,EAAkD,EAAlD,CAAN;AAAA,SAAP,CADsB;AAAA,KAA1B,MAEA,IAAWiK,EAAA,KAAO,IAAlB,EAAwB;AAAA,QACpB2wB,SAAA,GAAYI,WAAA,CAAanV,MAAA,CAAO,CAAP,CAAb,EAAyBA,MAAA,CAAO7lB,KAAP,CAAa,CAAb,CAAzB,CAAZ,CADoB;AAAA,KAAxB,MAEA,IAAWiK,EAAA,KAAO,KAAlB,EAAyB;AAAA,QACT2wB,SAAA,GAAAI,WAAA,CAAanV,MAAA,CAAO,CAAP,CAAb,EAAyBA,MAAA,CAAO7lB,KAAP,CAAa,CAAb,CAAzB,EAA0C,IAA1C,CAAA,CADS;AAAA,KAAzB,MAEA,IAAWiK,EAAA,KAAO,KAAlB,EAAyB;AAAA,QACT2wB,SAAA,GAAAK,YAAA,CAAcpV,MAAA,CAAO,CAAP,CAAd,CAAA,CADS;AAAA,KAAzB,MAEA,IAAW5b,EAAA,KAAO,MAAlB,EAA0B;AAAA,QACtB2wB,SAAA,GAAY;AAAA,YAAC,GAAD;AAAA,YAAMK,YAAA,CAAcpV,MAAA,CAAO,CAAP,CAAd,CAAN;AAAA,SAAZ,CADsB;AAAA,KAA1B,MAEO;AAAA,QACS+U,SAAA,GAAA,IAAA,CADT;AAAA,KAxCiF;AAAA,IA4CjF,OAAAA,SAAA,CA5CiF;AAAA,CAjE5F;AAwHA,SAASW,iBAAT,CAA2BH,aAA3B,EAAyD;AAAA,IACrD,MAAMI,UAAA,GAAa,EAAnB,CADqD;AAAA,IAErD,KAAW12B,MAAAA,QAAX,IAAuBs2B,aAAvB,EAAsC;AAAA,QAC5B,MAAAn0B,GAAA,GAAMnC,QAAA,KAAa,KAAb,GAAqB,CAAC,IAAD,CAArB,GAA8B;AAAA,YAAC,KAAD;AAAA,YAAQA,QAAR;AAAA,SAApC,CAD4B;AAAA,QAEvB02B,UAAA,CAAAj6B,IAAA,CAAK;AAAA,YAAC,IAAD;AAAA,YAAO;AAAA,gBAAC,QAAD;AAAA,gBAAW0F,GAAX;AAAA,aAAP;AAAA,YAAwBm0B,aAAA,CAAct2B,QAAd,CAAxB;AAAA,SAAL,CAFuB,CAAA;AAAA,KAFe;AAAA,IAMjD,IAAA02B,UAAA,CAAW96B,MAAX,KAAsB,CAAtB;AAAA,QAAgC,OAAA,IAAA,CANiB;AAAA,IAOrD,IAAI86B,UAAA,CAAW96B,MAAX,KAAsB,CAA1B;AAAA,QAA6B,OAAO86B,UAAA,CAAW,CAAX,CAAP,CAPwB;AAAA,IAQrD,OAAO,CAAC,KAAD,CAAA,CAAQl1B,MAAR,CAAek1B,UAAf,CAAP,CARqD;AAAA,CAxHzD;AAmIA,SAASX,mBAAT,CAA6B/1B,QAA7B,EAA+ClD,KAA/C,EAA2DqI,EAA3D,EAAuEmxB,aAAvE,EAA6G;AAAA,IACrG,IAAAn0B,GAAA,CADqG;AAAA,IAEzG,IAAInC,QAAA,KAAa,OAAjB,EAA0B;AAAA,QACtB,OAAO;AAAA,YAACmF,EAAD;AAAA,YAAK,CAAC,eAAD,CAAL;AAAA,YAAwBrI,KAAxB;AAAA,SAAP,CADsB;AAAA,KAA1B,MAEA,IAAWkD,QAAA,KAAa,KAAxB,EAA+B;AAAA,QAC3BmC,GAAA,GAAM,CAAC,IAAD,CAAN,CAD2B;AAAA,KAA/B,MAEO;AAAA,QACGA,GAAA,GAAA;AAAA,YAAC,KAAD;AAAA,YAAQnC,QAAR;AAAA,SAAA,CADH;AAAA,KANkG;AAAA,IAUrG,IAAAs2B,aAAA,IAAiBx5B,KAAA,KAAU,IAA3B,EAAiC;AAAA,QACjC,MAAM2B,IAAA,GAAS,OAAO3B,KAAtB,CADiC;AAAA,QAEjCw5B,aAAA,CAAct2B,QAAd,CAAA,GAA0BvB,IAA1B,CAFiC;AAAA,KAVoE;AAAA,IAezG,IAAI0G,EAAA,KAAO,IAAP,IAAenF,QAAA,KAAa,KAA5B,IAAqClD,KAAA,KAAU,IAAnD,EAAyD;AAAA,QAC9C,OAAA;AAAA,YACH,KADG;AAAA,YAEH;AAAA,gBAAC,KAAD;AAAA,gBAAQkD,QAAR;AAAA,aAFG;AAAA;AAGH,YAAA;AAAA,gBAAC,IAAD;AAAA,gBAAOmC,GAAP;AAAA,gBAAY,IAAZ;AAAA,aAHG;AAAA,SAAA,CAD8C;AAAA,KAAzD,UAMWgD,EAAA,KAAO,IAAP,IAAenF,QAAA,KAAa,KAA5B,IAAqClD,KAAA,KAAU,MAAM;AAAA,QACrD,OAAA;AAAA,YACH,KADG;AAAA,YAEH;AAAA,gBAAC,GAAD;AAAA,gBAAM;AAAA,oBAAC,KAAD;AAAA,oBAAQkD,QAAR;AAAA,iBAAN;AAAA,aAFG;AAAA;AAGH,YAAA;AAAA,gBAAC,IAAD;AAAA,gBAAOmC,GAAP;AAAA,gBAAY,IAAZ;AAAA,aAHG;AAAA,SAAA,CADqD;AAAA,KArByC;AAAA,IA6BlG,OAAA;AAAA,QAACgD,EAAD;AAAA,QAAKhD,GAAL;AAAA,QAAUrF,KAAV;AAAA,KAAA,CA7BkG;AAAA,CAnI7G;AAmKA,SAASo5B,WAAT,CAAqBl2B,QAArB,EAAuCihB,MAAvC,EAA2D0V,MAAA,GAAkB,KAA7E,EAAoF;AAAA,IAC5E,IAAA1V,MAAA,CAAOrlB,MAAP,KAAkB,CAAlB;AAAA,QAA4B,OAAA+6B,MAAA,CADgD;AAAA,IAG5E,IAAAx0B,GAAA,CAH4E;AAAA,IAIhF,IAAInC,QAAA,KAAa,OAAjB,EAA0B;AAAA,QACtBmC,GAAA,GAAM,CAAC,eAAD,CAAN,CADsB;AAAA,KAA1B,MAEA,IAAWnC,QAAA,KAAa,KAAxB,EAA+B;AAAA,QAC3BmC,GAAA,GAAM,CAAC,IAAD,CAAN,CAD2B;AAAA,KAA/B,MAEO;AAAA,QACGA,GAAA,GAAA;AAAA,YAAC,KAAD;AAAA,YAAQnC,QAAR;AAAA,SAAA,CADH;AAAA,KARyE;AAAA,IAgBhF,IAAI42B,YAAA,GAAe,IAAnB,CAhBgF;AAAA,IAiB1E,MAAAn4B,IAAA,GAAO,OAAOwiB,MAAA,CAAO,CAAP,CAAd,CAjB0E;AAAA,IAkBhF,KAAWnkB,MAAAA,KAAX,IAAoBmkB,MAApB,EAA4B;AAAA,QACpB,IAAA,OAAOnkB,KAAP,KAAiB2B,IAAjB,EAAuB;AAAA,YACRm4B,YAAA,GAAA,KAAA,CADQ;AAAA,YAEvB,MAFuB;AAAA,SADH;AAAA,KAlBoD;AAAA,IAyBhF,IAAIA,YAAA,KAAiBn4B,IAAA,KAAS,QAAT,IAAqBA,IAAA,KAAS,QAA9B,CAArB,EAA8D;AAAA,QAE1D,MAAMo4B,YAAA,GAAe5V,MAAA,CAAOiI,IAAP,EAAA,CAAcnI,MAAd,CAAqB,CAAChH,CAAD,EAAIlc,CAAJ,KAAUA,CAAA,KAAM,CAAN,IAAWojB,MAAA,CAAOpjB,CAAA,GAAI,CAAX,CAAA,KAAkBkc,CAA5D,CAArB,CAF0D;AAAA,QAG1D,OAAO;AAAA,YAAC,OAAD;AAAA,YAAU5X,GAAV;AAAA,YAAe00B,YAAf;AAAA,YAA6B,CAACF,MAA9B;AAAA,YAAsCA,MAAtC;AAAA,SAAP,CAH0D;AAAA,KAzBkB;AAAA,IA+BhF,OAAO,CAACA,MAAA,GAAS,KAAT,GAAiB,KAAlB,CAAyBn1B,CAAAA,MAAzB,CACHyf,MAAA,CAAOzjB,GAAP,CAAgBuc,CAAL,IAAK;AAAA,QAAC4c,MAAA,GAAS,IAAT,GAAgB,IAAjB;AAAA,QAAuBx0B,GAAvB;AAAA,QAA4B4X,CAA5B;AAAA,KAAhB,CADG,CAAP,CA/BgF;AAAA,CAnKpF;AAuMA,SAASoc,YAAT,CAAsBn2B,QAAtB,EAAwC;AAAA,IACpC,IAAIA,QAAA,KAAa,OAAjB,EAA0B;AAAA,QACf,OAAA,IAAA,CADe;AAAA,KAA1B,MAEA,IAAWA,QAAA,KAAa,KAAxB,EAA+B;AAAA,QAC3B,OAAO;AAAA,YAAC,IAAD;AAAA,YAAO,CAAC,IAAD,CAAP;AAAA,YAAe,IAAf;AAAA,SAAP,CAD2B;AAAA,KAA/B,MAEO;AAAA,QACI,OAAA;AAAA,YAAC,KAAD;AAAA,YAAQA,QAAR;AAAA,SAAA,CADJ;AAAA,KAL6B;AAAA;;AC3LxC,6BAAA,EAAwB5C,KAAxB,EAAuE;AAAA,IACnE,MAAM04B,SAAA,GAAY,EAAlB,CADmE;AAAA,IAGzDz3B,SAAA,CAAAjB,KAAA,EAAQK,KAAD,IAAW;AAAA,QACxB,IAAIA,KAAA,CAAMsjB,MAAV,EAAkB;AAAA,YACRtjB,KAAA,CAAAsjB,MAAA,GAAUwT,aAAA,CAAc92B,KAAA,CAAMsjB,MAApB,CAAV,CADQ;AAAA,SADM;AAAA,KAAlB,CAHyD,CAAA;AAAA,IASnEziB,YAAA,CAAalB,KAAb,EAAoB;AAAA,QAACY,KAAA,EAAO,IAAR;AAAA,QAAcD,MAAA,EAAQ,IAAtB;AAAA,KAApB,EAAiD,CAAC,CAACa,IAAD,EAAO9B,KAAP,EAAcG,SAAd,EAAyB6B,GAAzB,CAAD,KAAmC;AAAA,QAC5E,IAAAgyB,YAAA,CAAah0B,KAAb,CAAA;AAAA,YAAqB,OADuD;AAAA,QAEhF,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACP,KAAA,CAAMC,OAAN,CAAcM,KAAd,CAAlC,EAAwD;AAAA,YAChDgC,GAAA,CAAA6zB,eAAA,CAAgB71B,KAAhB,EAAyDG,SAAzD,CAAA,CADgD,CAAA;AAAA,YAEpD64B,SAAA,CAAUr5B,IAAV,CAAemC,IAAA,CAAK7B,IAAL,CAAU,GAAV,CAAf,CAFoD,CAAA;AAAA,SAAxD,MAGW,IAAAE,SAAA,CAAU41B,MAAV,IAAoB,OAAO/1B,KAAP,KAAiB,QAArC,EAA+C;AAAA,YAClDgC,GAAA,CAAAg0B,kBAAA,CAAmBh2B,KAAnB,CAAA,CADkD,CAAA;AAAA,SALsB;AAAA,KAApF,CATmE,CAAA;AAAA,IAmB5D,OAAAM,KAAA,CAnB4D;AAAA;;ACMvE,gBAAA,EAAwBA,KAAxB,EAA+B;AAAA,IAC3B,IAAI05B,QAAA,GAAW,KAAf,CAD2B;AAAA,IAGvB,IAAA15B,KAAA,CAAMsC,OAAN,KAAkB,CAAlB,EAAqB;AAAA,QACrBtC,KAAA,GAAQ25B,WAAA,CAAY35B,KAAZ,CAAR,CADqB;AAAA,QAEV05B,QAAA,GAAA,IAAA,CAFU;AAAA,KAHE;AAAA,IAQvB,IAAA15B,KAAA,CAAMsC,OAAN,KAAkB,CAAlB,EAAqB;AAAA,QACrBo3B,QAAA,GAAWE,oBAAA,CAAqB55B,KAArB,CAAX,CADqB;AAAA,QAEV05B,QAAA,GAAA,IAAA,CAFU;AAAA,KARE;AAAA,IAa3B,IAAI,CAACA,QAAL,EAAe;AAAA,QACX,MAAM,IAAIh2B,KAAJ,CAAU,qBAAV,EAAiC1D,KAAA,CAAMsC,OAAvC,CAAN,CADW;AAAA,KAbY;AAAA,IAiBpB,OAAAtC,KAAA,CAjBoB;AAAA;;AChB/B,kBAAA,EAAyBA,KAAzB,EAAgC;AAAA,IAC5B,MAAM65B,QAAA,GAAW,EAAjB,CAD4B;AAAA,IAE5B,MAAMC,SAAA,GAAY,EAAlB,CAF4B;AAAA,IAG5B,MAAMC,sBAAA,GAAyB,EAA/B,CAH4B;AAAA,IAKjB,WAAAt4B,EAAA,IAAMzB,KAAA,CAAMgB,OAAZ,EAAqB;AAAA,QACtB,MAAAuB,MAAA,GAASvC,KAAA,CAAMgB,OAAN,CAAcS,EAAd,CAAT,CADsB;AAAA,QAG5B,IAAIc,MAAA,CAAOlB,IAAP,KAAgB,QAApB;AAAA,YACI,SAJwB;AAAA,QAM5B,MAAM1C,KAAA,GAAQ,kBAAmB63B,CAAAA,IAAnB,CAAwBj0B,MAAA,CAAOC,GAA/B,CAAd,CAN4B;AAAA,QAO5B,IAAI,CAAC7D,KAAL;AAAA,YACI,SARwB;AAAA,QAU5Bk7B,QAAA,CAASx6B,IAAT,CAAcoC,EAAd,CAV4B,CAAA;AAAA,QAWlBq4B,SAAA,CAAAz6B,IAAA,CAAKV,KAAA,CAAM,CAAN,CAAL,CAXkB,CAAA;AAAA,KALJ;AAAA,IAmB5B,IAAIk7B,QAAA,CAASr7B,MAAT,GAAkB,CAAtB;AAAA,QACW,OAAAwB,KAAA,CApBiB;AAAA,IAsBnB65B,QAAA,CAAAt4B,OAAA,CAASE,EAAD,IAAQ;AAAA,QACd,OAAAzB,KAAA,CAAMgB,OAAN,CAAcS,EAAd,CAAA,CADc;AAAA,KAAhB,CAtBmB,CAAA;AAAA,IA0BtB,MAAAu4B,WAAA,GAAcF,SAAA,CAAUn6B,IAAV,CAAe,GAAf,CAAd,CA1BsB;AAAA,IA4BtBK,KAAA,CAAAgB,OAAA,CAAQg5B,WAAR,CAAuB,GAAA;AAAA,QACzB,QAAQ,QADiB;AAAA,QAEzB,KAAO,EAAA,UAAA,GAAYA,WAAZ,EAFkB,CAAA;AAAA,KAAvB,CA5BsB;AAAA,IAiCtBh6B,KAAA,CAAAG,MAAA,CAAOoB,OAAP,CAAgBlB,KAAD,IAAW;AAAA,QAC5B,IAAIw5B,QAAA,CAASh4B,OAAT,CAAiBxB,KAAA,CAAMkC,MAAvB,CAAkC,IAAA,CAAtC,EAAyC;AAAA,YACrClC,KAAA,CAAMkC,MAAN,GAAey3B,WAAf,CADqC;AAAA,YAGrC,IAAI,cAAkB35B,IAAAA,KAAtB,EAA6B;AAAA,gBACzB,IAAI05B,sBAAA,CAAuBl4B,OAAvB,CAA+BxB,KAAA,CAAM,cAAN,CAA/B,CAAyD,IAAA,CAA7D,EAAgE;AAAA,oBACtD,MAAA,IAAIqD,KAAJ,CAAU,gCAAV,CAAA,CADsD;AAAA,iBAAhE,MAEO;AAAA,oBACoBq2B,sBAAA,CAAA16B,IAAA,CAAKgB,KAAA,CAAM,cAAN,CAAL,CADpB,CAAA;AAAA,iBAHkB;AAAA,aAHQ;AAAA,SADb;AAAA,KAA1B,CAjCsB,CAAA;AAAA,IA+CrB,OAAAL,KAAA,CA/CqB;AAAA;;ACFhC,oBAAA;AAAA,IAAA,MAAA;AAAA,IAAA,QAAA;AAAA,IAAA,cAAA;AAAA,IAAA,SAAA;AAAA,IAAA,SAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAAA,CAAA;;ACIA,SAASi6B,KAAT,CAAe55B,KAAf,EAA0CsE,MAA1C,EAA0F;AAAA,IACtF,MAAM7E,MAAA,GAA8B,EAApC,CADsF;AAAA,IAGtF,KAAWiB,MAAAA,CAAX,IAAgBV,KAAhB,EAAuB;AAAA,QACnB,IAAIU,CAAA,KAAM,KAAV,EAAiB;AAAA,YACNjB,MAAA,CAAAiB,CAAA,CAAA,GAAKV,KAAA,CAAMU,CAAN,CAAL,CADM;AAAA,SADE;AAAA,KAH+D;AAAA,IASxEm5B,aAAA,CAAA34B,OAAA,CAASR,CAAD,IAAO;AAAA,QACzB,IAAIA,CAAA,IAAK4D,MAAT,EAAiB;AAAA,YACN7E,MAAA,CAAAiB,CAAA,CAAA,GAAM4D,MAAA,CAAe5D,CAAf,CAAN,CADM;AAAA,SADQ;AAAA,KAAf,CATwE,CAAA;AAAA,IAe/E,OAAAjB,MAAA,CAf+E;AAAA,CAJ1F;AAmCA,SAAwBq6B,WAAxB,CAAoCh6B,MAApC,EAAkG;AAAA,IAC9FA,MAAA,GAASA,MAAA,CAAOrC,KAAP,EAAT,CAD8F;AAAA,IAGxF,MAAAsC,GAAA;AAAkB,IAAAb,MAAA,CAAA4yB,MAAA,CAAO,IAAP,CAAlB,CAHwF;AAAA,IAI9F,KAAA,IAAS1xB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIN,MAAA,CAAO3B,MAA3B,EAAmCiC,CAAA,EAAnC,EAAwC;AAAA,QACpCL,GAAA,CAAID,MAAA,CAAOM,CAAP,CAAA,CAAUgB,EAAd,CAAA,GAAoBtB,MAAA,CAAOM,CAAP,CAApB,CADoC;AAAA,KAJsD;AAAA,IAQ9F,KAAA,IAASA,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIN,MAAA,CAAO3B,MAA3B,EAAmCiC,CAAA,EAAnC,EAAwC;AAAA,QAChC,IAAA,KAASN,IAAAA,MAAA,CAAOM,CAAP,CAAT,EAAoB;AAAA,YACbN,MAAA,CAAAM,CAAA,CAAA,GAAKw5B,KAAA,CAAM95B,MAAA,CAAOM,CAAP,CAAN,EAAiBL,GAAA,CAAKD,MAAA,CAAOM,CAAP,EAAkB25B,GAAvB,CAAjB,CAAL,CADa;AAAA,SADY;AAAA,KARsD;AAAA,IAcvF,OAAAj6B,MAAA,CAduF;AAAA;;AC9BlG,SAASk6B,SAAT,CAAmB5xB,CAAnB,EAAgCC,CAAhC,EAAsD;AAAA,IAC9C,IAAAvJ,KAAA,CAAMC,OAAN,CAAcqJ,CAAd,CAAA,EAAkB;AAAA,QACd,IAAA,CAACtJ,KAAA,CAAMC,OAAN,CAAcsJ,CAAd,CAAD,IAAqBD,CAAA,CAAEjK,MAAF,KAAakK,CAAA,CAAElK,MAApC;AAAA,YAAmD,OAAA,KAAA,CADrC;AAAA,QAElB,KAAA,IAASiC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIgI,CAAA,CAAEjK,MAAtB,EAA8BiC,CAAA,EAA9B,EAAmC;AAAA,YAC3B,IAAA,CAAC45B,SAAA,CAAU5xB,CAAA,CAAEhI,CAAF,CAAV,EAAgBiI,CAAA,CAAEjI,CAAF,CAAhB,CAAD;AAAA,gBAA+B,OAAA,KAAA,CADJ;AAAA,SAFjB;AAAA,QAKX,OAAA,IAAA,CALW;AAAA,KAD4B;AAAA,IAQlD,IAAI,OAAOgI,CAAP,KAAa,QAAb,IAAyBA,CAAA,KAAM,IAA/B,IAAuCC,CAAA,KAAM,IAAjD,EAAuD;AAAA,QACnD,IAAI,EAAE,OAAOA,CAAP,KAAa,QAAb,CAAN;AAAA,YAAqC,OAAA,KAAA,CADc;AAAA,QAE7C,MAAApJ,IAAA,GAAOC,MAAA,CAAOD,IAAP,CAAYmJ,CAAZ,CAAP,CAF6C;AAAA,QAGnD,IAAInJ,IAAA,CAAKd,MAAL,KAAgBe,MAAA,CAAOD,IAAP,CAAYoJ,CAAZ,CAAA,CAAelK,MAAnC;AAAA,YAAkD,OAAA,KAAA,CAHC;AAAA,QAInD,KAAWgB,MAAAA,GAAX,IAAkBiJ,CAAlB,EAAqB;AAAA,YACb,IAAA,CAAC4xB,SAAA,CAAU5xB,CAAA,CAAEjJ,GAAF,CAAV,EAAkBkJ,CAAA,CAAElJ,GAAF,CAAlB,CAAD;AAAA,gBAAmC,OAAA,KAAA,CADtB;AAAA,SAJ8B;AAAA,QAO5C,OAAA,IAAA,CAP4C;AAAA,KARL;AAAA,IAiBlD,OAAOiJ,CAAA,KAAMC,CAAb,CAjBkD;AAAA;;ACQ/C,MAAM4xB,UAAA,GAET;AAAA;AAKA;AAAA;AAAA,IAAAC,QAAA,EAAU,UALV;AAAA;AAUA;AAAA;AAAA,IAAAC,QAAA,EAAU,UAVV;AAAA;AAeA;AAAA;AAAA,IAAAC,WAAA,EAAa,aAfb;AAAA;AAoBA;AAAA;AAAA,IAAAC,gBAAA,EAAkB,kBApBlB;AAAA;AAyBA;AAAA;AAAA,IAAAC,iBAAA,EAAmB,mBAzBnB;AAAA;AA8BA;AAAA;AAAA,IAAAC,OAAA,EAAS,SA9BT;AAAA;AAmCA;AAAA;AAAA,IAAAC,SAAA,EAAW,WAnCX;AAAA;AAwCA;AAAA;AAAA,IAAAC,SAAA,EAAW,WAxCX;AAAA;AA6CA;AAAA;AAAA,IAAAC,YAAA,EAAc,cA7Cd;AAAA;AAkDA;AAAA;AAAA,IAAAC,oBAAA,EAAsB,sBAlDtB;AAAA;AAuDA;AAAA;AAAA,IAAAC,iBAAA,EAAmB,mBAvDnB;AAAA;AA4DA;AAAA;AAAA,IAAAC,gBAAA,EAAkB,kBA5DlB;AAAA;AAiEA;AAAA;AAAA,IAAAC,SAAA,EAAW,WAjEX;AAAA;AAsEA;AAAA;AAAA,IAAAC,OAAA,EAAS,SAtET;AAAA;AA2EA;AAAA;AAAA,IAAAC,UAAA,EAAY,YA3EZ;AAAA;AAgFA;AAAA;AAAA,IAAAC,QAAA,EAAU,UAhFV;AAAA;AAqFA;AAAA;AAAA,IAAAC,SAAA,EAAW,WArFX;AAAA;AA0FA;AAAA;AAAA,IAAAC,SAAA,EAAW,WA1FX;AAAA;AA+FA;AAAA;AAAA,IAAAC,aAAA,EAAe,eA/Ff;AAAA;AAoGA;AAAA;AAAA,IAAAC,QAAA,EAAU,UApGV;AAAA;AAyGA;AAAA;AAAA,IAAAC,UAAA,EAAY,YAzGZ;AAAA;AA8GA;AAAA;AAAA,IAAAC,MAAA,EAAQ,QA9GR;AAAA;AAmHA;AAAA;AAAA,IAAAC,SAAA,EAAW,WAnHX;AAAA;AAwHA;AAAA;AAAA,IAAAC,SAAA,EAAW,WAxHX;AAAA;AA6HA;AAAA;AAAA,IAAAC,aAAA,EAAe,eA7Hf;AAAA;AAkIA;AAAA;AAAA,IAAAC,SAAA,EAAW,WAlIX;AAAA;AAuIA;AAAA;AAAA,IAAAC,YAAA,EAAc,cAvId;AAAA;AA4IA;AAAA;AAAA,IAAAC,YAAA,EAAc,cA5Id;AAAA,CAFG,CAbP;AA8JA,SAASpB,SAAT,CAAmBqB,QAAnB,EAAqCC,KAArC,EAAqDC,QAArD,EAA+E;AAAA,IAC3EA,QAAA,CAASh9B,IAAT,CAAc;AAAA,QAACi9B,OAAA,EAAShC,UAAA,CAAWQ,SAArB;AAAA,QAAgC/sB,IAAA,EAAM;AAAA,YAACouB,QAAD;AAAA,YAAWC,KAAA,CAAMD,QAAN,CAAX;AAAA,SAAtC;AAAA,KAAd,CAD2E,CAAA;AAAA,CA9J/E;AAkKA,SAASpB,YAAT,CAAsBoB,QAAtB,EAAwCE,QAAxC,EAAkEE,cAAlE,EAEG;AAAA,IACUF,QAAA,CAAAh9B,IAAA,CAAK;AAAA,QAACi9B,OAAA,EAAShC,UAAA,CAAWS,YAArB;AAAA,QAAmChtB,IAAA,EAAM,CAACouB,QAAD,CAAzC;AAAA,KAAL,CADV,CAAA;AAAA,IAECI,cAAA,CAAeJ,QAAf,CAAA,GAA2B,IAA3B,CAFD;AAAA,CApKH;AAyKA,SAASK,YAAT,CAAsBL,QAAtB,EAAwCC,KAAxC,EAAwDC,QAAxD,EAAkFE,cAAlF,EAEG;AAAA,IACcxB,YAAA,CAAAoB,QAAA,EAAUE,QAAV,EAAoBE,cAApB,CADd,CAAA;AAAA,IAEWzB,SAAA,CAAAqB,QAAA,EAAUC,KAAV,EAAiBC,QAAjB,CAFX,CAAA;AAAA,CA3KH;AAgLA,SAASI,gBAAT,CAA0BC,MAA1B,EAA2CN,KAA3C,EAA2DD,QAA3D,EAA6E;AAAA,IACrE,IAAAQ,IAAA,CADqE;AAAA,IAEpE,KAAAA,IAAA,IAAQD,MAAA,CAAOP,QAAP,CAAR,EAA0B;AAAA,QAC3B,IAAI,CAACO,MAAA,CAAOP,QAAP,CAAiBS,CAAAA,cAAjB,CAAgCD,IAAhC,CAAL;AAAA,YAA4C,SADjB;AAAA,QAE3B,IAAIA,IAAA,KAAS,MAAT,IAAmB,CAACE,SAAA,CAAQH,MAAA,CAAOP,QAAP,EAAiBQ,IAAjB,CAAR,EAAgCP,KAAA,CAAMD,QAAN,CAAgBQ,CAAAA,IAAhB,CAAhC,CAAxB,EAAgF;AAAA,YACrE,OAAA,KAAA,CADqE;AAAA,SAFrD;AAAA,KAF0C;AAAA,IAQpE,KAAAA,IAAA,IAAQP,KAAA,CAAMD,QAAN,CAAR,EAAyB;AAAA,QAC1B,IAAI,CAACC,KAAA,CAAMD,QAAN,CAAgBS,CAAAA,cAAhB,CAA+BD,IAA/B,CAAL;AAAA,YAA2C,SADjB;AAAA,QAE1B,IAAIA,IAAA,KAAS,MAAT,IAAmB,CAACE,SAAA,CAAQH,MAAA,CAAOP,QAAP,EAAiBQ,IAAjB,CAAR,EAAgCP,KAAA,CAAMD,QAAN,CAAgBQ,CAAAA,IAAhB,CAAhC,CAAxB,EAAgF;AAAA,YACrE,OAAA,KAAA,CADqE;AAAA,SAFtD;AAAA,KAR2C;AAAA,IAclE,OAAA,IAAA,CAdkE;AAAA,CAhL7E;AAiMA,SAASG,WAAT,CAAqBJ,MAArB,EAAsCN,KAAtC,EAAsDC,QAAtD,EAAgFE,cAAhF,EAEG;AAAA,IACCG,MAAA,GAASA,MAAA,IAAU,EAAnB,CADD;AAAA,IAECN,KAAA,GAAQA,KAAA,IAAS,EAAjB,CAFD;AAAA,IAIK,IAAAD,QAAA,CAJL;AAAA,IAOC,KAAKA,QAAL,IAAiBO,MAAjB,EAAyB;AAAA,QACrB,IAAI,CAACA,MAAA,CAAOE,cAAP,CAAsBT,QAAtB,CAAL;AAAA,YAAsC,SADjB;AAAA,QAErB,IAAI,CAACC,KAAA,CAAMQ,cAAN,CAAqBT,QAArB,CAAL,EAAqC;AAAA,YACpBpB,YAAA,CAAAoB,QAAA,EAAUE,QAAV,EAAoBE,cAApB,CADoB,CAAA;AAAA,SAFhB;AAAA,KAP1B;AAAA,IAeC,KAAKJ,QAAL,IAAiBC,KAAjB,EAAwB;AAAA,QACpB,IAAI,CAACA,KAAA,CAAMQ,cAAN,CAAqBT,QAArB,CAAL;AAAA,YAAqC,SADjB;AAAA,QAEd,MAAA55B,MAAA,GAAS65B,KAAA,CAAMD,QAAN,CAAT,CAFc;AAAA,QAGpB,IAAI,CAACO,MAAA,CAAOE,cAAP,CAAsBT,QAAtB,CAAL,EAAsC;AAAA,YACxBrB,SAAA,CAAAqB,QAAA,EAAUC,KAAV,EAAiBC,QAAjB,CADwB,CAAA;AAAA,SAAtC,UAEW,CAACQ,SAAA,CAAQH,MAAA,CAAOP,QAAP,CAAR,EAA0B55B,MAA1B,GAAmC;AAAA,YAC3C,IAAIm6B,MAAA,CAAOP,QAAP,EAAiB96B,IAAjB,KAA0B,SAA1B,IAAuCkB,MAAA,CAAOlB,IAAP,KAAgB,SAAvD,IAAoEo7B,gBAAA,CAAiBC,MAAjB,EAAyBN,KAAzB,EAAgCD,QAAhC,CAAxE,EAAmH;AAAA,gBACtGE,QAAA,CAAAh9B,IAAA,CAAK;AAAA,oBAACi9B,OAAA,EAAShC,UAAA,CAAWU,oBAArB;AAAA,oBAA2CjtB,IAAA,EAAM;AAAA,wBAACouB,QAAD;AAAA,wBAAW55B,MAAA,CAAO2H,IAAlB;AAAA,qBAAjD;AAAA,iBAAL,CADsG,CAAA;AAAA,aAAnH,MAEO;AAAA,gBAEUsyB,YAAA,CAAAL,QAAA,EAAUC,KAAV,EAAiBC,QAAjB,EAA2BE,cAA3B,CAFV,CAAA;AAAA,aAHoC;AAAA,SAL3B;AAAA,KAfzB;AAAA,CAnMH;AAkOA,SAASQ,wBAAT,CAAkCL,MAAlC,EAA+CN,KAA/C,EAA2DC,QAA3D,EAAqFW,OAArF,EAAsGC,KAAtG,EAAwIX,OAAxI,EAAyJ;AAAA,IACrJI,MAAA,GAASA,MAAA,IAAU,EAAnB,CADqJ;AAAA,IAErJN,KAAA,GAAQA,KAAA,IAAS,EAAjB,CAFqJ;AAAA,IAIjJ,IAAAO,IAAA,CAJiJ;AAAA,IAMrJ,KAAKA,IAAL,IAAaD,MAAb,EAAqB;AAAA,QACjB,IAAI,CAACA,MAAA,CAAOE,cAAP,CAAsBD,IAAtB,CAAL;AAAA,YAAkC,SADjB;AAAA,QAEb,IAAA,CAACE,SAAA,CAAQH,MAAA,CAAOC,IAAP,CAAR,EAAsBP,KAAA,CAAMO,IAAN,CAAtB,CAAD,EAAqC;AAAA,YACrCN,QAAA,CAASh9B,IAAT,CAAc;AAAA,gBAACi9B,OAAD;AAAA,gBAAUvuB,IAAA,EAAM;AAAA,oBAACivB,OAAD;AAAA,oBAAUL,IAAV;AAAA,oBAAgBP,KAAA,CAAMO,IAAN,CAAhB;AAAA,oBAA6BM,KAA7B;AAAA,iBAAhB;AAAA,aAAd,CADqC,CAAA;AAAA,SAFxB;AAAA,KANgI;AAAA,IAYrJ,KAAKN,IAAL,IAAaP,KAAb,EAAoB;AAAA,QACZ,IAAA,CAACA,KAAA,CAAMQ,cAAN,CAAqBD,IAArB,CAAD,IAA+BD,MAAA,CAAOE,cAAP,CAAsBD,IAAtB,CAA/B;AAAA,YAA4D,SADhD;AAAA,QAEZ,IAAA,CAACE,SAAA,CAAQH,MAAA,CAAOC,IAAP,CAAR,EAAsBP,KAAA,CAAMO,IAAN,CAAtB,CAAD,EAAqC;AAAA,YACrCN,QAAA,CAASh9B,IAAT,CAAc;AAAA,gBAACi9B,OAAD;AAAA,gBAAUvuB,IAAA,EAAM;AAAA,oBAACivB,OAAD;AAAA,oBAAUL,IAAV;AAAA,oBAAgBP,KAAA,CAAMO,IAAN,CAAhB;AAAA,oBAA6BM,KAA7B;AAAA,iBAAhB;AAAA,aAAd,CADqC,CAAA;AAAA,SAFzB;AAAA,KAZiI;AAAA,CAlOzJ;AAsPA,SAASC,OAAT,CAEGvvB,IAFH,EAEoB;AAAA,IAChB,OAAOA,IAAA,CAAKlM,EAAZ,CADgB;AAAA,CAxPpB;AA4PA,SAAS07B,SAAT,CAGIC,KAHJ,EAMIzvB,IANJ,EASE;AAAA,IACQyvB,KAAA,CAAAzvB,IAAA,CAAKlM,EAAL,CAAA,GAAWkM,IAAX,CADR;AAAA,IAES,OAAAyvB,KAAA,CAFT;AAAA,CArQF;AA0QA,SAASC,UAAT,CAAoBX,MAApB,EAAuDN,KAAvD,EAAyFC,QAAzF,EAAmH;AAAA,IAC/GK,MAAA,GAASA,MAAA,IAAU,EAAnB,CAD+G;AAAA,IAE/GN,KAAA,GAAQA,KAAA,IAAS,EAAjB,CAF+G;AAAA,IAKzG,MAAAkB,WAAA,GAAcZ,MAAA,CAAOt8B,GAAP,CAAW88B,OAAX,CAAd,CALyG;AAAA,IAMzG,MAAAK,UAAA,GAAanB,KAAA,CAAMh8B,GAAN,CAAU88B,OAAV,CAAb,CANyG;AAAA,IAS/G,MAAMM,WAAA,GAAcd,MAAA,CAAOe,MAAP,CAAmCN,SAAnC,EAA8C,EAA9C,CAApB,CAT+G;AAAA,IAU/G,MAAMO,UAAA,GAAatB,KAAA,CAAMqB,MAAN,CAAkCN,SAAlC,EAA6C,EAA7C,CAAnB,CAV+G;AAAA,IAazG,MAAAQ,OAAA,GAAUL,WAAA,CAAYx/B,KAAZ,EAAV,CAbyG;AAAA,IAgBzG,MAAA8/B,KAAA;AAAoB,IAAAr+B,MAAA,CAAA4yB,MAAA,CAAO,IAAP,CAApB,CAhByG;AAAA,IAkB/G,IAAI1xB,CAAJ,EAAOsI,CAAP,EAAUi0B,OAAV,EAAmBa,WAAnB,EAAoDC,UAApD,EAAoFC,mBAApF,EAAyGpB,IAAzG,CAlB+G;AAAA,IAqB/G,KAAKl8B,CAAA,GAAI,CAAJ,EAAOsI,CAAA,GAAI,CAAhB,EAAmBtI,CAAA,GAAI68B,WAAA,CAAY9+B,MAAnC,EAA2CiC,CAAA,EAA3C,EAAgD;AAAA,QAC5Cu8B,OAAA,GAAUM,WAAA,CAAY78B,CAAZ,CAAV,CAD4C;AAAA,QAE5C,IAAI,CAACi9B,UAAA,CAAWd,cAAX,CAA0BI,OAA1B,CAAL,EAAyC;AAAA,YAC5BX,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWG,WAArB;AAAA,gBAAkC1sB,IAAA,EAAM,CAACivB,OAAD,CAAxC;AAAA,aAAL,CAD4B,CAAA;AAAA,YAErCW,OAAA,CAAQx5B,MAAR,CAAew5B,OAAA,CAAQ97B,OAAR,CAAgBm7B,OAAhB,EAAyBj0B,CAAzB,CAAf,EAA4C,CAA5C,CAFqC,CAAA;AAAA,SAAzC,MAGO;AAAA,YAEHA,CAAA,EAFG,CAAA;AAAA,SALqC;AAAA,KArB+D;AAAA,IAiC/G,KAAKtI,CAAA,GAAI,CAAJ,EAAOsI,CAAA,GAAI,CAAhB,EAAmBtI,CAAA,GAAI88B,UAAA,CAAW/+B,MAAlC,EAA0CiC,CAAA,EAA1C,EAA+C;AAAA,QAE3Cu8B,OAAA,GAAUO,UAAA,CAAWA,UAAA,CAAW/+B,MAAX,GAAoB,CAApB,GAAwBiC,CAAnC,CAAV,CAF2C;AAAA,QAI3C,IAAIk9B,OAAA,CAAQA,OAAA,CAAQn/B,MAAR,GAAiB,CAAjB,GAAqBiC,CAA7B,CAAA,KAAoCu8B,OAAxC;AAAA,YAAiD,SAJN;AAAA,QAMvC,IAAAQ,WAAA,CAAYZ,cAAZ,CAA2BI,OAA3B,CAAA,EAAqC;AAAA,YAE5BX,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWG,WAArB;AAAA,gBAAkC1sB,IAAA,EAAM,CAACivB,OAAD,CAAxC;AAAA,aAAL,CAF4B,CAAA;AAAA,YAG7BW,OAAA,CAAAx5B,MAAA,CAAOw5B,OAAA,CAAQK,WAAR,CAAoBhB,OAApB,EAA6BW,OAAA,CAAQn/B,MAAR,GAAiBuK,CAA9C,CAAP,EAAyD,CAAzD,CAH6B,CAAA;AAAA,SAArC,MAIG;AAAA,YAEHA,CAAA,EAFG,CAAA;AAAA,SAVoC;AAAA,QAgBrBg1B,mBAAA,GAAAJ,OAAA,CAAQA,OAAA,CAAQn/B,MAAR,GAAiBiC,CAAzB,CAAA,CAhBqB;AAAA,QAiB3C47B,QAAA,CAASh9B,IAAT,CAAc;AAAA,YAACi9B,OAAA,EAAShC,UAAA,CAAWE,QAArB;AAAA,YAA+BzsB,IAAA,EAAM;AAAA,gBAAC2vB,UAAA,CAAWV,OAAX,CAAD;AAAA,gBAAsBe,mBAAtB;AAAA,aAArC;AAAA,SAAd,CAjB2C,CAAA;AAAA,QAkB3CJ,OAAA,CAAQx5B,MAAR,CAAew5B,OAAA,CAAQn/B,MAAR,GAAiBiC,CAAhC,EAAmC,CAAnC,EAAsCu8B,OAAtC,CAlB2C,CAAA;AAAA,QAmB3CY,KAAA,CAAMZ,OAAN,CAAA,GAAiB,IAAjB,CAnB2C;AAAA,KAjCgE;AAAA,IAwD/G,KAAKv8B,CAAA,GAAI,CAAT,EAAYA,CAAA,GAAI88B,UAAA,CAAW/+B,MAA3B,EAAmCiC,CAAA,EAAnC,EAAwC;AAAA,QACpCu8B,OAAA,GAAUO,UAAA,CAAW98B,CAAX,CAAV,CADoC;AAAA,QAEpCo9B,WAAA,GAAcL,WAAA,CAAYR,OAAZ,CAAd,CAFoC;AAAA,QAGpCc,UAAA,GAAaJ,UAAA,CAAWV,OAAX,CAAb,CAHoC;AAAA,QAMpC,IAAIY,KAAA,CAAMZ,OAAN,CAAA,IAAkBH,SAAA,CAAQgB,WAAR,EAAqBC,UAArB,CAAtB;AAAA,YAAwD,SANpB;AAAA,QAUhC,IAAA,CAACjB,SAAA,CAAQgB,WAAA,CAAYt7B,MAApB,EAA4Bu7B,UAAA,CAAWv7B,MAAvC,CAAD,IAAmD,CAACs6B,SAAA,CAAQgB,WAAA,CAAY,cAAZ,CAAR,EAAqCC,UAAA,CAAW,cAAX,CAArC,CAApD,IAAwH,CAACjB,SAAA,CAAQgB,WAAA,CAAYx8B,IAApB,EAA0By8B,UAAA,CAAWz8B,IAArC,CAAzH,EAAqK;AAAA,YAC5Jg7B,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWG,WAArB;AAAA,gBAAkC1sB,IAAA,EAAM,CAACivB,OAAD,CAAxC;AAAA,aAAL,CAD4J,CAAA;AAAA,YAIrKe,mBAAA,GAAsBJ,OAAA,CAAQA,OAAA,CAAQK,WAAR,CAAoBhB,OAApB,CAAA,GAA+B,CAAvC,CAAtB,CAJqK;AAAA,YAK5JX,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWE,QAArB;AAAA,gBAA+BzsB,IAAA,EAAM;AAAA,oBAAC+vB,UAAD;AAAA,oBAAaC,mBAAb;AAAA,iBAArC;AAAA,aAAL,CAL4J,CAAA;AAAA,YAMrK,SANqK;AAAA,SAVrI;AAAA,QAoBXhB,wBAAA,CAAAc,WAAA,CAAYl9B,MAAZ,EAAoBm9B,UAAA,CAAWn9B,MAA/B,EAAuC07B,QAAvC,EAAiDW,OAAjD,EAA0D,IAA1D,EAAgE1C,UAAA,CAAWK,iBAA3E,CApBW,CAAA;AAAA,QAqBXoC,wBAAA,CAAAc,WAAA,CAAYj9B,KAAZ,EAAmBk9B,UAAA,CAAWl9B,KAA9B,EAAqCy7B,QAArC,EAA+CW,OAA/C,EAAwD,IAAxD,EAA8D1C,UAAA,CAAWI,gBAAzE,CArBW,CAAA;AAAA,QAsBpC,IAAI,CAACmC,SAAA,CAAQgB,WAAA,CAAYI,IAApB,EAA0BH,UAAA,CAAWG,IAArC,CAAL,EAAiD;AAAA,YACpC5B,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWM,OAArB;AAAA,gBAA8B7sB,IAAA,EAAM;AAAA,oBAACivB,OAAD;AAAA,oBAAUc,UAAA,CAAWG,IAArB;AAAA,iBAApC;AAAA,aAAL,CADoC,CAAA;AAAA,SAtBb;AAAA,QAyBpC,IAAI,CAACpB,SAAA,CAAQgB,WAAA,CAAYla,MAApB,EAA4Bma,UAAA,CAAWna,MAAvC,CAAL,EAAqD;AAAA,YACxC0Y,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWO,SAArB;AAAA,gBAAgC9sB,IAAA,EAAM;AAAA,oBAACivB,OAAD;AAAA,oBAAUc,UAAA,CAAWna,MAArB;AAAA,iBAAtC;AAAA,aAAL,CADwC,CAAA;AAAA,SAzBjB;AAAA,QA4BpC,IAAI,CAACkZ,SAAA,CAAQgB,WAAA,CAAYK,OAApB,EAA6BJ,UAAA,CAAWI,OAAxC,CAAD,IAAqD,CAACrB,SAAA,CAAQgB,WAAA,CAAYM,OAApB,EAA6BL,UAAA,CAAWK,OAAxC,CAA1D,EAA4G;AAAA,YACxG9B,QAAA,CAASh9B,IAAT,CAAc;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWW,iBAArB;AAAA,gBAAwCltB,IAAA,EAAM;AAAA,oBAACivB,OAAD;AAAA,oBAAUc,UAAA,CAAWI,OAArB;AAAA,oBAA8BJ,UAAA,CAAWK,OAAzC;AAAA,iBAA9C;AAAA,aAAd,CADwG,CAAA;AAAA,SA5BxE;AAAA,QAiCpC,KAAKxB,IAAL,IAAakB,WAAb,EAA0B;AAAA,YACtB,IAAI,CAACA,WAAA,CAAYjB,cAAZ,CAA2BD,IAA3B,CAAL;AAAA,gBAAuC,SADjB;AAAA,YAEtB,IAAIA,IAAA,KAAS,QAAT,IAAqBA,IAAA,KAAS,OAA9B,IAAyCA,IAAA,KAAS,QAAlD,IACAA,IAAA,KAAS,UADT,IACuBA,IAAA,KAAS,SADhC,IAC6CA,IAAA,KAAS,SADtD,IACmEA,IAAA,KAAS,MADhF;AAAA,gBACwF,SAHlE;AAAA,YAItB,IAAIA,IAAA,CAAK96B,OAAL,CAAa,QAAb,CAAA,KAA2B,CAA/B,EAAkC;AAAA,gBAC9Bk7B,wBAAA,CAAyBc,WAAA,CAAYlB,IAAZ,CAAzB,EAA4CmB,UAAA,CAAWnB,IAAX,CAA5C,EAA8DN,QAA9D,EAAwEW,OAAxE,EAAiFL,IAAA,CAAK7+B,KAAL,CAAW,CAAX,CAAjF,EAAgGw8B,UAAA,CAAWI,gBAA3G,CAD8B,CAAA;AAAA,aAAlC,MAEA,IAAW,CAACmC,SAAA,CAAQgB,WAAA,CAAYlB,IAAZ,CAAR,EAA2BmB,UAAA,CAAWnB,IAAX,CAA3B,CAAZ,EAA0D;AAAA,gBACtDN,QAAA,CAASh9B,IAAT,CAAc;AAAA,oBAACi9B,OAAA,EAAShC,UAAA,CAAWY,gBAArB;AAAA,oBAAuCntB,IAAA,EAAM;AAAA,wBAACivB,OAAD;AAAA,wBAAUL,IAAV;AAAA,wBAAgBmB,UAAA,CAAWnB,IAAX,CAAhB;AAAA,qBAA7C;AAAA,iBAAd,CADsD,CAAA;AAAA,aANpC;AAAA,SAjCU;AAAA,QA2CpC,KAAKA,IAAL,IAAamB,UAAb,EAAyB;AAAA,YACjB,IAAA,CAACA,UAAA,CAAWlB,cAAX,CAA0BD,IAA1B,CAAD,IAAoCkB,WAAA,CAAYjB,cAAZ,CAA2BD,IAA3B,CAApC;AAAA,gBAAsE,SADrD;AAAA,YAErB,IAAIA,IAAA,KAAS,QAAT,IAAqBA,IAAA,KAAS,OAA9B,IAAyCA,IAAA,KAAS,QAAlD,IACAA,IAAA,KAAS,UADT,IACuBA,IAAA,KAAS,SADhC,IAC6CA,IAAA,KAAS,SADtD,IACmEA,IAAA,KAAS,MADhF;AAAA,gBACwF,SAHnE;AAAA,YAIrB,IAAIA,IAAA,CAAK96B,OAAL,CAAa,QAAb,CAAA,KAA2B,CAA/B,EAAkC;AAAA,gBAC9Bk7B,wBAAA,CAAyBc,WAAA,CAAYlB,IAAZ,CAAzB,EAA4CmB,UAAA,CAAWnB,IAAX,CAA5C,EAA8DN,QAA9D,EAAwEW,OAAxE,EAAiFL,IAAA,CAAK7+B,KAAL,CAAW,CAAX,CAAjF,EAAgGw8B,UAAA,CAAWI,gBAA3G,CAD8B,CAAA;AAAA,aAAlC,MAEA,IAAW,CAACmC,SAAA,CAAQgB,WAAA,CAAYlB,IAAZ,CAAR,EAA2BmB,UAAA,CAAWnB,IAAX,CAA3B,CAAZ,EAA0D;AAAA,gBACtDN,QAAA,CAASh9B,IAAT,CAAc;AAAA,oBAACi9B,OAAA,EAAShC,UAAA,CAAWY,gBAArB;AAAA,oBAAuCntB,IAAA,EAAM;AAAA,wBAACivB,OAAD;AAAA,wBAAUL,IAAV;AAAA,wBAAgBmB,UAAA,CAAWnB,IAAX,CAAhB;AAAA,qBAA7C;AAAA,iBAAd,CADsD,CAAA;AAAA,aANrC;AAAA,SA3CW;AAAA,KAxDuE;AAAA,CA1QnH;AA0XO,SAASyB,WAAT,CAAqB1B,MAAA,GAAwD,EAA7E,EAAiFN,KAAA,GAAuD,EAAxI,EAA4IC,QAA5I,EAAsK;AAAA,IACzKK,MAAA,GAASA,MAAA,IAAU,EAAnB,CADyK;AAAA,IAEzKN,KAAA,GAAQA,KAAA,IAAS,EAAjB,CAFyK;AAAA,IAKnK,MAAAkB,WAAA,GAAcZ,MAAA,CAAOt8B,GAAP,CAAW88B,OAAX,CAAd,CALmK;AAAA,IAMnK,MAAAK,UAAA,GAAanB,KAAA,CAAMh8B,GAAN,CAAU88B,OAAV,CAAb,CANmK;AAAA,IASzK,MAAMM,WAAA,GAAcd,MAAA,CAAOe,MAAP,CAAmCN,SAAnC,EAA8C,EAA9C,CAApB,CATyK;AAAA,IAUzK,MAAMO,UAAA,GAAatB,KAAA,CAAMqB,MAAN,CAAkCN,SAAlC,EAA6C,EAA7C,CAAnB,CAVyK;AAAA,IAanK,MAAAQ,OAAA,GAAUL,WAAA,CAAYx/B,KAAZ,EAAV,CAbmK;AAAA,IAerK,IAAA2C,CAAA,EAAGsI,CAAH,EAAMs1B,QAAN,EAAgBC,YAAhB,CAfqK;AAAA,IAkBzK,KAAK79B,CAAA,GAAI,CAAJ,EAAOsI,CAAA,GAAI,CAAhB,EAAmBtI,CAAA,GAAI68B,WAAA,CAAY9+B,MAAnC,EAA2CiC,CAAA,EAA3C,EAAgD;AAAA,QAC5C49B,QAAA,GAAWf,WAAA,CAAY78B,CAAZ,CAAX,CAD4C;AAAA,QAE5C,IAAI,CAACi9B,UAAA,CAAWd,cAAX,CAA0ByB,QAA1B,CAAL,EAA0C;AAAA,YAC7BhC,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAW2B,YAArB;AAAA,gBAAmCluB,IAAA,EAAM,CAACswB,QAAD,CAAzC;AAAA,aAAL,CAD6B,CAAA;AAAA,YAEtCV,OAAA,CAAQx5B,MAAR,CAAew5B,OAAA,CAAQ97B,OAAR,CAAgBw8B,QAAhB,EAA0Bt1B,CAA1B,CAAf,EAA6C,CAA7C,CAFsC,CAAA;AAAA,SAA1C,MAGO;AAAA,YAEHA,CAAA,EAFG,CAAA;AAAA,SALqC;AAAA,KAlByH;AAAA,IA8BzK,KAAKtI,CAAA,GAAI,CAAJ,EAAOsI,CAAA,GAAI,CAAhB,EAAmBtI,CAAA,GAAI88B,UAAA,CAAW/+B,MAAlC,EAA0CiC,CAAA,EAA1C,EAA+C;AAAA,QAE3C49B,QAAA,GAAWd,UAAA,CAAWA,UAAA,CAAW/+B,MAAX,GAAoB,CAApB,GAAwBiC,CAAnC,CAAX,CAF2C;AAAA,QAI3C,IAAIk9B,OAAA,CAAQA,OAAA,CAAQn/B,MAAR,GAAiB,CAAjB,GAAqBiC,CAA7B,CAAA,KAAoC49B,QAAxC;AAAA,YAAkD,SAJP;AAAA,QAMvC,IAAAb,WAAA,CAAYZ,cAAZ,CAA2ByB,QAA3B,CAAA,EAAsC;AAAA,YAE7BhC,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAW2B,YAArB;AAAA,gBAAmCluB,IAAA,EAAM,CAACswB,QAAD,CAAzC;AAAA,aAAL,CAF6B,CAAA;AAAA,YAG9BV,OAAA,CAAAx5B,MAAA,CAAOw5B,OAAA,CAAQK,WAAR,CAAoBK,QAApB,EAA8BV,OAAA,CAAQn/B,MAAR,GAAiBuK,CAA/C,CAAP,EAA0D,CAA1D,CAH8B,CAAA;AAAA,SAAtC,MAIG;AAAA,YAEHA,CAAA,EAFG,CAAA;AAAA,SAVoC;AAAA,QAgB5Bu1B,YAAA,GAAAX,OAAA,CAAQA,OAAA,CAAQn/B,MAAR,GAAiBiC,CAAzB,CAAA,CAhB4B;AAAA,QAiB3C47B,QAAA,CAASh9B,IAAT,CAAc;AAAA,YAACi9B,OAAA,EAAShC,UAAA,CAAW0B,SAArB;AAAA,YAAgCjuB,IAAA,EAAM;AAAA,gBAAC2vB,UAAA,CAAWW,QAAX,CAAD;AAAA,gBAAuBC,YAAvB;AAAA,aAAtC;AAAA,SAAd,CAjB2C,CAAA;AAAA,QAkB3CX,OAAA,CAAQx5B,MAAR,CAAew5B,OAAA,CAAQn/B,MAAR,GAAiBiC,CAAhC,EAAmC,CAAnC,EAAsC49B,QAAtC,CAlB2C,CAAA;AAAA,KA9B0H;AAAA,IAoDzK,KAAWE,MAAAA,WAAX,IAA0BnC,KAA1B,EAAiC;AAAA,QACvB,MAAAoC,YAAA,GAAehB,WAAA,CAAYe,WAAA,CAAY98B,EAAxB,CAAf,CADuB;AAAA,QAE7B,IAAI,CAAC+8B,YAAD,IAAiB3B,SAAA,CAAQ2B,YAAR,EAAsBD,WAAtB,CAArB;AAAA,YAAyD,SAF5B;AAAA,QAIpBlC,QAAA,CAAAh9B,IAAA,CAAK;AAAA,YAACi9B,OAAA,EAAShC,UAAA,CAAW4B,YAArB;AAAA,YAAmCnuB,IAAA,EAAM;AAAA,gBAACwwB,WAAA,CAAY98B,EAAb;AAAA,gBAAiB88B,WAAjB;AAAA,aAAzC;AAAA,SAAL,CAJoB,CAAA;AAAA,KApDwI;AAAA,CA1X7K;AAwcwB,SAAAE,UAAA,CAAW/B,MAAX,EAAuCN,KAAvC,EAAkF;AAAA,IACtG,IAAI,CAACM,MAAL;AAAA,QAAoB,OAAA,CAAC;AAAA,gBAACJ,OAAA,EAAShC,UAAA,CAAWC,QAArB;AAAA,gBAA+BxsB,IAAA,EAAM,CAACquB,KAAD,CAArC;AAAA,aAAD,CAAA,CADkF;AAAA,IAGtG,IAAIC,QAAA,GAA2B,EAA/B,CAHsG;AAAA,IAKlG,IAAA;AAAA,QAEA,IAAI,CAACQ,SAAA,CAAQH,MAAA,CAAOp6B,OAAf,EAAwB85B,KAAA,CAAM95B,OAA9B,CAAL,EAA6C;AAAA,YAClC,OAAA,CAAC;AAAA,oBAACg6B,OAAA,EAAShC,UAAA,CAAWC,QAArB;AAAA,oBAA+BxsB,IAAA,EAAM,CAACquB,KAAD,CAArC;AAAA,iBAAD,CAAA,CADkC;AAAA,SAF7C;AAAA,QAKA,IAAI,CAACS,SAAA,CAAQH,MAAA,CAAO7qB,MAAf,EAAuBuqB,KAAA,CAAMvqB,MAA7B,CAAL,EAA2C;AAAA,YAC9BwqB,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWa,SAArB;AAAA,gBAAgCptB,IAAA,EAAM,CAACquB,KAAA,CAAMvqB,MAAP,CAAtC;AAAA,aAAL,CAD8B,CAAA;AAAA,SAL3C;AAAA,QAQA,IAAI,CAACgrB,SAAA,CAAQH,MAAA,CAAOpN,IAAf,EAAqB8M,KAAA,CAAM9M,IAA3B,CAAL,EAAuC;AAAA,YAC1B+M,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWc,OAArB;AAAA,gBAA8BrtB,IAAA,EAAM,CAACquB,KAAA,CAAM9M,IAAP,CAApC;AAAA,aAAL,CAD0B,CAAA;AAAA,SARvC;AAAA,QAWA,IAAI,CAACuN,SAAA,CAAQH,MAAA,CAAOxqB,OAAf,EAAwBkqB,KAAA,CAAMlqB,OAA9B,CAAL,EAA6C;AAAA,YAChCmqB,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWe,UAArB;AAAA,gBAAiCttB,IAAA,EAAM,CAACquB,KAAA,CAAMlqB,OAAP,CAAvC;AAAA,aAAL,CADgC,CAAA;AAAA,SAX7C;AAAA,QAcA,IAAI,CAAC2qB,SAAA,CAAQH,MAAA,CAAOnN,KAAf,EAAsB6M,KAAA,CAAM7M,KAA5B,CAAL,EAAyC;AAAA,YAC5B8M,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWgB,QAArB;AAAA,gBAA+BvtB,IAAA,EAAM,CAACquB,KAAA,CAAM7M,KAAP,CAArC;AAAA,aAAL,CAD4B,CAAA;AAAA,SAdzC;AAAA,QAiBA,IAAI,CAACsN,SAAA,CAAQH,MAAA,CAAOgC,MAAf,EAAuBtC,KAAA,CAAMsC,MAA7B,CAAL,EAA2C;AAAA,YAC9BrC,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWiB,SAArB;AAAA,gBAAgCxtB,IAAA,EAAM,CAACquB,KAAA,CAAMsC,MAAP,CAAtC;AAAA,aAAL,CAD8B,CAAA;AAAA,SAjB3C;AAAA,QAoBA,IAAI,CAAC7B,SAAA,CAAQH,MAAA,CAAO/4B,MAAf,EAAuBy4B,KAAA,CAAMz4B,MAA7B,CAAL,EAA2C;AAAA,YAC9B04B,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWkB,SAArB;AAAA,gBAAgCztB,IAAA,EAAM,CAACquB,KAAA,CAAMz4B,MAAP,CAAtC;AAAA,aAAL,CAD8B,CAAA;AAAA,SApB3C;AAAA,QAwBA,IAAI,CAACk5B,SAAA,CAAQH,MAAA,CAAOiC,OAAf,EAAwBvC,KAAA,CAAMuC,OAA9B,CAAL,EAA6C;AAAA,YACzCP,WAAA,CAAY1B,MAAA,CAAOiC,OAAnB,EAA4BvC,KAAA,CAAMuC,OAAlC,EAA2CtC,QAA3C,CADyC,CAAA;AAAA,SAxB7C;AAAA,QA2BA,IAAI,CAACQ,SAAA,CAAQH,MAAA,CAAOkC,UAAf,EAA2BxC,KAAA,CAAMwC,UAAjC,CAAL,EAAmD;AAAA,YACtCvC,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWmB,aAArB;AAAA,gBAAoC1tB,IAAA,EAAM,CAACquB,KAAA,CAAMwC,UAAP,CAA1C;AAAA,aAAL,CADsC,CAAA;AAAA,SA3BnD;AAAA,QA8BA,IAAI,CAAC/B,SAAA,CAAQH,MAAA,CAAOmC,KAAf,EAAsBzC,KAAA,CAAMyC,KAA5B,CAAL,EAAyC;AAAA,YAC5BxC,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWoB,QAArB;AAAA,gBAA+B3tB,IAAA,EAAM,CAACquB,KAAA,CAAMyC,KAAP,CAArC;AAAA,aAAL,CAD4B,CAAA;AAAA,SA9BzC;AAAA,QAiCA,IAAI,CAAChC,SAAA,CAAQH,MAAA,CAAOoC,GAAf,EAAoB1C,KAAA,CAAM0C,GAA1B,CAAL,EAAqC;AAAA,YACxBzC,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWsB,MAArB;AAAA,gBAA6B7tB,IAAA,EAAM,CAACquB,KAAA,CAAM0C,GAAP,CAAnC;AAAA,aAAL,CADwB,CAAA;AAAA,SAjCrC;AAAA,QAoCA,IAAI,CAACjC,SAAA,CAAQH,MAAA,CAAOqC,UAAf,EAA2B3C,KAAA,CAAM2C,UAAjC,CAAL,EAAmD;AAAA,YACtC1C,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWyB,aAArB;AAAA,gBAAoChuB,IAAA,EAAM,CAACquB,KAAA,CAAM2C,UAAP,CAA1C;AAAA,aAAL,CADsC,CAAA;AAAA,SApCnD;AAAA,QAuCA,IAAI,CAAClC,SAAA,CAAQH,MAAA,CAAOsC,MAAf,EAAuB5C,KAAA,CAAM4C,MAA7B,CAAL,EAA2C;AAAA,YAC9B3C,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWwB,SAArB;AAAA,gBAAgC/tB,IAAA,EAAM,CAACquB,KAAA,CAAM4C,MAAP,CAAtC;AAAA,aAAL,CAD8B,CAAA;AAAA,SAvC3C;AAAA,QA0CA,IAAI,CAACnC,SAAA,CAAQH,MAAA,CAAOuC,MAAf,EAAuB7C,KAAA,CAAM6C,MAA7B,CAAL,EAA2C;AAAA,YAC9B5C,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWuB,SAArB;AAAA,gBAAgC9tB,IAAA,EAAM,CAACquB,KAAA,CAAM6C,MAAP,CAAtC;AAAA,aAAL,CAD8B,CAAA;AAAA,SA1C3C;AAAA,QA6CI,IAAA,CAACpC,SAAA,CAAQH,MAAA,CAAO,aAAP,CAAR,EAA+BN,KAAA,CAAM,aAAN,CAA/B,CAAD,EAAuD;AAAA,YAGhD,OAAA,CAAC;AAAA,oBAACE,OAAA,EAAShC,UAAA,CAAWC,QAArB;AAAA,oBAA+BxsB,IAAA,EAAM,CAACquB,KAAD,CAArC;AAAA,iBAAD,CAAA,CAHgD;AAAA,SA7C3D;AAAA,QAsDA,MAAMG,cAAA,GAAsC,EAA5C,CAtDA;AAAA,QAyDA,MAAM2C,yBAAA,GAA4B,EAAlC,CAzDA;AAAA,QA0DApC,WAAA,CAAYJ,MAAA,CAAO17B,OAAnB,EAA4Bo7B,KAAA,CAAMp7B,OAAlC,EAA2Ck+B,yBAA3C,EAAsE3C,cAAtE,CA1DA,CAAA;AAAA,QAiEA,MAAM4C,YAAA,GAAe,EAArB,CAjEA;AAAA,QAkEA,IAAIzC,MAAA,CAAOv8B,MAAX,EAAmB;AAAA,YACRu8B,MAAA,CAAAv8B,MAAA,CAAOoB,OAAP,CAAgBlB,KAAD,IAAW;AAAA,gBAC7B,IAAIA,KAAA,CAAMkC,MAAN,IAAgBg6B,cAAA,CAAel8B,KAAA,CAAMkC,MAArB,CAApB,EAAkD;AAAA,oBACrC85B,QAAA,CAAAh9B,IAAA,CAAK;AAAA,wBAACi9B,OAAA,EAAShC,UAAA,CAAWG,WAArB;AAAA,wBAAkC1sB,IAAA,EAAM,CAAC1N,KAAA,CAAMoB,EAAP,CAAxC;AAAA,qBAAL,CADqC,CAAA;AAAA,iBAAlD,MAEO;AAAA,oBACH09B,YAAA,CAAa9/B,IAAb,CAAkBgB,KAAlB,CADG,CAAA;AAAA,iBAHsB;AAAA,aAA1B,CADQ,CAAA;AAAA,SAlEnB;AAAA,QA6EA,IAAI++B,aAAA,GAAgB1C,MAAA,CAAO2C,OAA3B,CA7EA;AAAA,QA8EA,IAAID,aAAJ,EAAmB;AAAA,YACX,IAAA7C,cAAA,CAAe6C,aAAA,CAAc78B,MAA7B,CAAA,EAAsC;AAAA,gBAC7B85B,QAAA,CAAAh9B,IAAA,CAAK;AAAA,oBAACi9B,OAAA,EAAShC,UAAA,CAAWqB,UAArB;AAAA,oBAAiC5tB,IAAA,EAAM,CAAC,KAAS,CAAV,CAAvC;AAAA,iBAAL,CAD6B,CAAA;AAAA,gBAEtBqxB,aAAA,GAAA,KAAA,CAAA,CAFsB;AAAA,aAD3B;AAAA,SA9EnB;AAAA,QAqFW/C,QAAA,GAAAA,QAAA,CAASj4B,MAAT,CAAgB86B,yBAAhB,CAAA,CArFX;AAAA,QAyFA,IAAI,CAACrC,SAAA,CAAQuC,aAAR,EAAuBhD,KAAA,CAAMiD,OAA7B,CAAL,EAA4C;AAAA,YAC/BhD,QAAA,CAAAh9B,IAAA,CAAK;AAAA,gBAACi9B,OAAA,EAAShC,UAAA,CAAWqB,UAArB;AAAA,gBAAiC5tB,IAAA,EAAM,CAACquB,KAAA,CAAMiD,OAAP,CAAvC;AAAA,aAAL,CAD+B,CAAA;AAAA,SAzF5C;AAAA,QA8FWhC,UAAA,CAAA8B,YAAA,EAAc/C,KAAA,CAAMj8B,MAApB,EAA4Bk8B,QAA5B,CA9FX,CAAA;AAAA,KAAA,QA+FK9zB,GAAQ;AAAA,QAEL6V,OAAA,CAAAC,IAAA,CAAK,+BAAL,EAAsC9V,CAAtC,CAFK,CAAA;AAAA,QAGF8zB,QAAA,GAAA,CAAC;AAAA,gBAACC,OAAA,EAAShC,UAAA,CAAWC,QAArB;AAAA,gBAA+BxsB,IAAA,EAAM,CAACquB,KAAD,CAArC;AAAA,aAAD,CAAA,CAHE;AAAA,KApGqF;AAAA,IA0G/F,OAAAC,QAAA,CA1G+F;AAAA;;ACtc1G,MAAqBiD,eAArB,CAAqC;AAAA,IAKjC96B,WAAA,CAAYhF,GAAZ,EAA4CE,KAA5C,EAEsB+E,OAFtB,EAEuC86B,UAFvC,EAEmE;AAAA,QAC/D,KAAK96B,OAAL,GAAgB,CAAAjF,GAAA,GAAM,CAAGA,GAAAA,GAAH,IAAA,CAAN,GAAmB,EAAnB,IAAyBiF,OAAzC,CAD+D;AAAA,QAE3D,IAAA86B,UAAA;AAAA,gBAAiBA,CAAAA,aAAaA,WAF6B;AAAA,QAI/D,IAAI7/B,KAAA,KAAU,IAAV,IAAkBA,KAAA,KAAU,KAAA,CAA5B,IAAyCA,KAAA,CAAM8/B,QAAnD,EAA6D;AAAA,YACzD,KAAK/nB,IAAL,GAAY/X,KAAA,CAAM8/B,QAAlB,CADyD;AAAA,SAJE;AAAA,KAPlC;AAAA,CAArC;AAiBO,MAAMC,iBAAN,SAAgCH,eAAhC,CAAgD;AAAA;;ACjBvD,MAAqB/6B,YAArB,CAAkC;AAAA,IAK9BC,WAAA,CAAYyJ,KAAZ,EAA0B;AAAA,QACtB,IAAKA,CAAAA,KAAL,GAAaA,KAAb,CADsB;AAAA,QAEtB,KAAKxJ,OAAL,GAAewJ,KAAA,CAAMxJ,OAArB,CAFsB;AAAA,QAGtB,MAAM9F,KAAA,GAAQsP,KAAA,CAAMxJ,OAAN,CAAc9F,KAAd,CAAoB,YAApB,CAAd,CAHsB;AAAA,QAItB,KAAK8Y,IAAL,GAAY9Y,KAAA,GAAQyI,QAAA,CAASzI,KAAA,CAAM,CAAN,CAAT,EAAmB,EAAnB,CAAR,GAAiC,CAA7C,CAJsB;AAAA,KALI;AAAA;;ACQlC,SAAwB+gC,cAAxB,CAAuChiC,OAAvC,EAAiF;AAAA,IAC7E,MAAM8B,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAD6E;AAAA,IAE7E,MAAMiP,MAAA,GAAS/Q,OAAA,CAAQgC,KAAvB,CAF6E;AAAA,IAGvE,MAAAigC,YAAA,GAAejiC,OAAA,CAAQkiC,SAAR,IAAqB,EAApC,CAHuE;AAAA,IAIvE,MAAAC,iBAAA,GAAoBniC,OAAA,CAAQoiC,uBAAR,IAAmC,EAAvD,CAJuE;AAAA,IAK7E,MAAM9/B,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAL6E;AAAA,IAM7E,MAAM+/B,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAN6E;AAAA,IAO7E,IAAI1sB,MAAA,GAAS,EAAb,CAP6E;AAAA,IASvE,MAAAhS,IAAA,GAAOuO,OAAA,CAAQnB,MAAR,CAAP,CATuE;AAAA,IAU7E,IAAIpN,IAAA,KAAS,QAAb,EAAuB;AAAA,QACZ,OAAA,CAAC,IAAIi+B,eAAJ,CAAoB9/B,GAApB,EAAyBiP,MAAzB,EAAiC,CAAoB,iBAApB,GAAoBpN,IAApB,QAAA,CAAjC,CAAD,CAAA,CADY;AAAA,KAVsD;AAAA,IAc7E,KAAW2+B,MAAAA,SAAX,IAAwBvxB,MAAxB,EAAgC;AAAA,QAC5B,MAAMwxB,cAAA,GAAiBD,SAAA,CAAU58B,KAAV,CAAgB,GAAhB,CAAA,CAAqB,CAArB,CAAvB,CAD4B;AAAA,QAE5B,MAAM88B,WAAA,GAAcP,YAAA,CAAaM,cAAb,CAAA,IAAgCN,YAAA,CAAa,GAAb,CAApD,CAF4B;AAAA,QAIxB,IAAAQ,eAAA,CAJwB;AAAA,QAKxB,IAAAN,iBAAA,CAAkBI,cAAlB,CAAA,EAAmC;AAAA,YACnCE,eAAA,GAAkBN,iBAAA,CAAkBI,cAAlB,CAAlB,CADmC;AAAA,SAAnC,MAEJ,IAAWN,YAAA,CAAaM,cAAb,CAAX,EAAyC;AAAA,YACnBE,eAAA,GAAAC,QAAA,CADmB;AAAA,SAAzC,MAEA,IAAWP,iBAAA,CAAkB,GAAlB,CAAX,EAAmC;AAAA,YAC/BM,eAAA,GAAkBN,iBAAA,CAAkB,GAAlB,CAAlB,CAD+B;AAAA,SAAnC,MAEA,IAAWF,YAAA,CAAa,GAAb,CAAX,EAA8B;AAAA,YACRQ,eAAA,GAAAC,QAAA,CADQ;AAAA,SAXF;AAAA,QAe5B,IAAI,CAACD,eAAL,EAAsB;AAAA,YACX9sB,MAAA,CAAAhU,IAAA,CAAK,IAAIogC,iBAAJ,CAAsBjgC,GAAtB,EAA2BiP,MAAA,CAAOuxB,SAAP,CAA3B,EAA8C,CAAA,kBAAA,GAAqBA,SAArB,EAA8B,CAA9B,CAA9C,CAAL,CADW,CAAA;AAAA,YAElB,SAFkB;AAAA,SAfM;AAAA,QAoBnB3sB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc+7B,eAAA,CAAgB;AAAA,YACnC3gC,GAAA,EAAM,CAAAA,GAAA,GAAM,CAAGA,GAAAA,GAAH,GAAA,CAAN,GAAkBA,GAAlB,IAAyBwgC,SADI;AAAA,YAEnCtgC,KAAA,EAAO+O,MAAA,CAAOuxB,SAAP,CAF4B;AAAA,YAGnCJ,SAAA,EAAWM,WAHwB;AAAA,YAInClgC,KAJmC;AAAA,YAKnC+/B,SALmC;AAAA,YAMnCtxB,MANmC;AAAA,YAOnCuxB,SAPmC;AAAA,SAAhB,EAQpBvxB,MARoB,CAAd,CAAA,CApBmB;AAAA,KAd6C;AAAA,IA6C7E,KAAWwxB,MAAAA,cAAX,IAA6BN,YAA7B,EAA2C;AAAA,QAEnC,IAAAE,iBAAA,CAAkBI,cAAlB,CAAA,EAAmC;AAAA,YACnC,SADmC;AAAA,SAFA;AAAA,QAMvC,IAAIN,YAAA,CAAaM,cAAb,EAA6BI,QAA7B,IAAyCV,YAAA,CAAaM,cAAb,CAAA,CAA6B,SAA7B,CAA4C,KAAA,KAAA,CAArF,IAAkGxxB,MAAA,CAAOwxB,cAAP,CAAA,KAA2B,KAAW,CAA5I,EAA4I;AAAA,YACjI5sB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBiP,MAAzB,EAAiC,CAA8B,2BAA9B,GAA8BwxB,cAA9B,GAAA,CAAjC,CAAL,CADiI,CAAA;AAAA,SANrG;AAAA,KA7CkC;AAAA,IAwDtE,OAAA5sB,MAAA,CAxDsE;AAAA;;ACFjF,SAAwBitB,cAAxB,CAAuC5iC,OAAvC,EAAsF;AAAA,IAC5E,MAAA,CAACgC,KAAD,EAAQqgC,SAAR,CAAA,GAAqBriC,OAArB,CAD4E;AAAA,IAElF,MAAM,CAACwM,IAAD,EAAO,GAAP,UAAA,CAAA,GAAwBxK,KAA9B,CAFkF;AAAA,IAK3EH,MAAA,CAAAghC,cAAA,CAAeC,UAAf,EAA2B,UAA3B,EAAuC;AAAA,QAC1C9gC,KAAA,EAAOA,KAAA,CAAM8/B,QAD6B;AAAA,QAE1CiB,UAAA,EAAY,KAF8B;AAAA,KAAvC,CAL2E,CAAA;AAAA,IAUlF,IAAIptB,MAAA,GAASqsB,cAAA,CAAehO,MAAA,CAAO,EAAP,EAAWh0B,OAAX,EAAoB;AAAA,QAC5CgC,KAAA,EAAO8gC,UADqC;AAAA,QAE5CZ,SAAA,EAAWG,SAAA,CAAUW,MAFuB;AAAA,KAApB,CAAf,CAAb,CAVkF;AAAA,IAgBlF,IAAIhK,QAAA,CAAS8J,UAAA,CAAW/+B,EAApB,CAAA,KAA4B,EAAhC,EAAoC;AAAA,QAC1B,MAAAjC,GAAA,GAAM,CAAG9B,GAAAA,OAAA,CAAQ8B,GAAX,EAAc,GAAd,CAAN,CAD0B;AAAA,QAEhC6T,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBghC,UAAzB,EAAqC,mCAAA,CAArC,CAAZ,CAFgC,CAAA;AAAA,KAhB8C;AAAA,IAqBlF,IAAIt2B,IAAJ,EAAU;AAAA,QACA,MAAA1K,GAAA,GAAM,CAAG9B,GAAAA,OAAA,CAAQ8B,GAAX,EAAc,KAAd,CAAN,CADA;AAAA,QAEG6T,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAcu8B,eAAA,CAAcz2B,IAAd,EAAoB61B,SAApB,EAA+B,EAACvgC,GAAD,EAA/B,CAAd,CAAA,CAFH;AAAA,KArBwE;AAAA,IA0B3E,OAAA6T,MAAA,CA1B2E;AAAA;;ACEtF,SAAwButB,aAAxB,CAAsCljC,OAAtC,EAAgF;AAAA,IAC5E,MAAMmI,KAAA,GAAQnI,OAAA,CAAQgC,KAAtB,CAD4E;AAAA,IAE5E,MAAMmhC,SAAA,GAAYnjC,OAAA,CAAQkiC,SAA1B,CAF4E;AAAA,IAG5E,MAAM5/B,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAH4E;AAAA,IAI5E,MAAM+/B,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAJ4E;AAAA,IAK5E,MAAMvgC,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAL4E;AAAA,IAMtE,MAAAshC,oBAAA,GAAuBpjC,OAAA,CAAQqjC,qBAAR,IAAiCC,QAAxD,CANsE;AAAA,IAQxE,IAAApxB,OAAA,CAAQ/J,KAAR,CAAA,KAAmB,OAAnB,EAA4B;AAAA,QACrB,OAAA,CAAC,IAAIy5B,eAAJ,CAAoB9/B,GAApB,EAAyBqG,KAAzB,EAAgC,iBAAA,GAAmB+J,OAAA,CAAQ/J,KAAR,CAAnB,EAAiC,MAAjC,CAAhC,CAAD,CAAA,CADqB;AAAA,KAR4C;AAAA,IAY5E,IAAIg7B,SAAA,CAAUriC,MAAV,IAAoBqH,KAAA,CAAMrH,MAAN,KAAiBqiC,SAAA,CAAUriC,MAAnD,EAA2D;AAAA,QACvD,OAAO,CAAC,IAAI8gC,eAAJ,CAAoB9/B,GAApB,EAAyBqG,KAAzB,EAAgC,CAAA,aAAA,GAAgBg7B,SAAA,CAAUriC,MAA1B,EAAqD,kBAArD,GAAqDqH,KAAA,CAAMrH,MAA3D,EAAiE,MAAjE,CAAhC,CAAD,CAAP,CADuD;AAAA,KAZiB;AAAA,IAgB5E,IAAIqiC,SAAA,CAAU,YAAV,CAA2Bh7B,IAAAA,KAAA,CAAMrH,MAAN,GAAeqiC,SAAA,CAAU,YAAV,CAA9C,EAAuE;AAAA,QACnE,OAAO,CAAC,IAAIvB,eAAJ,CAAoB9/B,GAApB,EAAyBqG,KAAzB,EAAgC,CAAA,sBAAA,GAAyBg7B,SAAA,CAAU,YAAV,CAAzB,EAAgD,kBAAhD,GAAqEh7B,KAAA,CAAMrH,MAA3E,QAAA,CAAhC,CAAD,CAAP,CADmE;AAAA,KAhBK;AAAA,IAoB5E,IAAIyiC,gBAAA,GAAmB;AAAA,QACnB,MAAA,EAAQJ,SAAA,CAAUnhC,KADC;AAAA,QAEnB,QAAA,EAAUmhC,SAAA,CAAUhd,MAFD;AAAA,QAGnB,SAAA,EAAWgd,SAAA,CAAUK,OAHF;AAAA,QAInB,SAAA,EAAWL,SAAA,CAAUM,OAJF;AAAA,QAKnBC,QAAA,EAAU,KAAA,CALS;AAAA,KAAvB,CApB4E;AAAA,IA4BxE,IAAArB,SAAA,CAAUsB,QAAV,GAAqB,CAArB,EAAwB;AAAA,QACxBJ,gBAAA,CAAiBG,QAAjB,GAA4BP,SAAA,CAAUO,QAAtC,CADwB;AAAA,KA5BgD;AAAA,IAgC5E,IAAIxxB,OAAA,CAAQixB,SAAA,CAAUnhC,KAAlB,CAAA,KAA6B,QAAjC,EAA2C;AAAA,QACvCuhC,gBAAA,GAAmBJ,SAAA,CAAUnhC,KAA7B,CADuC;AAAA,KAhCiC;AAAA,IAoC5E,IAAI2T,MAAA,GAAS,EAAb,CApC4E;AAAA,IAqC5E,KAAA,IAAS5S,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIoF,KAAA,CAAMrH,MAA1B,EAAkCiC,CAAA,EAAlC,EAAuC;AAAA,QAC1B4S,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc08B,oBAAA,CAAqB;AAAA,YACxCj7B,KADwC;AAAA,YAExCy7B,UAAA,EAAY7gC,CAF4B;AAAA,YAGxCf,KAAA,EAAOmG,KAAA,CAAMpF,CAAN,CAHiC;AAAA,YAIxCm/B,SAAA,EAAWqB,gBAJ6B;AAAA,YAKxCjhC,KALwC;AAAA,YAMxC+/B,SANwC;AAAA,YAOxCvgC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,CAAN,GAAUiB,CAAV,EAAW,CAAX,CAPmC;AAAA,SAArB,EAQpB,IARoB,CAAd,CAAA,CAD0B;AAAA,KArCqC;AAAA,IAgDrE,OAAA4S,MAAA,CAhDqE;AAAA;;ACDhF,SAAwBkuB,cAAxB,CAAuC7jC,OAAvC,EAAiF;AAAA,IAC7E,MAAM8B,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAD6E;AAAA,IAE7E,MAAME,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CAF6E;AAAA,IAG7E,MAAMkgC,SAAA,GAAYliC,OAAA,CAAQkiC,SAA1B,CAH6E;AAAA,IAIzE,IAAAv+B,IAAA,GAAOuO,OAAA,CAAQlQ,KAAR,CAAP,CAJyE;AAAA,IAOzE,IAAA2B,IAAA,KAAS,QAAT,IAAqB3B,KAAA,KAAUA,KAA/B,EAAsC;AAAA,QAC/B2B,IAAA,GAAA,KAAA,CAD+B;AAAA,KAPmC;AAAA,IAW7E,IAAIA,IAAA,KAAS,QAAb,EAAuB;AAAA,QACZ,OAAA,CAAC,IAAIi+B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAoB,iBAApB,GAAoB2B,IAApB,QAAA,CAAhC,CAAD,CAAA,CADY;AAAA,KAXsD;AAAA,IAe7E,IAAI,SAAau+B,IAAAA,SAAjB,EAA4B;AAAA,QACxB,IAAI4B,OAAA,GAAU5B,SAAA,CAAUsB,OAAxB,CADwB;AAAA,QAExB,IAAItxB,OAAA,CAAQgwB,SAAA,CAAUsB,OAAlB,CAAA,KAA+B,OAAnC,EAA4C;AAAA,YACxC,MAAMzgC,CAAA,GAAI/C,OAAA,CAAQ4jC,UAAlB,CADwC;AAAA,YAE9BE,OAAA,GAAA5B,SAAA,CAAUsB,OAAV,CAAkBzgC,CAAlB,CAAA,CAF8B;AAAA,SAFpB;AAAA,QAMxB,IAAIf,KAAA,GAAQ8hC,OAAZ,EAAqB;AAAA,YACV,OAAA,CAAC,IAAIlC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAGA,GAAAA,KAAH,EAAQ,gCAAR,GAA2C8hC,OAA3C,EAAhC,CAAA,CAAD,CAAA,CADU;AAAA,SANG;AAAA,KAfiD;AAAA,IA0B7E,IAAI,SAAa5B,IAAAA,SAAjB,EAA4B;AAAA,QACxB,IAAI6B,OAAA,GAAU7B,SAAA,CAAUuB,OAAxB,CADwB;AAAA,QAExB,IAAIvxB,OAAA,CAAQgwB,SAAA,CAAUuB,OAAlB,CAAA,KAA+B,OAAnC,EAA4C;AAAA,YACxC,MAAM1gC,CAAA,GAAI/C,OAAA,CAAQ4jC,UAAlB,CADwC;AAAA,YAE9BG,OAAA,GAAA7B,SAAA,CAAUuB,OAAV,CAAkB1gC,CAAlB,CAAA,CAF8B;AAAA,SAFpB;AAAA,QAMxB,IAAIf,KAAA,GAAQ+hC,OAAZ,EAAqB;AAAA,YACV,OAAA,CAAC,IAAInC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAGA,GAAAA,KAAH,EAAQ,mCAAR,GAA8C+hC,OAA9C,EAAhC,CAAA,CAAD,CAAA,CADU;AAAA,SANG;AAAA,KA1BiD;AAAA,IAqC7E,OAAO,EAAP,CArC6E;AAAA;;ACOjF,SAAwBC,gBAAxB,CAAyChkC,OAAzC,EAA0E;AAAA,IACtE,MAAMikC,iBAAA,GAAoBjkC,OAAA,CAAQkiC,SAAlC,CADsE;AAAA,IAEtE,MAAM5J,YAAA,GAAeU,QAAA,CAASh5B,OAAA,CAAQgC,KAAR,CAAc2B,IAAvB,CAArB,CAFsE;AAAA,IAGlE,IAAAugC,WAAA,CAHkE;AAAA,IAItE,IAAIC,gBAAA,GAA8D,EAAlE,CAJsE;AAAA,IAKlE,IAAAC,uBAAA,CALkE;AAAA,IAMlE,IAAAC,sBAAA,CANkE;AAAA,IAQtE,MAAMC,cAAA,GAAiBhM,YAAA,KAAiB,aAAjB,IAAkCt4B,OAAA,CAAQgC,KAAR,CAAckD,QAAd,KAA2B,KAAA,CAApF,CARsE;AAAA,IAStE,MAAMq/B,kBAAA,GAAqB,CAACD,cAA5B,CATsE;AAAA,IAUhE,MAAAE,yBAAA,GACFtyB,OAAA,CAAQlS,OAAA,CAAQgC,KAAR,CAAcwC,KAAtB,CAAA,KAAiC,OAAjC,IACA0N,OAAA,CAAQlS,OAAA,CAAQgC,KAAR,CAAcwC,KAAd,CAAoB,CAApB,CAAR,CAAoC,KAAA,OADpC,IAEA0N,OAAA,CAAQlS,OAAA,CAAQgC,KAAR,CAAcwC,KAAd,CAAoB,CAApB,CAAA,CAAuB,CAAvB,CAAR,CAAA,KAAuC,QAHrC,CAVgE;AAAA,IAetE,MAAMmR,MAAA,GAASqsB,cAAA,CAAe;AAAA,QAC1BlgC,GAAA,EAAK9B,OAAA,CAAQ8B,GADa;AAAA,QAE1BE,KAAA,EAAOhC,OAAA,CAAQgC,KAFW;AAAA,QAG1BkgC,SAAA,EAAWliC,OAAA,CAAQqiC,SAAR,CAAkBqB,QAHH;AAAA,QAI1BphC,KAAA,EAAOtC,OAAA,CAAQsC,KAJW;AAAA,QAK1B+/B,SAAA,EAAWriC,OAAA,CAAQqiC,SALO;AAAA,QAM1BD,uBAAA,EAAyB;AAAA,YACrB59B,KAAA,EAAOigC,qBADc;AAAA,YAErBje,OAAA,EAASke,uBAFY;AAAA,SANC;AAAA,KAAf,CAAf,CAfsE;AAAA,IA2BlE,IAAApM,YAAA,KAAiB,UAAjB,IAA+BgM,cAA/B,EAA+C;AAAA,QACxC3uB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,sCAAhD,CAAL,CADwC,CAAA;AAAA,KA3BmB;AAAA,IA+BtE,IAAIs2B,YAAA,KAAiB,UAAjB,IAA+B,CAACt4B,OAAA,CAAQgC,KAAR,CAAcwC,KAAlD,EAAyD;AAAA,QAC9CmR,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,mCAAhD,CAAL,CAD8C,CAAA;AAAA,KA/Ba;AAAA,IAmClE,IAAAs2B,YAAA,KAAiB,aAAjB,IAAkCt4B,OAAA,CAAQkiC,SAAR,CAAkB96B,UAApD,IAAkE,CAACmsB,qBAAA,CAAsBvzB,OAAA,CAAQkiC,SAA9B,CAAnE,EAA6G;AAAA,QACtGvsB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,qCAAhD,CAAL,CADsG,CAAA;AAAA,KAnC3C;AAAA,IAuClE,IAAAhC,OAAA,CAAQqiC,SAAR,CAAkBsB,QAAlB,IAA8B,CAA9B,EAAiC;AAAA,QACjC,IAAIY,kBAAA,IAAsB,CAACrR,0BAAA,CAA2BlzB,OAAA,CAAQkiC,SAAnC,CAA3B,EAA0E;AAAA,YAC/DvsB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,kCAAhD,CAAL,CAD+D,CAAA;AAAA,SAA1E,UAEWsiC,cAAA,IAAkB,CAACjR,sBAAA,CAAuBrzB,OAAA,CAAQkiC,SAA/B,GAA2C;AAAA,YAC9DvsB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,8BAAhD,CAAL,CAD8D,CAAA;AAAA,SAHxC;AAAA,KAvCiC;AAAA,IA+CtE,IAAK,CAAAs2B,YAAA,KAAiB,aAAjB,IAAkCkM,yBAAlC,KAAgExkC,OAAA,CAAQgC,KAAR,CAAckD,QAAd,KAA2B,KAAW,CAA3G,EAA2G;AAAA,QAChGyQ,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,iCAAhD,CAAL,CADgG,CAAA;AAAA,KA/CrC;AAAA,IAmD/D,OAAA2T,MAAA,CAnD+D;AAAA,IAqDtE,SAAS8uB,qBAAT,CAA+BzkC,QAA/B,EAA2D;AAAA,QACvD,IAAIs4B,YAAA,KAAiB,UAArB,EAAiC;AAAA,YACtB,OAAA,CAAC,IAAIsJ,eAAJ,CAAoB5hC,QAAAA,CAAQ8B,GAA5B,EAAiC9B,QAAAA,CAAQgC,KAAzC,EAAgD,mDAAhD,CAAD,CAAA,CADsB;AAAA,SADsB;AAAA,QAKvD,IAAI2T,OAAAA,GAAS,EAAb,CALuD;AAAA,QAMvD,MAAM3T,KAAA,GAAQhC,QAAAA,CAAQgC,KAAtB,CANuD;AAAA,QAQvD2T,OAAAA,GAASA,OAAAA,CAAOjP,MAAPiP,CAAcutB,aAAA,CAAc;AAAA,YACjCphC,GAAA,EAAK9B,QAAAA,CAAQ8B,GADoB;AAAA,YAEjCE,KAFiC;AAAA,YAGjCkgC,SAAA,EAAWliC,QAAAA,CAAQkiC,SAHc;AAAA,YAIjC5/B,KAAA,EAAOtC,QAAAA,CAAQsC,KAJkB;AAAA,YAKjC+/B,SAAA,EAAWriC,QAAAA,CAAQqiC,SALc;AAAA,YAMjCgB,qBAAA,EAAuBsB,oBANU;AAAA,SAAd,CAAdhvB,CAATA,CARuD;AAAA,QAiBvD,IAAIzD,OAAA,CAAQlQ,KAAR,CAAmB,KAAA,OAAnB,IAA8BA,KAAA,CAAMlB,MAAN,KAAiB,CAAnD,EAAsD;AAAA,YAClD6U,OAAAA,CAAOhU,IAAPgU,CAAY,IAAIisB,eAAJ,CAAoB5hC,QAAAA,CAAQ8B,GAA5B,EAAiCE,KAAjC,EAAwC,mCAAxC,CAAZ2T,CADkD,CAAA;AAAA,SAjBC;AAAA,QAqBhDA,OAAAA,OAAAA,CArBgD;AAAA,KArDW;AAAA,IA6EtE,SAASgvB,oBAAT,CAA8B3kC,QAA9B,EAA0D;AAAA,QACtD,IAAI2V,OAAAA,GAAS,EAAb,CADsD;AAAA,QAEtD,MAAM3T,KAAA,GAAQhC,QAAAA,CAAQgC,KAAtB,CAFsD;AAAA,QAGtD,MAAMF,GAAA,GAAM9B,QAAAA,CAAQ8B,GAApB,CAHsD;AAAA,QAKlD,IAAAoQ,OAAA,CAAQlQ,KAAR,CAAA,KAAmB,OAAnB,EAA4B;AAAA,YACrB,OAAA,CAAC,IAAI4/B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,iBAAA,GAAmBkQ,OAAA,CAAQlQ,KAAR,CAAnB,EAAiC,MAAjC,CAAhC,CAAD,CAAA,CADqB;AAAA,SALsB;AAAA,QASlD,IAAAA,KAAA,CAAMlB,MAAN,KAAiB,CAAjB,EAAoB;AAAA,YACb,OAAA,CAAC,IAAI8gC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAmC,gCAAnC,GAAmCA,KAAA,CAAMlB,MAAzC,EAA+C,MAA/C,CAAhC,CAAD,CAAA,CADa;AAAA,SAT8B;AAAA,QAatD,IAAI0jC,yBAAJ,EAA+B;AAAA,YAC3B,IAAItyB,OAAA,CAAQlQ,KAAA,CAAM,CAAN,CAAR,CAAsB,KAAA,QAA1B,EAAoC;AAAA,gBAChC,OAAO,CAAC,IAAI4/B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAA,iBAAA,GAAoBkQ,OAAA,CAAQlQ,KAAA,CAAM,CAAN,CAAR,CAApB,EAAqC,MAArC,CAAhC,CAAD,CAAP,CADgC;AAAA,aADT;AAAA,YAI3B,IAAIA,KAAA,CAAM,CAAN,EAAS4vB,IAAT,KAAkB,KAAW,CAAjC,EAAiC;AAAA,gBAC7B,OAAO,CAAC,IAAIgQ,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,gCAAhC,CAAD,CAAP,CAD6B;AAAA,aAJN;AAAA,YAO3B,IAAIA,KAAA,CAAM,CAAN,EAASA,KAAT,KAAmB,KAAW,CAAlC,EAAkC;AAAA,gBAC9B,OAAO,CAAC,IAAI4/B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,iCAAhC,CAAD,CAAP,CAD8B;AAAA,aAPP;AAAA,YAW3B,MAAM4iC,kBAAA,GAAqB5L,QAAA,CAASh3B,KAAA,CAAM,CAAN,CAAA,CAAS4vB,IAAlB,CAA3B,CAX2B;AAAA,YAYvB,IAAA,OAAOgT,kBAAP,KAA8B,QAA9B,EAAwC;AAAA,gBACjC,OAAA,CAAC,IAAIhD,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAA,CAAM,CAAN,EAAS4vB,IAAlC,EAAwC,kCAAxC,CAAD,CAAA,CADiC;AAAA,aAZjB;AAAA,YAgBvB,IAAAyS,sBAAA,IAA0BA,sBAAA,GAAyBO,kBAAnD,EAAuE;AAAA,gBAChE,OAAA,CAAC,IAAIhD,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAA,CAAM,CAAN,EAAS4vB,IAAlC,EAAwC,iDAAxC,CAAD,CAAA,CADgE;AAAA,aAhBhD;AAAA,YAmB3B,IAAIgT,kBAAA,KAAuBP,sBAA3B,EAAmD;AAAA,gBACtBA,sBAAA,GAAAO,kBAAA,CADsB;AAAA,gBAErBR,uBAAA,GAAA,KAAA,CAAA,CAFqB;AAAA,gBAG/CD,gBAAA,GAAmB,EAAnB,CAH+C;AAAA,aAnBxB;AAAA,YAwB3BxuB,OAAAA,GAASA,OAAAA,CAAOjP,MAAPiP,CAAcqsB,cAAA,CAAe;AAAA,gBAClClgC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,GAAN,CAD6B;AAAA,gBAElCE,KAAA,EAAOA,KAAA,CAAM,CAAN,CAF2B;AAAA,gBAGlCkgC,SAAA,EAAW,EAACtQ,IAAA,EAAM,EAAP,EAHuB;AAAA,gBAIlCtvB,KAAA,EAAOtC,QAAAA,CAAQsC,KAJmB;AAAA,gBAKlC+/B,SAAA,EAAWriC,QAAAA,CAAQqiC,SALe;AAAA,gBAMlCD,uBAAA,EAAyB;AAAA,oBAACxQ,IAAA,EAAMiS,cAAP;AAAA,oBAAuB7hC,KAAA,EAAO6iC,uBAA9B;AAAA,iBANS;AAAA,aAAf,CAAdlvB,CAATA,CAxB2B;AAAA,SAA/B,MAgCO;AAAA,YACHA,OAAAA,GAASA,OAAAA,CAAOjP,MAAPiP,CAAckvB,uBAAA,CAAwB;AAAA,gBAC3C/iC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,GAAN,CADsC;AAAA,gBAE3CE,KAAA,EAAOA,KAAA,CAAM,CAAN,CAFoC;AAAA,gBAG3CkgC,SAAA,EAAW,EAHgC;AAAA,gBAI3C5/B,KAAA,EAAOtC,QAAAA,CAAQsC,KAJ4B;AAAA,gBAK3C+/B,SAAA,EAAWriC,QAAAA,CAAQqiC,SALwB;AAAA,aAAxB,EAMpBrgC,KANoB,CAAd2T,CAATA,CADG;AAAA,SA7C+C;AAAA,QAuDtD,IAAIqgB,YAAA,CAAakD,YAAA,CAAal3B,KAAA,CAAM,CAAN,CAAb,CAAb,CAAJ,EAA0C;AAAA,YACtC,OAAO2T,OAAAA,CAAOjP,MAAPiP,CAAc,CAAC,IAAIisB,eAAJ,CAAoB,CAAA,GAAG9/B,GAAH,EAAM,GAAN,CAApB,EAAiCE,KAAA,CAAM,CAAN,CAAjC,EAA2C,gDAA3C,CAAD,CAAd2T,CAAP,CADsC;AAAA,SAvDY;AAAA,QA2D/CA,OAAAA,OAAAA,CAAOjP,MAAPiP,CAAc2tB,QAAA,CAAS;AAAA,YAC1BxhC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,GAAN,CADqB;AAAA,YAE1BE,KAAA,EAAOA,KAAA,CAAM,CAAN,CAFmB;AAAA,YAG1BkgC,SAAA,EAAW+B,iBAHe;AAAA,YAI1B3hC,KAAA,EAAOtC,QAAAA,CAAQsC,KAJW;AAAA,YAK1B+/B,SAAA,EAAWriC,QAAAA,CAAQqiC,SALO;AAAA,SAAT,CAAd1sB,CAAAA,CA3D+C;AAAA,KA7EY;AAAA,IAiJ7D,SAAAkvB,uBAAA,CAAwB7kC,QAAxB,EAAoDmF,IAApD,EAA+D;AAAA,QAC9D,MAAAxB,IAAA,GAAOuO,OAAA,CAAQlS,QAAAA,CAAQgC,KAAhB,CAAP,CAD8D;AAAA,QAE9D,MAAAA,KAAA,GAAQg3B,QAAA,CAASh5B,QAAAA,CAAQgC,KAAjB,CAAR,CAF8D;AAAA,QAIpE,MAAM8iC,WAAA,GAAc9kC,QAAAA,CAAQgC,KAARhC,KAAkB,IAAlBA,GAAyBA,QAAAA,CAAQgC,KAAjChC,GAAyCmF,IAA7D,CAJoE;AAAA,QAMpE,IAAI,CAAC++B,WAAL,EAAkB;AAAA,YACAA,WAAA,GAAAvgC,IAAA,CADA;AAAA,SAAlB,MAEA,IAAWA,IAAA,KAASugC,WAApB,EAAiC;AAAA,YACtB,OAAA,CAAC,IAAItC,eAAJ,CAAoB5hC,QAAAA,CAAQ8B,GAA5B,EAAiCgjC,WAAjC,EAA8C,CAAGnhC,GAAAA,IAAH,EAAO,uDAAP,GAAiEugC,WAAjE,EAA9C,CAAA,CAAD,CAAA,CADsB;AAAA,SARmC;AAAA,QAYpE,IAAIvgC,IAAA,KAAS,QAAT,IAAqBA,IAAA,KAAS,QAA9B,IAA0CA,IAAA,KAAS,SAAnD,IAAgE,OAAO3B,KAAP,KAAiB,QAAjF,IAA6F,OAAOA,KAAP,KAAiB,QAA9G,IAA0H,OAAOA,KAAP,KAAiB,SAA/I,EAA0J;AAAA,YACtJ,OAAO,CAAC,IAAI4/B,eAAJ,CAAoB5hC,QAAAA,CAAQ8B,GAA5B,EAAiCgjC,WAAjC,EAA8C,wDAA9C,CAAD,CAAP,CADsJ;AAAA,SAZtF;AAAA,QAgBhE,IAAAnhC,IAAA,KAAS,QAAT,IAAqB20B,YAAA,KAAiB,aAAtC,EAAqD;AAAA,YACjD,IAAAvxB,OAAA,GAAU,kBAAA,GAAoBpD,IAApB,EAAwB,MAAxB,CAAV,CADiD;AAAA,YAErD,IAAIuvB,0BAAA,CAA2B+Q,iBAA3B,KAAiD3L,YAAA,KAAiB,KAAW,CAAjF,EAAiF;AAAA,gBAClEvxB,OAAA,IAAA,mFAAA,CADkE;AAAA,aAF5B;AAAA,YAKrD,OAAO,CAAC,IAAI66B,eAAJ,CAAoB5hC,QAAAA,CAAQ8B,GAA5B,EAAiCgjC,WAAjC,EAA8C/9B,OAA9C,CAAD,CAAP,CALqD;AAAA,SAhBW;AAAA,QAwBpE,IAAIuxB,YAAA,KAAiB,aAAjB,IAAkC30B,IAAA,KAAS,QAA3C,KAAwD,OAAO3B,KAAP,KAAiB,QAAjB,IAA6B,CAAC+iC,QAAA,CAAS/iC,KAAT,CAA9B,IAAiDmH,IAAA,CAAK2C,KAAL,CAAW9J,KAAX,CAAA,KAAsBA,KAAvE,CAA5D,EAA2I;AAAA,YAChI,OAAA,CAAC,IAAI4/B,eAAJ,CAAoB5hC,QAAAA,CAAQ8B,GAA5B,EAAiCgjC,WAAjC,EAA8C,CAAA,wBAAA,GAA2B30B,MAAA,CAAOnO,KAAP,CAA3B,EAAA,CAA9C,CAAD,CAAA,CADgI;AAAA,SAxBvE;AAAA,QA4BpE,IAAIs2B,YAAA,KAAiB,aAAjB,IAAkC30B,IAAA,KAAS,QAA3C,IAAuD,OAAO3B,KAAP,KAAiB,QAAxE,IAAoF,OAAOoiC,uBAAP,KAAmC,QAAvH,IAAmIA,uBAAA,KAA4B,KAAA,CAA/J,IAA4KpiC,KAAA,GAAQoiC,uBAAxL,EAAiN;AAAA,YAC7M,OAAO,CAAC,IAAIxC,eAAJ,CAAoB5hC,QAAAA,CAAQ8B,GAA5B,EAAiCgjC,WAAjC,EAA8C,mDAA9C,CAAD,CAAP,CAD6M;AAAA,SAAjN,MAEO;AAAA,YACuBV,uBAAA,GAAApiC,KAAA,CADvB;AAAA,SA9B6D;AAAA,QAkChE,IAAAs2B,YAAA,KAAiB,aAAjB,IAAmCt2B,KAAA,IAAiBmiC,gBAApD,EAAsE;AAAA,YACtE,OAAO,CAAC,IAAIvC,eAAJ,CAAoB5hC,QAAAA,CAAQ8B,GAA5B,EAAiCgjC,WAAjC,EAA8C,mCAA9C,CAAD,CAAP,CADsE;AAAA,SAAtE,MAEG;AAAA,YACHX,gBAAA,CAAkBniC,KAAlB,CAAA,GAAmC,IAAnC,CADG;AAAA,SApC6D;AAAA,QAwCpE,OAAO,EAAP,CAxCoE;AAAA,KAjJF;AAAA,IA4LtE,SAAS0iC,uBAAT,CAAiC1kC,QAAjC,EAA6D;AAAA,QACzD,OAAOsjC,QAAA,CAAS;AAAA,YACZxhC,GAAA,EAAK9B,QAAAA,CAAQ8B,GADD;AAAA,YAEZE,KAAA,EAAOhC,QAAAA,CAAQgC,KAFH;AAAA,YAGZkgC,SAAA,EAAW+B,iBAHC;AAAA,YAIZ3hC,KAAA,EAAOtC,QAAAA,CAAQsC,KAJH;AAAA,YAKZ+/B,SAAA,EAAWriC,QAAAA,CAAQqiC,SALP;AAAA,SAAT,CAAP,CADyD;AAAA,KA5LS;AAAA;;ACR1E,SAAwB2C,kBAAxB,CAA2ChlC,OAA3C,EAAiF;AAAA,IACvE,MAAAoH,UAAA,GAAc,CAAApH,OAAA,CAAQilC,iBAAR,KAA8B,UAA9B,GAA2CxO,wBAA3C,GAAsER,gBAAtE,EAAwFiD,YAAA,CAAal5B,OAAA,CAAQgC,KAArB,CAAtG,EAAmIhC,OAAA,CAAQkiC,SAA3I,CAAA,CADuE;AAAA,IAEzE,IAAA96B,UAAA,CAAWhF,MAAX,KAAsB,OAAtB,EAA+B;AAAA,QAC/B,OAAOgF,UAAA,CAAWpF,KAAX,CAAiBU,GAAjB,CAAsB6N,KAAD,IAAW;AAAA,YACnC,OAAO,IAAIqxB,eAAJ,CAAoB,IAAG5hC,OAAA,CAAQ8B,GAAX,EAAA,GAAiByO,KAAA,CAAMzO,GAAvB,EAApB,CAAA,EAAkD9B,OAAA,CAAQgC,KAA1D,EAAiEuO,KAAA,CAAMxJ,OAAvE,CAAP,CADmC;AAAA,SAAhC,CAAP,CAD+B;AAAA,KAF0C;AAAA,IAQ7E,MAAMm+B,aAAA,GAAiB99B,UAAA,CAAWpF,KAAX,CAAyBoF,UAAzB,IAAwCA,UAAA,CAAWpF,KAAX,CAAyBs0B,gBAAzB,CAA0ClvB,UAAzG,CAR6E;AAAA,IAUzE,IAAApH,OAAA,CAAQilC,iBAAR,KAA8B,UAA9B,IAA6CjlC,OAAA,CAAQmlC,WAAR,KAAwB,WAArE,IACA,CAACD,aAAA,CAAcv0B,aAAd,EADD,EACgC;AAAA,QACzB,OAAA,CAAC,IAAIixB,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,CAAgC,6BAAhC,GAAgChC,OAAA,CAAQmlC,WAAxC,EAAmD,qEAAnD,CAAhD,CAAD,CAAA,CADyB;AAAA,KAXyC;AAAA,IAezE,IAAAnlC,OAAA,CAAQilC,iBAAR,KAA8B,UAA9B,IAA4CjlC,OAAA,CAAQ0D,YAAR,KAAyB,QAArE,IACC,CAACojB,eAAA,CAAgBoe,aAAhB,CADF,EACmC;AAAA,QAC5B,OAAA,CAAC,IAAItD,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,4EAAhD,CAAD,CAAA,CAD4B;AAAA,KAhBsC;AAAA,IAoBzE,IAAAhC,OAAA,CAAQilC,iBAAR,KAA8B,QAA9B,EAAwC;AAAA,QACjC,OAAAG,0BAAA,CAA2BF,aAA3B,EAA0CllC,OAA1C,CAAA,CADiC;AAAA,KApBiC;AAAA,IAwB7E,IAAIA,OAAA,CAAQilC,iBAAR,IAA6BjlC,OAAA,CAAQilC,iBAAR,CAA0B9gC,OAA1B,CAAkC,SAAlC,CAAA,KAAiD,CAAlF,EAAqF;AAAA,QACjF,IAAI,CAAC+iB,wBAAA,CAAyBge,aAAzB,EAAwC;AAAA,gBAAC,MAAD;AAAA,gBAAS,eAAT;AAAA,aAAxC,CAAL,EAAyE;AAAA,YAC9D,OAAA,CAAC,IAAItD,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,mFAAhD,CAAD,CAAA,CAD8D;AAAA,SADQ;AAAA,QAIjF,IAAIhC,OAAA,CAAQilC,iBAAR,KAA8B,iBAA9B,IAAmD,CAACre,iBAAA,CAAkBse,aAAlB,CAAxD,EAA0F;AAAA,YAC/E,OAAA,CAAC,IAAItD,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,gGAAhD,CAAD,CAAA,CAD+E;AAAA,SAJT;AAAA,KAxBR;AAAA,IAiC7E,OAAO,EAAP,CAjC6E;AAAA,CARjF;AA4CgB,SAAAojC,0BAAA,CAA2Bv6B,CAA3B,EAA0C7K,OAA1C,EAAgF;AAAA,IACtF,MAAAqlC,oBAAA;QAA2Bpe,IAAI;AAAA,QACjC,MADiC;AAAA,QAEjC,eAFiC;AAAA,QAGjC,OAHiC;AAAA,QAIjC,sBAJiC;AAAA,MAA/B,CADsF;AAAA,IAQ5F,IAAIjnB,OAAA,CAAQkiC,SAAR,IAAqBliC,OAAA,CAAQkiC,SAAR,CAAkB96B,UAA3C,EAAuD;AAAA,QACnD,KAAA,MAAW2zB,KAAX,IAAoB/6B,OAAA,CAAQkiC,SAAR,CAAkB96B,UAAlB,CAA6B6rB,UAAjD,EAA6D;AAAA,YACzDoS,oBAAA,CAAqBC,MAArB,CAA4BvK,KAA5B,CADyD,CAAA;AAAA,SADV;AAAA,KARqC;AAAA,IAcxF,IAAAsK,oBAAA,CAAqBvkB,IAArB,KAA8B,CAA9B,EAAiC;AAAA,QACjC,OAAO,EAAP,CADiC;AAAA,KAduD;AAAA,IAiB5F,MAAMnL,MAAA,GAAS,EAAf,CAjB4F;AAAA,IAmB5F,IAAI9K,CAAA,YAAagK,kBAAjB,EAAqC;AAAA,QACjC,IAAIwwB,oBAAA,CAAqB/9B,GAArB,CAAyBuD,CAAA,CAAE1D,IAA3B,CAAJ,EAAsC;AAAA,YAClC,OAAO,CAAC,IAAIy6B,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiC9B,OAAA,CAAQgC,KAAzC,EAAgD,CAAK,EAAL,GAAK6I,CAAA,CAAE1D,IAAP,EAA+D,iDAA/D,GAA+DnH,OAAA,CAAQ+Q,MAAR,CAAepN,IAA9E,EAAkF,gBAAlF,GAAqG3D,OAAA,CAAQ+Q,MAAR,CAAehN,EAApH,EAAhD,CAAA,CAAD,CAAP,CADkC;AAAA,SADL;AAAA,KAnBuD;AAAA,IAwB1F8G,CAAA,CAAA6F,SAAA,CAAWW,GAAD,IAAS;AAAA,QACjBsE,MAAA,CAAOhU,IAAP,CAAY,GAAGyjC,0BAAA,CAA2B/zB,GAA3B,EAAgCrR,OAAhC,CAAf,CADiB,CAAA;AAAA,KAAnB,CAxB0F,CAAA;AAAA,IA4BrF,OAAA2V,MAAA,CA5BqF;AAAA;;ACvChG,SAAwB4vB,eAAxB,CAAwCvlC,OAAxC,EAA4F;AAAA,IACxF,MAAMgC,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CADwF;AAAA,IAExF,MAAMF,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAFwF;AAAA,IAGlF,MAAA6B,IAAA,GAAOuO,OAAA,CAAQlQ,KAAR,CAAP,CAHkF;AAAA,IAKxF,IAAI2B,IAAA,KAAS,SAAb,EAAwB;AAAA,QACb,OAAA,CAAC,IAAIi+B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAqB,kBAArB,GAAqB2B,IAArB,QAAA,CAAhC,CAAD,CAAA,CADa;AAAA,KALgE;AAAA,IASxF,OAAO,EAAP,CATwF;AAAA;;ACC5F,SAAwB6hC,aAAxB,CAAsCxlC,OAAtC,EAA0F;AAAA,IACtF,MAAM8B,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CADsF;AAAA,IAEtF,MAAME,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CAFsF;AAAA,IAGhF,MAAA2B,IAAA,GAAOuO,OAAA,CAAQlQ,KAAR,CAAP,CAHgF;AAAA,IAKtF,IAAI2B,IAAA,KAAS,QAAb,EAAuB;AAAA,QACZ,OAAA,CAAC,IAAIi+B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAmB,gBAAnB,GAAmB2B,IAAnB,QAAA,CAAhC,CAAD,CAAA,CADY;AAAA,KAL+D;AAAA,IASlF,IAAAqG,mCAAA,CAAchI,KAAd,CAAA,KAAyB,IAAzB,EAA+B;AAAA,QACxB,OAAA,CAAC,IAAI4/B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAoB,iBAApB,GAAoBA,KAApB,SAAA,CAAhC,CAAD,CAAA,CADwB;AAAA,KATmD;AAAA,IAatF,OAAO,EAAP,CAbsF;AAAA;;ACD1F,SAAwByjC,YAAxB,CAAqCzlC,OAArC,EAAyF;AAAA,IACrF,MAAM8B,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CADqF;AAAA,IAErF,MAAME,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CAFqF;AAAA,IAGrF,MAAMkgC,SAAA,GAAYliC,OAAA,CAAQkiC,SAA1B,CAHqF;AAAA,IAIrF,MAAMvsB,MAAA,GAAS,EAAf,CAJqF;AAAA,IAMrF,IAAIlU,KAAA,CAAMC,OAAN,CAAcwgC,SAAA,CAAU/b,MAAxB,CAAJ,EAAqC;AAAA,QACjC,IAAI+b,SAAA,CAAU/b,MAAV,CAAiBhiB,OAAjB,CAAyB60B,QAAA,CAASh3B,KAAT,CAAzB,CAA8C,KAAA,CAAI,CAAtD,EAAsD;AAAA,YAClD2T,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,kBAAA,GAAoBkgC,SAAA,CAAU/b,MAAV,CAAiBlkB,IAAjB,CAAsB,IAAtB,CAApB,EAAqD,GAArD,GAAqD/B,IAAA,CAAKJ,SAAL,CAAekC,KAAf,CAArD,QAAA,CAAhC,CAAZ,CADkD,CAAA;AAAA,SADrB;AAAA,KAArC,MAIO;AAAA,QACC,IAAAH,MAAA,CAAOD,IAAP,CAAYsgC,SAAA,CAAU/b,MAAtB,CAAA,CAA8BhiB,OAA9B,CAAsC60B,QAAA,CAASh3B,KAAT,CAAtC,CAAqE,KAAA,CAAI,CAAzE,EAAyE;AAAA,YAClE2T,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAoB,iBAApB,GAAoBH,MAAA,CAAOD,IAAP,CAAYsgC,SAAA,CAAU/b,MAAtB,EAA8BlkB,IAA9B,CAAmC,IAAnC,CAApB,EAAkE,GAAlE,GAAkE/B,IAAA,CAAKJ,SAAL,CAAekC,KAAf,CAAlE,QAAA,CAAhC,CAAL,CADkE,CAAA;AAAA,SAD1E;AAAA,KAV8E;AAAA,IAe9E,OAAA2T,MAAA,CAf8E;AAAA;;ACazF,SAAwB+vB,cAAxB,CAAuC1lC,OAAvC,EAAiF;AAAA,IAC7E,IAAIo5B,kBAAA,CAAmBF,YAAA,CAAal5B,OAAA,CAAQgC,KAArB,CAAnB,CAAJ,EAAqD;AAAA,QAE3C,MAAAs3B,SAAA,GAAYt5B,OAAA,CAAQs5B,SAAR,IAAqB,MAAjC,CAF2C;AAAA,QAIjD,OAAO0L,kBAAA,CAAmBhR,MAAA,CAAO,EAAP,EAAWh0B,OAAX,EAAoB;AAAA,YAC1CilC,iBAAA,EAAmB,QADuB;AAAA,YAE1C/C,SAAA,EAAWliC,OAAA,CAAQqiC,SAAR,CAAkB,CAAA,OAAA,GAAU/I,SAAV,EAAA,CAAlB,CAF+B;AAAA,SAApB,CAAnB,CAAP,CAJiD;AAAA,KAArD,MAQO;AAAA,QACH,OAAOqM,2BAAA,CAA4B3lC,OAA5B,CAAP,CADG;AAAA,KATsE;AAAA,CAlBjF;AAgCA,SAAS2lC,2BAAT,CAAqC3lC,OAArC,EAAuD;AAAA,IACnD,MAAMgC,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CADmD;AAAA,IAEnD,MAAMF,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAFmD;AAAA,IAI/C,IAAAoQ,OAAA,CAAQlQ,KAAR,CAAA,KAAmB,OAAnB,EAA4B;AAAA,QACrB,OAAA,CAAC,IAAI4/B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,iBAAA,GAAmBkQ,OAAA,CAAQlQ,KAAR,CAAnB,EAAiC,MAAjC,CAAhC,CAAD,CAAA,CADqB;AAAA,KAJmB;AAAA,IAQnD,MAAMqgC,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CARmD;AAAA,IAS/C,IAAA1+B,IAAA,CAT+C;AAAA,IAWnD,IAAIgS,MAAA,GAAS,EAAb,CAXmD;AAAA,IAa/C,IAAA3T,KAAA,CAAMlB,MAAN,GAAe,CAAf,EAAkB;AAAA,QAClB,OAAO,CAAC,IAAI8gC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,2CAAhC,CAAD,CAAP,CADkB;AAAA,KAb6B;AAAA,IAiB1C2T,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc++B,YAAA,CAAa;AAAA,QAChC3jC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,GAAN,CAD2B;AAAA,QAEhCE,KAAA,EAAOA,KAAA,CAAM,CAAN,CAFyB;AAAA,QAGhCkgC,SAAA,EAAWG,SAAA,CAAUuD,eAHW;AAAA,QAIhCtjC,KAAA,EAAOtC,OAAA,CAAQsC,KAJiB;AAAA,QAKhC+/B,SAAA,EAAWriC,OAAA,CAAQqiC,SALa;AAAA,KAAb,CAAd,CAAA,CAjB0C;AAAA,IAyBnD,QAAQrJ,QAAA,CAASh3B,KAAA,CAAM,CAAN,CAAT,CAAR;AAAA,IACA,KAAK,GAAL,CADA;AAAA,IAEA,KAAK,IAAL,CAFA;AAAA,IAGA,KAAK,GAAL,CAHA;AAAA;AAKA,IAAA,KAAK,IAAL;AAAA,QACQ,IAAAA,KAAA,CAAMlB,MAAN,IAAgB,CAAhB,IAAqBk4B,QAAA,CAASh3B,KAAA,CAAM,CAAN,CAAT,CAAA,KAAuB,OAA5C,EAAqD;AAAA,YAC9C2T,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,sCAAA,GAAwCA,KAAA,CAAM,CAAN,CAAxC,EAAgD,CAAhD,CAAhC,CAAL,CAD8C,CAAA;AAAA,SAN7D;AAAA;AAUA,IAAA,KAAK,IAAL,CAVA;AAAA;AAYA,IAAA,KAAK,IAAL;AAAA,QACQ,IAAAA,KAAA,CAAMlB,MAAN,KAAiB,CAAjB,EAAoB;AAAA,YACb6U,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,4BAAA,GAA8BA,KAAA,CAAM,CAAN,CAA9B,EAAsC,sBAAtC,CAAhC,CAAL,CADa,CAAA;AAAA,SAb5B;AAAA;AAiBA,IAAA,KAAK,IAAL,CAjBA;AAAA,IAkBA,KAAK,KAAL;AAAA,QACQ,IAAAA,KAAA,CAAMlB,MAAN,IAAgB,CAAhB,EAAmB;AAAA,YACZ6C,IAAA,GAAAuO,OAAA,CAAQlQ,KAAA,CAAM,CAAN,CAAR,CAAA,CADY;AAAA,YAEnB,IAAI2B,IAAA,KAAS,QAAb,EAAuB;AAAA,gBACnBgS,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,CAAG9/B,GAAAA,GAAH,EAAM,GAAN,CAApB,EAAiCE,KAAA,CAAM,CAAN,CAAjC,EAA2C,CAAA,iBAAA,GAAoB2B,IAApB,EAAwB,MAAxB,CAA3C,CAAZ,CADmB,CAAA;AAAA,aAFJ;AAAA,SAD3B;AAAA,QAOI,KAAA,IAASZ,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIf,KAAA,CAAMlB,MAA1B,EAAkCiC,CAAA,EAAlC,EAAuC;AAAA,YAC5BY,IAAA,GAAAuO,OAAA,CAAQlQ,KAAA,CAAMe,CAAN,CAAR,CAAA,CAD4B;AAAA,YAEnC,IAAIi2B,QAAA,CAASh3B,KAAA,CAAM,CAAN,CAAT,CAAuB,KAAA,OAA3B,EAAoC;AAAA,gBACvB2T,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc++B,YAAA,CAAa;AAAA,oBAChC3jC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,CAAN,GAAUiB,CAAV,EAAW,CAAX,CAD2B;AAAA,oBAEhCf,KAAA,EAAOA,KAAA,CAAMe,CAAN,CAFyB;AAAA,oBAGhCm/B,SAAA,EAAWG,SAAA,CAAUwD,aAHW;AAAA,oBAIhCvjC,KAAA,EAAOtC,OAAA,CAAQsC,KAJiB;AAAA,oBAKhC+/B,SAAA,EAAWriC,OAAA,CAAQqiC,SALa;AAAA,iBAAb,CAAd,CAAA,CADuB;AAAA,aAApC,UAQW1+B,IAAA,KAAS,QAAT,IAAqBA,IAAA,KAAS,QAA9B,IAA0CA,IAAA,KAAS,WAAW;AAAA,gBACrEgS,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,CAAA,GAAG9/B,GAAH,EAAU,CAAV,GAAUiB,CAAV,EAAgB,CAAhB,CAApB,EAAoCf,KAAA,CAAMe,CAAN,CAApC,EAA8C,CAAwC,qCAAxC,GAAwCY,IAAxC,QAAA,CAA9C,CAAZ,CADqE,CAAA;AAAA,aAVtC;AAAA,SAP3C;AAAA,QAqBI,MAvCJ;AAAA,IAyCA,KAAK,KAAL,CAzCA;AAAA,IA0CA,KAAK,KAAL,CA1CA;AAAA,IA2CA,KAAK,MAAL;AAAA,QACI,KAAA,IAASZ,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIf,KAAA,CAAMlB,MAA1B,EAAkCiC,CAAA,EAAlC,EAAuC;AAAA,YAC1B4S,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAci/B,2BAAA,CAA6B;AAAA,gBAChD7jC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,CAAN,GAAUiB,CAAV,EAAW,CAAX,CAD2C;AAAA,gBAEhDf,KAAA,EAAOA,KAAA,CAAMe,CAAN,CAFyC;AAAA,gBAGhDT,KAAA,EAAOtC,OAAA,CAAQsC,KAHiC;AAAA,gBAIhD+/B,SAAA,EAAWriC,OAAA,CAAQqiC,SAJ6B;AAAA,aAA7B,CAAd,CAAA,CAD0B;AAAA,SAD3C;AAAA,QASI,MApDJ;AAAA,IAsDA,KAAK,KAAL,CAtDA;AAAA,IAuDA,KAAK,MAAL;AAAA,QACW1+B,IAAA,GAAAuO,OAAA,CAAQlQ,KAAA,CAAM,CAAN,CAAR,CAAA,CADX;AAAA,QAEQ,IAAAA,KAAA,CAAMlB,MAAN,KAAiB,CAAjB,EAAoB;AAAA,YACb6U,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,mBAAA,GAAqBA,KAAA,CAAM,CAAN,CAArB,EAA6B,+BAA7B,CAAhC,CAAL,CADa,CAAA;AAAA,SAApB,MAEJ,IAAW2B,IAAA,KAAS,QAApB,EAA8B;AAAA,YAC1BgS,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,CAAG9/B,GAAAA,GAAH,EAAM,GAAN,CAApB,EAAiCE,KAAA,CAAM,CAAN,CAAjC,EAA2C,CAAA,iBAAA,GAAoB2B,IAApB,EAAwB,MAAxB,CAA3C,CAAZ,CAD0B,CAAA;AAAA,SAJlC;AAAA,QAOI,MA9DJ;AAAA,KAzBmD;AAAA,IAyF5C,OAAAgS,MAAA,CAzF4C;AAAA;;ACf/B,SAAAmwB,gBAAA,CAAiB9lC,OAAjB,EAAqD0D,YAArD,EAAmG;AAAA,IACvH,MAAM5B,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CADuH;AAAA,IAEvH,MAAMQ,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAFuH;AAAA,IAGvH,MAAMK,KAAA,GAAQ3C,OAAA,CAAQ2C,KAAtB,CAHuH;AAAA,IAIvH,MAAM0/B,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAJuH;AAAA,IAKvH,MAAMrgC,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CALuH;AAAA,IAMvH,MAAMmjC,WAAA,GAAcnlC,OAAA,CAAQsiC,SAA5B,CANuH;AAAA,IAOvH,MAAMyD,SAAA,GAAY1D,SAAA,CAAU,CAAG3+B,GAAAA,YAAH,EAAmB,CAAnB,GAAmB1D,OAAA,CAAQs5B,SAA3B,EAAA,CAAV,CAAlB,CAPuH;AAAA,IASnH,IAAA,CAACyM,SAAD;AAAA,QAAY,OAAO,EAAP,CATuG;AAAA,IAWjH,MAAAC,eAAA,GAAkBb,WAAA,CAAYlkC,KAAZ,CAAkB,mBAAlB,CAAlB,CAXiH;AAAA,IAYvH,IAAIyC,YAAA,KAAiB,OAAjB,IAA4BsiC,eAA5B,IAA+CD,SAAA,CAAUC,eAAA,CAAgB,CAAhB,CAAV,CAA/C,IAAgFD,SAAA,CAAUC,eAAA,CAAgB,CAAhB,CAAV,CAA8B9E,CAAAA,UAAlH,EAA8H;AAAA,QAC1H,OAAOoC,QAAA,CAAS;AAAA,YACZxhC,GADY;AAAA,YAEZE,KAFY;AAAA,YAGZkgC,SAAA,EAAWG,SAAA,CAAUnB,UAHT;AAAA,YAIZ5+B,KAJY;AAAA,YAKZ+/B,SALY;AAAA,SAAT,CAAP,CAD0H;AAAA,KAZP;AAAA,IAsBvH,MAAMH,SAAA,GAAYliC,OAAA,CAAQkiC,SAAR,IAAqB6D,SAAA,CAAUZ,WAAV,CAAvC,CAtBuH;AAAA,IAuBvH,IAAI,CAACjD,SAAL,EAAgB;AAAA,QACL,OAAA,CAAC,IAAIH,iBAAJ,CAAsBjgC,GAAtB,EAA2BE,KAA3B,EAAkC,CAAqB,kBAArB,GAAqBmjC,WAArB,GAAA,CAAlC,CAAD,CAAA,CADK;AAAA,KAvBuG;AAAA,IA2BnH,IAAAc,UAAA,CA3BmH;AAAA,IA4BvH,IAAI/zB,OAAA,CAAQlQ,KAAR,CAAA,KAAmB,QAAnB,IAA+BkxB,0BAAA,CAA2BgP,SAA3B,CAA/B,IAAwE,CAACA,SAAA,CAAUnK,MAAnF,KAA8FkO,UAAA,GAAa,aAAcnN,CAAAA,IAAd,CAAmB92B,KAAnB,CAAb,CAAlG,EAA2I;AAAA,QACjI,MAAAkkC,OAAA,GAAU,qCAAA,GAAuCD,UAAA,GAAa/lC,IAAA,CAAKJ,SAAL,CAAemmC,UAAA,CAAW,CAAX,CAAf,CAAb,GAA6C,KAApF,EAAyF,IAAzF,CAAV,CADiI;AAAA,QAEvI,OAAO,CAAC,IAAIrE,eAAJ,CACJ9/B,GADI,EACCE,KADD,EAEJ,EAAA,GAAImjC,WAAJ,EAAe;AAAA,2CAAf,GACkDe,OADlD,EACyD,CADzD,CAFI,CAAD,CAAP,CAFuI;AAAA,KA5BpB;AAAA,IAoCvH,MAAMvwB,MAAA,GAAS,EAAf,CApCuH;AAAA,IAsCnH,IAAA3V,OAAA,CAAQs5B,SAAR,KAAsB,QAAtB,EAAgC;AAAA,QAC5B,IAAA6L,WAAA,KAAgB,YAAhB,IAAgC7iC,KAAhC,IAAyC,CAACA,KAAA,CAAM2D,MAAhD,IAA0D,CAAC3D,KAAA,CAAM2+B,OAAjE,EAA0E;AAAA,YAC1EtrB,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,wDAAhC,CAAZ,CAD0E,CAAA;AAAA,SAD9C;AAAA,QAI5B,IAAAmjC,WAAA,KAAgB,WAAhB,IAA+B5gC,UAAA,CAAW20B,YAAA,CAAal3B,KAAb,CAAX,CAA/B,IAAkEg3B,QAAA,CAASh3B,KAAA,CAAM2B,IAAf,CAAA,KAAyB,UAA3F,EAAuG;AAAA,YACvGgS,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,iDAAhC,CAAZ,CADuG,CAAA;AAAA,SAJ3E;AAAA,KAAhC,MAOO,IAAAhC,OAAA,CAAQs5B,SAAR,KAAsB,OAAtB,IAAiC51B,YAAA,KAAiB,OAAlD,IAA6Df,KAA7D,IAAsEA,KAAA,CAAMM,MAA5E,IAAsFN,KAAA,CAAMM,MAAN,CAAai8B,cAAb,CAA4B,UAA5B,CAAtF,EAA+H;AAAA,QAClI,IAAAhM,0BAAA,CAA2BgP,SAA3B,MAA0C9O,uBAAA,CAAwB8O,SAAxB,KAAsC7O,sBAAA,CAAuB6O,SAAvB,CAAtC,CAA1C,EAAoH;AAAA,YAEpH,MAAM96B,UAAA,GAAaqvB,wBAAA,CAAyByC,YAAA,CAAal3B,KAAb,CAAzB,EAA8CkgC,SAA9C,CAAnB,CAFoH;AAAA,YAGpH,MAAMgD,aAAA,GAAiB99B,UAAA,CAAWpF,KAAX,CAAyBoF,UAAzB,IAAwCA,UAAA,CAAWpF,KAAX,CAAyBs0B,gBAAzB,CAA0ClvB,UAAzG,CAHoH;AAAA,YAKpH,IAAI89B,aAAA,IAAiB,CAAChe,wBAAA,CAAyBge,aAAzB,EAAwC,CAAC,eAAD,CAAxC,CAAtB,EAAkF;AAAA,gBAC1E,IAAAC,WAAA,KAAgB,yBAAhB,MAA+Cve,iBAAA,CAAkBse,aAAlB,CAAD,IAAqC,CAACpe,eAAA,CAAgBoe,aAAhB,CAAtC,CAA9C,EAAqH;AAAA,oBAC9GvvB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAGmjC,GAAAA,WAAH,oGAAA,CAAhC,CAAL,CAD8G,CAAA;AAAA,iBAD3C;AAAA,aALkC;AAAA,SADc;AAAA,KA7CnB;AAAA,IA2DhH,OAAAxvB,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,QAC1BxhC,GAAA,EAAK9B,OAAA,CAAQ8B,GADa;AAAA,QAE1BE,KAF0B;AAAA,QAG1BkgC,SAH0B;AAAA,QAI1B5/B,KAJ0B;AAAA,QAK1B+/B,SAL0B;AAAA;AAO1B,QAAA4C,iBAAA,EAAmB,UAPO;AAAA,QAQ1BvhC,YAR0B;AAAA,QAS1ByhC,WAT0B;AAAA,KAAT,CAAd,CAAA,CA3DgH;AAAA;;ACZ3H,SAAwBgB,qBAAxB,CAA8CnmC,OAA9C,EAA0G;AAAA,IAC/F,OAAA8lC,gBAAA,CAAiB9lC,OAAjB,EAA0B,OAA1B,CAAA,CAD+F;AAAA;;ACA1G,SAAwBomC,sBAAxB,CAA+CpmC,OAA/C,EAA2G;AAAA,IAChG,OAAA8lC,gBAAA,CAAiB9lC,OAAjB,EAA0B,QAA1B,CAAA,CADgG;AAAA;;ACY3G,SAAwBqmC,aAAxB,CAAsCrmC,OAAtC,EAAgF;AAAA,IAC5E,IAAI2V,MAAA,GAAS,EAAb,CAD4E;AAAA,IAG5E,MAAMhT,KAAA,GAAQ3C,OAAA,CAAQgC,KAAtB,CAH4E;AAAA,IAI5E,MAAMF,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAJ4E;AAAA,IAK5E,MAAMQ,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAL4E;AAAA,IAM5E,MAAM+/B,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAN4E;AAAA,IAQ5E,IAAI,CAAC1/B,KAAA,CAAMgB,IAAP,IAAe,CAAChB,KAAA,CAAM+5B,GAA1B,EAA+B;AAAA,QAC3B/mB,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAzB,EAAgC,oCAAhC,CAAZ,CAD2B,CAAA;AAAA,KAR6C;AAAA,IAWxE,IAAAgB,IAAA,GAAOq1B,QAAA,CAASr2B,KAAA,CAAMgB,IAAf,CAAP,CAXwE;AAAA,IAYtE,MAAA+4B,GAAA,GAAM1D,QAAA,CAASr2B,KAAA,CAAM+5B,GAAf,CAAN,CAZsE;AAAA,IAc5E,IAAI/5B,KAAA,CAAMoB,EAAV,EAAc;AAAA,QACJ,MAAAu7B,OAAA,GAAUtG,QAAA,CAASr2B,KAAA,CAAMoB,EAAf,CAAV,CADI;AAAA,QAEV,KAAA,IAAShB,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI/C,OAAA,CAAQ4jC,UAA5B,EAAwC7gC,CAAA,EAAxC,EAA6C;AAAA,YACnC,MAAAujC,UAAA,GAAahkC,KAAA,CAAMG,MAAN,CAAaM,CAAb,CAAb,CADmC;AAAA,YAEzC,IAAIi2B,QAAA,CAASsN,UAAA,CAAWviC,EAApB,CAAA,KAA4Bu7B,OAAhC,EAAyC;AAAA,gBAErC3pB,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAMoB,EAA/B,EAAmC,CAAA,oBAAA,GAAuBpB,KAAA,CAAMoB,EAA7B,EAA6D,2BAA7D,GAA6DuiC,UAAA,CAAWviC,EAAX,CAAc+9B,QAA3E,EAAA,CAAnC,CAAZ,CAFqC,CAAA;AAAA,aAFA;AAAA,SAFnC;AAAA,KAd8D;AAAA,IAyB5E,IAAI,KAASn/B,IAAAA,KAAb,EAAoB;AAAA,QACf;AAAA,YAAA,MAAA;AAAA,YAAQ,QAAR;AAAA,YAAkB,cAAlB;AAAA,YAAkC,QAAlC;AAAA,YAA4C,QAA5C;AAAA,SAAsDkB,CAAAA,OAAtD,CAA+D4T,CAAD,IAAO;AAAA,YAClE,IAAIA,CAAA,IAAK9U,KAAT,EAAgB;AAAA,gBACLgT,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAM8U,CAAN,CAAzB,EAAmC,CAAA,CAAA,GAAIA,CAAJ,EAAK,8BAAL,CAAnC,CAAL,CADK,CAAA;AAAA,aADkD;AAAA,SAArE,CADe,CAAA;AAAA,QAOZ,IAAAxQ,MAAA,CAPY;AAAA,QASV3E,KAAA,CAAAG,MAAA,CAAOoB,OAAP,CAAgBlB,MAAD,IAAW;AAAA,YAC5B,IAAIq2B,QAAA,CAASr2B,MAAAA,CAAMoB,EAAf,MAAuB24B,GAA3B;AAAA,gBAAyC/5B,MAAAA,GAAAA,MAAAA,CADb;AAAA,SAA1B,CATU,CAAA;AAAA,QAahB,IAAI,CAACsE,MAAL,EAAa;AAAA,YACT,IAAI,OAAOy1B,GAAP,KAAe,QAAnB;AAAA,gBACW/mB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAM+5B,GAA/B,EAAoC,CAAA,WAAA,GAAcA,GAAd,EAAiB,WAAjB,CAApC,CAAL,CAFF,CAAA;AAAA,SAAb,MAGA,IAAWz1B,MAAA,CAAOy1B,GAAlB,EAAuB;AAAA,YACnB/mB,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAM+5B,GAA/B,EAAoC,wCAApC,CAAZ,CADmB,CAAA;AAAA,SAAvB,MAEO;AAAA,YACI/4B,IAAA,GAAAq1B,QAAA,CAAS/xB,MAAA,CAAOtD,IAAhB,CAAA,CADJ;AAAA,SAlBS;AAAA,KAApB,UAqBW,EAAEA,IAAA,KAAS,YAAT,IAAyBA,IAAA,KAAS,KAAlC,IAA2CA,IAAA,KAAS,MAApD,GAA6D;AAAA,QAClE,IAAA,CAAChB,KAAA,CAAMkC,MAAP,EAAe;AAAA,YACf8Q,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAzB,EAAgC,oCAAhC,CAAZ,CADe,CAAA;AAAA,SAAf,MAEG;AAAA,YACH,MAAMkC,MAAA,GAASvC,KAAA,CAAMgB,OAAN,IAAiBhB,KAAA,CAAMgB,OAAN,CAAcX,KAAA,CAAMkC,MAApB,CAAhC,CADG;AAAA,YAEH,MAAM0hC,UAAA,GAAa1hC,MAAA,IAAUm0B,QAAA,CAASn0B,MAAA,CAAOlB,IAAhB,CAA7B,CAFG;AAAA,YAGH,IAAI,CAACkB,MAAL,EAAa;AAAA,gBACF8Q,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAMkC,MAA/B,EAAuC,CAAW,QAAX,GAAWlC,KAAA,CAAMkC,MAAjB,EAAuB,WAAvB,CAAvC,CAAL,CADE,CAAA;AAAA,aAAb,MAEW,IAAA0hC,UAAA,KAAe,QAAf,IAA2B5iC,IAAA,KAAS,QAApC,EAA8C;AAAA,gBAC9CgS,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAMkC,MAA/B,EAAuC,CAAU,OAAV,GAAUlC,KAAA,CAAMoB,EAAhB,EAAkB,0BAAlB,CAAvC,CAAL,CAD8C,CAAA;AAAA,aAA9C,MAEA,IAAAwiC,UAAA,KAAe,QAAf,IAA2B5iC,IAAA,KAAS,QAApC,EAA8C;AAAA,gBAC9CgS,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAMkC,MAA/B,EAAuC,CAAU,OAAV,GAAUlC,KAAA,CAAMoB,EAAhB,EAAkB,0BAAlB,CAAvC,CAAL,CAD8C,CAAA;AAAA,aAA9C,UAEAwiC,UAAA,KAAe,QAAf,IAA2B,CAAC5jC,KAAA,CAAM,cAAN,GAAuB;AAAA,gBACnDgT,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAzB,EAAgC,CAAU,OAAV,GAAUA,KAAA,CAAMoB,EAAhB,EAAkB,+BAAlB,CAAhC,CAAL,CADmD,CAAA;AAAA,mBAEnD,IAAAwiC,UAAA,KAAe,YAAf,IAA+B5iC,IAAA,KAAS,WAAxC,EAAqD;AAAA,gBAC5DgS,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAMkC,MAA/B,EAAuC,mEAAvC,CAAZ,CAD4D,CAAA;AAAA,aAArD,MAEX,IAAW0hC,UAAA,KAAe,cAAf,IAAiC,CAAC;AAAA,oBAAC,QAAD;AAAA,oBAAW,iBAAX;AAAA,iBAAA,CAA8B7f,QAA9B,CAAuC/iB,IAAvC,CAA7C,EAA2F;AAAA,gBACvFgS,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAMkC,MAA/B,EAAuC,+DAAA,CAAvC,CAAZ,CADuF,CAAA;AAAA,aAA3F,UAEWlB,IAAA,KAAS,MAAT,IAAmBhB,KAAA,CAAMO,KAAzB,KAAmCP,KAAA,CAAMO,KAAN,CAAY,eAAZ,CAAA,IAAgCP,KAAA,CAAMO,KAAN,CAAY,kBAAZ,CAAhC,CAAnC,KACFqjC,UAAA,KAAe,SAAf,IAA4B,CAAE1hC,MAAA,CAAsC2hC,WAApE,GAAkF;AAAA,gBAChF7wB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAzB,EAAgC,CAAU,OAAV,GAAUA,KAAA,CAAMoB,EAAhB,EAAkB,0FAAlB,CAAhC,CAAL,CADgF,CAAA;AAAA,mBAEhF,IAAAJ,IAAA,KAAS,iBAAT,IAA8B4iC,UAAA,KAAe,cAA7C,EAA6D;AAAA,gBAC7D5wB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBa,KAAA,CAAMkC,MAA/B,EAAuC,CAAU,OAAV,GAAUlC,KAAA,CAAMoB,EAAhB,EAAkB,mCAAlB,CAAvC,CAAL,CAD6D,CAAA;AAAA,aAlBrE;AAAA,SAH+D;AAAA,KA9CE;AAAA,IAyEnE4R,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAcs7B,cAAA,CAAe;AAAA,QAClClgC,GADkC;AAAA,QAElCE,KAAA,EAAOW,KAF2B;AAAA,QAGlCu/B,SAAA,EAAWG,SAAA,CAAU1/B,KAHa;AAAA,QAIlCL,KAAA,EAAOtC,OAAA,CAAQsC,KAJmB;AAAA,QAKlC+/B,SAAA,EAAWriC,OAAA,CAAQqiC,SALe;AAAA,QAMlCD,uBAAA,EAAyB;AAAA,YACrB,GAAM,GAAA;AAAA,gBACF,OAAO,EAAP,CADE;AAAA,aADe;AAAA;AAMrB;AAAA,YAAAz+B,IAAA,GAAO;AAAA,gBACH,OAAO++B,QAAA,CAAa;AAAA,oBAChB5gC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,KAAN,CADW;AAAA,oBAEhBE,KAAA,EAAOW,KAAA,CAAMgB,IAFG;AAAA,oBAGhBu+B,SAAA,EAAWG,SAAA,CAAU1/B,KAAV,CAAgBgB,IAHX;AAAA,oBAIhBrB,KAAA,EAAOtC,OAAA,CAAQsC,KAJC;AAAA,oBAKhB+/B,SAAA,EAAWriC,OAAA,CAAQqiC,SALH;AAAA;AAOhB,oBAAAtxB,MAAA,EAAQpO,KAPQ;AAAA,oBAQhB2/B,SAAA,EAAW,MARK;AAAA,iBAAb,CAAP,CADG;AAAA,aANc;AAAA,YAkBrBrc,MAAA,CAAOjmB,QAAP,EAAgB;AAAA,gBACZ,OAAO0lC,cAAA,CAAe1R,MAAA,CAAO,EAACsF,SAAA,EAAW31B,IAAZ,EAAP,EAA0B3D,QAA1B,CAAf,CAAP,CADY;AAAA,aAlBK;AAAA,YAqBrBiD,MAAA,CAAOjD,QAAP,EAAgB;AAAA,gBACZ,OAAOgiC,cAAA,CAAe;AAAA;AAElB,oBAAAr/B,KAFkB;AAAA,oBAGlBb,GAAA,EAAK9B,QAAAA,CAAQ8B,GAHK;AAAA,oBAIlBE,KAAA,EAAOhC,QAAAA,CAAQgC,KAJG;AAAA,oBAKlBkgC,SAAA,EAAW,EALO;AAAA,oBAMlB5/B,KAAA,EAAOtC,QAAAA,CAAQsC,KANG;AAAA,oBAOlB+/B,SAAA,EAAWriC,QAAAA,CAAQqiC,SAPD;AAAA,oBAQlBD,uBAAA,EAAyB;AAAA,wBACrB,GAAA,CAAIpiC,QAAJ,EAAa;AAAA,4BACT,OAAOomC,sBAAA,CAAuBpS,MAAA,CAAO,EAACsF,SAAA,EAAW31B,IAAZ,EAAP,EAA0B3D,QAA1B,CAAvB,CAAP,CADS;AAAA,yBADQ;AAAA,qBARP;AAAA,iBAAf,CAAP,CADY;AAAA,aArBK;AAAA,YAqCrBkD,KAAA,CAAMlD,QAAN,EAAe;AAAA,gBACX,OAAOgiC,cAAA,CAAe;AAAA;AAElB,oBAAAr/B,KAFkB;AAAA,oBAGlBb,GAAA,EAAK9B,QAAAA,CAAQ8B,GAHK;AAAA,oBAIlBE,KAAA,EAAOhC,QAAAA,CAAQgC,KAJG;AAAA,oBAKlBkgC,SAAA,EAAW,EALO;AAAA,oBAMlB5/B,KAAA,EAAOtC,QAAAA,CAAQsC,KANG;AAAA,oBAOlB+/B,SAAA,EAAWriC,QAAAA,CAAQqiC,SAPD;AAAA,oBAQlBD,uBAAA,EAAyB;AAAA,wBACrB,GAAA,CAAIpiC,QAAJ,EAAa;AAAA,4BACF,OAAAmmC,qBAAA,CAAsBnS,MAAA,CAAO;AAAA,gCAACsF,SAAA,EAAW31B,IAAZ;AAAA,gCAAkBhB,KAAlB;AAAA,6BAAP,EAAiC3C,QAAjC,CAAtB,CAAA,CADE;AAAA,yBADQ;AAAA,qBARP;AAAA,iBAAf,CAAP,CADW;AAAA,aArCM;AAAA,SANS;AAAA,KAAf,CAAd,CAAA,CAzEmE;AAAA,IAuIrE,OAAA2V,MAAA,CAvIqE;AAAA;;ACZhF,SAAwB8wB,cAAxB,CAAuCzmC,OAAvC,EAAoG;AAAA,IAChG,MAAMgC,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CADgG;AAAA,IAEhG,MAAMF,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAFgG;AAAA,IAG1F,MAAA6B,IAAA,GAAOuO,OAAA,CAAQlQ,KAAR,CAAP,CAH0F;AAAA,IAKhG,IAAI2B,IAAA,KAAS,QAAb,EAAuB;AAAA,QACZ,OAAA,CAAC,IAAIi+B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,CAAoB,iBAApB,GAAoB2B,IAApB,QAAA,CAAhC,CAAD,CAAA,CADY;AAAA,KALyE;AAAA,IAShG,OAAO,EAAP,CATgG;AAAA;;ACMpG,MAAMy+B,uBAAA,GAA0B,EAC5BsE,SAAA,EAAWC,iBADiB,EAAhC,CAXA;AAeA,SAAwBC,cAAxB,CAAuC5mC,OAAvC,EAA2F;AAAA,IACvF,MAAMgC,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CADuF;AAAA,IAEvF,MAAMF,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAFuF;AAAA,IAGvF,MAAMugC,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAHuF;AAAA,IAIvF,MAAM//B,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAJuF;AAAA,IAMnF,IAAA,CAACN,KAAA,CAAM2B,IAAP,EAAa;AAAA,QACb,OAAO,CAAC,IAAIi+B,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,oBAAhC,CAAD,CAAP,CADa;AAAA,KANsE;AAAA,IAUjF,MAAA2B,IAAA,GAAOq1B,QAAA,CAASh3B,KAAA,CAAM2B,IAAf,CAAP,CAViF;AAAA,IAWvF,IAAIgS,MAAA,GAAS,EAAb,CAXuF;AAAA,IAcnF,IAAA;AAAA,YAAC,QAAD;AAAA,YAAW,QAAX;AAAA,YAAqB,YAArB;AAAA,YAAmC,cAAnC;AAAA,SAAA,CAAmD+Q,QAAnD,CAA4D/iB,IAA5D,CAAA,EAAmE;AAAA,QACnE,IAAI,CAAC3B,KAAA,CAAM8C,GAAP,IAAc,CAAC9C,KAAA,CAAM6kC,KAAzB,EAAgC;AAAA,YAC5BlxB,MAAA,CAAOhU,IAAP,CAAY,IAAIogC,iBAAJ,CAAsBjgC,GAAtB,EAA2BE,KAA3B,EAAkC,sCAAlC,CAAZ,CAD4B,CAAA;AAAA,SADmC;AAAA,KAdgB;AAAA,IAoBvF,QAAQ2B,IAAR;AAAA,IACA,KAAK,QAAL,CADA;AAAA,IAEA,KAAK,QAAL,CAFA;AAAA,IAGA,KAAK,YAAL,CAHA;AAAA,IAIA,KAAK,cAAL;AAAA,QACagS,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAcs7B,cAAA,CAAe;AAAA,YAClClgC,GADkC;AAAA,YAElCE,KAFkC;AAAA,YAGlCkgC,SAAA,EAAWG,SAAA,CAAU,CAAU,OAAV,GAAU1+B,IAAA,CAAK3C,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAV,GAAV,CAHuB;AAAA,YAIlCsB,KAAA,EAAOtC,OAAA,CAAQsC,KAJmB;AAAA,YAKlC+/B,SALkC;AAAA,YAMlCD,uBANkC;AAAA,SAAf,CAAd,CAAA,CADb;AAAA,QASW,OAAAzsB,MAAA,CAbX;AAAA,IAeA,KAAK,SAAL;AAAA,QACIA,MAAA,GAASqsB,cAAA,CAAe;AAAA,YACpBlgC,GADoB;AAAA,YAEpBE,KAFoB;AAAA,YAGpBkgC,SAAA,EAAWG,SAAA,CAAUyE,cAHD;AAAA,YAIpBxkC,KAJoB;AAAA,YAKpB+/B,SALoB;AAAA,YAMpBD,uBANoB;AAAA,SAAf,CAAT,CADJ;AAAA,QASI,IAAIpgC,KAAA,CAAM+kC,OAAV,EAAmB;AAAA,YACJ,WAAA9H,IAAA,IAAQj9B,KAAA,CAAMglC,iBAAd,EAAiC;AAAA,gBACxC,MAAM,CAAChb,QAAD,EAAWib,OAAX,CAAA,GAAsBjlC,KAAA,CAAMglC,iBAAN,CAAwB/H,IAAxB,CAA5B,CADwC;AAAA,gBAExC,MAAMiI,UAAA,GAAa,OAAOlb,QAAP,KAAoB,QAApB,GAA+B;AAAA,oBAACA,QAAD;AAAA,oBAAW,CAAC,aAAD,CAAX;AAAA,oBAA4B;AAAA,wBAAC,KAAD;AAAA,wBAAQiT,IAAR;AAAA,qBAA5B;AAAA,iBAA/B,GAA4EjT,QAA/F,CAFwC;AAAA,gBAIjCrW,MAAA,CAAAhU,IAAA,CAAK,GAAGqjC,kBAAA,CAAmB;AAAA,oBAC9BljC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,CAAN,GAAUm9B,IAAV,EAAc,IAAd,CADyB;AAAA,oBAE9Bj9B,KAAA,EAAOilC,OAFuB;AAAA,oBAG9BhC,iBAAA,EAAmB,aAHW;AAAA,iBAAnB,CAAR,CAJiC,CAAA;AAAA,gBASjCtvB,MAAA,CAAAhU,IAAA,CAAK,GAAGqjC,kBAAA,CAAmB;AAAA,oBAC9BljC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,CAAN,GAAUm9B,IAAV,EAAc,OAAd,CADyB;AAAA,oBAE9Bj9B,KAAA,EAAOklC,UAFuB;AAAA,oBAG9BjC,iBAAA,EAAmB,gBAHW;AAAA,iBAAnB,CAAR,CATiC,CAAA;AAAA,aAD7B;AAAA,SATvB;AAAA,QA0BW,OAAAtvB,MAAA,CAzCX;AAAA,IA2CA,KAAK,OAAL;AAAA,QACI,OAAOqsB,cAAA,CAAe;AAAA,YAClBlgC,GADkB;AAAA,YAElBE,KAFkB;AAAA,YAGlBkgC,SAAA,EAAWG,SAAA,CAAU8E,YAHH;AAAA,YAIlB7kC,KAJkB;AAAA,YAKlB+/B,SALkB;AAAA,SAAf,CAAP,CA5CJ;AAAA,IAoDA,KAAK,OAAL;AAAA,QACI,OAAOL,cAAA,CAAe;AAAA,YAClBlgC,GADkB;AAAA,YAElBE,KAFkB;AAAA,YAGlBkgC,SAAA,EAAWG,SAAA,CAAU+E,YAHH;AAAA,YAIlB9kC,KAJkB;AAAA,YAKlB+/B,SALkB;AAAA,SAAf,CAAP,CArDJ;AAAA,IA6DA,KAAK,QAAL;AAAA,QACI,OAAO,CAAC,IAAIT,eAAJ,CAAoB9/B,GAApB,EAAyB,IAAzB,EAA+B,CAAA,yFAAA,CAA/B,EAA4H,eAA5H,CAAD,CAAP,CA9DJ;AAAA,IAgEA;AAAA,QACI,OAAO2jC,YAAA,CAAa;AAAA,YAChB3jC,GAAA,EAAK,CAAA,GAAGA,GAAH,EAAM,KAAN,CADW;AAAA,YAEhBE,KAAA,EAAOA,KAAA,CAAM2B,IAFG;AAAA,YAGhBu+B,SAAA,EAAW,EAAC/b,MAAA,EAAQkhB,mBAAA,CAAoBhF,SAApB,CAAT,EAHK;AAAA,YAIhB//B,KAJgB;AAAA,YAKhB+/B,SALgB;AAAA,SAAb,CAAP,CAjEJ;AAAA,KApBuF;AAAA,CAf3F;AA8GA,SAASgF,mBAAT,CAA6BhF,SAA7B,EAAwD;AAAA,IAEpD,OAAOA,SAAA,CAAUx9B,MAAV,CAAiBk7B,MAAjB,CAAoC,CAACuH,IAAD,EAAOziC,MAAP,KAAkB;AAAA,QACnD,MAAA0hC,UAAA,GAAalE,SAAA,CAAUx9B,MAAV,CAAb,CADmD;AAAA,QAErD,IAAA0hC,UAAA,CAAW5iC,IAAX,CAAgBA,IAAhB,KAAyB,MAAzB,EAAiC;AAAA,YACjC2jC,IAAA,GAAOA,IAAA,CAAK5gC,MAAL,CAAY7E,MAAA,CAAOD,IAAP,CAAY2kC,UAAA,CAAW5iC,IAAX,CAAgBwiB,MAA5B,CAAZ,CAAP,CADiC;AAAA,SAFoB;AAAA,QAKlD,OAAAmhB,IAAA,CALkD;AAAA,KAAtD,EAMJ,EANI,CAAP,CAFoD;AAAA,CA9GxD;AAyHA,SAASX,iBAAT,CAA2B,CACvB7kC,GADuB,EAEvBE,KAFuB,CAA3B,EAG+B;AAAA,IACvB,IAAAkQ,OAAA,CAAQlQ,KAAR,CAAA,KAAmB,QAAnB,EAA6B;AAAA,QAC7B,OAAOykC,cAAA,CAAe;AAAA,YAAC3kC,GAAD;AAAA,YAAME,KAAN;AAAA,SAAf,CAAP,CAD6B;AAAA,KAA7B,MAEG;AAAA,QACH,MAAM2T,MAAA,GAAS,EAAf,CADG;AAAA,QAEH,KAAWspB,MAAAA,IAAX,IAAmBj9B,KAAnB,EAA0B;AAAA,YACtB2T,MAAA,CAAOhU,IAAP,CAAY,GAAG8kC,cAAA,CAAe;AAAA,gBAAC3kC,GAAA,EAAK,CAAGA,GAAAA,GAAH,EAAU,CAAV,GAAUm9B,IAAV,EAAN,CAAA;AAAA,gBAAwBj9B,KAAA,EAAOA,KAAA,CAAMi9B,IAAN,CAA/B;AAAA,aAAf,CAAf,CADsB,CAAA;AAAA,SAFvB;AAAA,QAKI,OAAAtpB,MAAA,CALJ;AAAA,KAHoB;AAAA;;ACtHf,SAAA4xB,UAAA,CAAW/9B,GAAX,EAAwBg+B,iBAAxB,EAA6D;AAAA,IACzE,MAAMC,UAAA,GAAaj+B,GAAA,CAAIrF,OAAJ,CAAY,KAAZ,CAAA,KAAuB,CAAA,CAA1C,CADyE;AAAA,IAErE,IAAA;AAAA,QACA,IAAIoB,GAAJ,CAAQiE,GAAR,EAAai+B,UAAA,IAAcD,iBAAd,GAAkC,oBAAlC,GAAyD,KAAS,CAA/E,CADA,CAAA;AAAA,QAEO,OAAA,IAAA,CAFP;AAAA,KAAA,QAGKxzB,GAAQ;AAAA,QACN,OAAA,KAAA,CADM;AAAA,KALwD;AAAA,CAN7E;AAgBA,SAAwB0zB,aAAxB,CAAsC1nC,OAAtC,EAA0F;AAAA,IACtF,MAAM8E,GAAA,GAAM9E,OAAA,CAAQgC,KAApB,CADsF;AAAA,IAEtF,IAAI2T,MAAA,GAAS,EAAb,CAFsF;AAAA,IAItF,IAAI,CAAC7Q,GAAL,EAAU;AAAA,QACC,OAAA6Q,MAAA,CADD;AAAA,KAJ4E;AAAA,IAQhF,MAAAhS,IAAA,GAAOuO,OAAA,CAAQpN,GAAR,CAAP,CARgF;AAAA,IAStF,IAAInB,IAAA,KAAS,QAAb,EAAuB;AAAA,QACnBgS,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiCgD,GAAjC,EAAsC,CAAqB,kBAArB,GAAqBnB,IAArB,EAAkC,OAAlC,CAAtC,CAAD,CAAd,CAAT,CADmB;AAAA,QAEZ,OAAAgS,MAAA,CAFY;AAAA,KAT+D;AAAA,IActF,IAAI,CAAC4xB,UAAA,CAAWziC,GAAX,EAAgB,IAAhB,CAAL,EAA4B;AAAA,QACxB6Q,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB5hC,OAAA,CAAQ8B,GAA5B,EAAiCgD,GAAjC,EAAsC,CAAgB,aAAhB,GAAgBA,GAAhB,EAAsB,CAAtB,CAAtC,CAAD,CAAd,CAAT,CADwB;AAAA,KAd0D;AAAA,IAkB/E,OAAA6Q,MAAA,CAlB+E;AAAA;;ACV1F,SAAwBgyB,aAAxB,CAAsC3nC,OAAtC,EAA0F;AAAA,IACtF,MAAMmhC,KAAA,GAAQnhC,OAAA,CAAQgC,KAAtB,CADsF;AAAA,IAEtF,MAAMqgC,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAFsF;AAAA,IAGtF,MAAMuF,SAAA,GAAYvF,SAAA,CAAUlB,KAA5B,CAHsF;AAAA,IAItF,MAAM7+B,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAJsF;AAAA,IAMtF,IAAIqT,MAAA,GAAS,EAAb,CANsF;AAAA,IAQhF,MAAAkyB,QAAA,GAAW31B,OAAA,CAAQivB,KAAR,CAAX,CARgF;AAAA,IAStF,IAAIA,KAAA,KAAU,KAAW,CAAzB,EAAyB;AAAA,QACd,OAAAxrB,MAAA,CADc;AAAA,KAAzB,MAEA,IAAWkyB,QAAA,KAAa,QAAxB,EAAkC;AAAA,QACrBlyB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB,OAApB,EAA6BT,KAA7B,EAAoC,CAAoB,iBAApB,GAAoB0G,QAApB,EAAoC,MAApC,CAApC,CAAD,CAAd,CAAA,CADqB;AAAA,QAEvB,OAAAlyB,MAAA,CAFuB;AAAA,KAXoD;AAAA,IAgBtF,KAAW7T,MAAAA,GAAX,IAAkBq/B,KAAlB,EAAyB;AAAA,QACf,MAAA6E,eAAA,GAAkBlkC,GAAA,CAAIb,KAAJ,CAAU,mBAAV,CAAlB,CADe;AAAA,QAGjB,IAAA+kC,eAAA,IAAmB4B,SAAA,CAAU5B,eAAA,CAAgB,CAAhB,CAAV,CAAnB,IAAoD4B,SAAA,CAAU5B,eAAA,CAAgB,CAAhB,CAAV,CAAA,CAA8B9E,UAAlF,EAA8F;AAAA,YACrFvrB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,gBAC5BxhC,GAD4B;AAAA,gBAE5BE,KAAA,EAAOm/B,KAAA,CAAMr/B,GAAN,CAFqB;AAAA,gBAG5BogC,SAAA,EAAWG,SAAA,CAAUnB,UAHO;AAAA,gBAI5B5+B,KAJ4B;AAAA,gBAK5B+/B,SAL4B;AAAA,aAAT,CAAd,CAAA,CADqF;AAAA,SAA9F,MAQJ,IAAWuF,SAAA,CAAU9lC,GAAV,CAAX,EAA2B;AAAA,YACd6T,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,gBAC5BxhC,GAD4B;AAAA,gBAE5BE,KAAA,EAAOm/B,KAAA,CAAMr/B,GAAN,CAFqB;AAAA,gBAG5BogC,SAAA,EAAW0F,SAAA,CAAU9lC,GAAV,CAHiB;AAAA,gBAI5BQ,KAJ4B;AAAA,gBAK5B+/B,SAL4B;AAAA,aAAT,CAAd,CAAA,CADc;AAAA,SAA3B,MAQO;AAAA,YACH1sB,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB9/B,GAApB,EAAyBq/B,KAAA,CAAMr/B,GAAN,CAAzB,EAAqC,CAAA,kBAAA,GAAqBA,GAArB,EAAwB,CAAxB,CAArC,CAAD,CAAd,CAAT,CADG;AAAA,SAnBc;AAAA,KAhB6D;AAAA,IAwC/E,OAAA6T,MAAA,CAxC+E;AAAA;;ACK1F,SAAwBmyB,cAAxB,CAAuC9nC,OAAvC,EAAiF;AAAA,IAC7E,MAAMmhC,KAAA,GAAQnhC,OAAA,CAAQgC,KAAtB,CAD6E;AAAA,IAE7E,IAAI2T,MAAA,GAAS,EAAb,CAF6E;AAAA,IAI7E,IAAI,CAACwrB,KAAL,EAAY;AAAA,QACD,OAAAxrB,MAAA,CADC;AAAA,KAJiE;AAAA,IAQvE,MAAAhS,IAAA,GAAOuO,OAAA,CAAQivB,KAAR,CAAP,CARuE;AAAA,IAS7E,IAAIx9B,IAAA,KAAS,QAAb,EAAuB;AAAA,QACVgS,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB,UAApB,EAAgCT,KAAhC,EAAuC,CAAoB,iBAApB,GAAoBx9B,IAApB,EAAgC,MAAhC,CAAvC,CAAD,CAAd,CAAA,CADU;AAAA,QAEZ,OAAAgS,MAAA,CAFY;AAAA,KATsD;AAAA,IAc7E,MAAM0sB,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAd6E;AAAA,IAevE,MAAAuF,SAAA,GAAYvF,SAAA,CAAU,UAAV,CAAZ,CAfuE;AAAA,IAgB7E,MAAMvgC,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAhB6E;AAAA,IAiB7E,MAAMQ,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAjB6E;AAAA,IAkBvE,MAAAg/B,MAAA,GAASthC,OAAA,CAAQsC,KAAR,CAAcg/B,MAAvB,CAlBuE;AAAA,IAoB7E,KAAA,MAAWx/B,IAAX,IAAkB;AAAA,YAAC,MAAD;AAAA,YAAS,IAAT;AAAA,SAAlB,EAAkC;AAAA,QAC1B,IAAA,EAAEA,IAAAA,IAAOq/B,KAAPr/B,CAAF,EAAiB;AAAA,YACR6T,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB,UAApB,EAAgCT,KAAhC,EAAuC,CAAoBr/B,iBAApB,GAAoBA,IAApB,EAAkC,SAAlC,CAAvC,CAAD,CAAd,CAAA,CADQ;AAAA,YAEV,OAAA6T,MAAA,CAFU;AAAA,SADS;AAAA,KApB2C;AAAA,IA2BzE,IAAAwrB,KAAA,CAAMx9B,IAAN,IAAc29B,MAAd,EAAsB;AAAA,QACtB,KAAA,IAASv+B,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAI/C,OAAA,CAAQ4jC,UAA5B,EAAwC7gC,CAAA,EAAxC,EAA6C;AAAA,YACnCglC,MAAAA,UAAAA,GAAY/O,QAAA,CAASmI,KAAA,CAAMx9B,IAAf,CAAZokC,CADmC;AAAA,YAEnC,MAAAC,UAAA,GAAa1G,MAAA,CAAOv+B,CAAP,CAAb,CAFmC;AAAA,YAGzC,IAAIi2B,QAAA,CAASgP,UAAA,CAAWrkC,IAApB,CAAA,KAA8BokC,UAAlC,EAA6C;AAAA,gBAEzCpyB,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBq/B,KAAA,CAAMp9B,EAA/B,EAAmC,CAAA,sBAAA,GAAyBo9B,KAAA,CAAMx9B,IAA/B,EAAoE,8BAApE,GAAoEqkC,UAAA,CAAWjkC,EAAX,CAAc+9B,QAAlF,EAAA,CAAnC,CAAZ,CAFyC,CAAA;AAAA,aAHJ;AAAA,SADvB;AAAA,KA3BmD;AAAA,IAsC7E,MAAMiG,SAAA,GAAY,CAAA,iBAAA,GAAoB5G,KAAA,CAAM,MAAN,CAApB,EAAA,CAAlB,CAtC6E;AAAA,IAuCzE,IAAA,EAAE4G,SAAA,IAAa1F,SAAb,CAAF,EAA2B;AAAA,QAC3B1sB,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB,UAApB,EAAgCT,KAAhC,EAAuC,CAAA,mBAAA,GAAsBA,KAAA,CAAM,MAAN,CAAtB,EAAvC,CAAA,CAAD,CAAd,CAAT,CAD2B;AAAA,QAEpB,OAAAxrB,MAAA,CAFoB;AAAA,KAvC8C;AAAA,IA4CvE,MAAAsyB,iBAAA,GAAoB5F,SAAA,CAAU0F,SAAV,CAApB,CA5CuE;AAAA,IA8C7E,KAAWjmC,MAAAA,IAAX,IAAkBq/B,KAAlB,EAAyB;AAAA,QACrB,IAAIr/B,IAAAA,KAAQ,YAAZ,EAA0B;AAAA,YAChB,MAAA8B,UAAA,GAAau9B,KAAA,CAAMr/B,IAAN,CAAb,CADgB;AAAA,YAEhB,MAAAomC,cAAA,GAAiBh2B,OAAA,CAAQtO,UAAR,CAAjB,CAFgB;AAAA,YAGtB,IAAIskC,cAAA,KAAmB,QAAvB,EAAiC;AAAA,gBACpBvyB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB,YAApB,EAAkCh+B,UAAlC,EAA8C,CAAoB,iBAApB,GAAoBskC,cAApB,EAA0C,MAA1C,CAA9C,CAAD,CAAd,CAAA,CADoB;AAAA,gBAEtB,OAAAvyB,MAAA,CAFsB;AAAA,aAHX;AAAA,YAOtB,KAAWwvB,MAAAA,WAAX,IAA0BvhC,UAA1B,EAAsC;AAAA,gBAC9B,IAAA,CAACqkC,iBAAA,CAAkB9C,WAAlB,CAAD,EAAiC;AAAA,oBACjCxvB,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIq7B,iBAAJ,CAAsB/hC,OAAA,CAAQ8B,GAA9B,EAAmC8B,UAAA,CAAWuhC,WAAX,CAAnC,EAA4D,CAAA,kBAAA,GAAqBA,WAArB,EAAgC,CAAhC,CAA5D,CAAD,CAAd,CAAT,CADiC;AAAA,iBAAjC,MAEG;AAAA,oBACMxvB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,wBAC5BxhC,GAAA,EAAKqjC,WADuB;AAAA,wBAE5BnjC,KAAA,EAAO4B,UAAA,CAAWuhC,WAAX,CAFqB;AAAA,wBAG5BjD,SAAA,EAAW+F,iBAAA,CAAkB9C,WAAlB,CAHiB;AAAA,wBAI5B7iC,KAJ4B;AAAA,wBAK5B+/B,SAL4B;AAAA,qBAAT,CAAd,CAAA,CADN;AAAA,iBAH2B;AAAA,aAPhB;AAAA,SAA1B,MAoBO;AAAA,YACG,MAAA2D,eAAA,GAAkBlkC,IAAAA,CAAIb,KAAJa,CAAU,mBAAVA,CAAlB,CADH;AAAA,YAEC,IAAAkkC,eAAA,IAAmB4B,SAAA,CAAU5B,eAAA,CAAgB,CAAhB,CAAV,CAAnB,IAAoD4B,SAAA,CAAU5B,eAAA,CAAgB,CAAhB,CAAV,CAAA,CAA8B9E,UAAlF,EAA8F;AAAA,gBACrFvrB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,oBAC5BxhC,GAAA,EAAAA,IAD4B;AAAA,oBAE5BE,KAAA,EAAOm/B,KAAA,CAAMr/B,IAAN,CAFqB;AAAA,oBAG5BogC,SAAA,EAAWG,SAAA,CAAUnB,UAHO;AAAA,oBAI5B5+B,KAJ4B;AAAA,oBAK5B+/B,SAL4B;AAAA,iBAAT,CAAd,CAAA,CADqF;AAAA,aAA9F,MAQJ,IAAWuF,SAAA,CAAU9lC,IAAV,CAAX,EAA2B;AAAA,gBACd6T,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,oBAC5BxhC,GAAA,EAAAA,IAD4B;AAAA,oBAE5BE,KAAA,EAAOm/B,KAAA,CAAMr/B,IAAN,CAFqB;AAAA,oBAG5BogC,SAAA,EAAW0F,SAAA,CAAU9lC,IAAV,CAHiB;AAAA,oBAI5BQ,KAJ4B;AAAA,oBAK5B+/B,SAL4B;AAAA,iBAAT,CAAd,CAAA,CADc;AAAA,aAA3B,MAQO;AAAA,gBACH1sB,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIq7B,iBAAJ,CAAsBjgC,IAAtB,EAA2Bq/B,KAAA,CAAMr/B,IAAN,CAA3B,EAAuC,CAAA,kBAAA,GAAqBA,IAArB,EAAwB,CAAxB,CAAvC,CAAD,CAAd,CAAT,CADG;AAAA,aAlBJ;AAAA,SArBc;AAAA,KA9CoD;AAAA,IA2FtE,OAAA6T,MAAA,CA3FsE;AAAA;;ACJjF,SAAwBwyB,eAAxB,CAAwCnoC,OAAxC,EAA4F;AAAA,IACxF,MAAM2hC,OAAA,GAAU3hC,OAAA,CAAQgC,KAAxB,CADwF;AAAA,IAExF,MAAMF,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAFwF;AAAA,IAGxF,MAAMQ,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAHwF;AAAA,IAIxF,MAAM+/B,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAJwF;AAAA,IAKxF,MAAM+F,WAAA,GAAc/F,SAAA,CAAUV,OAA9B,CALwF;AAAA,IAMxF,IAAIhsB,MAAA,GAAS,EAAb,CANwF;AAAA,IAQlF,MAAAkyB,QAAA,GAAW31B,OAAA,CAAQyvB,OAAR,CAAX,CARkF;AAAA,IASxF,IAAIA,OAAA,KAAY,KAAW,CAA3B,EAA2B;AAAA,QAChB,OAAAhsB,MAAA,CADgB;AAAA,KAA3B,MAEA,IAAWkyB,QAAA,KAAa,MAAxB,EAAgC;AAAA,QACrB,OAAAlyB,MAAA,CADqB;AAAA,KAAhC,MAEA,IAAWkyB,QAAA,KAAa,QAAxB,EAAkC;AAAA,QACrBlyB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB,SAApB,EAA+BD,OAA/B,EAAwC,CAAoB,iBAApB,GAAoBkG,QAApB,EAAoC,MAApC,CAAxC,CAAD,CAAd,CAAA,CADqB;AAAA,QAEvB,OAAAlyB,MAAA,CAFuB;AAAA,KAbsD;AAAA,IAkBxF,KAAW7T,MAAAA,IAAX,IAAkB6/B,OAAlB,EAA2B;AAAA,QACjB,MAAAqE,eAAA,GAAkBlkC,IAAAA,CAAIb,KAAJa,CAAU,mBAAVA,CAAlB,CADiB;AAAA,QAGnB,IAAAkkC,eAAA,IAAmBoC,WAAA,CAAYpC,eAAA,CAAgB,CAAhB,CAAZ,CAAnB,IAAsDoC,WAAA,CAAYpC,eAAA,CAAgB,CAAhB,CAAZ,CAAA,CAAgC9E,UAAtF,EAAkG;AAAA,YACzFvrB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,gBAC5BxhC,GAAA,EAAAA,IAD4B;AAAA,gBAE5BE,KAAA,EAAO2/B,OAAA,CAAQ7/B,IAAR,CAFqB;AAAA,gBAG5BogC,SAAA,EAAWG,SAAA,CAAUnB,UAHO;AAAA,gBAI5B5+B,KAJ4B;AAAA,gBAK5B+/B,SAL4B;AAAA,aAAT,CAAd,CAAA,CADyF;AAAA,SAAlG,MAQJ,IAAW+F,WAAA,CAAYtmC,IAAZ,CAAX,EAA6B;AAAA,YAChB6T,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,gBAC5BxhC,GAAA,EAAAA,IAD4B;AAAA,gBAE5BE,KAAA,EAAO2/B,OAAA,CAAQ7/B,IAAR,CAFqB;AAAA,gBAG5BogC,SAAA,EAAWkG,WAAA,CAAYtmC,IAAZ,CAHiB;AAAA,gBAI5BQ,KAJ4B;AAAA,gBAK5B+/B,SAL4B;AAAA,aAAT,CAAd,CAAA,CADgB;AAAA,SAA7B,MAQO;AAAA,YACH1sB,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIq7B,iBAAJ,CAAsBjgC,IAAtB,EAA2B6/B,OAAA,CAAQ7/B,IAAR,CAA3B,EAAyC,CAAA,kBAAA,GAAqBA,IAArB,EAAwB,CAAxB,CAAzC,CAAD,CAAd,CAAT,CADG;AAAA,SAnBgB;AAAA,KAlB6D;AAAA,IA0CpF,IAAA,CAAC6/B,OAAA,CAAQ98B,MAAT,EAAiB;AAAA,QACjB8Q,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyB6/B,OAAzB,EAAkC,8CAAA,CAAlC,CAAZ,CADiB,CAAA;AAAA,KAAjB,MAEG;AAAA,QACH,MAAM98B,MAAA,GAASvC,KAAA,CAAMgB,OAAN,IAAiBhB,KAAA,CAAMgB,OAAN,CAAcq+B,OAAA,CAAQ98B,MAAtB,CAAhC,CADG;AAAA,QAEH,MAAM0hC,UAAA,GAAa1hC,MAAA,IAAUm0B,QAAA,CAASn0B,MAAA,CAAOlB,IAAhB,CAA7B,CAFG;AAAA,QAGH,IAAI,CAACkB,MAAL,EAAa;AAAA,YACF8Q,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyB6/B,OAAA,CAAQ98B,MAAjC,EAAyC,CAAW,QAAX,GAAW88B,OAAA,CAAQ98B,MAAnB,EAAyB,WAAzB,CAAzC,CAAL,CADE,CAAA;AAAA,SAAb,MAEA,IAAW0hC,UAAA,KAAe,YAA1B,EAAwC;AAAA,YAC7B5wB,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyB6/B,OAAA,CAAQ98B,MAAjC,EAAyC,CAAA,6CAAA,GAAgDsL,MAAA,CAAOo2B,UAAP,CAAhD,EAAkE,iDAAlE,CAAzC,CAAL,CAD6B,CAAA;AAAA,SALrC;AAAA,KA5CiF;AAAA,IAsDjF,OAAA5wB,MAAA,CAtDiF;AAAA;;ACD5F,SAAwB0yB,WAAxB,CAAoCroC,OAApC,EAAwF;AAAA,IACpF,MAAMohC,GAAA,GAAMphC,OAAA,CAAQgC,KAApB,CADoF;AAAA,IAEpF,MAAMM,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAFoF;AAAA,IAGpF,MAAM+/B,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAHoF;AAAA,IAIpF,MAAMiG,OAAA,GAAUjG,SAAA,CAAUjB,GAA1B,CAJoF;AAAA,IAKpF,IAAIzrB,MAAA,GAAS,EAAb,CALoF;AAAA,IAO9E,MAAAkyB,QAAA,GAAW31B,OAAA,CAAQkvB,GAAR,CAAX,CAP8E;AAAA,IAQpF,IAAIA,GAAA,KAAQ,KAAW,CAAvB,EAAuB;AAAA,QACZ,OAAAzrB,MAAA,CADY;AAAA,KAAvB,MAEA,IAAWkyB,QAAA,KAAa,QAAxB,EAAkC;AAAA,QACrBlyB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB,KAApB,EAA2BR,GAA3B,EAAgC,CAAoB,iBAApB,GAAoByG,QAApB,EAAoC,MAApC,CAAhC,CAAD,CAAd,CAAA,CADqB;AAAA,QAEvB,OAAAlyB,MAAA,CAFuB;AAAA,KAVkD;AAAA,IAepF,KAAW7T,MAAAA,GAAX,IAAkBs/B,GAAlB,EAAuB;AAAA,QACb,MAAA4E,eAAA,GAAkBlkC,GAAA,CAAIb,KAAJ,CAAU,mBAAV,CAAlB,CADa;AAAA,QAGf,IAAA+kC,eAAA,IAAmBsC,OAAA,CAAQtC,eAAA,CAAgB,CAAhB,CAAR,CAAnB,IAAkDsC,OAAA,CAAQtC,eAAA,CAAgB,CAAhB,CAAR,CAAA,CAA4B9E,UAA9E,EAA0F;AAAA,YACjFvrB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,gBAC5BxhC,GAD4B;AAAA,gBAE5BE,KAAA,EAAOo/B,GAAA,CAAIt/B,GAAJ,CAFqB;AAAA,gBAG5BogC,SAAA,EAAWG,SAAA,CAAUnB,UAHO;AAAA,gBAI5B5+B,KAJ4B;AAAA,gBAK5B+/B,SAL4B;AAAA,aAAT,CAAd,CAAA,CADiF;AAAA,SAA1F,MAQJ,IAAWiG,OAAA,CAAQxmC,GAAR,CAAX,EAAyB;AAAA,YACZ6T,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,gBAC5BxhC,GAD4B;AAAA,gBAE5BE,KAAA,EAAOo/B,GAAA,CAAIt/B,GAAJ,CAFqB;AAAA,gBAG5BogC,SAAA,EAAWoG,OAAA,CAAQxmC,GAAR,CAHiB;AAAA,gBAI5BQ,KAJ4B;AAAA,gBAK5B+/B,SAL4B;AAAA,aAAT,CAAd,CAAA,CADY;AAAA,SAAzB,MAQO;AAAA,YACH1sB,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIq7B,iBAAJ,CAAsBjgC,GAAtB,EAA2Bs/B,GAAA,CAAIt/B,GAAJ,CAA3B,EAAqC,CAAA,kBAAA,GAAqBA,GAArB,EAAwB,CAAxB,CAArC,CAAD,CAAd,CAAT,CADG;AAAA,SAnBY;AAAA,KAf6D;AAAA,IAuC7E,OAAA6T,MAAA,CAvC6E;AAAA;;ACAxF,SAAwB4yB,iBAAxB,CAA0CvoC,OAA1C,EAA8F;AAAA,IAC1F,IAAIymC,cAAA,CAAezmC,OAAf,EAAwBc,MAAxB,KAAmC,CAAvC,EAA0C;AAAA,QACtC,OAAO,EAAP,CADsC;AAAA,KADgD;AAAA,IAK1F,OAAOkkC,kBAAA,CAAmBhlC,OAAnB,CAAP,CAL0F;AAAA;;ACA9F,SAAwBwoC,aAAxB,CAAsCxoC,OAAtC,EAA0F;AAAA,IACtF,IAAIymC,cAAA,CAAezmC,OAAf,EAAwBc,MAAxB,KAAmC,CAAvC,EAA0C;AAAA,QACtC,OAAO,EAAP,CADsC;AAAA,KAD4C;AAAA,IAKtF,OAAOkkC,kBAAA,CAAmBhlC,OAAnB,CAAP,CALsF;AAAA;;ACA1F,SAAwByoC,kBAAxB,CAA2CzoC,OAA3C,EAA+F;AAAA,IAC3F,MAAMqhC,UAAA,GAAarhC,OAAA,CAAQgC,KAA3B,CAD2F;AAAA,IAE3F,MAAMqgC,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAF2F;AAAA,IAG3F,MAAMqG,cAAA,GAAiBrG,SAAA,CAAUhB,UAAjC,CAH2F;AAAA,IAI3F,MAAM/+B,KAAA,GAAQtC,OAAA,CAAQsC,KAAtB,CAJ2F;AAAA,IAM3F,IAAIqT,MAAA,GAAS,EAAb,CAN2F;AAAA,IAQrF,MAAAkyB,QAAA,GAAW31B,OAAA,CAAQmvB,UAAR,CAAX,CARqF;AAAA,IAU3F,IAAIwG,QAAA,KAAa,QAAjB,EAA2B;AAAA,QACvB,KAAW/lC,MAAAA,GAAX,IAAkBu/B,UAAlB,EAA8B;AAAA,YACjB1rB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc48B,QAAA,CAAS;AAAA,gBAC5BxhC,GAD4B;AAAA,gBAE5BE,KAAA,EAAOq/B,UAAA,CAAWv/B,GAAX,CAFqB;AAAA,gBAG5BogC,SAAA,EAAWwG,cAAA,CAAe5mC,GAAf,CAHiB;AAAA,gBAI5BQ,KAJ4B;AAAA,gBAK5B+/B,SAL4B;AAAA,aAAT,CAAd,CAAA,CADiB;AAAA,SADP;AAAA,KAA3B,MAUA,IAAWwF,QAAA,KAAa,QAAxB,EAAkC;AAAA,QACrBlyB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc,CAAC,IAAIk7B,eAAJ,CAAoB,YAApB,EAAkCP,UAAlC,EAA8C,CAA8B,2BAA9B,GAA8BwG,QAA9B,EAA8C,MAA9C,CAA9C,CAAD,CAAd,CAAA,CADqB;AAAA,KApByD;AAAA,IAwBpF,OAAAlyB,MAAA,CAxBoF;AAAA;;ACyB/F,MAAMgzB,UAAA,GAAa;AAAA,IACf,GAAM,GAAA;AAAA,QACF,OAAO,EAAP,CADE;AAAA,KADS;AAAA,IAIf,SAASzF,aAJM;AAAA,IAKf,WAAWqC,eALI;AAAA,IAMf,UAAU1B,cANK;AAAA,IAOf,SAAS2B,aAPM;AAAA,IAQf,QAAQC,YARO;AAAA,IASf,UAAUC,cATK;AAAA,IAUf,YAAY1B,gBAVG;AAAA,IAWf,SAASqC,aAXM;AAAA,IAYf,UAAUrE,cAZK;AAAA,IAaf,UAAU4E,cAbK;AAAA,IAcf,SAASc,aAdM;AAAA,IAef,SAASC,aAfM;AAAA,IAgBf,YAAYG,cAhBG;AAAA,IAiBf,WAAWK,eAjBI;AAAA,IAkBf,OAAOE,WAlBQ;AAAA,IAmBf,UAAU5B,cAnBK;AAAA,IAoBf,aAAa8B,iBApBE;AAAA,IAqBf,iBAAiBC,aArBF;AAAA,IAsBf,cAAcC,kBAtBC;AAAA,IAuBf,UAAU7F,cAvBK;AAAA,CAAnB,CA/BA;AA0EwB,SAAAU,QAAA,CAAStjC,OAAT,EAAqC4oC,iBAAA,GAA6B,KAAlE,EAAiG;AAAA,IACrH,MAAM5mC,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CADqH;AAAA,IAErH,MAAMkgC,SAAA,GAAYliC,OAAA,CAAQkiC,SAA1B,CAFqH;AAAA,IAGrH,MAAMG,SAAA,GAAYriC,OAAA,CAAQqiC,SAA1B,CAHqH;AAAA,IAKrH,IAAIH,SAAA,CAAU96B,UAAV,IAAwB7C,UAAA,CAAWy0B,QAAA,CAASh3B,KAAT,CAAX,CAA5B,EAAyD;AAAA,QACrD,OAAOgiC,gBAAA,CAAiBhkC,OAAjB,CAAP,CADqD;AAAA,KAAzD,UAEWkiC,SAAA,CAAU96B,UAAV,IAAwB4uB,YAAA,CAAakD,YAAA,CAAal3B,KAAb,CAAb,GAAmC;AAAA,QAClE,OAAOgjC,kBAAA,CAAmBhlC,OAAnB,CAAP,CADkE;AAAA,eAE3DkiC,SAAA,CAAUv+B,IAAV,IAAkBglC,UAAA,CAAWzG,SAAA,CAAUv+B,IAArB,GAA4B;AAAA,QACrD,MAAMklC,KAAA,GAAQF,UAAA,CAAWzG,SAAA,CAAUv+B,IAArB,CAAA,CAA2B3D,OAA3B,CAAd,CADqD;AAAA,QAEjD,IAAA4oC,iBAAA,KAAsB,IAAtB,IAA8BC,KAAA,CAAM/nC,MAAN,GAAe,CAA7C,IAAkDoR,OAAA,CAAQlS,OAAA,CAAQgC,KAAhB,CAAA,KAA2B,OAA7E,EAAsF;AAAA,YAEtF,OAAOgjC,kBAAA,CAAmBhlC,OAAnB,CAAP,CAFsF;AAAA,SAAtF,MAGG;AAAA,YACI,OAAA6oC,KAAA,CADJ;AAAA,SAL8C;AAAA,WAQlD;AAAA,QACH,MAAMA,KAAA,GAAQ7G,cAAA,CAAehO,MAAA,CAAO,EAAP,EAAWh0B,OAAX,EAAoB,EAC7CkiC,SAAA,EAAWA,SAAA,CAAUv+B,IAAV,GAAiB0+B,SAAA,CAAUH,SAAA,CAAUv+B,IAApB,CAAjB,GAA6Cu+B,SADX,EAApB,CAAf,CAAd,CADG;AAAA,QAII,OAAA2G,KAAA,CAJJ;AAAA,KAjB8G;AAAA;;ACrEzH,0BAAA,EAAwB7oC,OAAxB,EAA4E;AAAA,IACxE,MAAMgC,KAAA,GAAQhC,OAAA,CAAQgC,KAAtB,CADwE;AAAA,IAExE,MAAMF,GAAA,GAAM9B,OAAA,CAAQ8B,GAApB,CAFwE;AAAA,IAIlE,MAAA6T,MAAA,GAAS8wB,cAAA,CAAezmC,OAAf,CAAT,CAJkE;AAAA,IAKpE,IAAA2V,MAAA,CAAO7U,MAAP;AAAA,QAAsB,OAAA6U,MAAA,CAL8C;AAAA,IAOxE,IAAI3T,KAAA,CAAMmC,OAAN,CAAc,aAAd,CAAA,KAAiC,CAAI,CAAzC,EAAyC;AAAA,QACrCwR,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,iDAAhC,CAAZ,CADqC,CAAA;AAAA,KAP+B;AAAA,IAWxE,IAAIA,KAAA,CAAMmC,OAAN,CAAc,SAAd,CAAA,KAA6B,CAAI,CAArC,EAAqC;AAAA,QACjCwR,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB9/B,GAApB,EAAyBE,KAAzB,EAAgC,6CAAhC,CAAZ,CADiC,CAAA;AAAA,KAXmC;AAAA,IAejE,OAAA2T,MAAA,CAfiE;AAAA;;ACO5E,SAAwBstB,eAAxB,CACI3gC,KADJ,EAEI+/B,SAAA,GAAiByG,EAFrB,EAGI9oC,OAAA,GAAkC,EAHtC,EAIqB;AAAA,IACjB,MAAM2V,MAAA,GAAS2tB,QAAA,CAAS;AAAA,QACpBxhC,GAAA,EAAK9B,OAAA,CAAQ8B,GAAR,IAAe,EADA;AAAA,QAEpBE,KAAA,EAAOM,KAFa;AAAA,QAGpB4/B,SAAA,EAAWG,SAAA,CAAU7/B,KAHD;AAAA,QAIpB6/B,SAJoB;AAAA,QAKpB//B,KALoB;AAAA;AAOpB,QAAA8/B,uBAAA,EAAyB;AAAA,YACrBn8B,MAAA,EAAQ8iC,iBADa;AAAA,YAErB,GAAA,EAAK,MAAM,EAFU;AAAA,SAPL;AAAA,KAAT,CAAf,CADiB;AAAA,IAcV,OAAApzB,MAAA,CAdU;AAAA;;ACsBL,SAAAstB,eAAA,CAAc3gC,KAAd,EAAyC+/B,SAAA,GAAiByG,EAA1D,EAA6F;AAAA,IACnG,MAAAnzB,MAAA,GAASqzB,eAAA,CAAe1mC,KAAf,EAAsB+/B,SAAtB,CAAT,CADmG;AAAA,IAEzG,OAAO4G,UAAA,CAAWtzB,MAAX,CAAP,CAFyG;AAAA,CAtC7G;AAsDA,SAASszB,UAAT,CAAoBtzB,MAApB,EAA8C;AAAA,IAC1C,OAAOA,MAAA,CAAOvV,KAAP,EAAeguB,CAAAA,IAAf,CAAoB,CAACrjB,CAAD,EAAIC,CAAJ,KAAUD,CAAA,CAAEgP,IAAF,IAAU/O,CAAA,CAAE+O,IAAZ,GAAmBhP,CAAA,CAAEgP,IAAF,GAAS/O,CAAA,CAAE+O,IAA9B,GAAqC,CAAnE,CAAP,CAD0C;AAAA;;;;;;;;;;;;;;;;ACmB9C;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA,IAAImc,MAAA,IAAU,YAAU;MACxB,IAAIgT,CAAA,GAAE,UAAS7lC,CAAT,EAAW4b,CAAX,EAAaiqB,CAAb,EAAev+B,CAAf,EAAiB;cAAC,KAAIu+B,CAAA,GAAEA,CAAA,IAAG,EAAL,EAAQv+B,CAAA,GAAEtH,CAAA,CAAEvC,MAAhB,EAAuB6J,CAAA,EAAvB,EAA2Bu+B,CAAA,CAAE7lC,CAAA,CAAEsH,CAAF,CAAF,CAAQsU,GAAAA,CAAnC,CAAD,CAAA;AAAA,cAAuC,OAAOiqB,CAAP,CAAA;WAA9D,EAAwEC,GAAA,GAAI;AAAA,cAAC,CAAD;cAAG,EAAA;WAA/E,EAAmFC,GAAA,GAAI;AAAA,cAAC,CAAD;cAAG,EAAA;WAA1F,EAA8FC,GAAA,GAAI;AAAA,cAAC,CAAD;cAAG,CAAA;WAArG,EAAwGC,GAAA,GAAI;AAAA,cAAC,CAAD;cAAG,EAAA;WAA/G,EAAmHC,GAAA,GAAI;AAAA,cAAC,CAAD;cAAG,EAAA;WAA1H,EAA8HC,GAAA,GAAI;AAAA,cAAC,CAAD;cAAG,EAAA;WAArI,EAAyIC,GAAA,GAAI;AAAA,cAAC,CAAD;cAAG,EAAA;WAAhJ,EAAoJC,GAAA,GAAI;AAAA,cAAC,EAAD;AAAA,cAAI,EAAJ;AAAA,cAAO,EAAP;cAAU,EAAA;WAAlK,EAAsKC,GAAA,GAAI;AAAA,cAAC,EAAD;cAAI,EAAA;WAA9K,EAAkLC,GAAA,GAAI;AAAA,cAAC,EAAD;cAAI,EAAA;WAA1L,CAAA;MACA,IAAI1T,MAAA,GAAS;AAAA,UAAC2T,KAAA,EAAO,SAASA,KAAT,GAAiB;WAAzB;UACbC,EAAA,EAAI,EADS;AAAA,UAEbC,QAAA,EAAU;cAAC,SAAQ,CAAT;cAAW,cAAa,CAAxB;cAA0B,UAAS,CAAnC;cAAqC,cAAa,CAAlD;cAAoD,UAAS,CAA7D;cAA+D,mBAAkB,CAAjF;cAAmF,QAAO,CAA1F;cAA4F,sBAAqB,CAAjH;cAAmH,QAAO,EAA1H;cAA6H,SAAQ,EAArI;cAAwI,YAAW,EAAnJ;cAAsJ,aAAY,EAAlK;cAAqK,OAAM,EAA3K;cAA8K,cAAa,EAA3L;cAA8L,aAAY,EAA1M;cAA6M,KAAI,EAAjN;cAAoN,KAAI,EAAxN;cAA2N,kBAAiB,EAA5O;cAA+O,cAAa,EAA5P;cAA+P,KAAI,EAAnQ;cAAsQ,KAAI,EAA1Q;cAA6Q,KAAI,EAAjR;cAAoR,KAAI,EAAxR;cAA2R,mBAAkB,EAA7S;cAAgT,WAAU,CAA1T;AAAA,cAA4T,QAAO,CAAA;WAFhU;AAAA,UAGbC,UAAA,EAAY;cAAC,GAAE,OAAH;cAAW,GAAE,QAAb;cAAsB,GAAE,QAAxB;cAAiC,GAAE,MAAnC;cAA0C,IAAG,MAA7C;cAAoD,IAAG,OAAvD;cAA+D,IAAG,KAAlE;cAAwE,IAAG,GAA3E;cAA+E,IAAG,GAAlF;cAAsF,IAAG,GAAzF;cAA6F,IAAG,GAAhG;cAAoG,IAAG,GAAvG;AAAA,cAA2G,IAAG,GAAA;WAH7G;AAAA,UAIbC,YAAA,EAAc;AAAA,cAAC,CAAD;cAAG;AAAA,kBAAC,CAAD;kBAAG,CAAA;eAAN;cAAS;AAAA,kBAAC,CAAD;kBAAG,CAAA;eAAZ;cAAe;AAAA,kBAAC,CAAD;kBAAG,CAAA;eAAlB;cAAqB;AAAA,kBAAC,CAAD;kBAAG,CAAA;eAAxB;cAA2B;AAAA,kBAAC,CAAD;kBAAG,CAAA;eAA9B;cAAiC;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAArC;cAAwC;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAA5C;cAA+C;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAAnD;cAAsD;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAA1D;cAA6D;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAAjE;cAAoE;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAAxE;cAA2E;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAA/E;cAAkF;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAAtF;cAAyF;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAA7F;cAAgG;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAApG;cAAuG;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAA3G;cAA8G;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAAlH;cAAqH;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAAzH;cAA4H;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAAhI;cAAmI;AAAA,kBAAC,EAAD;kBAAI,CAAA;eAAvI;cAA0I;AAAA,kBAAC,EAAD;kBAAI,CAAA;AAAJ,eAAA;WAJ3I;AAAA,UAKbC,aAAA,EAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CR,EAA7C,EAAiDS,OAAjD,EAA0EC,EAA1E,EAA2FC,EAA3F,EAA4G;AAAA;AAG3H,cAAA,IAAIC,EAAA,GAAKF,EAAA,CAAG1pC,MAAH,GAAY,CAArB,CAAA;AAH2H,cAI3H,QAAQypC,OAAR;AAAA,cACA,KAAK,CAAL;AAAA;kBAEeI,IAAAA,CAAAA,CAAL,GAAS,IAAIx6B,MAAJ,CAAWi6B,MAAA,CAAOppC,OAAP,CAAe,WAAf,EAA4B,MAAI,GAAhC,CAAA,CACRA,OADQ,CACA,MADA,EACO,IADP,CAERA,CAAAA,OAFQ,CAEA,MAFA,EAEO,IAFP,EAGRA,OAHQ,CAGA,MAHA,EAGO,IAHP,CAAA,CAIRA,OAJQ,CAIA,MAJA,EAIO,MAJP,CAKRA,CAAAA,OALQ,CAKA,MALA,EAKO,IALP,CAAA,CAMRA,OANQ,CAMA,MANA,EAMO,IANP,CAAX,CAAT,CAAA;kBAOA,IAAA,CAAK2pC,CAAL,CAAO7I,QAAP,GAAmB,IAAK2I,CAAAA,EAAL,CAAQG,UAA3B,CAAA;kBAEV,MAAA;AAZA,cAaA,KAAK,CAAL;kBAEY,IAAA,CAAKD,CAAL,GAAS,IAAIv4B,MAAJ,CAAWg4B,MAAX,CAAT,CAAA;kBACA,IAAA,CAAKO,CAAL,CAAO7I,QAAP,GAAmB,IAAK2I,CAAAA,EAAL,CAAQG,UAA3B,CAAA;kBAEZ,MAAA;AAlBA,cAmBA,KAAK,CAAL;AAAA,kBAEY,IAAKD,CAAAA,CAAL,GAAS,IAAT,CAAA;kBAEZ,MAAA;AAvBA,cAwBA,KAAK,CAAL;kBAEY,IAAA,CAAKA,CAAL,GAAS,IAAIt4B,OAAJ,CAAY,IAAZ,CAAT,CAAA;kBACA,IAAA,CAAKs4B,CAAL,CAAO7I,QAAP,GAAkB,IAAK2I,CAAAA,EAAL,CAAQG,UAA1B,CAAA;kBAEZ,MAAA;AA7BA,cA8BA,KAAK,CAAL;kBAEY,IAAA,CAAKD,CAAL,GAAS,IAAIt4B,OAAJ,CAAY,KAAZ,CAAT,CAAA;kBACA,IAAA,CAAKs4B,CAAL,CAAO7I,QAAP,GAAkB,IAAK2I,CAAAA,EAAL,CAAQG,UAA1B,CAAA;kBAEZ,MAAA;AAnCA,cAoCA,KAAK,CAAL;kBACA,OAAO,IAAKD,CAAAA,CAAL,GAASH,EAAA,CAAGE,EAAA,GAAG,CAAN,CAAhB,CAAA;AArCA,cAuCA,KAAK,EAAL;AAAA,kBACA,IAAKC,CAAAA,CAAL,GAAS,EAAT,CAAA;kBAAa9oC,MAAA,CAAOghC,cAAP,CAAsB,KAAK8H,CAA3B,EAA8B,UAA9B,EAA0C;AAAA,sBAC3C3oC,KAAA,EAAO,IAAKyoC,CAAAA,EAAL,CAAQG,UAD4B;AAAA,sBAE3C7H,UAAA,EAAY,KAAA;AAF+B,mBAA1C,CADb,CAAA;kBAKA,MAAA;AA5CA,cA6CA,KAAK,EAAL,CAAA;AA7CA,cA6CS,KAAK,EAAL;kBACT,IAAA,CAAK4H,CAAL,GAASH,EAAA,CAAGE,EAAA,GAAG,CAAN,CAAT,CAAA;kBAAmB7oC,MAAA,CAAOghC,cAAP,CAAsB,KAAK8H,CAA3B,EAA8B,UAA9B,EAA0C;AAAA,sBACjD3oC,KAAA,EAAO,IAAKyoC,CAAAA,EAAL,CAAQG,UADkC;AAAA,sBAEjD7H,UAAA,EAAY,KAAA;AAFqC,mBAA1C,CADV,CAAA;kBAKT,MAAA;AAlDA,cAmDA,KAAK,EAAL;kBACA,IAAA,CAAK4H,CAAL,GAAS;AAAA,sBAACH,EAAA,CAAGE,EAAA,GAAG,CAAN,CAAD;sBAAWF,EAAA,CAAGE,EAAH,CAAA;mBAApB,CAAA;kBACA,MAAA;AArDA,cAsDA,KAAK,EAAL;AAAA,kBACA,IAAKC,CAAAA,CAAL,GAAS,EAAT,CAAA;AADA,kBACa,KAAKA,CAAL,CAAOH,EAAA,CAAGE,EAAH,CAAO,CAAA,CAAP,CAAP,CAAA,GAAoBF,EAAA,CAAGE,EAAH,CAAO,CAAA,CAAP,CAApB,CAAA;kBACb,MAAA;AAxDA,cAyDA,KAAK,EAAL;kBACA,IAAA,CAAKC,CAAL,GAASH,EAAA,CAAGE,EAAA,GAAG,CAAN,CAAT,CAAA;kBAAmBF,EAAA,CAAGE,EAAA,GAAG,CAAN,CAAA,CAASF,EAAA,CAAGE,EAAH,EAAO,CAAP,CAAT,IAAsBF,EAAA,CAAGE,EAAH,CAAO,CAAA,CAAP,CAAtB,CAAA;kBACnB,MAAA;AA3DA,cA4DA,KAAK,EAAL;AAAA,kBACA,IAAKC,CAAAA,CAAL,GAAS,EAAT,CAAA;kBAAa9oC,MAAA,CAAOghC,cAAP,CAAsB,KAAK8H,CAA3B,EAA8B,UAA9B,EAA0C;AAAA,sBAC3C3oC,KAAA,EAAO,IAAKyoC,CAAAA,EAAL,CAAQG,UAD4B;AAAA,sBAE3C7H,UAAA,EAAY,KAAA;AAF+B,mBAA1C,CADb,CAAA;kBAKA,MAAA;AAjEA,cAkEA,KAAK,EAAL;kBACA,IAAA,CAAK4H,CAAL,GAAS,CAACH,EAAA,CAAGE,EAAH,CAAD,CAAT,CAAA;kBACA,MAAA;AApEA,cAqEA,KAAK,EAAL;kBACA,IAAA,CAAKC,CAAL,GAASH,EAAA,CAAGE,EAAA,GAAG,CAAN,CAAT,CAAA;AADA,kBACmBF,EAAA,CAAGE,EAAA,GAAG,CAAN,CAAA,CAAS/oC,IAAT,CAAc6oC,EAAA,CAAGE,EAAH,CAAd,CADnB,CAAA;kBAEA,MAAA;AAvEA,eAAA;WATa;AAAA,UAmFbG,KAAA,EAAO;cAAC;kBAAC,GAAE,CAAH;kBAAK,GAAE1B,GAAP;kBAAW,GAAE,CAAb;kBAAe,GAAEC,GAAjB;kBAAqB,GAAE,CAAvB;kBAAyB,GAAEC,GAA3B;kBAA+B,GAAE,CAAjC;kBAAmC,IAAGC,GAAtC;kBAA0C,IAAGC,GAA7C;kBAAiD,IAAG,CAApD;kBAAsD,IAAG,CAAzD;kBAA2D,IAAG,CAA9D;kBAAgE,IAAG,CAAnE;kBAAqE,IAAGC,GAAxE;AAAA,kBAA4E,IAAGC,GAAAA;eAAhF;AAAA,cAAqF,EAAC,CAAA,EAAE,CAAC,CAAD,CAAH,EAArF;cAA6F;AAAA,kBAAC,EAAG,EAAA;AAAA,sBAAC,CAAD;sBAAG,EAAA;AAAH,mBAAA;eAAjG;cAAyGP,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAN,CAAzG;cAAsHR,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAN,CAAtH;cAAmIR,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAN,CAAnI;cAAgJR,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAAhJ;cAA8JR,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAA9J;cAA4KR,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAA5K;cAA0LR,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAN,CAA1L;cAAuMR,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAN,CAAvM;cAAoNR,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAN,CAApN;AAAA,cAAiOR,CAAA,CAAE;AAAA,kBAAC,EAAD;AAAA,kBAAI,EAAJ;AAAA,kBAAO,EAAP;AAAA,kBAAU,EAAV;kBAAa,EAAA;AAAb,eAAF,EAAmB;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAnB,CAAjO;cAA2PA,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAN,CAA3P;cAAwQ;kBAAC,GAAE,EAAH;kBAAM,GAAEP,GAAR;AAAA,kBAAY,EAAG,EAAA;AAAA,sBAAC,CAAD;sBAAG,EAAA;mBAAlB;kBAAsB,IAAG,EAAzB;AAAA,kBAA4B,IAAG,EAAA;eAAvS;cAA2S;kBAAC,GAAE,CAAH;kBAAK,GAAEA,GAAP;kBAAW,GAAE,CAAb;kBAAe,GAAEC,GAAjB;kBAAqB,GAAE,CAAvB;kBAAyB,GAAEC,GAA3B;kBAA+B,GAAE,CAAjC;kBAAmC,IAAGC,GAAtC;kBAA0C,IAAGC,GAA7C;kBAAiD,IAAG,EAApD;kBAAuD,IAAG,CAA1D;kBAA4D,IAAG,CAA/D;kBAAiE,IAAGC,GAApE;kBAAwE,IAAGC,GAA3E;AAAA,kBAA+E,EAAG,EAAA;AAAA,sBAAC,CAAD;sBAAG,EAAA;mBAArF;AAAA,kBAAyF,IAAG,EAAA;eAAvY;cAA2Y;AAAA,kBAAC,CAAE,EAAA;AAAA,sBAAC,CAAD;sBAAG,CAAA;AAAH,mBAAA;eAA9Y;cAAqZP,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAArZ;cAAma;AAAA,kBAAC,EAAG,EAAA;AAAA,sBAAC,CAAD;sBAAG,EAAA;mBAAP;AAAA,kBAAW,EAAG,EAAA;AAAA,sBAAC,CAAD;sBAAG,EAAA;AAAH,mBAAA;eAAjb;cAAybR,CAAA,CAAES,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAAzb;cAAuc;AAAA,kBAAC,EAAG,EAAA;AAAA,sBAAC,CAAD;sBAAG,EAAA;AAAH,mBAAA;eAA3c;cAAmdT,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAAnd;cAAie;AAAA,kBAAC,EAAG,EAAA;AAAA,sBAAC,CAAD;sBAAG,EAAA;mBAAP;AAAA,kBAAW,EAAG,EAAA;AAAA,sBAAC,CAAD;sBAAG,EAAA;AAAH,mBAAA;eAA/e;cAAufR,CAAA,CAAEU,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAAvf;cAAqgBV,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAArgB;cAAmhB;kBAAC,GAAE,EAAH;kBAAM,GAAEP,GAAR;AAAA,kBAAY,IAAG,EAAA;eAAliB;cAAsiB;kBAAC,GAAE,CAAH;kBAAK,GAAEA,GAAP;kBAAW,GAAE,CAAb;kBAAe,GAAEC,GAAjB;kBAAqB,GAAE,CAAvB;kBAAyB,GAAEC,GAA3B;kBAA+B,GAAE,CAAjC;kBAAmC,IAAGC,GAAtC;kBAA0C,IAAGC,GAA7C;kBAAiD,IAAG,EAApD;kBAAuD,IAAG,CAA1D;kBAA4D,IAAG,CAA/D;kBAAiE,IAAGC,GAApE;AAAA,kBAAwE,IAAGC,GAAAA;eAAjnB;cAAsnBP,CAAA,CAAEQ,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAAtnB;cAAooB;kBAAC,GAAE,CAAH;kBAAK,GAAEP,GAAP;kBAAW,GAAE,CAAb;kBAAe,GAAEC,GAAjB;kBAAqB,GAAE,CAAvB;kBAAyB,GAAEC,GAA3B;kBAA+B,GAAE,CAAjC;kBAAmC,IAAGC,GAAtC;kBAA0C,IAAGC,GAA7C;kBAAiD,IAAG,EAApD;kBAAuD,IAAG,CAA1D;kBAA4D,IAAG,CAA/D;kBAAiE,IAAGC,GAApE;AAAA,kBAAwE,IAAGC,GAAAA;eAA/sB;cAAotBP,CAAA,CAAES,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAAptB;cAAkuBT,CAAA,CAAES,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;AAAH,eAAN,CAAluB;cAAgvBT,CAAA,CAAEU,GAAF,EAAM;AAAA,kBAAC,CAAD;kBAAG,EAAA;eAAT,CAAA;WAnF1uB;AAAA,UAoFbkB,cAAA,EAAgB;AAAA,cAAC,EAAG,EAAA;AAAA,kBAAC,CAAD;kBAAG,CAAA;AAAH,eAAA;WApFP;UAqFbC,UAAA,EAAY,SAASA,UAAT,CAAoBvhC,GAApB,EAAyBgoB,IAAzB,EAA+B;AAAA,cACvC,IAAIA,IAAA,CAAKwZ,WAAT,EAAsB;AAAA,kBAClB,IAAKnB,CAAAA,KAAL,CAAWrgC,GAAX,CADkB,CAAA;AAAA,eAAtB,MAEO;AAAA,kBACH,MAAM,IAAIxD,KAAJ,CAAUwD,GAAV,CAAN,CAAA;AADG,eAAA;WAxFE;AAAA,UA4FbrI,KAAA,EAAO,SAASA,KAAT,CAAekE,KAAf,EAAsB;cACzB,IAAI4lC,IAAA,GAAO,IAAX,CAAA,CAAiBC,KAAA,GAAQ,CAAC,CAAD,CAAzB,CAA8BC,CAAaC,MAAA,GAAS,CAAC,IAAD,CAApD,CAA4DC,CAAAA,MAAA,GAAS,EAArE,CAAyER,CAAAA,KAAA,GAAQ,IAAKA,CAAAA,KAAtF,CAAA,CAA6FT,MAAA,GAAS,EAAtG,CAA0GE,CAAAA,QAAA,GAAW,CAArH,CAAwHD,CAAAA,MAAA,GAAS,CAAjI,CAAA,CAAoJiB,MAAA,GAAS,CAA7J,CAAA,CAAgKC,GAAA,GAAM,EAAtK;AADyB,cAEzB,IAAIl7B,IAAA,GAAOg7B,MAAA,CAAOjrC,KAAP,CAAaorC,IAAb,CAAkBC,SAAlB,EAA6B,CAA7B,CAAX,CAAA;cACA,IAAIC,KAAA,GAAQ7pC,MAAA,CAAO4yB,MAAP,CAAc,IAAA,CAAKiX,KAAnB,CAAZ,CAAA;AAHyB,cAIzB,IAAIC,WAAA,GAAc,EAAE7B,EAAA,EAAI,EAAN,EAAlB,CAAA;AAJyB,cAKzB,KAASzmC,IAAAA,CAAT,IAAc,IAAA,CAAKymC,EAAnB,EAAuB;AAAA,kBACnB,IAAIjoC,MAAA,CAAO+nB,SAAP,CAAiBsV,cAAjB,CAAgCsM,IAAhC,CAAqC,IAAK1B,CAAAA,EAA1C,EAA8CzmC,CAA9C,CAAJ,EAAsD;AAAA,sBAClDsoC,WAAA,CAAY7B,EAAZ,CAAezmC,CAAf,CAAoB,GAAA,IAAA,CAAKymC,EAAL,CAAQzmC,CAAR,CAApB,CAAA;AADkD,mBAAA;AADnC,eAAA;cAKvBqoC,KAAA,CAAME,QAAN,CAAevmC,KAAf,EAAsBsmC,WAAA,CAAY7B,EAAlC,CAVyB,CAAA;AAAA,cAWzB6B,WAAA,CAAY7B,EAAZ,CAAe4B,KAAf,GAAuBA,KAAvB,CAAA;AAXyB,cAYzBC,WAAA,CAAY7B,EAAZ,CAAe5T,MAAf,GAAwB,IAAxB,CAAA;AAZyB,cAazB,IAAI,OAAOwV,KAAA,CAAMG,MAAb,IAAuB,WAA3B,EAAwC;AAAA,kBACpCH,KAAA,CAAMG,MAAN,GAAe,EAAf,CAAA;AADoC,eAAA;AAbf,cAgBzB,IAAIC,KAAA,GAAQJ,KAAA,CAAMG,MAAlB,CAAA;AAhByB,cAiBzBR,MAAA,CAAO1pC,IAAP,CAAYmqC,KAAZ,CAjByB,CAAA;cAkBzB,IAAIC,MAAA,GAASL,KAAA,CAAM1rC,OAAN,IAAiB0rC,KAAA,CAAM1rC,OAAN,CAAc+rC,MAA5C,CAAA;cACA,IAAI,OAAOJ,WAAA,CAAY7B,EAAZ,CAAeiB,UAAtB,KAAqC,UAAzC,EAAqD;kBACjD,IAAA,CAAKA,UAAL,GAAkBY,WAAA,CAAY7B,EAAZ,CAAeiB,UAAjC,CAAA;AADiD,eAArD,MAEO;kBACH,IAAA,CAAKA,UAAL,GAAkBlpC,MAAA,CAAOmqC,cAAP,CAAsB,IAAtB,CAA4BjB,CAAAA,UAA9C,CAAA;AADG,eAAA;cASH,SAASkB,GAAT,GAAe;AAAA,kBACX,IAAIC,KAAJ,CAAA;AADW,kBAEXA,KAAA,GAAQR,KAAA,CAAMO,GAAN,EAAA,IAAeV,GAAvB,CAAA;AAFW,kBAGX,IAAI,OAAOW,KAAP,KAAiB,QAArB,EAA+B;sBAC3BA,KAAA,GAAQjB,IAAA,CAAKlB,QAAL,CAAcmC,KAAd,CAAwBA,IAAAA,KAAhC,CAAA;AAD2B,mBAAA;AAHpB,kBAMX,OAAOA,KAAP,CAAA;AANW,eAAA;cAQnB,IAAIC,MAAJ,CAAYC,CAAgBC,KAA5B,CAAA,CAAmCC,MAAnC,CAAA,CAA8CnhC,CAA9C,CAAiDohC,CAAAA,KAAA,GAAQ,EAAzD,CAA6D90B,CAAAA,CAA7D,EAAgEpB,GAAhE,CAAA,CAAqEm2B,QAArE,CAAA,CAA+E/jC,SAA/E;cACA,OAAO,IAAP,EAAa;kBACT4jC,KAAA,GAAQnB,KAAA,CAAMA,KAAA,CAAMpqC,MAAN,GAAe,CAArB,CAAR,CAAA;AADS,kBAET,IAAI,IAAKgqC,CAAAA,cAAL,CAAoBuB,KAApB,CAAJ,EAAgC;AAAA,sBAC5BC,MAAA,GAAS,IAAA,CAAKxB,cAAL,CAAoBuB,KAApB,CAAT,CAAA;AAD4B,mBAAhC,MAEO;sBACH,IAAIF,MAAA,KAAW,IAAX,IAAmB,OAAOA,MAAP,IAAiB,WAAxC,EAAqD;0BACjDA,MAAA,GAASF,GAAA,EAAT,CAAA;AADiD,uBAAA;AADlD,sBAIHK,MAAA,GAASzB,KAAA,CAAMwB,KAAN,CAAA,IAAgBxB,KAAA,CAAMwB,KAAN,CAAA,CAAaF,MAAb,CAAzB,CAAA;AAJG,mBAAA;AAJE,kBAUG,IAAI,OAAOG,MAAP,KAAkB,WAAlB,IAAiC,CAACA,MAAA,CAAOxrC,MAAzC,IAAmD,CAACwrC,MAAA,CAAO,CAAP,CAAxD,EAAmE;sBACvE,IAAIG,MAAA,GAAS,EAAb,CAAA;sBACAhkC,QAAA,GAAW,EAAX,CAAA;AAFuE,sBAGvE,KAAKgP,CAAL,IAAUozB,KAAA,CAAMwB,KAAN,CAAV,EAAwB;0BACpB,IAAI,KAAKrC,UAAL,CAAgBvyB,CAAhB,CAAsBA,IAAAA,CAAA,GAAI6zB,MAA9B,EAAsC;AAAA,8BAClC7iC,QAAA,CAAS9G,IAAT,CAAc,IAAO,GAAA,IAAA,CAAKqoC,UAAL,CAAgBvyB,CAAhB,CAAP,GAA4B,IAA1C,CADkC,CAAA;AAAA,2BAAA;AADlB,uBAAA;AAH+C,sBAQvE,IAAIi0B,KAAA,CAAMgB,YAAV,EAAwB;AAAA,0BACpBD,MAAA,GAAS,sBAAA,IAA0BnC,QAAA,GAAW,CAAX,CAA1B,GAA0C,KAA1C,GAAkDoB,KAAA,CAAMgB,YAAN,EAAlD,GAAyE,cAAzE,GAA0FjkC,QAAA,CAASxG,IAAT,CAAc,IAAd,CAA1F,GAAgH,UAAhH,IAA8H,IAAA,CAAK+nC,UAAL,CAAgBmC,MAAhB,CAA2BA,IAAAA,MAA3B,CAA9H,GAAmK,IAA5K,CAAA;AADoB,uBAAxB,MAEO;AAAA,0BACHM,MAAA,GAAS,sBAA0B,IAAAnC,QAAA,GAAW,CAAX,CAA1B,GAA0C,eAA1C,IAA6D6B,MAAA,IAAUZ,GAAV,GAAgB,cAAhB,GAAiC,IAAQ,IAAA,IAAA,CAAKvB,UAAL,CAAgBmC,MAAhB,CAAA,IAA2BA,MAA3B,CAAR,GAA6C,IAA9E,CAAtE,CAAA;AADG,uBAAA;AAVgE,sBAavE,IAAKpB,CAAAA,UAAL,CAAgB0B,MAAhB,EAAwB;AAAA,0BACpB79B,IAAA,EAAM88B,KAAA,CAAMzqC,KADQ;0BAEpBirC,KAAA,EAAO,IAAA,CAAKlC,UAAL,CAAgBmC,MAAhB,KAA2BA,MAFd;AAAA,0BAGpBpyB,IAAA,EAAM2xB,KAAA,CAAMpB,QAHQ;0BAIpBqC,GAAA,EAAKb,KAJe;AAAA,0BAKpBrjC,QAAA,EAAUA,QAAAA;AALU,uBAAxB,CAbuE,CAAA;AAAA,mBAAA;AAVtE,kBA+BT,IAAI6jC,MAAA,CAAO,CAAP,CAAqB7qC,YAAAA,KAArB,IAA8B6qC,MAAA,CAAOxrC,MAAP,GAAgB,CAAlD,EAAqD;sBACjD,MAAM,IAAIkF,KAAJ,CAAU,mDAAA,GAAsDqmC,KAAtD,GAA8D,WAA9D,GAA4EF,MAAtF,CAAN,CAAA;AADiD,mBAAA;AA/B5C,kBAkCT,QAAQG,MAAA,CAAO,CAAP,CAAR;AAAA,kBACA,KAAK,CAAL;AAAA,sBACIpB,KAAA,CAAMvpC,IAAN,CAAWwqC,MAAX,CADJ,CAAA;AAAA,sBAEIf,MAAA,CAAOzpC,IAAP,CAAY+pC,KAAA,CAAMtB,MAAlB,CAFJ,CAAA;AAAA,sBAGIiB,MAAA,CAAO1pC,IAAP,CAAY+pC,KAAA,CAAMG,MAAlB,CAHJ,CAAA;sBAIIX,KAAA,CAAMvpC,IAAN,CAAW2qC,MAAA,CAAO,CAAP,CAAX,CAJJ,CAAA;sBAKIH,MAAA,GAAS,IAAT,CAAA;sBACqB;AAAA,0BACjB9B,MAAA,GAASqB,KAAA,CAAMrB,MAAf,CAAA;AADiB,0BAEjBD,MAAA,GAASsB,KAAA,CAAMtB,MAAf,CAAA;AAFiB,0BAGjBE,QAAA,GAAWoB,KAAA,CAAMpB,QAAjB,CAAA;AAHiB,0BAIjBwB,KAAA,GAAQJ,KAAA,CAAMG,MAAd,CAAA;AAJiB,uBAQd;sBAIP,MAAA;AAnBJ,kBAoBA,KAAK,CAAL;AAAA,sBACIx1B,GAAA,GAAM,IAAK4zB,CAAAA,YAAL,CAAkBqC,MAAA,CAAO,CAAP,CAAlB,CAAA,CAA6B,CAA7B,CAAN,CAAA;sBACAC,KAAA,CAAM5B,CAAN,GAAUS,MAAA,CAAOA,MAAA,CAAOtqC,MAAP,GAAgBuV,GAAvB,CAAV,CAAA;sBACAk2B,KAAA,CAAM9B,EAAN,GAAW;AAAA,0BACPG,UAAA,EAAYS,MAAA,CAAOA,MAAA,CAAOvqC,MAAP,IAAiBuV,GAAA,IAAO,CAAP,CAAxB,EAAmCu0B,UADxC;0BAEPgC,SAAA,EAAWvB,MAAA,CAAOA,MAAA,CAAOvqC,MAAP,GAAgB,CAAvB,CAAA,CAA0B8rC,SAF9B;AAAA,0BAGPC,YAAA,EAAcxB,MAAA,CAAOA,MAAA,CAAOvqC,MAAP,IAAiBuV,GAAA,IAAO,CAAP,CAAxB,EAAmCw2B,YAH1C;0BAIPC,WAAA,EAAazB,MAAA,CAAOA,MAAA,CAAOvqC,MAAP,GAAgB,CAAvB,CAAA,CAA0BgsC,WAAAA;uBAJ3C,CAAA;sBAMA,IAAIf,MAAJ,EAAY;AAAA,0BACRQ,KAAA,CAAM9B,EAAN,CAASnqB,KAAT,GAAiB;AAAA,8BACb+qB,MAAA,CAAOA,MAAA,CAAOvqC,MAAP,IAAiBuV,GAAA,IAAO,CAAP,CAAxB,CAAA,CAAmCiK,KAAnC,CAAyC,CAAzC,CADa;8BAEb+qB,MAAA,CAAOA,MAAA,CAAOvqC,MAAP,GAAgB,CAAvB,CAA0Bwf,CAAAA,KAA1B,CAAgC,CAAhC,CAAA;2BAFJ,CAAA;AADQ,uBAAA;sBAMZnV,CAAA,GAAI,IAAK++B,CAAAA,aAAL,CAAmB5U,KAAnB,CAAyBiX,KAAzB,EAAgC;AAAA,0BAChCnC,MADgC;AAAA,0BAEhCC,MAFgC;AAAA,0BAGhCC,QAHgC;0BAIhCqB,WAAA,CAAY7B,EAJoB;0BAKhCwC,MAAA,CAAO,CAAP,CALgC;AAAA,0BAMhClB,MANgC;0BAOhCC,MAAAA;AAPgC,uBAAA,CAQlC3kC,MARkC,CAQ3B2J,IAR2B,CAAhC,CAAJ,CAAA;AAfJ,sBAwBI,IAAI,OAAOlF,CAAP,KAAa,WAAjB,EAA8B;AAAA,0BAC1B,OAAOA,CAAP,CAAA;AAD0B,uBAAA;sBAG9B,IAAIkL,GAAJ,EAAS;AAAA,0BACL60B,KAAA,GAAQA,KAAA,CAAM9qC,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAD,GAAKiW,GAAL,GAAW,CAA1B,CAAR,CAAA;AADK,0BAEL+0B,MAAA,GAASA,MAAA,CAAOhrC,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAD,GAAKiW,GAArB,CAAT,CAAA;AAFK,0BAGLg1B,MAAA,GAASA,MAAA,CAAOjrC,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAD,GAAKiW,GAArB,CAAT,CAAA;AAHK,uBAAA;AA3Bb,sBAgCI60B,KAAA,CAAMvpC,IAAN,CAAW,KAAKsoC,YAAL,CAAkBqC,MAAA,CAAO,CAAP,CAAlB,CAA6B,CAAA,CAA7B,CAAX,CAhCJ,CAAA;AAAA,sBAiCIlB,MAAA,CAAOzpC,IAAP,CAAY4qC,KAAA,CAAM5B,CAAlB,CAjCJ,CAAA;AAAA,sBAkCIU,MAAA,CAAO1pC,IAAP,CAAY4qC,KAAA,CAAM9B,EAAlB,CAlCJ,CAAA;sBAmCI+B,QAAA,GAAW3B,KAAA,CAAMK,KAAA,CAAMA,KAAA,CAAMpqC,MAAN,GAAe,CAArB,CAAN,CAA+BoqC,CAAAA,KAAA,CAAMA,KAAA,CAAMpqC,MAAN,GAAe,CAArB,CAA/B,CAAX,CAAA;AAnCJ,sBAoCIoqC,KAAA,CAAMvpC,IAAN,CAAW6qC,QAAX,CApCJ,CAAA;sBAqCI,MAAA;AAzDJ,kBA0DA,KAAK,CAAL;AAAA,sBACI,OAAO,IAAP,CAAA;AA3DJ,mBAAA;AAlCS,eAAA;AAvCY,cAuIzB,OAAO,IAAP,CAAA;AAvIyB,WAAA;OA5F7B,CAAA;AAFwB;MAwOpBd,IAAAA,KAAA,IAAS,YAAU;UACvB,IAAIA,KAAA,GAAS;cAEbH,GAAA,EAAI,CAFS;cAIbR,UAAA,EAAW,SAASA,UAAT,CAAoBvhC,GAApB,EAAyBgoB,IAAzB,EAA+B;AAAA,kBAClC,IAAI,IAAA,CAAKsY,EAAL,CAAQ5T,MAAZ,EAAoB;sBAChB,IAAA,CAAK4T,EAAL,CAAQ5T,MAAR,CAAe6U,UAAf,CAA0BvhC,GAA1B,EAA+BgoB,IAA/B,CADgB,CAAA;AAAA,mBAApB,MAEO;AAAA,sBACH,MAAM,IAAIxrB,KAAJ,CAAUwD,GAAV,CAAN,CAAA;AADG,mBAAA;eAPF;AAAA;AAab,cAAAoiC,QAAA,EAAS,UAAUvmC,KAAV,EAAiBykC,EAAjB,EAAqB;kBACtB,IAAA,CAAKA,EAAL,GAAUA,EAAA,IAAM,IAAKA,CAAAA,EAAX,IAAiB,EAA3B,CAAA;AADsB,kBAEtB,IAAKiD,CAAAA,MAAL,GAAc1nC,KAAd,CAAA;AAFsB,kBAGtB,IAAA,CAAK2nC,KAAL,GAAa,IAAKC,CAAAA,UAAL,GAAkB,IAAKC,CAAAA,IAAL,GAAY,KAA3C,CAAA;kBACA,KAAK5C,QAAL,GAAgB,KAAKD,MAAL,GAAc,CAA9B,CAAA;AAJsB,kBAKtB,IAAA,CAAKD,MAAL,GAAc,IAAK+C,CAAAA,OAAL,GAAe,IAAKlsC,CAAAA,KAAL,GAAa,EAA1C,CAAA;AALsB,kBAMtB,KAAKmsC,cAAL,GAAsB,CAAC,SAAD,CAAtB,CAAA;kBACA,IAAA,CAAKvB,MAAL,GAAc;sBACVjB,UAAA,EAAY,CADF;sBAEViC,YAAA,EAAc,CAFJ;sBAGVD,SAAA,EAAW,CAHD;AAAA,sBAIVE,WAAA,EAAa,CAAA;mBAJjB,CAAA;AAPsB,kBAatB,IAAI,IAAA,CAAK9sC,OAAL,CAAa+rC,MAAjB,EAAyB;AAAA,sBACrB,IAAKF,CAAAA,MAAL,CAAYvrB,KAAZ,GAAoB;AAAA,0BAAC,CAAD;0BAAG,CAAA;uBAAvB,CAAA;AADqB,mBAAA;AAbH,kBAgBtB,IAAK1C,CAAAA,MAAL,GAAc,CAAd,CAAA;AAhBsB,kBAiBtB,OAAO,IAAP,CAAA;eA9BK;AAAA;cAkCbvY,KAAA,EAAM,YAAY;kBACV,IAAIgoC,EAAA,GAAK,IAAA,CAAKN,MAAL,CAAY,CAAZ,CAAT,CAAA;AADU,kBAEV,IAAK3C,CAAAA,MAAL,IAAeiD,EAAf,CAAA;kBACA,IAAA,CAAKhD,MAAL,EAHU,CAAA;kBAIV,IAAA,CAAKzsB,MAAL,EAJU,CAAA;AAAA,kBAKV,IAAK3c,CAAAA,KAAL,IAAcosC,EAAd,CAAA;AALU,kBAMV,IAAKF,CAAAA,OAAL,IAAgBE,EAAhB,CAAA;kBACA,IAAI3oB,KAAA,GAAQ2oB,EAAA,CAAGpsC,KAAH,CAAS,iBAAT,CAAZ,CAAA;kBACA,IAAIyjB,KAAJ,EAAW;sBACP,IAAA,CAAK4lB,QAAL,EADO,CAAA;AAAA,sBAEP,IAAKuB,CAAAA,MAAL,CAAYe,SAAZ,EAFO,CAAA;AAAA,mBAAX,MAGO;AAAA,sBACH,IAAKf,CAAAA,MAAL,CAAYiB,WAAZ,EADG,CAAA;AAAA,mBAAA;AAXG,kBAcV,IAAI,IAAA,CAAK9sC,OAAL,CAAa+rC,MAAjB,EAAyB;sBACrB,KAAKF,MAAL,CAAYvrB,KAAZ,CAAkB,CAAlB,CADqB,EAAA,CAAA;AAAA,mBAAA;kBAIzB,IAAA,CAAKysB,MAAL,GAAc,IAAKA,CAAAA,MAAL,CAAY3sC,KAAZ,CAAkB,CAAlB,CAAd,CAAA;AAlBU,kBAmBV,OAAOitC,EAAP,CAAA;eArDK;AAAA;AAyDb,cAAAC,KAAA,EAAM,UAAUD,EAAV,EAAc;AAAA,kBACZ,IAAIh3B,GAAA,GAAMg3B,EAAA,CAAGvsC,MAAb,CAAA;kBACA,IAAI4jB,KAAA,GAAQ2oB,EAAA,CAAG3nC,KAAH,CAAS,eAAT,CAAZ,CAAA;kBAEA,KAAKqnC,MAAL,GAAcM,EAAA,GAAK,IAAA,CAAKN,MAAxB,CAAA;AAJY,kBAKZ,KAAK3C,MAAL,GAAc,IAAKA,CAAAA,MAAL,CAAYhgC,MAAZ,CAAmB,CAAnB,EAAsB,KAAKggC,MAAL,CAAYtpC,MAAZ,GAAqBuV,GAA3C,CAAd,CAAA;AALY;AAOZ,kBAAKuH,IAAAA,CAAAA,MAAL,IAAevH,GAAf,CAAA;kBACA,IAAIk3B,QAAA,GAAW,IAAKtsC,CAAAA,KAAL,CAAWyE,KAAX,CAAiB,eAAjB,CAAf,CAAA;AARY,kBASZ,KAAKzE,KAAL,GAAa,IAAKA,CAAAA,KAAL,CAAWmJ,MAAX,CAAkB,CAAlB,EAAqB,KAAKnJ,KAAL,CAAWH,MAAX,GAAoB,CAAzC,CAAb,CAAA;AATY,kBAUZ,KAAKqsC,OAAL,GAAe,IAAKA,CAAAA,OAAL,CAAa/iC,MAAb,CAAoB,CAApB,EAAuB,KAAK+iC,OAAL,CAAarsC,MAAb,GAAsB,CAA7C,CAAf,CAAA;AAVY,kBAYZ,IAAI4jB,KAAA,CAAM5jB,MAAN,GAAe,CAAnB,EAAsB;sBAClB,IAAA,CAAKwpC,QAAL,IAAiB5lB,KAAA,CAAM5jB,MAAN,GAAe,CAAhC,CAAA;AADkB,mBAAA;AAZV,kBAeZ,IAAIqK,CAAA,GAAI,KAAK0gC,MAAL,CAAYvrB,KAApB,CAAA;kBAEA,IAAA,CAAKurB,MAAL,GAAc;AAAA,sBACVjB,UAAA,EAAY,IAAKiB,CAAAA,MAAL,CAAYjB,UADd;AAAA,sBAEVgC,SAAA,EAAW,IAAKtC,CAAAA,QAAL,GAAgB,CAFjB;AAAA,sBAGVuC,YAAA,EAAc,IAAKhB,CAAAA,MAAL,CAAYgB,YAHhB;sBAIVC,WAAA,EAAapoB,KAAA,GACR,CAAAA,KAAA,CAAM5jB,MAAN,KAAiBysC,QAAA,CAASzsC,MAA1B,GAAmC,KAAK+qC,MAAL,CAAYgB,YAA/C,GAA8D,CAA9D,IACEU,QAAA,CAASA,QAAA,CAASzsC,MAAT,GAAkB4jB,KAAA,CAAM5jB,MAAjC,CAAA,CAAyCA,MAD5C,GACqD4jB,KAAA,CAAM,CAAN,CAAA,CAAS5jB,MAFrD,GAGX,IAAA,CAAK+qC,MAAL,CAAYgB,YAAZ,GAA2Bx2B,GAAAA;mBAPjC,CAAA;AAjBY,kBA2BZ,IAAI,IAAA,CAAKrW,OAAL,CAAa+rC,MAAjB,EAAyB;AAAA,sBACrB,IAAKF,CAAAA,MAAL,CAAYvrB,KAAZ,GAAoB;0BAACnV,CAAA,CAAE,CAAF,CAAD;0BAAOA,CAAA,CAAE,CAAF,IAAO,IAAKk/B,CAAAA,MAAZ,GAAqBh0B,GAAAA;uBAAhD,CAAA;AADqB,mBAAA;kBAGzB,KAAKg0B,MAAL,GAAc,KAAKD,MAAL,CAAYtpC,MAA1B,CAAA;AA9BY,kBA+BZ,OAAO,IAAP,CAAA;eAxFK;AAAA;cA4Fb0sC,IAAA,EAAK,YAAY;AAAA,kBACT,IAAKR,CAAAA,KAAL,GAAa,IAAb,CAAA;AADS,kBAET,OAAO,IAAP,CAAA;eA9FK;AAAA;cAkGbS,MAAA,EAAO,YAAY;AAAA,kBACX,IAAI,IAAA,CAAKztC,OAAL,CAAa0tC,eAAjB,EAAkC;AAAA,sBAC9B,IAAKT,CAAAA,UAAL,GAAkB,IAAlB,CAAA;AAD8B,mBAAlC,MAEO;sBACH,OAAO,IAAKlC,CAAAA,UAAL,CAAgB,wBAAA,SAAiCT,QAAL,GAAgB,CAAhB,CAA5B,GAAiD,kIAAjD,GAAsL,IAAKoC,CAAAA,YAAL,EAAtM,EAA2N;0BAC9N99B,IAAA,EAAM,EADwN;0BAE9Ns9B,KAAA,EAAO,IAFuN;0BAG9NnyB,IAAA,EAAM,IAAA,CAAKuwB,QAAAA;AAHmN,uBAA3N,CAAP,CAAA;AADG,mBAAA;AAHI,kBAWX,OAAO,IAAP,CAAA;eA7GK;AAAA;AAiHb,cAAAqD,IAAA,EAAK,UAAUhxB,CAAV,EAAa;AAAA,kBACV,IAAA,CAAK2wB,KAAL,CAAW,IAAKrsC,CAAAA,KAAL,CAAWb,KAAX,CAAiBuc,CAAjB,CAAX,CADU,CAAA;eAjHL;AAAA;cAsHbixB,SAAA,EAAU,YAAY;kBACd,IAAIC,IAAA,GAAO,IAAA,CAAKV,OAAL,CAAa/iC,MAAb,CAAoB,CAApB,EAAuB,KAAK+iC,OAAL,CAAarsC,MAAb,GAAsB,IAAA,CAAKG,KAAL,CAAWH,MAAxD,CAAX,CAAA;kBACA,OAAQ,CAAA+sC,IAAA,CAAK/sC,MAAL,GAAc,EAAd,GAAmB,KAAnB,GAAyB,EAAzB,IAA+B+sC,IAAA,CAAKzjC,MAAL,CAAY,CAAC,EAAb,CAAA,CAAiBpJ,OAAjB,CAAyB,KAAzB,EAAgC,EAAhC,CAAvC,CAAA;eAxHK;AAAA;cA4Hb8sC,aAAA,EAAc,YAAY;AAAA,kBAClB,IAAIC,IAAA,GAAO,IAAA,CAAK9sC,KAAhB,CAAA;AADkB,kBAElB,IAAI8sC,IAAA,CAAKjtC,MAAL,GAAc,EAAlB,EAAsB;AAAA,sBAClBitC,IAAA,IAAQ,IAAKhB,CAAAA,MAAL,CAAY3iC,MAAZ,CAAmB,CAAnB,EAAsB,EAAG2jC,GAAAA,IAAA,CAAKjtC,MAA9B,CAAR,CAAA;AADkB,mBAAA;kBAGtB,OAAQ,CAAAitC,IAAA,CAAK3jC,MAAL,CAAY,CAAZ,EAAc,EAAd,CAAA,IAAqB2jC,IAAA,CAAKjtC,MAAL,GAAc,EAAd,GAAmB,KAAnB,GAA2B,EAA3B,CAArB,EAAqDE,OAAtD,CAA8D,KAA9D,EAAqE,EAArE,CAAP,CAAA;eAjIK;AAAA;cAqIb0rC,YAAA,EAAa,YAAY;AAAA,kBACjB,IAAIsB,GAAA,GAAM,IAAKJ,CAAAA,SAAL,EAAV,CAAA;AADiB,kBAEjB,IAAIj7B,CAAA,GAAI,IAAIlR,KAAJ,CAAUusC,GAAA,CAAIltC,MAAJ,GAAa,CAAvB,CAA0BmB,CAAAA,IAA1B,CAA+B,GAA/B,CAAR,CAAA;AAFiB,kBAGjB,OAAO+rC,GAAA,GAAM,IAAA,CAAKF,aAAL,EAAN,GAA6B,IAA7B,GAAoCn7B,CAApC,GAAwC,GAA/C,CAAA;eAxIK;AAAA;AA4Ib,cAAAs7B,UAAA,EAAW,UAAUhtC,KAAV,EAAiBitC,YAAjB,EAA+B;AAAA,kBAClC,IAAIhC,KAAJ,EACIxnB,KADJ,EAEIypB,MAFJ,CAAA;AADkC,kBAKlC,IAAI,IAAA,CAAKnuC,OAAL,CAAa0tC,eAAjB,EAAkC;AAAA;AAE9B,sBAAAS,MAAA,GAAS;AAAA,0BACL7D,QAAA,EAAU,IAAA,CAAKA,QADV;AAAA,0BAELuB,MAAA,EAAQ;AAAA,8BACJjB,UAAA,EAAY,IAAKiB,CAAAA,MAAL,CAAYjB,UADpB;AAAA,8BAEJgC,SAAA,EAAW,IAAA,CAAKA,SAFZ;AAAA,8BAGJC,YAAA,EAAc,IAAKhB,CAAAA,MAAL,CAAYgB,YAHtB;AAAA,8BAIJC,WAAA,EAAa,IAAKjB,CAAAA,MAAL,CAAYiB,WAAAA;2BANxB;AAAA,0BAQL1C,MAAA,EAAQ,IAAA,CAAKA,MARR;AAAA,0BASLnpC,KAAA,EAAO,IAAA,CAAKA,KATP;AAAA,0BAULmtC,OAAA,EAAS,IAAA,CAAKA,OAVT;AAAA,0BAWLjB,OAAA,EAAS,IAAA,CAAKA,OAXT;AAAA,0BAYL9C,MAAA,EAAQ,IAAA,CAAKA,MAZR;AAAA,0BAaLzsB,MAAA,EAAQ,IAAA,CAAKA,MAbR;AAAA,0BAcLovB,KAAA,EAAO,IAAA,CAAKA,KAdP;AAAA,0BAeLD,MAAA,EAAQ,IAAA,CAAKA,MAfR;AAAA,0BAgBLjD,EAAA,EAAI,IAAA,CAAKA,EAhBJ;0BAiBLsD,cAAA,EAAgB,IAAKA,CAAAA,cAAL,CAAoBhtC,KAApB,CAA0B,CAA1B,CAjBX;0BAkBL8sC,IAAA,EAAM,IAAA,CAAKA,IAAAA;uBAlBf,CAAA;AAF8B,sBAsB9B,IAAI,IAAA,CAAKltC,OAAL,CAAa+rC,MAAjB,EAAyB;AAAA,0BACrBoC,MAAA,CAAOtC,MAAP,CAAcvrB,KAAd,GAAsB,IAAA,CAAKurB,MAAL,CAAYvrB,KAAZ,CAAkBlgB,KAAlB,CAAwB,CAAxB,CAAtB,CAAA;AADqB,uBAAA;AAtBK,mBAAA;kBA2BlCskB,KAAA,GAAQzjB,KAAA,CAAM,CAAN,EAASA,KAAT,CAAe,iBAAf,CAAR,CAAA;kBACA,IAAIyjB,KAAJ,EAAW;AAAA,sBACP,KAAK4lB,QAAL,IAAiB5lB,KAAA,CAAM5jB,MAAvB,CAAA;AADO,mBAAA;kBAGX,IAAA,CAAK+qC,MAAL,GAAc;AAAA,sBACVjB,UAAA,EAAY,IAAKiB,CAAAA,MAAL,CAAYe,SADd;AAAA,sBAEVA,SAAA,EAAW,IAAKtC,CAAAA,QAAL,GAAgB,CAFjB;AAAA,sBAGVuC,YAAA,EAAc,IAAKhB,CAAAA,MAAL,CAAYiB,WAHhB;sBAIVA,WAAA,EAAapoB,KAAA,GACAA,KAAA,CAAMA,KAAA,CAAM5jB,MAAN,GAAe,CAArB,CAAwBA,CAAAA,MAAxB,GAAiC4jB,KAAA,CAAMA,KAAA,CAAM5jB,MAAN,GAAe,CAArB,EAAwBG,KAAxB,CAA8B,QAA9B,CAAwC,CAAA,CAAxC,EAA2CH,MAD5E,GAEA,IAAK+qC,CAAAA,MAAL,CAAYiB,WAAZ,GAA0B7rC,KAAA,CAAM,CAAN,EAASH,MAAAA;mBANpD,CAAA;AApCkC,kBA4ClC,KAAKspC,MAAL,IAAenpC,KAAA,CAAM,CAAN,CAAf,CAAA;AA5CkC,kBA6ClC,KAAKA,KAAL,IAAcA,KAAA,CAAM,CAAN,CAAd,CAAA;AA7CkC,kBA8ClC,IAAKmtC,CAAAA,OAAL,GAAentC,KAAf,CAAA;kBACA,KAAKopC,MAAL,GAAc,KAAKD,MAAL,CAAYtpC,MAA1B,CAAA;AA/CkC,kBAgDlC,IAAI,IAAA,CAAKd,OAAL,CAAa+rC,MAAjB,EAAyB;AAAA,sBACrB,IAAKF,CAAAA,MAAL,CAAYvrB,KAAZ,GAAoB;0BAAC,KAAK1C,MAAN;AAAA,0BAAc,IAAKA,CAAAA,MAAL,IAAe,IAAA,CAAKysB,MAAAA;uBAAtD,CAAA;AADqB,mBAAA;AAhDS,kBAmDlC,IAAK2C,CAAAA,KAAL,GAAa,KAAb,CAAA;AAnDkC,kBAoDlC,IAAKC,CAAAA,UAAL,GAAkB,KAAlB,CAAA;AApDkC,kBAqDlC,IAAKF,CAAAA,MAAL,GAAc,IAAA,CAAKA,MAAL,CAAY3sC,KAAZ,CAAkBa,KAAA,CAAM,CAAN,CAASH,CAAAA,MAA3B,CAAd,CAAA;AArDkC,kBAsDlC,KAAKqsC,OAAL,IAAgBlsC,KAAA,CAAM,CAAN,CAAhB,CAAA;AAtDkC,kBAuDlCirC,KAAA,GAAQ,IAAA,CAAKhC,aAAL,CAAmBsB,IAAnB,CAAwB,IAAxB,EAA8B,IAAK1B,CAAAA,EAAnC,EAAuC,IAAvC,EAA6CoE,YAA7C,EAA2D,IAAA,CAAKd,cAAL,CAAoB,IAAKA,CAAAA,cAAL,CAAoBtsC,MAApB,GAA6B,CAAjD,CAA3D,CAAR,CAAA;kBACA,IAAI,IAAKosC,CAAAA,IAAL,IAAa,IAAA,CAAKH,MAAtB,EAA8B;AAAA,sBAC1B,IAAKG,CAAAA,IAAL,GAAY,KAAZ,CAAA;AAD0B,mBAAA;kBAG9B,IAAIhB,KAAJ,EAAW;AAAA,sBACP,OAAOA,KAAP,CAAA;AADO,mBAAX,MAEO,IAAI,IAAKe,CAAAA,UAAT,EAAqB;AAAA;AAExB,sBAAS5pC,KAAAA,IAAAA,CAAT,IAAc8qC,MAAd,EAAsB;0BAClB,KAAK9qC,CAAL,CAAA,GAAU8qC,MAAA,CAAO9qC,CAAP,CAAV,CAAA;AADkB,uBAAA;sBAGtB,OAAO,KAAP,CAAA;AALwB,mBAAA;AA7DM,kBAoElC,OAAO,KAAP,CAAA;eAhNK;AAAA;cAoNb0qC,IAAA,EAAK,YAAY;AAAA,kBACT,IAAI,IAAKb,CAAAA,IAAT,EAAe;sBACX,OAAO,IAAK3B,CAAAA,GAAZ,CAAA;AADW,mBAAA;AADN,kBAIT,IAAI,CAAC,IAAKwB,CAAAA,MAAV,EAAkB;AAAA,sBACd,IAAKG,CAAAA,IAAL,GAAY,IAAZ,CAAA;AADc,mBAAA;AAJT,kBAQT,IAAIhB,KAAJ,EACIjrC,KADJ,EAEIotC,SAFJ,EAGI/sC,KAHJ,CAAA;AARS,kBAYT,IAAI,CAAC,IAAK0rC,CAAAA,KAAV,EAAiB;AAAA,sBACb,IAAK5C,CAAAA,MAAL,GAAc,EAAd,CAAA;AADa,sBAEb,IAAKnpC,CAAAA,KAAL,GAAa,EAAb,CAAA;AAFa,mBAAA;AAZR,kBAgBT,IAAIqtC,KAAA,GAAQ,IAAKC,CAAAA,aAAL,EAAZ,CAAA;AAhBS,kBAiBT,KAAK,IAAIxrC,CAAA,GAAI,CAAR,EAAWA,CAAA,GAAIurC,KAAA,CAAMxtC,MAA1B,EAAkCiC,CAAA,EAAlC,EAAuC;AAAA,sBACnCsrC,SAAA,GAAY,IAAA,CAAKtB,MAAL,CAAY9rC,KAAZ,CAAkB,IAAA,CAAKqtC,KAAL,CAAWA,KAAA,CAAMvrC,CAAN,CAAX,CAAlB,CAAZ,CAAA;sBACA,IAAIsrC,SAAA,MAAeptC,KAAD,IAAUotC,SAAA,CAAU,CAAV,CAAavtC,CAAAA,MAAb,GAAsBG,KAAA,CAAM,CAAN,CAASH,CAAAA,MAAzC,CAAlB,EAAoE;0BAChEG,KAAA,GAAQotC,SAAR,CAAA;0BACA/sC,KAAA,GAAQyB,CAAR,CAAA;AAFgE,0BAGhE,IAAI,IAAA,CAAK/C,OAAL,CAAa0tC,eAAjB,EAAkC;AAAA,8BAC9BxB,KAAA,GAAQ,IAAK+B,CAAAA,UAAL,CAAgBI,SAAhB,EAA2BC,KAAA,CAAMvrC,CAAN,CAA3B,CAAR,CAAA;AAD8B,8BAE9B,IAAImpC,KAAA,KAAU,KAAd,EAAqB;AAAA,kCACjB,OAAOA,KAAP,CAAA;AADiB,+BAArB,MAEO,IAAI,IAAKe,CAAAA,UAAT,EAAqB;kCACxBhsC,KAAA,GAAQ,KAAR,CAAA;AADwB,kCAExB,SAAA;AAFwB,+BAArB,MAGA;AAAA;AAEH,kCAAA,OAAO,KAAP,CAAA;AAFG,+BAAA;2BAPX,MAWO,IAAI,CAAC,KAAKjB,OAAL,CAAawuC,IAAlB,EAAwB;8BAC3B,MAAA;AAD2B,2BAAA;AAdiC,uBAAA;AAFjC,mBAAA;kBAqBvC,IAAIvtC,KAAJ,EAAW;AAAA,sBACPirC,KAAA,GAAQ,IAAK+B,CAAAA,UAAL,CAAgBhtC,KAAhB,EAAuBqtC,KAAA,CAAMhtC,KAAN,CAAvB,CAAR,CAAA;AADO,sBAEP,IAAI4qC,KAAA,KAAU,KAAd,EAAqB;AAAA,0BACjB,OAAOA,KAAP,CAAA;AADiB,uBAAA;AAFd;AAMP,sBAAA,OAAO,KAAP,CAAA;AANO,mBAAA;AAtCF,kBA8CT,IAAI,IAAA,CAAKa,MAAL,KAAgB,EAApB,EAAwB;sBACpB,OAAO,IAAKxB,CAAAA,GAAZ,CAAA;AADoB,mBAAxB,MAEO;sBACH,OAAO,IAAKR,CAAAA,UAAL,CAAgB,wBAAA,SAAiCT,QAAL,GAAgB,CAAhB,CAA5B,GAAiD,wBAAjD,GAA4E,IAAKoC,CAAAA,YAAL,EAA5F,EAAiH;0BACpH99B,IAAA,EAAM,EAD8G;0BAEpHs9B,KAAA,EAAO,IAF6G;0BAGpHnyB,IAAA,EAAM,IAAA,CAAKuwB,QAAAA;AAHyG,uBAAjH,CAAP,CAAA;AADG,mBAAA;eApQF;AAAA;AA8Qb,cAAA2B,GAAA,EAAI,SAASA,GAAT,GAAe;AAAA,kBACX,IAAI9gC,CAAA,GAAI,IAAK4iC,CAAAA,IAAL,EAAR,CAAA;kBACA,IAAI5iC,CAAJ,EAAO;AAAA,sBACH,OAAOA,CAAP,CAAA;AADG,mBAAP,MAEO;AAAA,sBACH,OAAO,IAAA,CAAK8gC,GAAL,EAAP,CAAA;AADG,mBAAA;eAlRF;AAAA;AAwRb,cAAAwC,KAAA,EAAM,SAASA,KAAT,CAAeC,SAAf,EAA0B;AAAA,kBACxB,KAAKtB,cAAL,CAAoBzrC,IAApB,CAAyB+sC,SAAzB,CADwB,CAAA;eAxRnB;AAAA;AA6Rb,cAAAC,QAAA,EAAS,SAASA,QAAT,GAAoB;kBACrB,IAAIhyB,CAAA,GAAI,IAAA,CAAKywB,cAAL,CAAoBtsC,MAApB,GAA6B,CAArC,CAAA;AADqB,kBAErB,IAAI6b,CAAA,GAAI,CAAR,EAAW;AAAA,sBACP,OAAO,IAAKywB,CAAAA,cAAL,CAAoB1iC,GAApB,EAAP,CAAA;AADO,mBAAX,MAEO;AAAA,sBACH,OAAO,IAAK0iC,CAAAA,cAAL,CAAoB,CAApB,CAAP,CAAA;AADG,mBAAA;eAjSF;AAAA;AAuSb,cAAAmB,aAAA,EAAc,SAASA,aAAT,GAAyB;AAAA,kBAC/B,IAAI,IAAKnB,CAAAA,cAAL,CAAoBtsC,MAApB,IAA8B,IAAKssC,CAAAA,cAAL,CAAoB,IAAA,CAAKA,cAAL,CAAoBtsC,MAApB,GAA6B,CAAjD,CAAlC,EAAuF;AAAA,sBACnF,OAAO,IAAK86B,CAAAA,UAAL,CAAgB,IAAA,CAAKwR,cAAL,CAAoB,IAAA,CAAKA,cAAL,CAAoBtsC,MAApB,GAA6B,CAAjD,CAAhB,CAAA,CAAqEwtC,KAA5E,CAAA;AADmF,mBAAvF,MAEO;sBACH,OAAO,IAAK1S,CAAAA,UAAL,CAAgB,SAAhB,CAAA,CAA2B0S,KAAlC,CAAA;AADG,mBAAA;eA1SF;AAAA;AAgTb,cAAAM,QAAA,EAAS,SAASA,QAAT,CAAkBjyB,CAAlB,EAAqB;AAAA,kBACtBA,CAAA,GAAI,IAAA,CAAKywB,cAAL,CAAoBtsC,MAApB,GAA6B,CAA7B,GAAiCqI,IAAA,CAAK6N,GAAL,CAAS2F,CAAA,IAAK,CAAd,CAArC,CAAA;AADsB,kBAEtB,IAAIA,CAAA,IAAK,CAAT,EAAY;AAAA,sBACR,OAAO,IAAKywB,CAAAA,cAAL,CAAoBzwB,CAApB,CAAP,CAAA;AADQ,mBAAZ,MAEO;AAAA,sBACH,OAAO,SAAP,CAAA;AADG,mBAAA;eApTF;AAAA;AA0Tb,cAAAkyB,SAAA,EAAU,SAASA,SAAT,CAAmBH,SAAnB,EAA8B;AAAA,kBAChC,IAAKD,CAAAA,KAAL,CAAWC,SAAX,CADgC,CAAA;eA1T3B;AAAA;AA+Tb,cAAAI,cAAA,EAAe,SAASA,cAAT,GAA0B;AAAA,kBACjC,OAAO,IAAA,CAAK1B,cAAL,CAAoBtsC,MAA3B,CAAA;eAhUK;cAkUbd,OAAA,EAAS,EAlUI;AAAA,cAmUbkqC,aAAA,EAAe,SAASC,SAAT,CAAmBL,EAAnB,EAAsBiF,GAAtB,EAA0BC,yBAA1B,EAAoDC,QAApD,EAA8D;AAAA,kBAE7E,QAAOD,yBAAP;AAAA,kBACA,KAAK,CAAL;AAAA;sBADA,MAAA;AAAA,kBAGA,KAAK,CAAL;AAAA,sBAAO,OAAO,CAAP,CAAA;AAHP,kBAKA,KAAK,CAAL;AAAA,sBAAOD,GAAA,CAAI3E,MAAJ,GAAa2E,GAAA,CAAI3E,MAAJ,CAAWhgC,MAAX,CAAkB,CAAlB,EAAoB2kC,GAAA,CAAI1E,MAAJ,GAAW,CAA/B,CAAb,CAAA;AAAP,sBAAuD,OAAO,CAAP,CAAA;AALvD,kBAOA,KAAK,CAAL;AAAA,sBAAO,OAAO,EAAP,CAAA;AAPP,kBASA,KAAK,CAAL;AAAA,sBAAO,OAAO,EAAP,CAAA;AATP,kBAWA,KAAK,CAAL;AAAA,sBAAO,OAAO,EAAP,CAAA;AAXP,kBAaA,KAAK,CAAL;AAAA,sBAAO,OAAO,EAAP,CAAA;AAbP,kBAeA,KAAK,CAAL;AAAA,sBAAO,OAAO,EAAP,CAAA;AAfP,kBAiBA,KAAK,CAAL;AAAA,sBAAO,OAAO,EAAP,CAAA;AAjBP,kBAmBA,KAAK,CAAL;AAAA,sBAAO,OAAO,EAAP,CAAA;AAnBP,kBAqBA,KAAK,EAAL;AAAA,sBAAQ,OAAO,EAAP,CAAA;AArBR,kBAuBA,KAAK,EAAL;AAAA,sBAAQ,OAAO,CAAP,CAAA;AAvBR,kBAyBA,KAAK,EAAL;AAAA,sBAAQ,OAAO,EAAP,CAAA;AAzBR,kBA2BA,KAAK,EAAL;AAAA,sBAAQ,OAAO,SAAP,CAAA;AA3BR,mBAAA;eArUa;AAAA,cAoWbiE,KAAA,EAAO;AAAA,kBAAC,UAAD;AAAA,kBAAY,6DAAZ;AAAA,kBAA0E,oEAA1E;AAAA,kBAA+I,SAA/I;AAAA,kBAAyJ,SAAzJ;AAAA,kBAAmK,SAAnK;AAAA,kBAA6K,SAA7K;AAAA,kBAAuL,QAAvL;AAAA,kBAAgM,QAAhM;AAAA,kBAAyM,aAAzM;AAAA,kBAAuN,cAAvN;AAAA,kBAAsO,aAAtO;AAAA,kBAAoP,QAApP;kBAA6P,QAAA;eApWvP;AAAA,cAqWb1S,UAAA,EAAY;AAAA,kBAAC,SAAU,EAAA;AAAA,sBAAC,OAAQ,EAAA;AAAA,0BAAC,CAAD;AAAA,0BAAG,CAAH;AAAA,0BAAK,CAAL;AAAA,0BAAO,CAAP;AAAA,0BAAS,CAAT;AAAA,0BAAW,CAAX;AAAA,0BAAa,CAAb;AAAA,0BAAe,CAAf;AAAA,0BAAiB,CAAjB;AAAA,0BAAmB,CAAnB;AAAA,0BAAqB,EAArB;AAAA,0BAAwB,EAAxB;AAAA,0BAA2B,EAA3B;0BAA8B,EAAA;uBAAvC;AAAA,sBAA2C,aAAY,IAAA;AAAvD,mBAAA;AAAX,eAAA;WArWZ,CAAA;AADuB,UAwWvB,OAAO8P,KAAP,CAAA;AAxWuB,OAAX,GAAZ,CAAA;AAxOwB,MAklBxBxV,MAAA,CAAOwV,KAAP,GAAeA,KAAf,CAAA;MACA,SAASwD,MAAT,GAAmB;AAAA,UACjB,IAAKpF,CAAAA,EAAL,GAAU,EAAV,CAAA;AADiB,OAAA;AAnlBK,MAslBxBoF,MAAA,CAAOtlB,SAAP,GAAmBsM,MAAnB,CAAA;AAtlBwB,MAslBEA,MAAA,CAAOgZ,MAAP,GAAgBA,MAAhB,CAAA;MAC1B,OAAO,IAAIA,MAAJ,EAAP,CAAA;AAvlBwB,GAAX,GAAb,CAAA;EA2lBA,IAAI,OAAOC,eAAP,KAAmB,WAAnB,IAAkC,QAAA,KAAmB,WAAzD,EAAsE;AAAA,MACtEvkC,iBAAiBsrB,MAAjB,CAAA;MACAtrB,OAAAA,CAAAA,MAAAA,GAAiBsrB,MAAA,CAAOgZ,MAAxB,CAAA;AAFsE,MAGtEtkC,gBAAgB,YAAY;UAAE,OAAOsrB,MAAA,CAAO/0B,KAAP,CAAam0B,KAAb,CAAmBY,MAAnB,EAA2BuV,SAA3B,CAAP,CAAA;OAA9B,CAAA;AAHsE,GAAA;;;;;;;;AC/pBtE,SAAwB2D,SAAxB,CAAkC9sC,KAAlC,EAAyC;AAAA,IACjC,IAAAA,KAAA,YAAiB6N,MAAjB,IAA2B,OAAO7N,KAAP,KAAiB,QAA5C,IAAwD+sC,WAAA,CAAYC,MAAZ,CAAmBhtC,KAAnB,CAAxD,EAAmF;AAAA,QAC/E,IAAA;AAAA,YAEA,OAAOitC,QAAA,CAASpuC,KAAT,CAAemB,KAAA,CAAMgG,QAAN,EAAf,CAAP,CAFA;AAAA,SAAA,QAGKuC,GAAQ;AAAA,YACP,MAAA,IAAIhE,YAAJ,CAAiBgE,CAAjB,CAAA,CADO;AAAA,SAJkE;AAAA,KADlD;AAAA,IAU9B,OAAAvI,KAAA,CAV8B;AAAA;;ACkBjB,SAAA2gC,aAAA,CAAc3gC,KAAd,EAA2D+/B,SAAA,GAAiBmN,EAA5E,EAAkG;AAAA,IACtH,IAAInpC,CAAA,GAAI/D,KAAR,CADsH;AAAA,IAGlH,IAAA;AAAA,QACA+D,CAAA,GAAI+oC,SAAA,CAAU/oC,CAAV,CAAJ,CADA;AAAA,KAAA,QAEKwE,GAAQ;AAAA,QACb,OAAO,CAACA,CAAD,CAAP,CADa;AAAA,KALqG;AAAA,IAU/G,OAAA4kC,eAAA,CAAiBppC,CAAjB,EAAoBg8B,SAApB,CAAA,CAV+G;AAAA;;ACf1H,MAAMqN,sBAAA,GAAyB,CAA/B,CARA;AASA,MAAMC,oBAAA,GAAuB,EAA7B,CATA;AAWA,SAASC,OAAT,CAAiB5tC,KAAjB,EAAmD6tC,KAAnD,EAA2E;AAAA,IACvE,IAAI,CAAC7tC,KAAD,IAAUkQ,OAAA,CAAQlQ,KAAR,MAAmB,QAAjC;AAAA,QAAkD,OAAA,IAAA,CADqB;AAAA,IAEvE,OAAO,CAAC,CAACA,KAAA,CAAMf,KAAN,CAAY4uC,KAAZ,CAAT,CAFuE;AAAA,CAX3E;AAgBA,SAASC,cAAT,CAAwBjrC,MAAxB,EAA6C;AAAA,IACzC,IAAIA,MAAA,CAAOC,GAAX,EAAgB;AAAA,QACZ,OAAOD,MAAA,CAAOC,GAAP,CAAWY,KAAX,CAAiB,GAAjB,CAAsB5E,CAAAA,MAA7B,CADY;AAAA,KAAhB,MAEO;AAAA,QACI,OAAA,CAAA,CADJ;AAAA,KAHkC;AAAA,CAhB7C;AAwBA,SAASivC,mBAAT,CAA6BtvC,GAA7B,EAAuCmB,IAAvC,EAAyDkC,IAAzD,EAAuG;AAAA,IAC7F,MAAAksC,OAAA,GAAU,IAAI/oB,GAAJ,CAAQrlB,IAAR,CAAV,CAD6F;AAAA,IAEnG,MAAM+T,MAAA,GAAS,EAAf,CAFmG;AAAA,IAGnG9T,MAAA,CAAOD,IAAP,CAAYnB,GAAZ,CAAiBoD,CAAAA,OAAjB,CAA8BR,CAAL,IAAK;AAAA,QAC1B,IAAI,CAAC2sC,OAAA,CAAQ1oC,GAAR,CAAYjE,CAAZ,CAAL,EAAqB;AAAA,YACjB,MAAM47B,IAAA,GAAOn7B,IAAA,GAAO,CAAGA,GAAAA,IAAH,EAAO,CAAP,GAAWT,CAAX,EAAP,CAAA,GAAwB,IAArC,CADiB;AAAA,YAEVsS,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB3C,IAApB,EAA0Bx+B,GAAA,CAAI4C,CAAJ,CAA1B,EAAkC,CAAA,sBAAA,GAAyBA,CAAzB,EAA0B,CAA1B,CAAlC,CAAL,CAFU,CAAA;AAAA,SADK;AAAA,KAA9B,CAHmG,CAAA;AAAA,IAS5F,OAAAsS,MAAA,CAT4F;AAAA,CAxBvG;AAoCA,MAAMs6B,mBAAA;AAA0B,IAAAhpB,GAAA,CAAI;AAAA,IAAC,QAAD;AAAA,IAAW,QAAX;AAAA,IAAqB,YAArB;AAAA,IAAmC,cAAnC;AAAA,IAAmD,OAAnD;AAAA,IAA4D,eAA5D;AAAA,CAAJ,CAAhC,CApCA;AAqCA,SAASipB,eAAT,CAAyBrrC,MAAzB,EAAsC9B,CAAtC,EAAyE;AAAA,IACrE,MAAM4S,MAAA,GAAS,EAAf,CADqE;AAAA,IAOrE,MAAMw6B,UAAA,GAAa;AAAA,QAAC,MAAD;AAAA,QAAS,KAAT;AAAA,QAAgB,UAAhB;AAAA,KAAnB,CAPqE;AAAA,IAQrEx6B,MAAA,CAAOhU,IAAP,CAAY,GAAGouC,mBAAA,CAAoBlrC,MAApB,EAA4BsrC,UAA5B,EAAwC,QAAxC,CAAf,CARqE,CAAA;AAAA,IAarE,IAAI,CAACF,mBAAA,CAAoB3oC,GAApB,CAAwB6I,MAAA,CAAOtL,MAAA,CAAOlB,IAAd,CAAxB,CAAL,EAAmD;AAAA,QAC/CgS,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,CAAW,QAAX,GAAW7+B,CAAX,QAAA,CAApB,EAA0C8B,MAAA,CAAOlB,IAAjD,EAAuD,CAAoB,iBAApB,GAAoBlC,KAAA,CAAMiD,IAAN,CAAWurC,mBAAX,CAAA,CAAgChuC,IAAhC,CAAqC,IAArC,CAApB,GAAA,CAAvD,CAAZ,CAD+C,CAAA;AAAA,KAbkB;AAAA,IAuBrE,MAAMmuC,gBAAA,GAAmB,sBAAzB,CAvBqE;AAAA,IAwBjE,IAAA,CAACvrC,MAAA,CAAOC,GAAR,IAAe,CAAC8qC,OAAA,CAAQ/qC,MAAA,CAAOC,GAAf,EAAoBsrC,gBAApB,CAAhB,EAAuD;AAAA,QAChDz6B,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB,CAAA,QAAA,GAAW7+B,CAAX,EAAqB,KAArB,CAApB,EAAyC8B,MAAA,CAAOC,GAAhD,EAAqD,qCAArD,CAAL,CADgD,CAAA;AAAA,KAxBU;AAAA,IA4B9D,OAAA6Q,MAAA,CA5B8D;AAAA,CArCzE;AAoEA,SAAS06B,mBAAT,CAA6BC,YAA7B,EAA2E;AAAA,IACvE,MAAM36B,MAAA,GAAS,EAAf,CADuE;AAAA,IAEvE,IAAI26B,YAAA,GAAeX,oBAAnB,EAAyC;AAAA,QAC9Bh6B,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB,SAApB,EAA+B,IAA/B,EAAqC,CAAuB,oBAAvB,GAAuB+N,oBAAvB,mBAAA,CAArC,CAAL,CAD8B,CAAA;AAAA,KAF8B;AAAA,IAKhE,OAAAh6B,MAAA,CALgE;AAAA,CApE3E;AA4EA,SAAS46B,gBAAT,CAA0BjtC,OAA1B,EAGE;AAAA,IACE,MAAMqS,MAAA,GAAS,EAAf,CADF;AAAA,IAEE,IAAI26B,YAAA,GAAe,CAAnB,CAFF;AAAA,IAIEzuC,MAAA,CAAOD,IAAP,CAAY0B,OAAZ,CAAA,CAAqBO,OAArB,CAA6B,CAACwC,CAAD,EAAYtD,CAAZ,KAA0B;AAAA,QACnD,MAAMytC,YAAA,GAAeN,eAAA,CAAgB5sC,OAAA,CAAQ+C,CAAR,CAAhB,EAA4BtD,CAA5B,CAArB,CADmD;AAAA,QAI/C,IAAA,CAACytC,YAAA,CAAa1vC,MAAd,EAAsB;AAAA,YACtBwvC,YAAA,GAAeA,YAAA,GAAeR,cAAA,CAAexsC,OAAA,CAAQ+C,CAAR,CAAf,CAA9B,CADsB;AAAA,SAJyB;AAAA,QAQ5CsP,MAAA,CAAAhU,IAAA,CAAK,GAAG6uC,YAAR,CAR4C,CAAA;AAAA,KAAvD,CAJF,CAAA;AAAA,IAeS,OAAA;AAAA,QAAC76B,MAAD;AAAA,QAAS26B,YAAT;AAAA,KAAA,CAfT;AAAA,CA/EF;AAiGA,SAASG,eAAT,CAAyBxP,OAAA,GAAsB,EAA/C,EAGE;AAAA,IACE,IAAItrB,MAAA,GAAiC,EAArC,CADF;AAAA,IAGE,IAAI26B,YAAA,GAAe,CAAnB,CAHF;AAAA,IAIE,MAAMI,eAAA,GAAkB,CAACzP,QAAAA,GAAsB,EAAvB,KAA8B;AAAA,QAClD,KAAW6B,MAAAA,UAAX,IAAyB7B,QAAzB,EAAkC;AAAA,YAC9B,MAAM3+B,KAAA,GAAQwgC,UAAA,CAAWt2B,IAAzB,CAD8B;AAAA,YAE9B,IAAI,CAAClK,KAAL;AAAA,gBAAY,SAFkB;AAAA,YAI9B,IAAIA,KAAA,CAAM2+B,OAAV,EAAmB;AAAA,gBACfyP,eAAA,CAAgBpuC,KAAA,CAAM2+B,OAAtB,CADe,CAAA;AAAA,aAJW;AAAA,YAQrBtrB,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAciqC,aAAA,CAAcruC,KAAd,EAAqBT,MAAA,CAAOD,IAAP,CAAY4tC,EAAA,CAAGhtC,KAAf,CAArB,CAAd,CAAA,CARqB;AAAA,YAU9B,IAAIF,KAAA,CAAMgB,OAAV,EAAmB;AAAA,gBACT,MAAAstC,aAAA,GAAgBL,gBAAA,CAAiBjuC,KAAA,CAAMgB,OAAvB,CAAhB,CADS;AAAA,gBAEfgtC,YAAA,IAAgBM,aAAA,CAAcN,YAA9B,CAFe;AAAA,gBAGN36B,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAckqC,aAAA,CAAcj7B,MAA5B,CAAA,CAHM;AAAA,aAVW;AAAA,SADgB;AAAA,KAAtD,CAJF;AAAA,IAuBE+6B,eAAA,CAAgBzP,OAAhB,CAvBF,CAAA;AAAA,IAwBM,IAAAA,OAAA,CAAQngC,MAAR,KAAoB,IAAImmB,GAAJ,CAAQga,OAAA,CAAQv+B,GAAR,CAAYK,CAAA,IAAKA,CAAA,CAAEgB,EAAnB,CAAR,CAAA,CAAiC+c,IAArD,EAA2D;AAAA,QAC3DnL,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,IAApB,EAA0B,IAA1B,EAAgC,0BAAhC,CAAZ,CAD2D,CAAA;AAAA,KAxBjE;AAAA,IA4BS,OAAA;AAAA,QAACjsB,MAAD;AAAA,QAAS26B,YAAT;AAAA,KAAA,CA5BT;AAAA,CApGF;AAmIA,SAASK,aAAT,CAAuBruC,KAAvB,EAAmCuuC,QAAnC,EAAiF;AAAA,IAC7E,MAAMl7B,MAAA,GAAS,EAAf,CAD6E;AAAA,IAW7E,MAAMm7B,sBAAA,GAAyB;AAAA,QAC3B,OAD2B;AAAA,QAE3B,IAF2B;AAAA,QAG3B,cAH2B;AAAA,QAI3B,OAJ2B;AAAA,QAK3B,SAL2B;AAAA,QAM3B,UAN2B;AAAA,QAO3B,YAP2B;AAAA,QAQ3B,WAR2B;AAAA,QAS3B,QAT2B;AAAA,QAU3B,QAV2B;AAAA,KAA/B,CAX6E;AAAA,IAwBvE,MAAAC,gBAAA,GAAmBhB,mBAAA,CAAoBztC,KAApB,EAA2B;AAAA,QAAC,GAAGuuC,QAAJ;AAAA,QAAc,GAAGC,sBAAjB;AAAA,KAA3B,CAAnB,CAxBuE;AAAA,IAyBtEn7B,MAAA,CAAAhU,IAAA,CAAK,GAAGovC,gBAAR,CAzBsE,CAAA;AAAA,IA2B7E,IAAIzuC,KAAA,CAAMsC,OAAN,GAAgB8qC,sBAAhB,IAA0CptC,KAAA,CAAMsC,OAAN,GAAgB8qC,sBAA9D,EAAsF;AAAA,QAC3E/5B,MAAA,CAAAhU,IAAA,CAAK,IAAIigC,eAAJ,CAAoB,SAApB,EAA+Bt/B,KAAA,CAAMsC,OAArC,EAA8C,CAAA,sBAAA,GAAyB8qC,sBAAzB,EAAA,CAA9C,CAAL,CAD2E,CAAA;AAAA,KA3BT;AAAA,IAoC7E,MAAMsB,eAAA,GAAkB,uDAAxB,CApC6E;AAAA,IAqC7E,IAAI,CAACpB,OAAA,CAAQttC,KAAA,CAAM2D,MAAd,EAAsB+qC,eAAtB,CAAL,EAA6C;AAAA,QACzCr7B,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,QAApB,EAA8Bt/B,KAAA,CAAM2D,MAApC,EAA4C,+CAA5C,CAAZ,CADyC,CAAA;AAAA,KArCgC;AAAA,IA+C7E,MAAMgrC,gBAAA,GAAmB,mDAAzB,CA/C6E;AAAA,IAgD7E,IAAI,CAACrB,OAAA,CAAQttC,KAAA,CAAM0+B,MAAd,EAAsBiQ,gBAAtB,CAAL,EAA8C;AAAA,QAC1Ct7B,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,QAApB,EAA8Bt/B,KAAA,CAAM0+B,MAApC,EAA4C,gDAA5C,CAAZ,CAD0C,CAAA;AAAA,KAhD+B;AAAA,IAyD7E,MAAMkQ,iBAAA,GAAoB,oBAA1B,CAzD6E;AAAA,IA0D7E,IAAI,CAACtB,OAAA,CAAQttC,KAAA,CAAM6uC,UAAd,EAA0BD,iBAA1B,CAAL,EAAmD;AAAA,QAC/Cv7B,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,YAApB,EAAkCt/B,KAAA,CAAM6uC,UAAxC,EAAoD,4CAApD,CAAZ,CAD+C,CAAA;AAAA,KA1D0B;AAAA,IA8D7E,IAAI7uC,KAAA,CAAM8uC,SAAN,KAAoB,KAAA,CAApB,IAAiCl/B,OAAA,CAAQ5P,KAAA,CAAM8uC,SAAd,CAAA,KAA6B,SAAlE,EAA6E;AAAA,QACzEz7B,MAAA,CAAOhU,IAAP,CAAY,IAAIigC,eAAJ,CAAoB,WAApB,EAAiCt/B,KAAA,CAAM8uC,SAAvC,EAAkD,wCAAlD,CAAZ,CADyE,CAAA;AAAA,KA9DA;AAAA,IAkEtE,OAAAz7B,MAAA,CAlEsE;AAAA,CAnIjF;AAkNwB,SAAA07B,0BAAA,CAA2B/uC,KAA3B,EAAuC+/B,SAAA,GAAiBmN,EAAxD,EAA8E;AAAA,IAClG,IAAInpC,CAAA,GAAI/D,KAAR,CADkG;AAAA,IAE9F,IAAA;AAAA,QACA+D,CAAA,GAAI+oC,SAAA,CAAU/oC,CAAV,CAAJ,CADA;AAAA,KAAA,QAEKwE,GAAQ;AAAA,QACb,OAAO,CAACA,CAAD,CAAP,CADa;AAAA,KAJiF;AAAA,IAQlG,IAAI8K,MAAA,GAASstB,eAAA,CAAc58B,CAAd,EAAiBg8B,SAAjB,CACR37B,CAAAA,MADQ,CACDiqC,aAAA,CAActqC,CAAd,EAAiBxE,MAAA,CAAOD,IAAP,CAAY4tC,EAAA,CAAGhtC,KAAf,CAAjB,CADC,CAAb,CARkG;AAAA,IAWlG,IAAI8tC,YAAA,GAAe,CAAnB,CAXkG;AAAA,IAYlG,IAAIjqC,CAAA,CAAE/C,OAAN,EAAe;AAAA,QACL,MAAAstC,aAAA,GAAgBL,gBAAA,CAAiBlqC,CAAA,CAAE/C,OAAnB,CAAhB,CADK;AAAA,QAEXgtC,YAAA,IAAgBM,aAAA,CAAcN,YAA9B,CAFW;AAAA,QAGF36B,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAckqC,aAAA,CAAcj7B,MAA5B,CAAA,CAHE;AAAA,KAZmF;AAAA,IAkBlG,IAAItP,CAAA,CAAE46B,OAAN,EAAe;AAAA,QACL,MAAAqQ,aAAA,GAAgBb,eAAA,CAAgBpqC,CAAA,CAAE46B,OAAlB,CAAhB,CADK;AAAA,QAEXqP,YAAA,IAAgBgB,aAAA,CAAchB,YAA9B,CAFW;AAAA,QAGF36B,MAAA,GAAAA,MAAA,CAAOjP,MAAP,CAAc4qC,aAAA,CAAc37B,MAA5B,CAAA,CAHE;AAAA,KAlBmF;AAAA,IAwBlGA,MAAA,GAASA,MAAA,CAAOjP,MAAP,CAAc2pC,mBAAA,CAAoBC,YAApB,CAAd,CAAT,CAxBkG;AAAA,IA0B3F,OAAA36B,MAAA,CA1B2F;AAAA;;ACrHtG,MAAMvO,UAAA,GAAa;AAAA,IACfouB,eADe;AAAA,IAEfQ,YAFe;AAAA,IAGfoD,kBAHe;AAAA,IAIfnD,gBAJe;AAAA,IAKfQ,wBALe;AAAA,IAMfY,2BANe;AAAA,IAOfjB,sBAPe;AAAA,IAQfI,uBARe;AAAA,IASfQ,qBATe;AAAA,EAnBnB;AA+BA,MAAMua,aAAA,GAAgB;AAAA,IAClB1Z,eADkB;AAAA,IAElBnE,cAFkB;AAAA,IAGlBnvB,UAHkB;AAAA,EA/BtB;AAqCA,MAAMitC,KAAA,GAAQ;AAAA,IAACruC,UAAD;AAAA,IAAaI,SAAb;AAAA,IAAwBC,YAAxB;AAAA;;;;","x_google_ignoreList":[0,8,27,28,37,98]}
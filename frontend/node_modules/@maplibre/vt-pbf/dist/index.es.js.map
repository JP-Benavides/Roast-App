{"version":3,"file":"index.es.js","sources":["../lib/geojson_wrapper.ts","../index.ts"],"sourcesContent":["import Point from '@mapbox/point-geometry';\nimport {VectorTileFeature, VectorTileLayer, type VectorTile} from '@mapbox/vector-tile';\nimport type {TileFeature, AnyProps} from 'supercluster';\nimport {type Feature as GeoJSONVTFeature, Geometry} from 'geojson-vt';\nimport Pbf from 'pbf';\n\nexport type Feature = TileFeature<AnyProps, AnyProps> | GeoJSONVTFeature;\n\nexport interface GeoJSONOptions {\n    version: number;\n    extent: number;\n}\n\nclass FeatureWrapper extends VectorTileFeature {\n    feature: Feature;\n\n    constructor(feature: Feature, extent: number) {\n        super(new Pbf(), 0, extent, [], []);\n        this.feature = feature;\n        this.type = feature.type;\n        this.properties = feature.tags ? feature.tags : {};\n\n        // If the feature has a top-level `id` property, copy it over, but only\n        // if it can be coerced to an integer, because this wrapper is used for\n        // serializing geojson feature data into vector tile PBF data, and the\n        // vector tile spec only supports integer values for feature ids --\n        // allowing non-integer values here results in a non-compliant PBF\n        // that causes an exception when it is parsed with vector-tile-js\n        if ('id' in feature) {\n            if (typeof feature.id === 'string') {\n                this.id = parseInt(feature.id, 10);\n            } else if (typeof feature.id === 'number' && !isNaN(feature.id as number)) {\n                this.id = feature.id;\n            }\n        }\n    }\n\n    loadGeometry() {\n        const geometry = [];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const rawGeo = this.feature.type === 1 ? [this.feature.geometry] : this.feature.geometry as any as Geometry[][];\n        for (const ring of rawGeo) {\n            const newRing = [];\n            for (const point of ring) {\n                newRing.push(new Point(point[0], point[1]));\n            }\n            geometry.push(newRing);\n        }\n        return geometry;\n    }\n}\n\nexport class GeoJSONWrapper extends VectorTileLayer implements VectorTile {\n    layers: Record<string, VectorTileLayer>;\n    name: string;\n    extent: number;\n    length: number;\n    version: number;\n    features: Feature[];\n\n    constructor(features: Feature[], options?: GeoJSONOptions) {\n        super(new Pbf());\n        this.layers = {'_geojsonTileLayer': this};\n        this.name = '_geojsonTileLayer';\n        this.version = options ? options.version : 1;\n        this.extent = options ? options.extent : 4096;\n        this.length = features.length;\n        this.features = features;\n    }\n\n    feature(i: number): VectorTileFeature {\n        return new FeatureWrapper(this.features[i], this.extent);\n    }\n}\n","import Pbf from 'pbf';\nimport {type GeoJSONOptions, type Feature, GeoJSONWrapper} from './lib/geojson_wrapper';\nimport geojsonvt from 'geojson-vt';\nimport {type VectorTileLayer, type VectorTile, VectorTileFeature} from '@mapbox/vector-tile';\n\ninterface Context {\n    keys: string[];\n    values: string[];\n    keycache: Record<string, number>;\n    valuecache: Record<string, number>;\n    feature?: VectorTileFeature;\n}\n\n/**\n * Serialize a vector-tile-js-created tile to pbf\n *\n * @param tile\n * @return uncompressed, pbf-serialized tile data\n */\nexport function fromVectorTileJs(tile: VectorTile): Uint8Array {\n    const out = new Pbf();\n    writeTile(tile, out);\n    return out.finish();\n}\n\n/**\n * Serialized a geojson-vt-created tile to pbf.\n *\n * @param layers - An object mapping layer names to geojson-vt-created vector tile objects\n * @param options - An object specifying the vector-tile specification version and extent that were used to create `layers`.\n * @return uncompressed, pbf-serialized tile data\n */\nexport function fromGeojsonVt(layers: geojsonvt.Tile[], options?: GeoJSONOptions): Uint8Array {\n    const l: Record<string, VectorTileLayer> = {};\n    // eslint-disable-next-line @typescript-eslint/no-for-in-array\n    for (const k in layers) {\n        l[k] = new GeoJSONWrapper(layers[k].features, options);\n        l[k].name = k;\n        l[k].version = options ? options.version : 1;\n        l[k].extent = options ? options.extent : 4096;\n    }\n    return fromVectorTileJs({ layers: l });\n}\n\nfunction writeTile(tile: VectorTile, pbf: Pbf) {\n    for (const key in tile.layers) {\n        pbf.writeMessage(3, writeLayer, tile.layers[key]);\n    }\n}\n\nfunction writeLayer(layer: VectorTileLayer, pbf: Pbf) {\n    pbf.writeVarintField(15, layer.version || 1);\n    pbf.writeStringField(1, layer.name || '');\n    pbf.writeVarintField(5, layer.extent || 4096);\n\n    const context: Context = {\n        keys: [],\n        values: [],\n        keycache: {},\n        valuecache: {}\n    }\n\n    for (let i = 0; i < layer.length; i++) {\n        context.feature = layer.feature(i);\n        pbf.writeMessage(2, writeFeature, context);\n    }\n\n    const keys = context.keys;\n    for (const key of keys) {\n        pbf.writeStringField(3, key);\n    }\n\n    const values = context.values;\n    for (const value of values) {\n        pbf.writeMessage(4, writeValue, value);\n    }\n}\n\nfunction writeFeature(context: Context, pbf: Pbf) {\n    if (!context.feature) {\n        return;\n    }\n\n    const feature = context.feature;\n\n    if (feature.id !== undefined) {\n        pbf.writeVarintField(1, feature.id);\n    }\n\n    pbf.writeMessage(2, writeProperties, context);\n    pbf.writeVarintField(3, feature.type);\n    pbf.writeMessage(4, writeGeometry, feature);\n}\n\nfunction writeProperties(context: Context, pbf: Pbf) {\n    for (const key in context.feature?.properties) {\n        let value = context.feature.properties[key];\n\n        let keyIndex = context.keycache[key];\n        if (value === null) continue // don't encode null value properties\n\n        if (typeof keyIndex === 'undefined') {\n            context.keys.push(key);\n            keyIndex = context.keys.length - 1;\n            context.keycache[key] = keyIndex;\n        }\n        pbf.writeVarint(keyIndex);\n\n        if (typeof value !== 'string' && typeof value !== 'boolean' && typeof value !== 'number') {\n            value = JSON.stringify(value);\n        }\n        const valueKey = typeof value + ':' + value;\n        let valueIndex = context.valuecache[valueKey];\n        if (typeof valueIndex === 'undefined') {\n            context.values.push(value as string);\n            valueIndex = context.values.length - 1;\n            context.valuecache[valueKey] = valueIndex;\n        }\n        pbf.writeVarint(valueIndex);\n    }\n}\n\nfunction command(cmd: number, length: number) {\n    return (length << 3) + (cmd & 0x7);\n}\n\nfunction zigzag(num: number) {\n    return (num << 1) ^ (num >> 31);\n}\n\nfunction writeGeometry(feature: VectorTileFeature, pbf: Pbf) {\n    const geometry = feature.loadGeometry();\n    const type = feature.type;\n    let x = 0;\n    let y = 0;\n\n    for (const ring of geometry) {\n        let count = 1;\n        if (type === 1) {\n            count = ring.length;\n        }\n        pbf.writeVarint(command(1, count)); // moveto\n        // do not write polygon closing path as lineto\n        const lineCount = type === 3 ? ring.length - 1 : ring.length;\n        for (let i = 0; i < lineCount; i++) {\n            if (i === 1 && type !== 1) {\n                pbf.writeVarint(command(2, lineCount - 1)); // lineto\n            }\n            const dx = ring[i].x - x;\n            const dy = ring[i].y - y;\n            pbf.writeVarint(zigzag(dx));\n            pbf.writeVarint(zigzag(dy));\n            x += dx;\n            y += dy;\n        }\n        if (feature.type === 3) {\n            pbf.writeVarint(command(7, 1)); // closepath\n        }\n    }\n}\n\nfunction writeValue(value: string | boolean | number, pbf: Pbf) {\n    const type = typeof value;\n    if (type === 'string') {\n        pbf.writeStringField(1, value as string);\n    } else if (type === 'boolean') {\n        pbf.writeBooleanField(7, value as boolean);\n    } else if (type === 'number') {\n        if (value as number % 1 !== 0) {\n            pbf.writeDoubleField(3, value as number);\n        } else if (value as number < 0) {\n            pbf.writeSVarintField(6, value as number);\n        } else {\n            pbf.writeVarintField(5, value as number);\n        }\n    }\n}\n\nexport {\n    GeoJSONWrapper,\n    GeoJSONOptions,\n    Feature\n}\n"],"names":["FeatureWrapper","VectorTileFeature","constructor","feature","extent","super","Pbf","this","type","properties","tags","id","parseInt","isNaN","loadGeometry","geometry","rawGeo","ring","newRing","point","push","Point","GeoJSONWrapper","VectorTileLayer","features","options","layers","_geojsonTileLayer","name","version","length","i","fromVectorTileJs","tile","out","pbf","key","writeMessage","writeLayer","writeTile","finish","fromGeojsonVt","l","k","layer","writeVarintField","writeStringField","context","keys","values","keycache","valuecache","writeFeature","value","writeValue","undefined","writeProperties","writeGeometry","keyIndex","writeVarint","JSON","stringify","valueKey","valueIndex","command","cmd","zigzag","num","x","y","count","lineCount","dx","dy","writeBooleanField","writeDoubleField","writeSVarintField"],"mappings":"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"}